var $M.0: i8;

var $M.1: [ref]i8;

var $M.2: i32;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]i24;

var $M.8: [ref]i8;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: i16;

var $M.12: i16;

var $M.13: i16;

var $M.14: i8;

var $M.15: i16;

var $M.16: i32;

var $M.17: i32;

var $M.18: [ref]ref;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]ref;

var $M.34: [ref]ref;

var $M.35: [ref]ref;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]ref;

var $M.40: [ref]ref;

var $M.41: [ref]ref;

var $M.42: [ref]ref;

var $M.43: [ref]ref;

var $M.44: [ref]ref;

var $M.45: [ref]ref;

var $M.46: [ref]ref;

var $M.47: [ref]ref;

var $M.48: [ref]ref;

var $M.49: [ref]ref;

var $M.50: [ref]ref;

var $M.51: [ref]ref;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.55: [ref]ref;

var $M.56: [ref]ref;

var $M.57: [ref]ref;

var $M.58: [ref]ref;

var $M.59: [ref]ref;

var $M.60: [ref]ref;

var $M.61: [ref]ref;

var $M.62: [ref]ref;

var $M.63: [ref]ref;

var $M.64: [ref]ref;

var $M.65: i32;

var $M.66: i32;

var $M.67: [ref]i32;

var $M.68: [ref]i32;

var $M.69: [ref]i32;

var $M.70: [ref]ref;

var $M.71: [ref]ref;

var $M.72: [ref]ref;

var $M.73: [ref]ref;

var $M.74: [ref]ref;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i16;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.99: [ref]i32;

var $M.100: [ref]i32;

var $M.101: [ref]i32;

var $M.102: [ref]i32;

var $M.103: [ref]i32;

var $M.104: [ref]i32;

var $M.105: [ref]i64;

var $M.132: [ref]i8;

var $M.133: [ref]i8;

var $M.134: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 591178);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 1028);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 2056);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 3084);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 4112);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 5140);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 6168);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 7196);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 8224);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 9252);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 10280);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 11308);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 12336);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 13364);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 14390);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 15418);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 16446);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 17474);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 18502);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 19530);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 20558);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 21586);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 22614);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 23639);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 24664);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 25689);

const {:count 3} __mod_pci__pci_ids_device_table: ref;

axiom __mod_pci__pci_ids_device_table == $sub.ref(0, 26809);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 27849);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 28889);

const ldv_thread_14: ref;

axiom ldv_thread_14 == $sub.ref(0, 29929);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 30969);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 32009);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 33049);

const ldv_thread_5: ref;

axiom ldv_thread_5 == $sub.ref(0, 34089);

const ldv_thread_6: ref;

axiom ldv_thread_6 == $sub.ref(0, 35129);

const ldv_thread_7: ref;

axiom ldv_thread_7 == $sub.ref(0, 36169);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 37197);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 38225);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 39253);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 40281);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 41309);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_net2272: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_net2272 == $sub.ref(0, 42337);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 43365);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 44393);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 45421);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 46449);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 47474);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 48502);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 49530);

const dev_attr_registers: ref;

axiom dev_attr_registers == $sub.ref(0, 50602);

const {:count 38} driver_desc: ref;

axiom driver_desc == $sub.ref(0, 51664);

const net2272_ops: ref;

axiom net2272_ops == $sub.ref(0, 52768);

const {:count 52} net2272_test_packet: ref;

axiom net2272_test_packet == $sub.ref(0, 53844);

const enable_suspend: ref;

axiom enable_suspend == $sub.ref(0, 54870);

const net2272_ep_ops: ref;

axiom net2272_ep_ops == $sub.ref(0, 55974);

const use_dma: ref;

axiom use_dma == $sub.ref(0, 56999);

const dma_mode: ref;

axiom dma_mode == $sub.ref(0, 58025);

const fifo_mode: ref;

axiom fifo_mode == $sub.ref(0, 59051);

const dma_ep: ref;

axiom dma_ep == $sub.ref(0, 60077);

const {:count 4} ep0name: ref;

axiom ep0name == $sub.ref(0, 61105);

const {:count 4} ep_name: ref;

axiom ep_name == $sub.ref(0, 62161);

const {:count 25} driver_vers: ref;

axiom driver_vers == $sub.ref(0, 63210);

const net2272_plat_driver: ref;

axiom net2272_plat_driver == $sub.ref(0, 64410);

const {:count 3} pci_ids: ref;

axiom pci_ids == $sub.ref(0, 65530);

const {:count 8} driver_name: ref;

axiom driver_name == $sub.ref(0, 66562);

const net2272_pci_driver: ref;

axiom net2272_pci_driver == $sub.ref(0, 67898);

const {:count 33} .str.43: ref;

axiom .str.43 == $sub.ref(0, 68955);

const iomem_resource: ref;

axiom iomem_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 8} .str.84: ref;

axiom .str.84 == $sub.ref(0, 69987);

const {:count 17} .str.68: ref;

axiom .str.68 == $sub.ref(0, 71028);

const {:count 29} .str.69: ref;

axiom .str.69 == $sub.ref(0, 72081);

const {:count 4} .str.49: ref;

axiom .str.49 == $sub.ref(0, 73109);

const {:count 39} .str.70: ref;

axiom .str.70 == $sub.ref(0, 74172);

const {:count 13} .str.71: ref;

axiom .str.71 == $sub.ref(0, 75209);

const {:count 4} .str.78: ref;

axiom .str.78 == $sub.ref(0, 76237);

const {:count 10} .str.79: ref;

axiom .str.79 == $sub.ref(0, 77271);

const {:count 10} .str.80: ref;

axiom .str.80 == $sub.ref(0, 78305);

const {:count 6} .str.81: ref;

axiom .str.81 == $sub.ref(0, 79335);

const {:count 8} .str.82: ref;

axiom .str.82 == $sub.ref(0, 80367);

const {:count 8} .str.1: ref;

axiom .str.1 == $sub.ref(0, 81399);

const {:count 26} .str.48: ref;

axiom .str.48 == $sub.ref(0, 82449);

const {:count 25} .str.50: ref;

axiom .str.50 == $sub.ref(0, 83498);

const {:count 35} .str.51: ref;

axiom .str.51 == $sub.ref(0, 84557);

const {:count 18} .str.52: ref;

axiom .str.52 == $sub.ref(0, 85599);

const {:count 26} .str.42: ref;

axiom .str.42 == $sub.ref(0, 86649);

const {:count 15} .str.44: ref;

axiom .str.44 == $sub.ref(0, 87688);

const {:count 10} .str.45: ref;

axiom .str.45 == $sub.ref(0, 88722);

const {:count 28} .str.46: ref;

axiom .str.46 == $sub.ref(0, 89774);

const {:count 25} .str.47: ref;

axiom .str.47 == $sub.ref(0, 90823);

const {:count 16} .str.72: ref;

axiom .str.72 == $sub.ref(0, 91863);

const {:count 74} .str.73: ref;

axiom .str.73 == $sub.ref(0, 92961);

const {:count 91} .str.74: ref;

axiom .str.74 == $sub.ref(0, 94076);

const {:count 121} .str.75: ref;

axiom .str.75 == $sub.ref(0, 95221);

const {:count 63} .str.76: ref;

axiom .str.76 == $sub.ref(0, 96308);

const {:count 72} .str.77: ref;

axiom .str.77 == $sub.ref(0, 97404);

const {:count 19} .str.66: ref;

axiom .str.66 == $sub.ref(0, 98447);

const {:count 27} .str.64: ref;

axiom .str.64 == $sub.ref(0, 99498);

const {:count 18} .str.65: ref;

axiom .str.65 == $sub.ref(0, 100540);

const {:count 24} .str.67: ref;

axiom .str.67 == $sub.ref(0, 101588);

const {:count 19} .str.63: ref;

axiom .str.63 == $sub.ref(0, 102631);

const {:count 19} .str.59: ref;

axiom .str.59 == $sub.ref(0, 103674);

const {:count 9} .str.60: ref;

axiom .str.60 == $sub.ref(0, 104707);

const {:count 21} .str.61: ref;

axiom .str.61 == $sub.ref(0, 105752);

const {:count 27} .str.85: ref;

axiom .str.85 == $sub.ref(0, 106803);

const {:count 19} .str.86: ref;

axiom .str.86 == $sub.ref(0, 107846);

const {:count 28} .str.87: ref;

axiom .str.87 == $sub.ref(0, 108898);

const .str: ref;

axiom .str == $sub.ref(0, 109923);

const {:count 4} .str.89: ref;

axiom .str.89 == $sub.ref(0, 110951);

const {:count 47} .str.88: ref;

axiom .str.88 == $sub.ref(0, 112022);

const {:count 5} .str.30: ref;

axiom .str.30 == $sub.ref(0, 113051);

const {:count 5} .str.31: ref;

axiom .str.31 == $sub.ref(0, 114080);

const {:count 5} .str.32: ref;

axiom .str.32 == $sub.ref(0, 115109);

const {:count 16} .str.53: ref;

axiom .str.53 == $sub.ref(0, 116149);

const {:count 17} .str.54: ref;

axiom .str.54 == $sub.ref(0, 117190);

const {:count 14} .str.55: ref;

axiom .str.55 == $sub.ref(0, 118228);

const {:count 50} .str.56: ref;

axiom .str.56 == $sub.ref(0, 119302);

const {:count 15} .str.57: ref;

axiom .str.57 == $sub.ref(0, 120341);

const {:count 42} .str.58: ref;

axiom .str.58 == $sub.ref(0, 121407);

const {:count 3} .str.25: ref;

axiom .str.25 == $sub.ref(0, 122434);

const {:count 4} .str.26: ref;

axiom .str.26 == $sub.ref(0, 123462);

const {:count 5} .str.33: ref;

axiom .str.33 == $sub.ref(0, 124491);

const {:count 4} .str.34: ref;

axiom .str.34 == $sub.ref(0, 125519);

const {:count 5} .str.35: ref;

axiom .str.35 == $sub.ref(0, 126548);

const {:count 8} .str.36: ref;

axiom .str.36 == $sub.ref(0, 127580);

const {:count 10} .str.83: ref;

axiom .str.83 == $sub.ref(0, 128614);

const {:count 7} .str.2: ref;

axiom .str.2 == $sub.ref(0, 129645);

const {:count 95} .str.3: ref;

axiom .str.3 == $sub.ref(0, 130764);

const {:count 6} .str.5: ref;

axiom .str.5 == $sub.ref(0, 131794);

const {:count 8} .str.6: ref;

axiom .str.6 == $sub.ref(0, 132826);

const {:count 5} .str.7: ref;

axiom .str.7 == $sub.ref(0, 133855);

const {:count 7} .str.8: ref;

axiom .str.8 == $sub.ref(0, 134886);

const {:count 27} .str.4: ref;

axiom .str.4 == $sub.ref(0, 135937);

const {:count 11} .str.9: ref;

axiom .str.9 == $sub.ref(0, 136972);

const {:count 8} .str.10: ref;

axiom .str.10 == $sub.ref(0, 138004);

const {:count 11} .str.11: ref;

axiom .str.11 == $sub.ref(0, 139039);

const {:count 13} .str.12: ref;

axiom .str.12 == $sub.ref(0, 140076);

const {:count 44} .str.13: ref;

axiom .str.13 == $sub.ref(0, 141144);

const {:count 5} .str.15: ref;

axiom .str.15 == $sub.ref(0, 142173);

const {:count 6} .str.16: ref;

axiom .str.16 == $sub.ref(0, 143203);

const {:count 6} .str.17: ref;

axiom .str.17 == $sub.ref(0, 144233);

const {:count 11} .str.18: ref;

axiom .str.18 == $sub.ref(0, 145268);

const {:count 8} .str.19: ref;

axiom .str.19 == $sub.ref(0, 146300);

const {:count 9} .str.20: ref;

axiom .str.20 == $sub.ref(0, 147333);

const {:count 7} .str.21: ref;

axiom .str.21 == $sub.ref(0, 148364);

const {:count 7} .str.22: ref;

axiom .str.22 == $sub.ref(0, 149395);

const {:count 6} .str.23: ref;

axiom .str.23 == $sub.ref(0, 150425);

const {:count 53} .str.14: ref;

axiom .str.14 == $sub.ref(0, 151502);

const {:count 2} .str.27: ref;

axiom .str.27 == $sub.ref(0, 152528);

const {:count 49} .str.24: ref;

axiom .str.24 == $sub.ref(0, 153601);

const {:count 19} .str.28: ref;

axiom .str.28 == $sub.ref(0, 154644);

const {:count 20} .str.29: ref;

axiom .str.29 == $sub.ref(0, 155688);

const {:count 5} .str.37: ref;

axiom .str.37 == $sub.ref(0, 156717);

const {:count 6} .str.38: ref;

axiom .str.38 == $sub.ref(0, 157747);

const {:count 6} .str.39: ref;

axiom .str.39 == $sub.ref(0, 158777);

const {:count 4} .str.40: ref;

axiom .str.40 == $sub.ref(0, 159805);

const {:count 8} .str.41: ref;

axiom .str.41 == $sub.ref(0, 160837);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 161869);

const {:count 3} .str.1.159: ref;

axiom .str.1.159 == $sub.ref(0, 162896);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 163934);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 164962);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 165994);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 167026);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i0 := $M.0;
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const net2272_pci_probe: ref;

axiom net2272_pci_probe == $sub.ref(0, 168058);

procedure net2272_pci_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.2, $M.16, $CurrAddr, assertsPassed, $M.0;



implementation net2272_pci_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $p14: ref;
  var $i15: i16;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i30: i32;
  var $i29: i32;
  var $i31: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i32: i32;
  var $i19: i32;
  var $p36: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p5 := net2272_probe_init($p2, $i4);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $i7 := IS_ERR($p6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 2} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(62, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.1, $p14);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 2160)), $mul.ref(1576, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p16, $i15);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i17 := pci_enable_device($p0);
    call {:si_unique_call 6} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} pci_set_master($p0);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(62, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.1, $p20);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 36948);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(62, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, $p24);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 12914);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    call {:si_unique_call 13} devirtbounce(0, .str.43, 2471, 12);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i30 := net2272_rdk2_probe($p0, $p5);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 12} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i29 := $i30;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i29, 0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i33 := net2272_probe_fin($p5, 0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 16} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p5);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} pci_set_drvdata($p0, $p35);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb24:
    assume $i34 == 1;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i32 := $i33;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} pci_disable_device($p0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i19 := $i32;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p5);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} kfree($p36);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i13 := $i19;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i32 := $i29;
    goto $bb22;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i28 := net2272_rdk1_probe($p0, $p5);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 10} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb18;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 19);
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i11 := PTR_ERR($p10);
    call {:si_unique_call 4} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const net2272_pci_remove: ref;

axiom net2272_pci_remove == $sub.ref(0, 169090);

procedure net2272_pci_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, assertsPassed, $CurrAddr, $M.0, $M.9, $M.10;



implementation net2272_pci_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} net2272_remove($p2);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(62, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 36948);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(62, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.1, $p7);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 12914);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call {:si_unique_call 22} devirtbounce(0, .str.43, 2543, 12);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} net2272_rdk2_remove($p0, $p2);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} pci_disable_device($p0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} kfree($p11);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} net2272_rdk1_remove($p0, $p2);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 170122);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const net2272_remove: ref;

axiom net2272_remove == $sub.ref(0, 171154);

procedure net2272_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation net2272_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} usb_del_gadget_udc($p1);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2120, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} ldv_free_irq_128($i3, $p4);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2136, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} ldv_iounmap_129($p7);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} device_remove_file($p9, dev_attr_registers);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} _dev_info.ref.ref($p11, .str.84);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const net2272_rdk1_remove: ref;

axiom net2272_rdk1_remove == $sub.ref(0, 172186);

procedure net2272_rdk1_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, assertsPassed, $CurrAddr, $M.0, $M.9, $M.10;



implementation net2272_rdk1_remove($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i23: i1;
  var $i25: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i47: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i32;
  var $i60: i64;
  var $i24: i32;
  var $i61: i32;
  var $i62: i1;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(104, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i7 := readl($p6);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 32} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $sub.i32(0, 257));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(104, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} writel($i8, $p13);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} ldv_iounmap_136($p17);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} ldv_iounmap_137($p21);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb1;

  $bb1:
    call $i23, $i25, $p28, $i29, $i30, $p33, $i34, $i35, $i36, $p39, $i40, $i41, $p44, $i45, $i46, $i47, $p50, $i51, $i52, $p55, $i56, $i57, $i58, $i59, $i60, $i24, $i61, $i62, $i22 := net2272_rdk1_remove_loop_$bb1($p0, $i23, $i25, $p28, $i29, $i30, $p33, $i34, $i35, $i36, $p39, $i40, $i41, $p44, $i45, $i46, $i47, $p50, $i51, $i52, $p55, $i56, $i57, $i58, $i59, $i60, $i24, $i61, $i62, $i22);
    goto $bb1_last;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i22);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i25, 56)), $mul.ref(0, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.1, $p28);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i22);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i30, 56)), $mul.ref(0, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.1, $p33);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i35 == 1);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i22);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i36, 56)), $mul.ref(8, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.1, $p39);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i22);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i41, 56)), $mul.ref(0, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.1, $p44);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i40, $i45);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i59, $i60 := $i22, 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} __release_region(iomem_resource, $i29, $i60);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i24 := $i59;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i24, 1);
    call {:si_unique_call 36} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i62 := $sle.i32($i61, 3);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i22 := $i61;
    goto $bb13_dummy;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i22);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i47, 56)), $mul.ref(8, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.1, $p50);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i22);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i52, 56)), $mul.ref(0, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.1, $p55);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i57 := $sub.i64($i51, $i56);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 1);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i59, $i60 := $i22, $i58;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb8;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb5;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_147;
}



const net2272_rdk2_remove: ref;

axiom net2272_rdk2_remove == $sub.ref(0, 173218);

procedure net2272_rdk2_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation net2272_rdk2_remove($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $i18: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p26: ref;
  var $i27: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $p37: ref;
  var $i38: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p46: ref;
  var $i47: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p56: ref;
  var $i57: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i53: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} ldv_iounmap_138($p5);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.1, $p17);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.1, $p21);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i18, $i22);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} __release_region(iomem_resource, $i9, $i34);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.1, $p41);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i43 == 1);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.1, $p46);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.1, $p50);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i47, $i51);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} __release_region(iomem_resource, $i38, $i53);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.1, $p56);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.1, $p60);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i62 := $sub.i64($i57, $i61);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 1);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i53 := $i63;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.1, $p26);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.1, $p30);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64($i27, $i31);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 1);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb4;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 174250);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 175282);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} free_($p0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 176314);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 42} $free($p0);
    return;
}



const ldv_iounmap_138: ref;

axiom ldv_iounmap_138 == $sub.ref(0, 177346);

procedure ldv_iounmap_138($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_iounmap_138($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 178378);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 45} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_arch_io_io_mem_unmap: ref;

axiom ldv_linux_arch_io_io_mem_unmap == $sub.ref(0, 179410);

procedure ldv_linux_arch_io_io_mem_unmap();
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_linux_arch_io_io_mem_unmap()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} ldv_assert_linux_arch_io__less_initial_decrement($i2);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $M.2 := $i4;
    call {:si_unique_call 47} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_arch_io__less_initial_decrement: ref;

axiom ldv_assert_linux_arch_io__less_initial_decrement == $sub.ref(0, 180442);

procedure ldv_assert_linux_arch_io__less_initial_decrement($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__less_initial_decrement($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} {:cexpr "ldv_assert_linux_arch_io__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 1} true;
    call {:si_unique_call 49} __VERIFIER_error();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const readl: ref;

axiom readl == $sub.ref(0, 181474);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 50} $i2 := devirtbounce.1(0, $p1);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 51} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 182506);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 53} devirtbounce.2(0, $i0, $p2);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iounmap_136: ref;

axiom ldv_iounmap_136 == $sub.ref(0, 183538);

procedure ldv_iounmap_136($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_iounmap_136($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const ldv_iounmap_137: ref;

axiom ldv_iounmap_137 == $sub.ref(0, 184570);

procedure ldv_iounmap_137($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_iounmap_137($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const usb_del_gadget_udc: ref;

axiom usb_del_gadget_udc == $sub.ref(0, 185602);

procedure usb_del_gadget_udc($p0: ref);
  free requires assertsPassed;



implementation usb_del_gadget_udc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_128: ref;

axiom ldv_free_irq_128 == $sub.ref(0, 186634);

procedure ldv_free_irq_128($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_free_irq_128($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} {:cexpr "ldv_free_irq_128:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} free_irq($i0, $p1);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} ldv_free_irq($0.ref, $i0, $p1);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iounmap_129: ref;

axiom ldv_iounmap_129 == $sub.ref(0, 187666);

procedure ldv_iounmap_129($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_iounmap_129($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 188698);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 189730);

procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 190762);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq: ref;

axiom ldv_free_irq == $sub.ref(0, 191794);

procedure ldv_free_irq($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation ldv_free_irq($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} {:cexpr "ldv_free_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 62} {:cexpr "ldv_free_irq:arg:ldv_9_line_line"} boogie_si_record_i32($i1);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} ldv_dispatch_irq_deregister_9_1($i1);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_irq_deregister_9_1: ref;

axiom ldv_dispatch_irq_deregister_9_1 == $sub.ref(0, 192826);

procedure ldv_dispatch_irq_deregister_9_1($i0: i32);
  free requires assertsPassed;



implementation ldv_dispatch_irq_deregister_9_1($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} {:cexpr "ldv_dispatch_irq_deregister_9_1:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 193858);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const net2272_probe_init: ref;

axiom net2272_probe_init == $sub.ref(0, 194890);

procedure net2272_probe_init($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr, assertsPassed;



implementation net2272_probe_init($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p23: ref;
  var vslice_dummy_var_2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 67} {:cexpr "net2272_probe_init:arg:irq"} boogie_si_record_i32($i1);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p24 := kzalloc(2152, 208);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p25, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vslice_dummy_var_2 := spinlock_check($p30);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 2160)), $mul.ref(1584, 1)), $mul.ref(0, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} __raw_spin_lock_init($p34, .str.61, $p3);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p25, $mul.ref(0, 2160)), $mul.ref(2120, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p35, $i1);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p25, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, $p0);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, net2272_ops);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(116, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p40, 3);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p42, driver_name);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p23 := $p24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $p28 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p23 := $p28;
    goto $bb6;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.1);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.59);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p7, .str.43);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, .str.60);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.7, $p10);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 2232);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p10, $i13);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p14, 0);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.8, $p15);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 69} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $p21 := ERR_PTR($sub.i64(0, 19));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p23 := $p21;
    goto $bb6;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} __dynamic_dev_dbg.ref.ref.ref($p2, $p0, .str.60);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 195922);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 77} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 196954);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 79} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 197986);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 1} true;
    call {:si_unique_call 80} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 81} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 199018);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    return;
}



const net2272_rdk1_probe: ref;

axiom net2272_rdk1_probe == $sub.ref(0, 200050);

procedure net2272_rdk1_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.1, $M.2, $M.16, $CurrAddr, assertsPassed, $M.0, $M.10;



implementation net2272_rdk1_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i1;
  var $i8: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i24;
  var $i85: i24;
  var $i86: i24;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i7: i32;
  var $i96: i32;
  var $i97: i1;
  var $i5: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i64;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i154: i32;
  var $i155: i8;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i65: i32;
  var $i66: i32;
  var $i161: i32;
  var $i162: i1;
  var $i164: i64;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $i178: i64;
  var $p181: ref;
  var $i182: i64;
  var $i183: i64;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $i189: i64;
  var $p192: ref;
  var $i193: i64;
  var $i194: i64;
  var $p197: ref;
  var $i198: i64;
  var $i199: i64;
  var $i200: i64;
  var $i201: i64;
  var $i202: i32;
  var $i203: i1;
  var $i163: i32;
  var $i160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb1;

  $bb1:
    call $i6, $i8, $p11, $i12, $i13, $p16, $i17, $i18, $i19, $p22, $i23, $i24, $p27, $i28, $i29, $i30, $p33, $i34, $i35, $p38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $p67, $i68, $p69, $i70, $p71, $p72, $i73, $i74, $i75, $i76, $i77, $i7, $i96, $i97, $i5 := net2272_rdk1_probe_loop_$bb1($p0, $p2, $i6, $i8, $p11, $i12, $i13, $p16, $i17, $i18, $i19, $p22, $i23, $i24, $p27, $i28, $i29, $i30, $p33, $i34, $i35, $p38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $p67, $i68, $p69, $i70, $p71, $p72, $i73, $i74, $i75, $i76, $i77, $i7, $i96, $i97, $i5);
    goto $bb1_last;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i8, 56)), $mul.ref(0, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, $p11);
    call {:si_unique_call 86} {:cexpr "resource"} boogie_si_record_i64($i12);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i5);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i13, 56)), $mul.ref(0, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.1, $p16);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i5);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i19, 56)), $mul.ref(8, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.1, $p22);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i5);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i24, 56)), $mul.ref(0, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p27);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i23, $i28);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $p43 := __request_region(iomem_resource, $i12, $i42, driver_name, 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i46 := $i5;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p67 := ldv_ioremap_nocache_132($i12, $i42);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i5);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i68, 8));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p69, $p67);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i5);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i70, 8));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.9, $p71);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i75, $i76, $i77 := $i5, $i12, $i42;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i7, 1);
    call {:si_unique_call 85} {:cexpr "i"} boogie_si_record_i32($i96);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i97 := $sle.i32($i96, 3);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.9, $p98);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p102, $p99);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 8));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.9, $p103);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p107, $p104);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 8));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.9, $p108);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2136, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p111, $p109);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.1, $p114);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(248, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i117 := readl($p116);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 98} {:cexpr "tmp___3"} boogie_si_record_i32($i117);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i118 := $zext.i32.i64($i117);
    call {:si_unique_call 99} {:cexpr "tmp"} boogie_si_record_i64($i118);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i64.i32($i118);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, $sub.i32(0, 4));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i120, 1);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.1, $p124);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p125, $mul.ref(248, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} writel($i121, $p126);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.1, $p129);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p130, $mul.ref(104, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i132 := readl($p131);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 102} {:cexpr "tmp___4"} boogie_si_record_i32($i132);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i133 := $or.i32($i132, 2304);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.1, $p136);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p137, $mul.ref(104, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} writel($i133, $p138);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p140, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.1, $p141);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p142, $mul.ref(168, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} writeb(8, $p143);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2136, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.1, $p144);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p146, $mul.ref(1024, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} writeb($sub.i8(0, 13), $p147);
    call {:si_unique_call 106} devirtbounce.3(0);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2136, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.1, $p148);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p150, $mul.ref(1024, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i152 := readb($p151);
    call {:si_unique_call 108} {:cexpr "tmp___5"} boogie_si_record_i8($i152);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 254);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i8($i154);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2136, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.1, $p156);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p158, $mul.ref(1024, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} writeb($i155, $p159);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} __const_udelay(859000);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i160 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $r := $i160;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i96;
    goto $bb26_dummy;

  $bb20:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} __release_region(iomem_resource, $i76, $i77);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p78, .str.1);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p79, .str.63);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p80, .str.43);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p81, .str.65);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i84 := $load.i24($M.7, $p83);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i85 := $and.i24($i84, $sub.i24(0, 262144));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i86 := $or.i24($i85, 2340);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p83, $i86);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p87, 0);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.8, $p88);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i64($i89);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, 1);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i92 := ldv__builtin_expect($i91, 0);
    call {:si_unique_call 95} {:cexpr "tmp___2"} boogie_si_record_i64($i92);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i65, $i66 := $i75, $sub.i32(0, 14);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32($i65, 1);
    call {:si_unique_call 91} {:cexpr "i"} boogie_si_record_i32($i161);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i162 := $sge.i32($i161, 0);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i160 := $i66;
    goto $bb29;

  $bb30:
    assume $i162 == 1;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i163 := $i161;
    goto $bb33;

  $bb33:
    call $i164, $p165, $p166, $i167, $p170, $i171, $i172, $p175, $i176, $i177, $i178, $p181, $i182, $i183, $p186, $i187, $i188, $i189, $p192, $i193, $i194, $p197, $i198, $i199, $i200, $i201, $i202, $i203, $i163 := net2272_rdk1_probe_loop_$bb33($p0, $p2, $i164, $p165, $p166, $i167, $p170, $i171, $i172, $p175, $i176, $i177, $i178, $p181, $i182, $i183, $p186, $i187, $i188, $i189, $p192, $i193, $i194, $p197, $i198, $i199, $i200, $i201, $i202, $i203, $i163);
    goto $bb33_last;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i163);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i164, 8));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.9, $p165);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} ldv_iounmap_133($p166);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i163);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i167, 56)), $mul.ref(0, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i171 := $load.i64($M.1, $p170);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i172 := $sext.i32.i64($i163);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i172, 56)), $mul.ref(0, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i176 := $load.i64($M.1, $p175);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i177 == 1);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i163);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i178, 56)), $mul.ref(8, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i182 := $load.i64($M.1, $p181);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i183 := $sext.i32.i64($i163);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i183, 56)), $mul.ref(0, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i187 := $load.i64($M.1, $p186);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i182, $i187);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i188 == 1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i201 := 0;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} __release_region(iomem_resource, $i171, $i201);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i202 := $sub.i32($i163, 1);
    call {:si_unique_call 113} {:cexpr "i"} boogie_si_record_i32($i202);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i203 := $sge.i32($i202, 0);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i203 == 1);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb41:
    assume $i203 == 1;
    assume {:verifier.code 0} true;
    $i163 := $i202;
    goto $bb41_dummy;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i189 := $sext.i32.i64($i163);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i189, 56)), $mul.ref(8, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i193 := $load.i64($M.1, $p192);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i194 := $sext.i32.i64($i163);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i194, 56)), $mul.ref(0, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i198 := $load.i64($M.1, $p197);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i199 := $sub.i64($i193, $i198);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i200 := $add.i64($i199, 1);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i201 := $i200;
    goto $bb40;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i177 == 1;
    goto $bb36;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i93 == 1;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} __dynamic_dev_dbg.ref.ref.ref($p4, $p95, .str.65);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb13:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p48, .str.63);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p49, .str.43);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p50, .str.64);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.7, $p52);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 2332);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p52, $i55);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p56, 0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.8, $p57);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 89} {:cexpr "tmp___0"} boogie_si_record_i64($i61);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i65, $i66 := $i46, $sub.i32(0, 16);
    goto $bb18;

  $bb15:
    assume $i62 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} __dynamic_dev_dbg.ref.ref.ref($p3, $p64, .str.64);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i5);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i30, 56)), $mul.ref(8, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.1, $p33);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i5);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i35, 56)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.1, $p38);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i40 := $sub.i64($i34, $i39);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 1);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb8;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb5;

  $bb41_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_582;

  $bb26_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_390;
}



const net2272_rdk2_probe: ref;

axiom net2272_rdk2_probe == $sub.ref(0, 201082);

procedure net2272_rdk2_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.10, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9;



implementation net2272_rdk2_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i28: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i24;
  var $i83: i24;
  var $i84: i24;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $i5: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i63: i32;
  var $i64: i32;
  var $i128: i32;
  var $i129: i1;
  var $i131: i64;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $p137: ref;
  var $i138: i64;
  var $i139: i64;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var $i145: i64;
  var $p148: ref;
  var $i149: i64;
  var $i150: i64;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $i156: i64;
  var $p159: ref;
  var $i160: i64;
  var $i161: i64;
  var $p164: ref;
  var $i165: i64;
  var $i166: i64;
  var $i167: i64;
  var $i168: i64;
  var $i169: i32;
  var $i170: i1;
  var $i130: i32;
  var $i127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb1;

  $bb1:
    call $i6, $p9, $i10, $i11, $p14, $i15, $i16, $i17, $p20, $i21, $i22, $p25, $i26, $i27, $i28, $p31, $i32, $i33, $p36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $p65, $i66, $p67, $i68, $p69, $p70, $i71, $i72, $i73, $i74, $i75, $i94, $i95, $i5 := net2272_rdk2_probe_loop_$bb1($p0, $p2, $i6, $p9, $i10, $i11, $p14, $i15, $i16, $i17, $p20, $i21, $i22, $p25, $i26, $i27, $i28, $p31, $i32, $i33, $p36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $p65, $i66, $p67, $i68, $p69, $p70, $i71, $i72, $i73, $i74, $i75, $i94, $i95, $i5);
    goto $bb1_last;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i6, 56)), $mul.ref(0, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    call {:si_unique_call 117} {:cexpr "resource"} boogie_si_record_i64($i10);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i5);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i11, 56)), $mul.ref(0, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.1, $p14);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i5);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i17, 56)), $mul.ref(8, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p20);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i5);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i22, 56)), $mul.ref(0, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.1, $p25);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i21, $i26);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p41 := __request_region(iomem_resource, $i10, $i40, driver_name, 0);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i44 := $i5;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p65 := ldv_ioremap_nocache_134($i10, $i40);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i5);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref($i66, 8));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p67, $p65);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i5);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref($i68, 8));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.10, $p69);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i72 := $eq.i64($i71, 0);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i73, $i74, $i75 := $i5, $i10, $i40;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i5, 1);
    call {:si_unique_call 128} {:cexpr "i"} boogie_si_record_i32($i94);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i95 := $sle.i32($i94, 1);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.10, $p96);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p100, $p97);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.10, $p101);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2136, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p104, $p102);
    call {:si_unique_call 129} devirtbounce.3(0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.1, $p107);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(8, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} writel(8, $p109);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} __const_udelay(859000);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.1, $p112);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p113, $mul.ref(8, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} writel(1, $p114);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.1, $p117);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p118, $mul.ref(28, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i120 := readl($p119);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 134} {:cexpr "tmp___2"} boogie_si_record_i32($i120);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.1, $p121);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} _dev_info.ref.ref.i32($p122, .str.67, $i120);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.1, $p125);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} writel(1, $p126);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i127 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $r := $i127;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i94;
    goto $bb22_dummy;

  $bb16:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} __release_region(iomem_resource, $i74, $i75);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p76, .str.1);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p77, .str.66);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p78, .str.43);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p79, .str.65);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i82 := $load.i24($M.7, $p81);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i83 := $and.i24($i82, $sub.i24(0, 262144));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i84 := $or.i24($i83, 2418);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p81, $i84);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p85, 0);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.8, $p86);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i64($i87);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i89 := $and.i64($i88, 1);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i90 := ldv__builtin_expect($i89, 0);
    call {:si_unique_call 126} {:cexpr "tmp___1"} boogie_si_record_i64($i90);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i63, $i64 := $i73, $sub.i32(0, 14);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i128 := $sub.i32($i63, 1);
    call {:si_unique_call 122} {:cexpr "i"} boogie_si_record_i32($i128);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i129 := $sge.i32($i128, 0);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i127 := $i64;
    goto $bb25;

  $bb26:
    assume $i129 == 1;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i130 := $i128;
    goto $bb29;

  $bb29:
    call $i131, $p132, $p133, $i134, $p137, $i138, $i139, $p142, $i143, $i144, $i145, $p148, $i149, $i150, $p153, $i154, $i155, $i156, $p159, $i160, $i161, $p164, $i165, $i166, $i167, $i168, $i169, $i170, $i130 := net2272_rdk2_probe_loop_$bb29($p0, $p2, $i131, $p132, $p133, $i134, $p137, $i138, $i139, $p142, $i143, $i144, $i145, $p148, $i149, $i150, $p153, $i154, $i155, $i156, $p159, $i160, $i161, $p164, $i165, $i166, $i167, $i168, $i169, $i170, $i130);
    goto $bb29_last;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i130);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref($i131, 8));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.10, $p132);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} ldv_iounmap_135($p133);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i134 := $sext.i32.i64($i130);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i134, 56)), $mul.ref(0, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i138 := $load.i64($M.1, $p137);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i130);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i139, 56)), $mul.ref(0, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i143 := $load.i64($M.1, $p142);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i144 == 1);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i130);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i145, 56)), $mul.ref(8, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i149 := $load.i64($M.1, $p148);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i130);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i150, 56)), $mul.ref(0, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.1, $p153);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i149, $i154);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i155 == 1);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i168 := 0;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} __release_region(iomem_resource, $i138, $i168);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i169 := $sub.i32($i130, 1);
    call {:si_unique_call 139} {:cexpr "i"} boogie_si_record_i32($i169);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i170 := $sge.i32($i169, 0);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i170 == 1);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb37:
    assume $i170 == 1;
    assume {:verifier.code 0} true;
    $i130 := $i169;
    goto $bb37_dummy;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i156 := $sext.i32.i64($i130);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i156, 56)), $mul.ref(8, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i160 := $load.i64($M.1, $p159);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i161 := $sext.i32.i64($i130);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i161, 56)), $mul.ref(0, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i165 := $load.i64($M.1, $p164);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i166 := $sub.i64($i160, $i165);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i167 := $add.i64($i166, 1);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i168 := $i167;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb32;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i91 == 1;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} __dynamic_dev_dbg.ref.ref.ref($p4, $p93, .str.65);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb9:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p45, .str.1);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p46, .str.66);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p47, .str.43);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p48, .str.64);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.7, $p50);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 2410);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p50, $i53);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p54, 0);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.8, $p55);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 120} {:cexpr "tmp"} boogie_si_record_i64($i59);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i63, $i64 := $i44, $sub.i32(0, 16);
    goto $bb14;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} __dynamic_dev_dbg.ref.ref.ref($p3, $p62, .str.64);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i5);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i28, 56)), $mul.ref(8, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i5);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i33, 56)), $mul.ref(0, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.1, $p36);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i38 := $sub.i64($i32, $i37);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 1);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb37_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_779;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_625;
}



const net2272_probe_fin: ref;

axiom net2272_probe_fin == $sub.ref(0, 202114);

procedure net2272_probe_fin($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.0, $M.16, $M.9, $M.10, assertsPassed, $M.2;



implementation net2272_probe_fin($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i8;
  var $i18: i16;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $p46: ref;
  var $i38: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i6: i32;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "net2272_probe_fin:arg:irqflags"} boogie_si_record_i32($i1);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i2 := net2272_present($p0);
    call {:si_unique_call 142} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} net2272_usb_reset($p0);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} net2272_usb_reinit($p0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2120, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i1);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i11 := ldv_request_irq_130($i8, net2272_irq, $i9, driver_name, $p10);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 147} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i17 := net2272_read($p0, 37);
    call {:si_unique_call 150} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i16($i17);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2114, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p19, $i18);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} _dev_info.ref.ref.ref($p21, .str.49, driver_desc);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p22 := dma_mode_string();
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2120, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2136, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2114, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.1, $p29);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} _dev_info.ref.ref.i32.ref.i32.ref($p24, .str.70, $i26, $p28, $i31, $p22);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} _dev_info.ref.ref.ref($p33, .str.71, driver_vers);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i36 := device_create_file($p35, dev_attr_registers);
    call {:si_unique_call 156} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i42 := usb_add_gadget_udc_release($p40, $p41, net2272_gadget_release);
    call {:si_unique_call 159} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} device_remove_file($p46, dev_attr_registers);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i38 := $i42;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2120, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p0);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} ldv_free_irq_131($i48, $p49);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i6 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i44 := $i6;
    goto $bb16;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2120, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} dev_err.ref.ref.i32($p14, .str.69, $i16);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} dev_warn.ref.ref($p5, .str.68);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 203146);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} dev_set_drvdata($p2, $p1);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 204178);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p1);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    return;
}



const net2272_present: ref;

axiom net2272_present == $sub.ref(0, 205210);

procedure net2272_present($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation net2272_present($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i8;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i24;
  var $i48: i24;
  var $i49: i24;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i24;
  var $i71: i24;
  var $i72: i24;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i24;
  var $i95: i24;
  var $i96: i24;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i24;
  var $i113: i24;
  var $i114: i24;
  var $p115: ref;
  var $p116: ref;
  var $i117: i8;
  var $i118: i64;
  var $i119: i64;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i31: i32;
  var $i125: i8;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $i129: i8;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $i133: i8;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i8;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i145: i8;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $i149: i8;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i153: i8;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $i161: i8;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $i165: i8;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i8;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $i173: i8;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $i177: i8;
  var $i178: i32;
  var $i179: i32;
  var $i180: i1;
  var $i181: i8;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $i185: i8;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $i189: i8;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i8;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $i197: i8;
  var $i198: i32;
  var $i199: i32;
  var $i200: i1;
  var $i201: i8;
  var $i202: i32;
  var $i203: i32;
  var $i204: i1;
  var $i205: i8;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $i209: i8;
  var $i210: i32;
  var $i211: i32;
  var $i212: i1;
  var $i213: i8;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $i217: i8;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $i225: i8;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $i229: i8;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $i233: i8;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $i237: i8;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $i241: i8;
  var $i242: i32;
  var $i243: i32;
  var $i244: i1;
  var $i245: i8;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $i249: i8;
  var $i250: i32;
  var $i251: i32;
  var $i252: i1;
  var $i253: i8;
  var $i254: i32;
  var $i255: i32;
  var $i256: i1;
  var $i257: i8;
  var $i258: i32;
  var $i259: i32;
  var $i260: i1;
  var $i261: i8;
  var $i262: i32;
  var $i263: i32;
  var $i264: i1;
  var $i265: i8;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i269: i8;
  var $i270: i32;
  var $i271: i1;
  var $i272: i8;
  var $i273: i32;
  var $i274: i1;
  var $i275: i8;
  var $i276: i32;
  var $i277: i1;
  var $i278: i8;
  var $i279: i32;
  var $i280: i1;
  var $i281: i8;
  var $i282: i32;
  var $i283: i1;
  var $i284: i8;
  var $i285: i32;
  var $i286: i1;
  var $i287: i8;
  var $i288: i32;
  var $i289: i1;
  var $i290: i8;
  var $i291: i32;
  var $i292: i1;
  var $i293: i8;
  var $i294: i32;
  var $i295: i1;
  var $i296: i8;
  var $i297: i32;
  var $i298: i1;
  var $i299: i8;
  var $i300: i32;
  var $i301: i1;
  var $i302: i8;
  var $i303: i32;
  var $i304: i1;
  var $i305: i8;
  var $i306: i32;
  var $i307: i1;
  var $i308: i8;
  var $i309: i32;
  var $i310: i1;
  var $i311: i8;
  var $i312: i32;
  var $i313: i1;
  var $i314: i8;
  var $i315: i32;
  var $i316: i1;
  var $i317: i8;
  var $i318: i32;
  var $i319: i1;
  var $i320: i8;
  var $i321: i32;
  var $i322: i1;
  var $i323: i8;
  var $i324: i32;
  var $i325: i1;
  var $i326: i8;
  var $i327: i32;
  var $i328: i1;
  var $i329: i8;
  var $i330: i32;
  var $i331: i1;
  var $i332: i8;
  var $i333: i32;
  var $i334: i1;
  var $i335: i8;
  var $i336: i32;
  var $i337: i1;
  var $i338: i8;
  var $i339: i32;
  var $i340: i1;
  var $i341: i8;
  var $i342: i32;
  var $i343: i1;
  var $i344: i8;
  var $i345: i32;
  var $i346: i1;
  var $i347: i8;
  var $i348: i32;
  var $i349: i1;
  var $i350: i8;
  var $i351: i32;
  var $i352: i1;
  var $i353: i8;
  var $i354: i32;
  var $i355: i1;
  var $i356: i8;
  var $i357: i32;
  var $i358: i1;
  var $i359: i8;
  var $i360: i32;
  var $i361: i1;
  var $i362: i8;
  var $i363: i32;
  var $i364: i1;
  var $i365: i8;
  var $i366: i32;
  var $i367: i1;
  var $i368: i8;
  var $i369: i32;
  var $i370: i1;
  var $i371: i8;
  var $i372: i32;
  var $i373: i1;
  var $i374: i8;
  var $i375: i32;
  var $i376: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i6 := net2272_read($p0, 29);
    call {:si_unique_call 168} {:cexpr "refval"} boogie_si_record_i8($i6);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} net2272_write($p0, 29, 0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i7 := net2272_read($p0, 29);
    call {:si_unique_call 171} {:cexpr "val"} boogie_si_record_i8($i7);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i10, $i11 := 0, $i7;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} net2272_write($p0, 29, 7);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i269 := net2272_read($p0, 29);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i32($i269);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 7);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i10, $i11 := 7, $i269;
    assume {:branchcond $i271} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} net2272_write($p0, 29, 14);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i272 := net2272_read($p0, 29);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i273 := $zext.i8.i32($i272);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 14);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i10, $i11 := 14, $i272;
    assume {:branchcond $i274} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} net2272_write($p0, 29, 21);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i275 := net2272_read($p0, 29);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i276 := $zext.i8.i32($i275);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i277 := $ne.i32($i276, 21);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i10, $i11 := 21, $i275;
    assume {:branchcond $i277} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} net2272_write($p0, 29, 28);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i278 := net2272_read($p0, 29);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i279 := $zext.i8.i32($i278);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i280 := $ne.i32($i279, 28);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i10, $i11 := 28, $i278;
    assume {:branchcond $i280} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} net2272_write($p0, 29, 35);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i281 := net2272_read($p0, 29);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i282 := $zext.i8.i32($i281);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i283 := $ne.i32($i282, 35);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i10, $i11 := 35, $i281;
    assume {:branchcond $i283} true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} net2272_write($p0, 29, 42);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i284 := net2272_read($p0, 29);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i285 := $zext.i8.i32($i284);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i286 := $ne.i32($i285, 42);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i10, $i11 := 42, $i284;
    assume {:branchcond $i286} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} net2272_write($p0, 29, 49);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i287 := net2272_read($p0, 29);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i288 := $zext.i8.i32($i287);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i289 := $ne.i32($i288, 49);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i10, $i11 := 49, $i287;
    assume {:branchcond $i289} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} net2272_write($p0, 29, 56);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i290 := net2272_read($p0, 29);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i291 := $zext.i8.i32($i290);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i292 := $ne.i32($i291, 56);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i10, $i11 := 56, $i290;
    assume {:branchcond $i292} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} net2272_write($p0, 29, 63);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i293 := net2272_read($p0, 29);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i32($i293);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 63);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i10, $i11 := 63, $i293;
    assume {:branchcond $i295} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} net2272_write($p0, 29, 70);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i296 := net2272_read($p0, 29);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i32($i296);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 70);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i10, $i11 := 70, $i296;
    assume {:branchcond $i298} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} net2272_write($p0, 29, 77);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i299 := net2272_read($p0, 29);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i300 := $zext.i8.i32($i299);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i301 := $ne.i32($i300, 77);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i10, $i11 := 77, $i299;
    assume {:branchcond $i301} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} net2272_write($p0, 29, 84);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i302 := net2272_read($p0, 29);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i303 := $zext.i8.i32($i302);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i304 := $ne.i32($i303, 84);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i10, $i11 := 84, $i302;
    assume {:branchcond $i304} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} net2272_write($p0, 29, 91);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i305 := net2272_read($p0, 29);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i32($i305);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i307 := $ne.i32($i306, 91);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i10, $i11 := 91, $i305;
    assume {:branchcond $i307} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} net2272_write($p0, 29, 98);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i308 := net2272_read($p0, 29);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i309 := $zext.i8.i32($i308);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i310 := $ne.i32($i309, 98);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i10, $i11 := 98, $i308;
    assume {:branchcond $i310} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} net2272_write($p0, 29, 105);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i311 := net2272_read($p0, 29);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i312 := $zext.i8.i32($i311);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i313 := $ne.i32($i312, 105);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i10, $i11 := 105, $i311;
    assume {:branchcond $i313} true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} net2272_write($p0, 29, 112);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i314 := net2272_read($p0, 29);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i315 := $zext.i8.i32($i314);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 112);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i10, $i11 := 112, $i314;
    assume {:branchcond $i316} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} net2272_write($p0, 29, 119);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i317 := net2272_read($p0, 29);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i318 := $zext.i8.i32($i317);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i319 := $ne.i32($i318, 119);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i10, $i11 := 119, $i317;
    assume {:branchcond $i319} true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} net2272_write($p0, 29, 126);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i320 := net2272_read($p0, 29);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i321 := $zext.i8.i32($i320);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i321, 126);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i10, $i11 := 126, $i320;
    assume {:branchcond $i322} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} net2272_write($p0, 29, $sub.i8(0, 123));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i323 := net2272_read($p0, 29);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i324 := $zext.i8.i32($i323);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i325 := $ne.i32($i324, 133);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i10, $i11 := 133, $i323;
    assume {:branchcond $i325} true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} net2272_write($p0, 29, $sub.i8(0, 116));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i326 := net2272_read($p0, 29);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i327 := $zext.i8.i32($i326);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i328 := $ne.i32($i327, 140);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i10, $i11 := 140, $i326;
    assume {:branchcond $i328} true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} net2272_write($p0, 29, $sub.i8(0, 109));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i329 := net2272_read($p0, 29);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i330 := $zext.i8.i32($i329);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i331 := $ne.i32($i330, 147);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i10, $i11 := 147, $i329;
    assume {:branchcond $i331} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} net2272_write($p0, 29, $sub.i8(0, 102));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i332 := net2272_read($p0, 29);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i333 := $zext.i8.i32($i332);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i334 := $ne.i32($i333, 154);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i10, $i11 := 154, $i332;
    assume {:branchcond $i334} true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} net2272_write($p0, 29, $sub.i8(0, 95));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i335 := net2272_read($p0, 29);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i32($i335);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i337 := $ne.i32($i336, 161);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i10, $i11 := 161, $i335;
    assume {:branchcond $i337} true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} net2272_write($p0, 29, $sub.i8(0, 88));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i338 := net2272_read($p0, 29);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i339 := $zext.i8.i32($i338);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i340 := $ne.i32($i339, 168);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i10, $i11 := 168, $i338;
    assume {:branchcond $i340} true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} net2272_write($p0, 29, $sub.i8(0, 81));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i341 := net2272_read($p0, 29);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i342 := $zext.i8.i32($i341);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i343 := $ne.i32($i342, 175);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i10, $i11 := 175, $i341;
    assume {:branchcond $i343} true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} net2272_write($p0, 29, $sub.i8(0, 74));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i344 := net2272_read($p0, 29);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i345 := $zext.i8.i32($i344);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i346 := $ne.i32($i345, 182);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i10, $i11 := 182, $i344;
    assume {:branchcond $i346} true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} net2272_write($p0, 29, $sub.i8(0, 67));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i347 := net2272_read($p0, 29);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i348 := $zext.i8.i32($i347);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i349 := $ne.i32($i348, 189);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i10, $i11 := 189, $i347;
    assume {:branchcond $i349} true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} net2272_write($p0, 29, $sub.i8(0, 60));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i350 := net2272_read($p0, 29);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i351 := $zext.i8.i32($i350);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i352 := $ne.i32($i351, 196);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i10, $i11 := 196, $i350;
    assume {:branchcond $i352} true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} net2272_write($p0, 29, $sub.i8(0, 53));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i353 := net2272_read($p0, 29);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i354 := $zext.i8.i32($i353);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i355 := $ne.i32($i354, 203);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i10, $i11 := 203, $i353;
    assume {:branchcond $i355} true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} net2272_write($p0, 29, $sub.i8(0, 46));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i356 := net2272_read($p0, 29);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i357 := $zext.i8.i32($i356);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i358 := $ne.i32($i357, 210);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i10, $i11 := 210, $i356;
    assume {:branchcond $i358} true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} net2272_write($p0, 29, $sub.i8(0, 39));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i359 := net2272_read($p0, 29);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i360 := $zext.i8.i32($i359);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i361 := $ne.i32($i360, 217);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i10, $i11 := 217, $i359;
    assume {:branchcond $i361} true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} net2272_write($p0, 29, $sub.i8(0, 32));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i362 := net2272_read($p0, 29);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i363 := $zext.i8.i32($i362);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i364 := $ne.i32($i363, 224);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i10, $i11 := 224, $i362;
    assume {:branchcond $i364} true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} net2272_write($p0, 29, $sub.i8(0, 25));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i365 := net2272_read($p0, 29);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i366 := $zext.i8.i32($i365);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i367 := $ne.i32($i366, 231);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i10, $i11 := 231, $i365;
    assume {:branchcond $i367} true;
    goto $bb318, $bb319;

  $bb319:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} net2272_write($p0, 29, $sub.i8(0, 18));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i368 := net2272_read($p0, 29);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i369 := $zext.i8.i32($i368);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i370 := $ne.i32($i369, 238);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i10, $i11 := 238, $i368;
    assume {:branchcond $i370} true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} net2272_write($p0, 29, $sub.i8(0, 11));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i371 := net2272_read($p0, 29);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i372 := $zext.i8.i32($i371);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i373 := $ne.i32($i372, 245);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i10, $i11 := 245, $i371;
    assume {:branchcond $i373} true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} net2272_write($p0, 29, $sub.i8(0, 4));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i374 := net2272_read($p0, 29);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i375 := $zext.i8.i32($i374);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i376 := $ne.i32($i375, 252);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i10, $i11 := 252, $i374;
    assume {:branchcond $i376} true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i6);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} net2272_write($p0, 29, $i33);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i34 := net2272_read($p0, 37);
    call {:si_unique_call 179} {:cexpr "refval"} boogie_si_record_i8($i34);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} net2272_write($p0, 37, 0);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i35 := net2272_read($p0, 37);
    call {:si_unique_call 182} {:cexpr "val"} boogie_si_record_i8($i35);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i34);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i36, $i37);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i39, $i40 := 0, $i35;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} net2272_write($p0, 37, 7);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i125 := net2272_read($p0, 37);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i34);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i126, $i127);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i39, $i40 := 7, $i125;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} net2272_write($p0, 37, 14);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i129 := net2272_read($p0, 37);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i34);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i130, $i131);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i39, $i40 := 14, $i129;
    assume {:branchcond $i132} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} net2272_write($p0, 37, 21);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i133 := net2272_read($p0, 37);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i34);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i134, $i135);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i39, $i40 := 21, $i133;
    assume {:branchcond $i136} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} net2272_write($p0, 37, 28);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i137 := net2272_read($p0, 37);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i34);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i138, $i139);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i39, $i40 := 28, $i137;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} net2272_write($p0, 37, 35);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i141 := net2272_read($p0, 37);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i34);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i142, $i143);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i39, $i40 := 35, $i141;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} net2272_write($p0, 37, 42);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i145 := net2272_read($p0, 37);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i145);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i34);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i146, $i147);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i39, $i40 := 42, $i145;
    assume {:branchcond $i148} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} net2272_write($p0, 37, 49);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i149 := net2272_read($p0, 37);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32($i149);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i34);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i150, $i151);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i39, $i40 := 49, $i149;
    assume {:branchcond $i152} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} net2272_write($p0, 37, 56);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i153 := net2272_read($p0, 37);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i34);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i154, $i155);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i39, $i40 := 56, $i153;
    assume {:branchcond $i156} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} net2272_write($p0, 37, 63);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i157 := net2272_read($p0, 37);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i34);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i158, $i159);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i39, $i40 := 63, $i157;
    assume {:branchcond $i160} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} net2272_write($p0, 37, 70);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i161 := net2272_read($p0, 37);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i34);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i162, $i163);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i39, $i40 := 70, $i161;
    assume {:branchcond $i164} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} net2272_write($p0, 37, 77);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i165 := net2272_read($p0, 37);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i32($i165);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i34);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i166, $i167);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i39, $i40 := 77, $i165;
    assume {:branchcond $i168} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} net2272_write($p0, 37, 84);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i169 := net2272_read($p0, 37);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i169);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i34);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i170, $i171);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i39, $i40 := 84, $i169;
    assume {:branchcond $i172} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} net2272_write($p0, 37, 91);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i173 := net2272_read($p0, 37);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32($i173);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i34);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i174, $i175);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i39, $i40 := 91, $i173;
    assume {:branchcond $i176} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} net2272_write($p0, 37, 98);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i177 := net2272_read($p0, 37);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i177);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i34);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i180 := $ne.i32($i178, $i179);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i39, $i40 := 98, $i177;
    assume {:branchcond $i180} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} net2272_write($p0, 37, 105);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i181 := net2272_read($p0, 37);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i181);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i34);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i182, $i183);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i39, $i40 := 105, $i181;
    assume {:branchcond $i184} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} net2272_write($p0, 37, 112);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i185 := net2272_read($p0, 37);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i187 := $zext.i8.i32($i34);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i186, $i187);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i39, $i40 := 112, $i185;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} net2272_write($p0, 37, 119);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i189 := net2272_read($p0, 37);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i32($i34);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i190, $i191);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i39, $i40 := 119, $i189;
    assume {:branchcond $i192} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} net2272_write($p0, 37, 126);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i193 := net2272_read($p0, 37);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i34);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i194, $i195);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i39, $i40 := 126, $i193;
    assume {:branchcond $i196} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} net2272_write($p0, 37, $sub.i8(0, 123));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i197 := net2272_read($p0, 37);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i32($i197);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i199 := $zext.i8.i32($i34);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i198, $i199);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i39, $i40 := 133, $i197;
    assume {:branchcond $i200} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} net2272_write($p0, 37, $sub.i8(0, 116));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i201 := net2272_read($p0, 37);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($i34);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i202, $i203);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i39, $i40 := 140, $i201;
    assume {:branchcond $i204} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} net2272_write($p0, 37, $sub.i8(0, 109));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i205 := net2272_read($p0, 37);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i32($i205);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i34);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i206, $i207);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i39, $i40 := 147, $i205;
    assume {:branchcond $i208} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} net2272_write($p0, 37, $sub.i8(0, 102));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i209 := net2272_read($p0, 37);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i32($i209);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i34);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i212 := $ne.i32($i210, $i211);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i39, $i40 := 154, $i209;
    assume {:branchcond $i212} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} net2272_write($p0, 37, $sub.i8(0, 95));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i213 := net2272_read($p0, 37);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i34);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i214, $i215);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i39, $i40 := 161, $i213;
    assume {:branchcond $i216} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} net2272_write($p0, 37, $sub.i8(0, 88));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i217 := net2272_read($p0, 37);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i32($i217);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i34);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i218, $i219);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i39, $i40 := 168, $i217;
    assume {:branchcond $i220} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} net2272_write($p0, 37, $sub.i8(0, 81));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i221 := net2272_read($p0, 37);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i32($i34);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i222, $i223);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i39, $i40 := 175, $i221;
    assume {:branchcond $i224} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} net2272_write($p0, 37, $sub.i8(0, 74));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i225 := net2272_read($p0, 37);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i226 := $zext.i8.i32($i225);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i32($i34);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i228 := $ne.i32($i226, $i227);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i39, $i40 := 182, $i225;
    assume {:branchcond $i228} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} net2272_write($p0, 37, $sub.i8(0, 67));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i229 := net2272_read($p0, 37);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i229);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i231 := $zext.i8.i32($i34);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i230, $i231);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i39, $i40 := 189, $i229;
    assume {:branchcond $i232} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} net2272_write($p0, 37, $sub.i8(0, 60));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i233 := net2272_read($p0, 37);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i233);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i235 := $zext.i8.i32($i34);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i236 := $ne.i32($i234, $i235);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i39, $i40 := 196, $i233;
    assume {:branchcond $i236} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} net2272_write($p0, 37, $sub.i8(0, 53));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i237 := net2272_read($p0, 37);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i238 := $zext.i8.i32($i237);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i239 := $zext.i8.i32($i34);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i238, $i239);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i39, $i40 := 203, $i237;
    assume {:branchcond $i240} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} net2272_write($p0, 37, $sub.i8(0, 46));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i241 := net2272_read($p0, 37);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i242 := $zext.i8.i32($i241);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i243 := $zext.i8.i32($i34);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i244 := $ne.i32($i242, $i243);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i39, $i40 := 210, $i241;
    assume {:branchcond $i244} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} net2272_write($p0, 37, $sub.i8(0, 39));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i245 := net2272_read($p0, 37);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i247 := $zext.i8.i32($i34);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i248 := $ne.i32($i246, $i247);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i39, $i40 := 217, $i245;
    assume {:branchcond $i248} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} net2272_write($p0, 37, $sub.i8(0, 32));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i249 := net2272_read($p0, 37);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i251 := $zext.i8.i32($i34);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i250, $i251);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i39, $i40 := 224, $i249;
    assume {:branchcond $i252} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} net2272_write($p0, 37, $sub.i8(0, 25));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i253 := net2272_read($p0, 37);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i254 := $zext.i8.i32($i253);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i34);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i254, $i255);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i39, $i40 := 231, $i253;
    assume {:branchcond $i256} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} net2272_write($p0, 37, $sub.i8(0, 18));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i257 := net2272_read($p0, 37);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32($i257);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i259 := $zext.i8.i32($i34);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i258, $i259);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i39, $i40 := 238, $i257;
    assume {:branchcond $i260} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} net2272_write($p0, 37, $sub.i8(0, 11));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i261 := net2272_read($p0, 37);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i32($i261);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i263 := $zext.i8.i32($i34);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i262, $i263);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i39, $i40 := 245, $i261;
    assume {:branchcond $i264} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} net2272_write($p0, 37, $sub.i8(0, 4));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i265 := net2272_read($p0, 37);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i266 := $zext.i8.i32($i265);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i267 := $zext.i8.i32($i34);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i266, $i267);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i39, $i40 := 252, $i265;
    assume {:branchcond $i268} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i61 := net2272_read($p0, 35);
    call {:si_unique_call 189} {:cexpr "val"} boogie_si_record_i8($i61);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 64);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i83 := net2272_read($p0, 37);
    call {:si_unique_call 194} {:cexpr "val"} boogie_si_record_i8($i83);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 16);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i83);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 17);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p106, .str.1);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p107, .str.72);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p108, .str.43);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p109, .str.77);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i112 := $load.i24($M.7, $p111);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i113 := $and.i24($i112, $sub.i24(0, 262144));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i114 := $or.i24($i113, 2195);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p111, $i114);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p115, 0);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.8, $p116);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i64($i117);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i119 := $and.i64($i118, 1);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i120 := ldv__builtin_expect($i119, 0);
    call {:si_unique_call 198} {:cexpr "tmp___3"} boogie_si_record_i64($i120);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, 0);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb43:
    assume $i121 == 1;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.1, $p122);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i83);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p123, .str.77, .str.72, $i124);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb30:
    assume $i85 == 1;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p88, .str.1);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p89, .str.72);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p90, .str.43);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p91, .str.76);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i94 := $load.i24($M.7, $p93);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i95 := $and.i24($i94, $sub.i24(0, 262144));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i96 := $or.i24($i95, 2186);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p93, $i96);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p97, 0);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.8, $p98);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i64($i99);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i101 := $and.i64($i100, 1);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i102 := ldv__builtin_expect($i101, 0);
    call {:si_unique_call 196} {:cexpr "tmp___2"} boogie_si_record_i64($i102);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i103 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.1, $p104);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p105, .str.76, .str.72);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb24:
    assume $i63 == 1;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p64, .str.1);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p65, .str.72);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p66, .str.43);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p67, .str.75);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i70 := $load.i24($M.7, $p69);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i71 := $and.i24($i70, $sub.i24(0, 262144));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i72 := $or.i24($i71, 2168);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p69, $i72);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p73, 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.8, $p74);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i64($i75);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 1);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 191} {:cexpr "tmp___1"} boogie_si_record_i64($i78);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb9;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i61);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p3, $p81, .str.75, .str.72, 64, $i82);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb187:
    assume {:verifier.code 0} true;
    assume $i268 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p41, .str.1);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p42, .str.72);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p43, .str.43);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p44, .str.74);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i47 := $load.i24($M.7, $p46);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i48 := $and.i24($i47, $sub.i24(0, 262144));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i49 := $or.i24($i48, 2147);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p46, $i49);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p50, 0);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.8, $p51);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i64($i52);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i54 := $and.i64($i53, 1);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i55 := ldv__builtin_expect($i54, 0);
    call {:si_unique_call 184} {:cexpr "tmp___0"} boogie_si_record_i64($i55);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb9;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i40);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i34);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p2, $p58, .str.74, .str.72, $i39, $i59, $i60);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i264 == 1;
    goto $bb16;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb16;

  $bb175:
    assume {:verifier.code 0} true;
    assume $i256 == 1;
    goto $bb16;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i252 == 1;
    goto $bb16;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb16;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i244 == 1;
    goto $bb16;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i240 == 1;
    goto $bb16;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i236 == 1;
    goto $bb16;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i232 == 1;
    goto $bb16;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i228 == 1;
    goto $bb16;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb16;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb16;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i216 == 1;
    goto $bb16;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i212 == 1;
    goto $bb16;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb16;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb16;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb16;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb16;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb16;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb16;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i184 == 1;
    goto $bb16;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb16;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb16;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb16;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb16;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb16;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb16;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb16;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb16;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb16;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb16;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb16;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb16;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb16;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb16;

  $bb330:
    assume {:verifier.code 0} true;
    assume $i376 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.72);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.43);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str.73);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.7, $p17);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 2131);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p17, $i20);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p21, 0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.8, $p22);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 173} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb9;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i11);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p1, $p29, .str.73, .str.72, $i10, $i30);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb326:
    assume {:verifier.code 0} true;
    assume $i373 == 1;
    goto $bb4;

  $bb322:
    assume {:verifier.code 0} true;
    assume $i370 == 1;
    goto $bb4;

  $bb318:
    assume {:verifier.code 0} true;
    assume $i367 == 1;
    goto $bb4;

  $bb314:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb4;

  $bb310:
    assume {:verifier.code 0} true;
    assume $i361 == 1;
    goto $bb4;

  $bb306:
    assume {:verifier.code 0} true;
    assume $i358 == 1;
    goto $bb4;

  $bb302:
    assume {:verifier.code 0} true;
    assume $i355 == 1;
    goto $bb4;

  $bb298:
    assume {:verifier.code 0} true;
    assume $i352 == 1;
    goto $bb4;

  $bb294:
    assume {:verifier.code 0} true;
    assume $i349 == 1;
    goto $bb4;

  $bb290:
    assume {:verifier.code 0} true;
    assume $i346 == 1;
    goto $bb4;

  $bb286:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb4;

  $bb282:
    assume {:verifier.code 0} true;
    assume $i340 == 1;
    goto $bb4;

  $bb278:
    assume {:verifier.code 0} true;
    assume $i337 == 1;
    goto $bb4;

  $bb274:
    assume {:verifier.code 0} true;
    assume $i334 == 1;
    goto $bb4;

  $bb270:
    assume {:verifier.code 0} true;
    assume $i331 == 1;
    goto $bb4;

  $bb266:
    assume {:verifier.code 0} true;
    assume $i328 == 1;
    goto $bb4;

  $bb262:
    assume {:verifier.code 0} true;
    assume $i325 == 1;
    goto $bb4;

  $bb258:
    assume {:verifier.code 0} true;
    assume $i322 == 1;
    goto $bb4;

  $bb254:
    assume {:verifier.code 0} true;
    assume $i319 == 1;
    goto $bb4;

  $bb250:
    assume {:verifier.code 0} true;
    assume $i316 == 1;
    goto $bb4;

  $bb246:
    assume {:verifier.code 0} true;
    assume $i313 == 1;
    goto $bb4;

  $bb242:
    assume {:verifier.code 0} true;
    assume $i310 == 1;
    goto $bb4;

  $bb238:
    assume {:verifier.code 0} true;
    assume $i307 == 1;
    goto $bb4;

  $bb234:
    assume {:verifier.code 0} true;
    assume $i304 == 1;
    goto $bb4;

  $bb230:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb4;

  $bb226:
    assume {:verifier.code 0} true;
    assume $i298 == 1;
    goto $bb4;

  $bb222:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb4;

  $bb218:
    assume {:verifier.code 0} true;
    assume $i292 == 1;
    goto $bb4;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i289 == 1;
    goto $bb4;

  $bb210:
    assume {:verifier.code 0} true;
    assume $i286 == 1;
    goto $bb4;

  $bb206:
    assume {:verifier.code 0} true;
    assume $i283 == 1;
    goto $bb4;

  $bb202:
    assume {:verifier.code 0} true;
    assume $i280 == 1;
    goto $bb4;

  $bb198:
    assume {:verifier.code 0} true;
    assume $i277 == 1;
    goto $bb4;

  $bb194:
    assume {:verifier.code 0} true;
    assume $i274 == 1;
    goto $bb4;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i271 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 206242);

procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    return;
}



const net2272_usb_reset: ref;

axiom net2272_usb_reset == $sub.ref(0, 207274);

procedure net2272_usb_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_usb_reset($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $i39: i16;
  var $i40: i32;
  var $i41: i1;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i16;
  var $i50: i8;
  var $i51: i32;
  var $i52: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 0);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} net2272_cancel_dma($p0);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} net2272_write($p0, 32, 0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} net2272_write($p0, 33, 0);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} net2272_write($p0, 2, $sub.i8(0, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} net2272_write($p0, 3, $sub.i8(0, 9));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i8($i4, 3);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, 1);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 3);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 16);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i8($i13, 4);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, 1);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 2);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i19 := $sext.i8.i32($i18);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i11, $i19);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i8($i22, 5);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i23, 1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 1);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i20, $i28);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i30 := $M.11;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i32 := $ashr.i32($i31, 1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i33);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i29, $i34);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} net2272_write($p0, 28, $i38);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} net2272_cancel_dma($p0);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i39 := $M.12;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i41 := $ule.i32($i40, 3);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i41 == 1);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} net2272_set_fifo_mode($p0, $i44);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i45 := net2272_read($p0, 34);
    call {:si_unique_call 350} {:cexpr "tmp"} boogie_si_record_i8($i45);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 1);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} net2272_write($p0, 34, $i48);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i49 := $M.13;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i16.i8($i49);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} net2272_write($p0, 36, $i52);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i41 == 1;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i42 := $M.12;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb3;
}



const net2272_usb_reinit: ref;

axiom net2272_usb_reinit == $sub.ref(0, 208306);

procedure net2272_usb_reinit($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_usb_reinit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p37: ref;
  var $p40: ref;
  var $p42: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i16;
  var $i69: i32;
  var $i70: i16;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $i100: i1;
  var $p101: ref;
  var $i102: i8;
  var $i103: i16;
  var $i104: i32;
  var $i105: i16;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $i134: i8;
  var $i135: i1;
  var $p136: ref;
  var $i137: i8;
  var $i138: i16;
  var $i139: i32;
  var $i140: i16;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, ep0name);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $p0);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 131073));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, $i10);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i11 := $M.14;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb9, $bb10;

  $bb10:
    assume !(0 == 1);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $sub.i32(0, 4096));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 64);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p31, $i34);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} net2272_ep_reset($p2);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(1, 112));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p54, $mul.ref(1, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p57, .str.30);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p54, $mul.ref(1, 112)), $mul.ref(64, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p58, $p0);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p54, $mul.ref(1, 112)), $mul.ref(104, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p59, 1);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p54, $mul.ref(1, 112)), $mul.ref(106, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, $sub.i32(0, 131073));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p61, $i63);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i64 := $M.14;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb20, $bb21;

  $bb21:
    assume !(1 == 1);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p54, $mul.ref(1, 112)), $mul.ref(106, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.1, $p79);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, $sub.i32(0, 4096));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i81, 64);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p79, $i82);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} net2272_ep_reset($p55);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p89, $mul.ref(2, 112));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p89, $mul.ref(2, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p92, .str.31);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p89, $mul.ref(2, 112)), $mul.ref(64, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p93, $p0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p89, $mul.ref(2, 112)), $mul.ref(104, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p94, 2);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p89, $mul.ref(2, 112)), $mul.ref(106, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.1, $p96);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, $sub.i32(0, 131073));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p96, $i98);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i99 := $M.14;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i8.i1($i99);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb30, $bb31;

  $bb31:
    assume !(1 == 1);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p89, $mul.ref(2, 112)), $mul.ref(106, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.1, $p114);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, $sub.i32(0, 4096));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i116, 64);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p114, $i117);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} net2272_ep_reset($p90);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p124, $mul.ref(3, 112));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p124, $mul.ref(3, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p127, .str.32);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p124, $mul.ref(3, 112)), $mul.ref(64, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p128, $p0);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p124, $mul.ref(3, 112)), $mul.ref(104, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p129, 3);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p124, $mul.ref(3, 112)), $mul.ref(106, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.1, $p131);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, $sub.i32(0, 131073));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p131, $i133);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i134 := $M.14;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i8.i1($i134);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb40, $bb41;

  $bb41:
    assume !(1 == 1);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p124, $mul.ref(3, 112)), $mul.ref(106, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.1, $p149);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i151 := $and.i32($i150, $sub.i32(0, 4096));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i152 := $or.i32($i151, 64);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p149, $i152);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} net2272_ep_reset($p125);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} usb_ep_set_maxpacket_limit($p37, 64);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p42, $p40);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, $sub.i32(0, 4097));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p46, $i48);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} INIT_LIST_HEAD($p52);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    return;

  $bb40:
    assume 1 == 1;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p124, $mul.ref(3, 112)), $mul.ref(106, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.1, $p154);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i156 := $and.i32($i155, $sub.i32(0, 4096));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i157 := $or.i32($i156, 512);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p154, $i157);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i135 == 1;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(3, 112)), $mul.ref(104, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.1, $p136);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i16($i137);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i138);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i140 := $M.11;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i139, $i141);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb36;

  $bb37:
    assume $i142 == 1;
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(3, 112)), $mul.ref(106, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.1, $p144);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, $sub.i32(0, 65537));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i147 := $or.i32($i146, 65536);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p144, $i147);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb30:
    assume 1 == 1;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p89, $mul.ref(2, 112)), $mul.ref(106, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.1, $p119);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i120, $sub.i32(0, 4096));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i122 := $or.i32($i121, 512);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p119, $i122);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i100 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p89, $mul.ref(2, 112)), $mul.ref(104, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.1, $p101);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i16($i102);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i103);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i105 := $M.11;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i104, $i106);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb26;

  $bb27:
    assume $i107 == 1;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p89, $mul.ref(2, 112)), $mul.ref(106, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.1, $p109);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, $sub.i32(0, 65537));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i112 := $or.i32($i111, 65536);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p109, $i112);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb20:
    assume 1 == 1;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p54, $mul.ref(1, 112)), $mul.ref(106, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.1, $p84);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, $sub.i32(0, 4096));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i87 := $or.i32($i86, 512);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p84, $i87);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i65 == 1;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p54, $mul.ref(1, 112)), $mul.ref(104, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.1, $p66);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i16($i67);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i70 := $M.11;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i69, $i71);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb16;

  $bb17:
    assume $i72 == 1;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p54, $mul.ref(1, 112)), $mul.ref(106, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.1, $p74);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, $sub.i32(0, 65537));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i76, 65536);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p74, $i77);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume 0 == 1;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, $sub.i32(0, 4096));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 512);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, $i29);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i16($i14);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i17 := $M.11;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i16, $i18);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb5;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, $sub.i32(0, 65537));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 65536);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, $i24);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const net2272_irq: ref;

axiom net2272_irq == $sub.ref(0, 209338);

procedure net2272_irq($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $CurrAddr, $M.9, $M.10, assertsPassed, $M.2, $M.0;



implementation net2272_irq($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} {:cexpr "net2272_irq:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} ldv_spin_lock_102($p3);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i4 := net2272_read($p2, 3);
    call {:si_unique_call 362} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} net2272_handle_stat1_irqs($p2, $i6);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i7 := net2272_read($p2, 2);
    call {:si_unique_call 365} {:cexpr "tmp___0"} boogie_si_record_i8($i7);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} net2272_handle_stat0_irqs($p2, $i9);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} ldv_spin_unlock_101($p10);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_request_irq_130: ref;

axiom ldv_request_irq_130 == $sub.ref(0, 210370);

procedure ldv_request_irq_130($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.16, $M.9, $M.10, assertsPassed, $M.2;



implementation ldv_request_irq_130($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} {:cexpr "ldv_request_irq_130:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 369} {:cexpr "ldv_request_irq_130:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 371} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i6 := ldv_request_irq($i5, $i0, $p1, $i2, $p3, $p4);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 373} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 211402);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    return;
}



const net2272_read: ref;

axiom net2272_read == $sub.ref(0, 212434);

procedure net2272_read($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;



implementation net2272_read($p0: ref, $i1: i32) returns ($r: i8)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $i8: i8;
  var $p10: ref;
  var $i11: i8;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} {:cexpr "net2272_read:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 31);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p10 := net2272_reg_addr($p0, $i1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i11 := readb($p10);
    call {:si_unique_call 382} {:cexpr "ret"} boogie_si_record_i8($i11);
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p3 := net2272_reg_addr($p0, 0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i1);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} writeb($i6, $p3);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p7 := net2272_reg_addr($p0, 1);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i8 := readb($p7);
    call {:si_unique_call 379} {:cexpr "ret"} boogie_si_record_i8($i8);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const dma_mode_string: ref;

axiom dma_mode_string == $sub.ref(0, 213466);

procedure dma_mode_string() returns ($r: ref);
  free requires assertsPassed;



implementation dma_mode_string() returns ($r: ref)
{
  var $i0: i8;
  var $i1: i1;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i0 := $M.14;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p2 := .str.78;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $M.13;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i6 := $M.13;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $M.13;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p2 := .str.82;
    goto $bb3;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p2 := .str.81;
    goto $bb3;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p2 := .str.80;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p2 := .str.79;
    goto $bb3;
}



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 214498);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 1} true;
    call {:si_unique_call 383} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 384} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const net2272_gadget_release: ref;

axiom net2272_gadget_release == $sub.ref(0, 215530);

procedure net2272_gadget_release($p0: ref);
  free requires assertsPassed;



implementation net2272_gadget_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} kfree($p3);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    return;
}



const usb_add_gadget_udc_release: ref;

axiom usb_add_gadget_udc_release == $sub.ref(0, 216562);

procedure usb_add_gadget_udc_release($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_add_gadget_udc_release($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 387} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 388} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_free_irq_131: ref;

axiom ldv_free_irq_131 == $sub.ref(0, 217594);

procedure ldv_free_irq_131($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_free_irq_131($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} {:cexpr "ldv_free_irq_131:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} free_irq($i0, $p1);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} ldv_free_irq($0.ref, $i0, $p1);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    return;
}



const net2272_reg_addr: ref;

axiom net2272_reg_addr == $sub.ref(0, 218626);

procedure net2272_reg_addr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation net2272_reg_addr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "net2272_reg_addr:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2136, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2128, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i1, $i6);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p4, $mul.ref($i8, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;
}



const writeb: ref;

axiom writeb == $sub.ref(0, 219658);

procedure writeb($i0: i8, $p1: ref);
  free requires assertsPassed;



implementation writeb($i0: i8, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} {:cexpr "writeb:arg:val"} boogie_si_record_i8($i0);
    call {:si_unique_call 394} devirtbounce.4(0, $i0, $p1);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    return;
}



const readb: ref;

axiom readb == $sub.ref(0, 220690);

procedure readb($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation readb($p0: ref) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i1 := devirtbounce.5(0, $p0);
    call {:si_unique_call 396} {:cexpr "ret"} boogie_si_record_i8($i1);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 221722);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 398} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 400} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_request_irq: ref;

axiom ldv_request_irq == $sub.ref(0, 222754);

procedure ldv_request_irq($i0: i32, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.16, $M.9, $M.10, assertsPassed, $M.2;



implementation ldv_request_irq($i0: i32, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} {:cexpr "ldv_request_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 402} {:cexpr "ldv_request_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 403} {:cexpr "ldv_request_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i6 := ldv_undef_int();
    call {:si_unique_call 405} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i0, 0);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} ldv_assume($i11);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, 0);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} ldv_assume($i9);
    call {:si_unique_call 407} {:cexpr "ldv_request_irq:arg:ldv_11_line_line"} boogie_si_record_i32($i1);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} ldv_dispatch_irq_register_11_2($i1, $p2, $0.ref, $p5);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 223786);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 1} true;
    call {:si_unique_call 410} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 411} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 224818);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_dispatch_irq_register_11_2: ref;

axiom ldv_dispatch_irq_register_11_2 == $sub.ref(0, 225850);

procedure ldv_dispatch_irq_register_11_2($i0: i32, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.16, $M.9, $M.10, assertsPassed, $M.2;



implementation ldv_dispatch_irq_register_11_2($i0: i32, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} {:cexpr "ldv_dispatch_irq_register_11_2:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $p4 := ldv_xmalloc(40);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, $i0);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p1);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, $p2);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p3);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_interrupt_interrupt_instance_0($p10);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 226882);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p1 := malloc($i0);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} ldv_assume($i4);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $i5 := ldv_is_err($p1);
    call {:si_unique_call 421} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} ldv_assume($i7);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_interrupt_interrupt_instance_0: ref;

axiom ldv_interrupt_interrupt_instance_0 == $sub.ref(0, 227914);

procedure ldv_interrupt_interrupt_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $CurrAddr, $M.9, $M.10, assertsPassed, $M.2;



implementation ldv_interrupt_interrupt_instance_0($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $u0, $u1, $u2, $u2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} ldv_switch_to_interrupt_context();
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i17 := ldv_interrupt_instance_handler_0_5($p15, $i13, $p14);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 427} {:cexpr "ldv_0_ret_val_default"} boogie_si_record_i32($i17);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} ldv_switch_to_process_context();
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i18 := ldv_undef_int();
    call {:si_unique_call 430} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i17, 2);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} ldv_assume($i25);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 2);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} ldv_assume($i21);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p16);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} ldv_interrupt_instance_thread_0_3($p16, $i13, $p14);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    call {:si_unique_call 423} {:cexpr "ldv_0_line_line"} boogie_si_record_i32($i5);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} ldv_free($p12);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $i5, $p11, $p7, $p9;
    goto $bb3;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 228946);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} free_($p0);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    return;
}



const ldv_switch_to_interrupt_context: ref;

axiom ldv_switch_to_interrupt_context == $sub.ref(0, 229978);

procedure ldv_switch_to_interrupt_context();
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_switch_to_interrupt_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 435} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(1);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interrupt_instance_handler_0_5: ref;

axiom ldv_interrupt_instance_handler_0_5 == $sub.ref(0, 231010);

procedure ldv_interrupt_instance_handler_0_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $CurrAddr, $M.9, $M.10, assertsPassed, $M.2, $M.0;



implementation ldv_interrupt_instance_handler_0_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} {:cexpr "ldv_interrupt_instance_handler_0_5:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i3 := net2272_irq($i1, $p2);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 438} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const ldv_switch_to_process_context: ref;

axiom ldv_switch_to_process_context == $sub.ref(0, 232042);

procedure ldv_switch_to_process_context();
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_switch_to_process_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.0 := 0;
    call {:si_unique_call 439} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interrupt_instance_thread_0_3: ref;

axiom ldv_interrupt_instance_thread_0_3 == $sub.ref(0, 233074);

procedure ldv_interrupt_instance_thread_0_3($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $CurrAddr, $M.9, $M.10, assertsPassed, $M.2, $M.0;



implementation ldv_interrupt_instance_thread_0_3($p0: ref, $i1: i32, $p2: ref)
{
  var vslice_dummy_var_3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} {:cexpr "ldv_interrupt_instance_thread_0_3:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 441} vslice_dummy_var_3 := devirtbounce.6($p0, $i1, $p2);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 234106);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 442} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 235138);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 236170);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 443} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 444} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 1} true;
    call {:si_unique_call 445} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 446} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_spin_lock_102: ref;

axiom ldv_spin_lock_102 == $sub.ref(0, 237202);

procedure ldv_spin_lock_102($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_spin_lock_102($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} spin_lock($p0);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const net2272_handle_stat1_irqs: ref;

axiom net2272_handle_stat1_irqs == $sub.ref(0, 238234);

procedure net2272_handle_stat1_irqs($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $CurrAddr, $M.2, assertsPassed, $M.0, $M.9, $M.10;



implementation net2272_handle_stat1_irqs($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i24;
  var $i63: i24;
  var $i64: i24;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i8;
  var $i46: i8;
  var $i47: i8;
  var $i81: i1;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i16;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i8;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i24;
  var $i137: i24;
  var $i138: i24;
  var $p139: ref;
  var $p140: ref;
  var $i141: i8;
  var $i142: i64;
  var $i143: i64;
  var $i144: i64;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $i148: i8;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i149: i8;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i8;
  var $i166: i8;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i8;
  var $i171: i32;
  var $i172: i32;
  var $i173: i8;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i24;
  var $i183: i24;
  var $i184: i24;
  var $p185: ref;
  var $p186: ref;
  var $i187: i8;
  var $i188: i64;
  var $i189: i64;
  var $i190: i64;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $i194: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 453} {:cexpr "net2272_handle_stat1_irqs:arg:stat"} boogie_si_record_i8($i1);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32(68);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i6, $i7);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i103 := $i1;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32(16);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i104, $i105);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i166 := $i103;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i166);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 213);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i8($i172);
    call {:si_unique_call 481} {:cexpr "stat"} boogie_si_record_i8($i173);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32($i173);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i175 == 1);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p176, .str.1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p177, .str.42);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p178, .str.43);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p179, .str.47);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i182 := $load.i24($M.7, $p181);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i183 := $and.i24($i182, $sub.i24(0, 262144));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i184 := $or.i24($i183, 2053);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p181, $i184);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p185, 0);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.8, $p186);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i64($i187);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i189 := $and.i64($i188, 1);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i190 := ldv__builtin_expect($i189, 0);
    call {:si_unique_call 483} {:cexpr "tmp___5"} boogie_si_record_i64($i190);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i191 := $ne.i64($i190, 0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    return;

  $bb62:
    assume $i191 == 1;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.1, $p192);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i173);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p193, .str.47, $i194);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb60:
    assume $i175 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb57:
    assume $i168 == 1;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i166);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i32.i8($i169);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} net2272_write($p0, 3, $i170);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb39:
    assume $i107 == 1;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32(16);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} net2272_write($p0, 3, $i109);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i103);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 8);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i112 == 1);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.1, $p150);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 192)), $mul.ref(56, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.1, $p152);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i149 := $i103;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i161 := $sext.i8.i32($i149);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i162 := $sext.i8.i32(16);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i163 := $xor.i32($i162, $sub.i32(0, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i164 := $and.i32($i161, $i163);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i32.i8($i164);
    call {:si_unique_call 478} {:cexpr "stat"} boogie_si_record_i8($i165);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i166 := $i165;
    goto $bb56;

  $bb53:
    assume $i155 == 1;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.1, $p156);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 192)), $mul.ref(56, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.1, $p158);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1));
    call {:si_unique_call 479} devirtbounce.7($p159, $p160);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i112 == 1;
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.1, $p113);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 192)), $mul.ref(48, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.1, $p115);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i124 := $M.15;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i124);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i148 := $i103;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i149 := $i148;
    goto $bb52;

  $bb46:
    assume $i126 == 1;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i103);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 247);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i8($i128);
    call {:si_unique_call 474} {:cexpr "stat"} boogie_si_record_i8($i129);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p130, .str.1);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p131, .str.42);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p132, .str.43);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p133, .str.46);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i136 := $load.i24($M.7, $p135);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i137 := $and.i24($i136, $sub.i24(0, 262144));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i138 := $or.i24($i137, 2033);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p135, $i138);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p139, 0);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.8, $p140);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i64($i141);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i143 := $and.i64($i142, 1);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i144 := ldv__builtin_expect($i143, 0);
    call {:si_unique_call 476} {:cexpr "tmp___4"} boogie_si_record_i64($i144);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i148 := $i129;
    goto $bb51;

  $bb48:
    assume $i145 == 1;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.1, $p146);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} __dynamic_dev_dbg.ref.ref.ref($p4, $p147, .str.46);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb43:
    assume $i118 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.1, $p119);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(48, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.1, $p121);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1));
    call {:si_unique_call 473} devirtbounce.7($p122, $p123);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32(68);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} net2272_write($p0, 3, $i11);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i96 := $sext.i8.i32($i1);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i97 := $sext.i8.i32(68);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i98 := $xor.i32($i97, $sub.i32(0, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i96, $i98);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i8($i99);
    call {:si_unique_call 471} {:cexpr "stat"} boogie_si_record_i8($i100);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i103 := $i100;
    goto $bb38;

  $bb35:
    assume $i102 == 1;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i1);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 4);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i1);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 64);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i80 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i46, $i47 := $i80, 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i8.i1($i47);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i81 == 1);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i46);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} stop_activity($p0, $p84);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} net2272_ep0_start($p0);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} ldv_spin_unlock_101($p85);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i46);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i86 == 1);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1));
    call {:si_unique_call 469} devirtbounce.7($p93, $p94);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} ldv_spin_lock_102($p95);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i86 == 1;
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.1, $p88);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} usb_gadget_udc_reset($p87, $p89);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb25;

  $bb15:
    assume $i50 == 1;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i51 := net2272_read($p0, 25);
    call {:si_unique_call 461} {:cexpr "tmp___2"} boogie_si_record_i8($i51);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32(6);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i52, $i53);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i79 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i80 := $i79;
    goto $bb23;

  $bb17:
    assume $i55 == 1;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p56, .str.1);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p57, .str.42);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p58, .str.43);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p59, .str.45);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i62 := $load.i24($M.7, $p61);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i63 := $and.i24($i62, $sub.i24(0, 262144));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i64 := $or.i24($i63, 2002);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p61, $i64);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p65, 0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.8, $p66);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i64($i67);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 463} {:cexpr "tmp___1"} boogie_si_record_i64($i70);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i79 := 1;
    goto $bb22;

  $bb19:
    assume $i71 == 1;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.1, $p74);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.1, $p77);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p73, .str.45, $p78);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i19 := net2272_read($p0, 25);
    call {:si_unique_call 456} {:cexpr "tmp___3"} boogie_si_record_i8($i19);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p23, .str.1);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p24, .str.42);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p25, .str.43);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p26, .str.44);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.7, $p28);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 1996);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p28, $i31);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p32, 0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.8, $p33);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 458} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i46, $i47 := 0, 1;
    goto $bb14;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p40, .str.44, $p45);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const net2272_handle_stat0_irqs: ref;

axiom net2272_handle_stat0_irqs == $sub.ref(0, 239266);

procedure net2272_handle_stat0_irqs($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $CurrAddr, $M.9, $M.10, $M.2, assertsPassed, $M.0;



implementation net2272_handle_stat0_irqs($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i8;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $i65: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i8;
  var $i79: i8;
  var $i80: i8;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i8;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $i126: i1;
  var $i127: i8;
  var $i128: i32;
  var $i129: i8;
  var $p130: ref;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $i158: i8;
  var $i159: i32;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i8;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $i176: i16;
  var $i177: i32;
  var $i178: i16;
  var $p179: ref;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i184: i16;
  var $i185: i32;
  var $i186: i1;
  var $i187: i8;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $i191: i16;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i16;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i16;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $p206: ref;
  var $i207: i8;
  var $i208: i32;
  var $i209: i1;
  var $i210: i16;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $i215: i16;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $i220: i16;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i32;
  var $i227: i16;
  var $p228: ref;
  var $p229: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i8;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $p237: ref;
  var $i238: i16;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $i243: i16;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $p247: ref;
  var $i248: i16;
  var $i249: i32;
  var $i250: i16;
  var $p251: ref;
  var $i252: i64;
  var $i253: i1;
  var $p254: ref;
  var $p255: ref;
  var $i256: i8;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $p260: ref;
  var $i261: i8;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $p265: ref;
  var $i266: i16;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $i271: i16;
  var $i272: i32;
  var $i273: i32;
  var $p274: ref;
  var $p275: ref;
  var $i276: i8;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $p280: ref;
  var $i281: i16;
  var $i282: i32;
  var $i283: i1;
  var $p284: ref;
  var $p285: ref;
  var $i286: i16;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $p290: ref;
  var $i291: i16;
  var $i292: i32;
  var $i293: i16;
  var $p294: ref;
  var $i295: i64;
  var $i296: i1;
  var $p297: ref;
  var $p298: ref;
  var $i299: i16;
  var $i300: i8;
  var $i301: i32;
  var $i302: i8;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $i310: i32;
  var $p311: ref;
  var $i230: i32;
  var $i312: i1;
  var $p313: ref;
  var $i314: i8;
  var $i315: i8;
  var $i316: i8;
  var $i318: i32;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i32;
  var $i323: i8;
  var $i324: i8;
  var $i325: i32;
  var $i326: i32;
  var $i327: i1;
  var $i328: i32;
  var $i329: i8;
  var $p330: ref;
  var $p331: ref;
  var $i332: i64;
  var $p333: ref;
  var $i334: i8;
  var $i317: i8;
  var $i199: i8;
  var $i335: i32;
  var $i336: i32;
  var $i337: i8;
  var $i338: i32;
  var $i339: i32;
  var $i340: i8;
  var $i341: i32;
  var $i342: i1;
  var $i345: i32;
  var $i346: i32;
  var $i347: i8;
  var $i348: i32;
  var $i349: i32;
  var $i350: i32;
  var $i351: i1;
  var $i353: i32;
  var $i354: i32;
  var $i355: i32;
  var $i356: i8;
  var $p357: ref;
  var $p358: ref;
  var $i359: i64;
  var $p360: ref;
  var $i352: i8;
  var $i361: i32;
  var $i362: i32;
  var $i363: i8;
  var $i364: i32;
  var $i365: i1;
  var $i343: i8;
  var $i344: i8;
  var $i366: i32;
  var $i367: i32;
  var $i368: i8;
  var $i369: i32;
  var $i370: i1;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $i377: i24;
  var $i378: i24;
  var $i379: i24;
  var $p380: ref;
  var $p381: ref;
  var $i382: i8;
  var $i383: i64;
  var $i384: i64;
  var $i385: i64;
  var $i386: i1;
  var $p387: ref;
  var $p388: ref;
  var $i389: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 488} {:cexpr "net2272_handle_stat0_irqs:arg:stat"} boogie_si_record_i8($i1);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 32);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 490} {:cexpr "tmp___10"} boogie_si_record_i64($i10);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i318 := $zext.i8.i32($i1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i319 := $and.i32($i318, 64);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 0);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    $i334 := $i1;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i317 := $i334;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i199 := $i317;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i335 := $zext.i8.i32($i199);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i336 := $and.i32($i335, 15);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i337 := $trunc.i32.i8($i336);
    call {:si_unique_call 535} {:cexpr "scratch"} boogie_si_record_i8($i337);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i338 := $zext.i8.i32($i199);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i339 := $and.i32($i338, 240);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i340 := $trunc.i32.i8($i339);
    call {:si_unique_call 536} {:cexpr "stat"} boogie_si_record_i8($i340);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i341 := $zext.i8.i32($i337);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i342 := $ne.i32($i341, 0);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i342 == 1);
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i366 := $zext.i8.i32($i340);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i367 := $and.i32($i366, 127);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i368 := $trunc.i32.i8($i367);
    call {:si_unique_call 566} {:cexpr "stat"} boogie_si_record_i8($i368);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i369 := $zext.i8.i32($i368);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i370 := $ne.i32($i369, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    return;

  $bb131:
    assume $i370 == 1;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p371, .str.1);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p372, .str.48);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p373, .str.43);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p374, .str.50);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p376 := $bitcast.ref.ref($p375);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i377 := $load.i24($M.7, $p376);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i378 := $and.i24($i377, $sub.i24(0, 262144));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i379 := $or.i24($i378, 1969);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p376, $i379);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p380, 0);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i382 := $load.i8($M.8, $p381);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i383 := $zext.i8.i64($i382);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i384 := $and.i64($i383, 1);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i385 := ldv__builtin_expect($i384, 0);
    call {:si_unique_call 568} {:cexpr "tmp___11"} boogie_si_record_i64($i385);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i386 := $ne.i64($i385, 0);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i386} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb133:
    assume $i386 == 1;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p388 := $load.ref($M.1, $p387);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i389 := $zext.i8.i32($i368);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p388, .str.50, $i389);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb119:
    assume $i342 == 1;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i343, $i344 := 0, $i337;
    goto $bb122;

  $bb122:
    call $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i353, $i354, $i355, $i356, $p357, $p358, $i359, $p360, $i352, $i361, $i362, $i363, $i364, $i365, $i343, $i344 := net2272_handle_stat0_irqs_loop_$bb122($p0, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i353, $i354, $i355, $i356, $p357, $p358, $i359, $p360, $i352, $i361, $i362, $i363, $i364, $i365, $i343, $i344);
    goto $bb122_last;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i345 := $zext.i8.i32($i343);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i346 := $shl.i32(1, $i345);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i347 := $trunc.i32.i8($i346);
    call {:si_unique_call 562} {:cexpr "t"} boogie_si_record_i8($i347);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i348 := $zext.i8.i32($i344);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i349 := $zext.i8.i32($i347);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i350 := $and.i32($i348, $i349);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i351 := $eq.i32($i350, 0);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i353 := $zext.i8.i32($i344);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i354 := $zext.i8.i32($i347);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i355 := $xor.i32($i353, $i354);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i356 := $trunc.i32.i8($i355);
    call {:si_unique_call 564} {:cexpr "scratch"} boogie_si_record_i8($i356);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i359 := $zext.i8.i64($i343);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($p358, $mul.ref($i359, 112));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} net2272_handle_ep($p360);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i352 := $i356;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i361 := $zext.i8.i32($i343);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i362 := $add.i32($i361, 1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i363 := $trunc.i32.i8($i362);
    call {:si_unique_call 563} {:cexpr "num"} boogie_si_record_i8($i363);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i364 := $zext.i8.i32($i352);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i364, 0);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i365 == 1);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb128:
    assume $i365 == 1;
    assume {:verifier.code 0} true;
    $i343, $i344 := $i363, $i352;
    goto $bb128_dummy;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb124:
    assume $i351 == 1;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i352 := $i344;
    goto $bb126;

  $bb116:
    assume $i320 == 1;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} net2272_cancel_dma($p0);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} net2272_write($p0, 2, 64);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i321 := $zext.i8.i32($i1);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i322 := $and.i32($i321, 191);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i323 := $trunc.i32.i8($i322);
    call {:si_unique_call 557} {:cexpr "stat"} boogie_si_record_i8($i323);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i324 := net2272_read($p0, 28);
    call {:si_unique_call 559} {:cexpr "tmp___9"} boogie_si_record_i8($i324);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i325 := $zext.i8.i32($i324);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i326 := $and.i32($i325, 1);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i327 := $ne.i32($i326, 0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i328 := (if $i327 == 1 then 2 else 1);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i329 := $trunc.i32.i8($i328);
    call {:si_unique_call 560} {:cexpr "num"} boogie_si_record_i8($i329);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p331 := $bitcast.ref.ref($p330);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i332 := $zext.i8.i64($i329);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($p331, $mul.ref($i332, 112));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} net2272_handle_dma($p333);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i334 := $i323;
    goto $bb118;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.1, $p48);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 1);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p47, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p51, $i50);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i1);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 254);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    call {:si_unique_call 497} {:cexpr "stat"} boogie_si_record_i8($i54);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p47, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i56 := list_empty($p55);
    call {:si_unique_call 499} {:cexpr "tmp___3"} boogie_si_record_i32($i56);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p47, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.1, $p74);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, $sub.i32(0, 4097));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p74, $i76);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.1, $p77);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i79 := $and.i8($i78, $sub.i8(0, 2));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p77, $i79);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} net2272_ep_write($p47, 6, 31);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} net2272_ep_write($p47, 7, 127);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} net2272_write($p0, 4, 0);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} net2272_write($p0, 10, $sub.i8(0, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} net2272_write($p0, 9, $sub.i8(0, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} net2272_write($p0, 8, $sub.i8(0, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i80 := net2272_read($p0, 64);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p2);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p82, $i80);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i83 := net2272_read($p0, 65);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p2);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p85, $i83);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i86 := net2272_read($p0, 66);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p2);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p88, $i86);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i89 := net2272_read($p0, 67);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p2);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p91, $i89);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i92 := net2272_read($p0, 68);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p2);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p94, $i92);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i95 := net2272_read($p0, 69);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p2);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p97, $i95);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i98 := net2272_read($p0, 70);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p2);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p100, $i98);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i101 := net2272_read($p0, 71);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p2);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p103, $i101);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} net2272_write($p0, 2, 32);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i54);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i105 := $xor.i32($i104, 32);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    call {:si_unique_call 518} {:cexpr "stat"} boogie_si_record_i8($i106);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p2);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.1, $p108);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i110 := $sext.i8.i32($i109);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i110, 0);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i112 := $zext.i1.i32($i111);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p47, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i113);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.1, $p115);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i116, 1);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i119 := $shl.i32($i118, 14);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i117, $sub.i32(0, 16385));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i120, $i119);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p115, $i121);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p47);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p122, $mul.ref(106, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.1, $p123);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := 11;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i8($i128);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} net2272_ep_write($p47, 11, $i129);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p2);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.1, $p131);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 96);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p2);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.1, $p137);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p2);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.1, $p142);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 1);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p2);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p146, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.1, $p147);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 3);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p2);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.1, $p152);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 5);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} ldv_spin_unlock_101($p303);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p305 := $load.ref($M.1, $p304);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p305, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.1, $p306);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p309 := $bitcast.ref.ref($p2);
    call {:si_unique_call 522} $i310 := devirtbounce.8($p307, $p308, $p309);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 523} {:cexpr "tmp"} boogie_si_record_i32($i310);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} ldv_spin_lock_102($p311);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i230 := $i310;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i312 := $slt.i32($i230, 0);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i317 := $i106;
    goto $bb115;

  $bb112:
    assume $i312 == 1;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i314 := $load.i8($M.1, $p313);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i315 := $and.i8($i314, $sub.i8(0, 2));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i316 := $or.i8($i315, 1);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p313, $i316);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i155 == 1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p2);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p297, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i299 := $load.i16($M.1, $p298);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i300 := $trunc.i16.i8($i299);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i301 := $zext.i8.i32($i300);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i302 := $trunc.i32.i8($i301);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} net2272_write($p0, 48, $i302);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} allow_status($p47);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i230 := 0;
    goto $bb77;

  $bb35:
    assume $i150 == 1;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p2);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p259, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i261 := $load.i8($M.1, $p260);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i32($i261);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 0);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i263 == 1);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p274 := $bitcast.ref.ref($p2);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p274, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.1, $p275);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 2);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p279 := $bitcast.ref.ref($p2);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p279, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i281 := $load.i16($M.1, $p280);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i282 := $zext.i16.i32($i281);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i283 := $ne.i32($i282, 0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb102, $bb104;

  $bb104:
    assume !($i283 == 1);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p2);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p284, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i286 := $load.i16($M.1, $p285);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i287 := $zext.i16.i32($i286);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p2);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p289, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i291 := $load.i16($M.1, $p290);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i292 := $zext.i16.i32($i291);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i293 := $trunc.i32.i16($i292);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $p294 := net2272_get_ep_by_addr($p0, $i293);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i295 := $p2i.ref.i64($p294);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i296 := $eq.i64($i295, 0);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} set_halt($p294);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} allow_status($p47);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i199 := $i106;
    goto $bb67;

  $bb108:
    assume $i296 == 1;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i288 == 1;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i283 == 1;
    goto $bb103;

  $bb98:
    assume $i278 == 1;
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb93:
    assume $i263 == 1;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p2);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p264, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i266 := $load.i16($M.1, $p265);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i267 := $zext.i16.i32($i266);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} allow_status($p47);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i199 := $i106;
    goto $bb67;

  $bb95:
    assume $i268 == 1;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p2);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p269, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i271 := $load.i16($M.1, $p270);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i272 := $zext.i16.i32($i271);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i273 := $ashr.i32($i272, 8);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} net2272_set_test_mode($p0, $i273);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb31:
    assume $i145 == 1;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p2);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p231, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.1, $p232);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i233);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i235 := $ne.i32($i234, 2);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p2);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p236, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i238 := $load.i16($M.1, $p237);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i239 := $zext.i16.i32($i238);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i239, 0);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb81, $bb83;

  $bb83:
    assume !($i240 == 1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p2);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p241, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i243 := $load.i16($M.1, $p242);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i244 := $zext.i16.i32($i243);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i245 := $ne.i32($i244, 0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p2);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p246, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i248 := $load.i16($M.1, $p247);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i249 := $zext.i16.i32($i248);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i250 := $trunc.i32.i16($i249);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $p251 := net2272_get_ep_by_addr($p0, $i250);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i252 := $p2i.ref.i64($p251);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i253 := $eq.i64($i252, 0);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p251);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($p254, $mul.ref(106, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i256 := $load.i8($M.1, $p255);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i257 := $zext.i8.i32($i256);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i258 == 1);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} clear_halt($p251);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} allow_status($p47);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i199 := $i106;
    goto $bb67;

  $bb90:
    assume $i258 == 1;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume $i253 == 1;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i245 == 1;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i240 == 1;
    goto $bb82;

  $bb78:
    assume $i235 == 1;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb27:
    assume $i140 == 1;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p2);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p156, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.1, $p157);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i160 := $and.i32($i159, 31);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 2);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p2);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.1, $p163);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i164);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i165, 31);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 0);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p2);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.1, $p169);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 31);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 1);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i230 := 0;
    goto $bb77;

  $bb52:
    assume $i173 == 1;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p2);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p218, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i220 := $load.i16($M.1, $p219);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i221 := $zext.i16.i32($i220);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i222 := $ugt.i32($i221, 2);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} net2272_ep_write($p224, 11, 0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $p225 := net2272_reg_addr($p0, 5);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i226 := $zext.i16.i32(0);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i227 := $trunc.i32.i16($i226);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} writew($i227, $p225);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p228);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} set_fifo_bytecount($p229, 0);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} allow_status($p47);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i199 := $i106;
    goto $bb67;

  $bb74:
    assume $i222 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb48:
    assume $i167 == 1;
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p2);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p200, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i202 := $load.i16($M.1, $p201);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i203 := $zext.i16.i32($i202);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i204 := $ugt.i32($i203, 2);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p205, $mul.ref(1552, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.1, $p206);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i207);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    $i210 := 0;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p211);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} net2272_ep_write($p212, 11, 0);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p213 := net2272_reg_addr($p0, 5);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32($i210);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i16($i214);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} writew($i215, $p213);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p216);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} set_fifo_bytecount($p217, 0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} allow_status($p47);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i199 := $i106;
    goto $bb67;

  $bb71:
    assume $i209 == 1;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i210 := 1;
    goto $bb73;

  $bb68:
    assume $i204 == 1;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb44:
    assume $i161 == 1;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p2);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i176 := $load.i16($M.1, $p175);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i176);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i178 := $trunc.i32.i16($i177);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p179 := net2272_get_ep_by_addr($p0, $i178);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p179);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i181 := $eq.i64($i180, 0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb57, $bb59;

  $bb59:
    assume !($i181 == 1);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p2);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p182, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i184 := $load.i16($M.1, $p183);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i185 := $zext.i16.i32($i184);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i186 := $ugt.i32($i185, 2);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i187 := net2272_ep_read($p179, 15);
    call {:si_unique_call 529} {:cexpr "tmp___4"} boogie_si_record_i8($i187);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i189 := $and.i32($i188, 1);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i191 := 0;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} net2272_ep_write($p193, 11, 0);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p194 := net2272_reg_addr($p0, 5);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i191);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i16($i195);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} writew($i196, $p194);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} set_fifo_bytecount($p198, 0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} allow_status($p47);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i199 := $i106;
    goto $bb67;

  $bb64:
    assume $i190 == 1;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i191 := 1;
    goto $bb66;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i181 == 1;
    goto $bb58;

  $bb23:
    assume $i135 == 1;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i126 == 1;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} stop_out_naking($p47);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i127 := 7;
    goto $bb22;

  $bb12:
    assume $i57 == 1;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $p59, $p60, $p61, $p62, $p64, $i65, $p67, $i68, $i69, $i70, $i71, $i72 := net2272_handle_stat0_irqs_loop_$bb15($p47, $p55, $p59, $p60, $p61, $p62, $p64, $i65, $p67, $i68, $i69, $i70, $i71, $i72);
    goto $bb15_last;

  $bb16:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p61, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.1, $p64);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p61, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i65, $i68);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i70 := (if $i69 == 1 then 0 else $sub.i32(0, 71));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} net2272_done($p47, $p62, $i70);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i71 := list_empty($p55);
    call {:si_unique_call 502} {:cexpr "tmp___3"} boogie_si_record_i32($i71);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i72 == 1);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb17_dummy;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i16 := net2272_read($p0, 25);
    call {:si_unique_call 492} {:cexpr "tmp___0"} boogie_si_record_i8($i16);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 4);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, 2);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p24, .str.1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p25, .str.48);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p26, .str.43);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p27, .str.49);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.7, $p29);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 1736);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p29, $i32);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p33, 0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.8, $p34);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 494} {:cexpr "tmp___2"} boogie_si_record_i64($i38);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p43 := usb_speed_string($i42);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p45, .str.49, $p43);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, 3);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb128_dummy:
    assume false;
    return;

  $bb122_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2763;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb16;
}



const ldv_spin_unlock_101: ref;

axiom ldv_spin_unlock_101 == $sub.ref(0, 240298);

procedure ldv_spin_unlock_101($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_spin_unlock_101($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_net2272();
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} spin_unlock($p0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_net2272: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_net2272 == $sub.ref(0, 241330);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_net2272();
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_net2272()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i0 := $M.16;
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i3 := $M.16;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} ldv_assume($i5);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 574} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_net2272"} boogie_si_record_i32(1);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 242362);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} _raw_spin_unlock($p2);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 243394);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock == $sub.ref(0, 244426);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 577} __VERIFIER_error();
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 245458);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 579} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const usb_speed_string: ref;

axiom usb_speed_string == $sub.ref(0, 246490);

procedure usb_speed_string($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_speed_string($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} {:cexpr "usb_speed_string:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p1 := external_alloc();
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 247522);

procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i32, p.8: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i32, p.8: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    return;
}



const net2272_done: ref;

axiom net2272_done == $sub.ref(0, 248554);

procedure net2272_done($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation net2272_done($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} {:cexpr "net2272_done:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i5, 12);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 583} {:cexpr "stopped"} boogie_si_record_i32($i9);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} list_del_init($p26);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, $sub.i32(0, 115));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i35 := $M.14;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.1, $p52);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, $sub.i32(0, 4097));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, 4096);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p52, $i55);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p34, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} ldv_spin_unlock_101($p56);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} usb_gadget_giveback_request($p57, $p58);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p34, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} ldv_spin_lock_102($p59);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i9);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i60);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.1, $p62);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i63, 1);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i66 := $shl.i32($i65, 12);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i64, $sub.i32(0, 4097));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, $i66);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p62, $i68);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(107, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb12;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p34, $mul.ref(0, 2160)), $mul.ref(0, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i47 := $lshr.i32($i46, 14);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 1);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} usb_gadget_unmap_request($p42, $p43, $i50);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p32, $i2);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(2104, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} allow_status($p0);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, $sub.i32(0, 4097));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 4096);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, $i25);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} set_halt($p0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 249586);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const net2272_ep_write: ref;

axiom net2272_ep_write == $sub.ref(0, 250618);

procedure net2272_ep_write($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_ep_write($p0: ref, $i1: i32, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $i19: i32;
  var $i20: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "net2272_ep_write:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 592} {:cexpr "net2272_ep_write:arg:value"} boogie_si_record_i8($i2);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(2116, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i7, $i10);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i2);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} net2272_write($p4, $i1, $i20);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} net2272_write($p4, 4, $i15);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(2116, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, $i17);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const net2272_write: ref;

axiom net2272_write == $sub.ref(0, 251650);

procedure net2272_write($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;



implementation net2272_write($p0: ref, $i1: i32, $i2: i8)
{
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} {:cexpr "net2272_write:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 596} {:cexpr "net2272_write:arg:value"} boogie_si_record_i8($i2);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i1, 31);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p11 := net2272_reg_addr($p0, $i1);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i2);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} writeb($i13, $p11);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p4 := net2272_reg_addr($p0, 0);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i1);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} writeb($i7, $p4);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p8 := net2272_reg_addr($p0, 1);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} writeb($i10, $p8);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const stop_out_naking: ref;

axiom stop_out_naking == $sub.ref(0, 252682);

procedure stop_out_naking($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation stop_out_naking($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i1 := net2272_ep_read($p0, 6);
    call {:si_unique_call 604} {:cexpr "tmp___0"} boogie_si_record_i8($i1);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 32);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} net2272_ep_write($p0, 14, $sub.i8(0, 128));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const net2272_get_ep_by_addr: ref;

axiom net2272_get_ep_by_addr == $sub.ref(0, 253714);

procedure net2272_get_ep_by_addr($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;



implementation net2272_get_ep_by_addr($p0: ref, $i1: i16) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p21: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} {:cexpr "net2272_get_ep_by_addr:arg:wIndex"} boogie_si_record_i16($i1);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 15);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 24), 112));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p12, $mul.ref($sub.ref(0, 24), 112)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i16, $i19);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p21 := $p13;
    goto $bb8;

  $bb8:
    call $p22, $p23, $i24, $i25, $p26, $p27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p43, $p44, $p45, $p46, $p48, $i49, $i50, $p21 := net2272_get_ep_by_addr_loop_$bb8($i1, $i19, $p22, $p23, $i24, $i25, $p26, $p27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p43, $p44, $p45, $p46, $p48, $i49, $i50, $p21);
    goto $bb8_last;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    call {:si_unique_call 607} {:cexpr "bEndpointAddress"} boogie_si_record_i8($i29);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i1);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i29);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i32 := $xor.i32($i30, $i31);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 128);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i1);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i29);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i37 := $xor.i32($i35, $i36);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 15);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p40 := $p21;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 24), 112));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p45, $mul.ref($sub.ref(0, 24), 112)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, $i19);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb20:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p21 := $p46;
    goto $bb20_dummy;

  $bb17:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p7 := $p40;
    goto $bb3;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3053;
}



const net2272_ep_read: ref;

axiom net2272_ep_read == $sub.ref(0, 254746);

procedure net2272_ep_read($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_ep_read($p0: ref, $i1: i32) returns ($r: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $i18: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} {:cexpr "net2272_ep_read:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2160)), $mul.ref(2116, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i6, $i9);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i18 := net2272_read($p3, $i1);
    call {:si_unique_call 611} {:cexpr "tmp"} boogie_si_record_i8($i18);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} net2272_write($p3, 4, $i14);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 2160)), $mul.ref(2116, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, $i16);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const writew: ref;

axiom writew == $sub.ref(0, 255778);

procedure writew($i0: i16, $p1: ref);
  free requires assertsPassed;



implementation writew($i0: i16, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} {:cexpr "writew:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 613} devirtbounce.9(0, $i0, $p2);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    return;
}



const set_fifo_bytecount: ref;

axiom set_fifo_bytecount == $sub.ref(0, 256810);

procedure set_fifo_bytecount($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation set_fifo_bytecount($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i8;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} {:cexpr "set_fifo_bytecount:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i32($i1, 16);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} net2272_ep_write($p0, 10, $i5);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i1, 8);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} net2272_ep_write($p0, 9, $i9);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i1);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} net2272_ep_write($p0, 8, $i12);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    return;
}



const allow_status: ref;

axiom allow_status == $sub.ref(0, 257842);

procedure allow_status($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation allow_status($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} net2272_ep_write($p0, 14, $sub.i8(0, 116));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 4097));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 4096);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i5);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    return;
}



const clear_halt: ref;

axiom clear_halt == $sub.ref(0, 258874);

procedure clear_halt($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation clear_halt($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} net2272_ep_write($p0, 14, 3);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    return;
}



const net2272_set_test_mode: ref;

axiom net2272_set_test_mode == $sub.ref(0, 259906);

procedure net2272_set_test_mode($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation net2272_set_test_mode($p0: ref, $i1: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $i13: i1;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} {:cexpr "net2272_set_test_mode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} net2272_write($p0, 32, 0);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} net2272_write($p0, 33, 0);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} net2272_write($p0, 51, 8);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} net2272_write($p0, 4, 0);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} net2272_write($p0, 6, 4);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} net2272_write($p0, 14, 72);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} net2272_write($p0, 42, 16);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} net2272_write($p0, 7, $sub.i8(0, 128));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i2 := net2272_read($p0, 6);
    call {:si_unique_call 630} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i1);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} net2272_write($p0, 50, $i12);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 4);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i14 := net2272_read($p0, 34);
    call {:si_unique_call 635} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 254);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} net2272_write($p0, 34, $i17);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} net2272_write($p0, 5, 0);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} net2272_write($p0, 5, 0);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} net2272_write($p0, 5, 0);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} net2272_write($p0, 5, 0);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} net2272_write($p0, 5, 0);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} net2272_write($p0, 5, 0);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} net2272_write($p0, 5, 0);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} net2272_write($p0, 5, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} net2272_write($p0, 5, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} net2272_write($p0, 5, $sub.i8(0, 86));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} net2272_write($p0, 5, $sub.i8(0, 86));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} net2272_write($p0, 5, $sub.i8(0, 86));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} net2272_write($p0, 5, $sub.i8(0, 86));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} net2272_write($p0, 5, $sub.i8(0, 86));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} net2272_write($p0, 5, $sub.i8(0, 86));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} net2272_write($p0, 5, $sub.i8(0, 86));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} net2272_write($p0, 5, $sub.i8(0, 86));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} net2272_write($p0, 5, $sub.i8(0, 18));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} net2272_write($p0, 5, $sub.i8(0, 18));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} net2272_write($p0, 5, $sub.i8(0, 18));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} net2272_write($p0, 5, $sub.i8(0, 18));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} net2272_write($p0, 5, $sub.i8(0, 18));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} net2272_write($p0, 5, $sub.i8(0, 18));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} net2272_write($p0, 5, $sub.i8(0, 18));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} net2272_write($p0, 5, $sub.i8(0, 18));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} net2272_write($p0, 5, $sub.i8(0, 2));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} net2272_write($p0, 5, $sub.i8(0, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} net2272_write($p0, 5, $sub.i8(0, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} net2272_write($p0, 5, $sub.i8(0, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} net2272_write($p0, 5, $sub.i8(0, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} net2272_write($p0, 5, $sub.i8(0, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} net2272_write($p0, 5, $sub.i8(0, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} net2272_write($p0, 5, $sub.i8(0, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} net2272_write($p0, 5, $sub.i8(0, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} net2272_write($p0, 5, $sub.i8(0, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} net2272_write($p0, 5, $sub.i8(0, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} net2272_write($p0, 5, $sub.i8(0, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} net2272_write($p0, 5, 127);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} net2272_write($p0, 5, $sub.i8(0, 65));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} net2272_write($p0, 5, $sub.i8(0, 33));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} net2272_write($p0, 5, $sub.i8(0, 17));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} net2272_write($p0, 5, $sub.i8(0, 9));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} net2272_write($p0, 5, $sub.i8(0, 5));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} net2272_write($p0, 5, $sub.i8(0, 3));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} net2272_write($p0, 5, $sub.i8(0, 4));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} net2272_write($p0, 5, 126);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} net2272_write($p0, 5, $sub.i8(0, 65));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} net2272_write($p0, 5, $sub.i8(0, 33));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} net2272_write($p0, 5, $sub.i8(0, 17));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} net2272_write($p0, 5, $sub.i8(0, 9));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} net2272_write($p0, 5, $sub.i8(0, 3));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} net2272_write($p0, 5, 126);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} net2272_write($p0, 8, 0);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i9 := net2272_set_test_mode_loop_$bb4($p0, $i6, $i7, $i8, $i9);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i6 := net2272_read($p0, 6);
    call {:si_unique_call 632} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 4);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const set_halt: ref;

axiom set_halt == $sub.ref(0, 260938);

procedure set_halt($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation set_halt($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} net2272_ep_write($p0, 14, 8);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} net2272_ep_write($p0, 15, 1);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    return;
}



const net2272_cancel_dma: ref;

axiom net2272_cancel_dma == $sub.ref(0, 261970);

procedure net2272_cancel_dma($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_cancel_dma($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1576, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 36948);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i37 := $and.i8($i36, $sub.i8(0, 65));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p35, $i37);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(168, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} writeb(0, $p9);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(168, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} writeb(4, $p14);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(168, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i20 := readb($p19);
    call {:si_unique_call 695} {:cexpr "tmp"} boogie_si_record_i8($i20);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 16);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(168, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} writeb(8, $p34);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call $p24, $p25, $i26, $i27, $i28, $i29 := net2272_cancel_dma_loop_$bb9($p17, $p24, $p25, $i26, $i27, $i28, $i29);
    goto $bb9_last;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p17);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(168, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i26 := readb($p25);
    call {:si_unique_call 697} {:cexpr "tmp"} boogie_si_record_i8($i26);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const net2272_handle_dma: ref;

axiom net2272_handle_dma == $sub.ref(0, 263002);

procedure net2272_handle_dma($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, assertsPassed, $M.9, $M.10, $M.2, $CurrAddr, $M.0;



implementation net2272_handle_dma($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i8;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i8;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p71: ref;
  var $i72: i32;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i8;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i32;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $p124: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i2 := list_empty($p1);
    call {:si_unique_call 700} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i8($i15, 3);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, 1);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i18, 3);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 16);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i8($i26, 4);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i28 := $and.i8($i27, 1);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 2);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i32 := $sext.i8.i32($i31);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i22, $i32);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i8($i37, 5);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, 1);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i41 := $shl.i32($i40, 1);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i43 := $sext.i8.i32($i42);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i33, $i43);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i48 := $lshr.i32($i47, 16);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 1);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i51 := $sext.i8.i32($i50);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i44, $i51);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} net2272_write($p11, 28, $i55);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i60 := $and.i8($i59, $sub.i8(0, 65));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p58, $i60);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i61 := net2272_ep_read($p0, 11);
    call {:si_unique_call 703} {:cexpr "tmp___0"} boogie_si_record_i8($i61);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 12);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} net2272_ep_write($p0, 11, $i64);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p0);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref(106, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.1, $p66);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i69 == 1);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i96 := net2272_read($p95, 2);
    call {:si_unique_call 706} {:cexpr "tmp___2"} boogie_si_record_i8($i96);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 64);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i102 := net2272_ep_read($p0, 10);
    call {:si_unique_call 716} {:cexpr "tmp___3"} boogie_si_record_i8($i102);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i103 := net2272_ep_read($p0, 9);
    call {:si_unique_call 718} {:cexpr "tmp___4"} boogie_si_record_i8($i103);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i104 := net2272_ep_read($p0, 8);
    call {:si_unique_call 720} {:cexpr "tmp___5"} boogie_si_record_i8($i104);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i102);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i106 := $shl.i32($i105, 16);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i103);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i108 := $shl.i32($i107, 8);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i109 := $or.i32($i106, $i108);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i104);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i111 := $or.i32($i109, $i110);
    call {:si_unique_call 721} {:cexpr "len"} boogie_si_record_i32($i111);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p0);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref(107, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.1, $p113);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i118 := $i111;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.1, $p120);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i121, $i118);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p124, $i122);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} net2272_pio_advance($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i116 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i111, 4);
    call {:si_unique_call 722} {:cexpr "len"} boogie_si_record_i32($i117);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i118 := $i117;
    goto $bb24;

  $bb19:
    assume $i99 == 1;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.1, $p100);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} net2272_cancel_dma($p101);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb4:
    assume $i69 == 1;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.1, $p74);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i77 := $urem.i32($i72, $i76);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i78 == 1);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p9);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p79, $mul.ref(42, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.1, $p80);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} net2272_done($p0, $p9, 0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i85 := list_empty($p84);
    call {:si_unique_call 710} {:cexpr "tmp___1"} boogie_si_record_i32($i85);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i86 == 1;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.1, $p88);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i92 := net2272_kick_dma($p0, $p91);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 712} {:cexpr "status"} boogie_si_record_i32($i92);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i92, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i93 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} net2272_pio_advance($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} set_fifo_bytecount($p0, 0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;
}



const net2272_handle_ep: ref;

axiom net2272_handle_ep == $sub.ref(0, 264034);

procedure net2272_handle_ep($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0;



implementation net2272_handle_ep($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i8;
  var $i5: i8;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i2 := list_empty($p1);
    call {:si_unique_call 725} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i4 := net2272_ep_read($p0, 6);
    call {:si_unique_call 727} {:cexpr "stat0"} boogie_si_record_i8($i4);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i5 := net2272_ep_read($p0, 7);
    call {:si_unique_call 729} {:cexpr "stat1"} boogie_si_record_i8($i5);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 1);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p9, $i8);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i4);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 207);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} net2272_ep_write($p0, 6, $i12);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i5);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} net2272_ep_write($p0, 7, $i14);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(106, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i4);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 4);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} net2272_pio_advance($p0);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i4);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 8);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} net2272_pio_advance($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const net2272_pio_advance: ref;

axiom net2272_pio_advance == $sub.ref(0, 265066);

procedure net2272_pio_advance($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0;



implementation net2272_pio_advance($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var vslice_dummy_var_4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i2 := list_empty($p1);
    call {:si_unique_call 735} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 737} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(106, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p18 := (if $i17 == 1 then net2272_write_fifo else net2272_read_fifo);
    call {:si_unique_call 738} vslice_dummy_var_4 := devirtbounce.10($p18, $p0, $p12);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const net2272_write_fifo: ref;

axiom net2272_write_fifo == $sub.ref(0, 266098);

procedure net2272_write_fifo($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.2, $CurrAddr, $M.0, $M.9, $M.10;



implementation net2272_write_fifo($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p5: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $i19: i8;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $i30: i8;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p39: ref;
  var $i40: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i65: i32;
  var vslice_dummy_var_5: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} net2272_ep_write($p0, 6, 4);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i2 := net2272_ep_read($p0, 6);
    call {:si_unique_call 741} {:cexpr "tmp___6"} boogie_si_record_i8($i2);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $r := $i65;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb4;

  $bb4:
    call $p6, $i7, $i8, $i9, $p5, $p11, $p12, $p14, $i15, $i16, $p17, $i19, $i20, $i21, $i22, $i23, $i24, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p39, $i40, $p42, $i43, $i44, $i45, $p47, $i48, $i49, $i50, $p51, $i52, $i53, $p55, $p56, $p57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i66, $i67, $i68, vslice_dummy_var_5 := net2272_write_fifo_loop_$bb4($p0, $p6, $i7, $i8, $i9, $p5, $p11, $p12, $p14, $i15, $i16, $p17, $i19, $i20, $i21, $i22, $i23, $i24, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p39, $i40, $p42, $i43, $i44, $i45, $p47, $i48, $i49, $i50, $p51, $i52, $i53, $p55, $p56, $p57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i66, $i67, $i68, vslice_dummy_var_5);
    goto $bb4_last;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $p11, $p12, $p14, $i15, $i16, $p17, $i19, $i20, $i21, $i22, $i23, $i24, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p39, $i40, $p42, $i43, $i44, $i45, $i66, $i67, $i68, vslice_dummy_var_5 := net2272_write_fifo_loop_$bb8($p0, $p5, $p11, $p12, $p14, $i15, $i16, $p17, $i19, $i20, $i21, $i22, $i23, $i24, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p39, $i40, $p42, $i43, $i44, $i45, $i66, $i67, $i68, vslice_dummy_var_5);
    goto $bb8_last;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p12, $mul.ref($i16, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} llvm.prefetch($p17, 0, 3, 1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} vslice_dummy_var_5 := net2272_ep_read($p0, 6);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i19 := net2272_ep_read($p0, 13);
    call {:si_unique_call 748} {:cexpr "tmp"} boogie_si_record_i8($i19);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i20 := net2272_ep_read($p0, 12);
    call {:si_unique_call 750} {:cexpr "tmp___0"} boogie_si_record_i8($i20);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i19);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i22 := $shl.i32($i21, 8);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i20);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i22, $i23);
    call {:si_unique_call 751} {:cexpr "max"} boogie_si_record_i32($i24);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.1, $p26);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32($i24, $i28);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i24;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i37 := net2272_write_packet($p0, $p17, $p5, $i36);
    call {:si_unique_call 758} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p42);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i40, $i43);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i45 := $i37;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} net2272_ep_write($p0, 6, 4);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i66 := net2272_ep_read($p0, 6);
    call {:si_unique_call 769} {:cexpr "tmp___6"} boogie_si_record_i8($i66);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i67 := $sext.i8.i32($i66);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i68 := $sge.i32($i67, 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i68 == 1);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb28_dummy;

  $bb13:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.1, $p47);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i50 := $ult.i32($i45, $i49);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} net2272_done($p0, $p5, 0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i52 := list_empty($p51);
    call {:si_unique_call 762} {:cexpr "tmp___5"} boogie_si_record_i32($i52);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i65 := 1;
    goto $bb26;

  $bb18:
    assume $i53 == 1;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i59 := net2272_kick_dma($p0, $p58);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 764} {:cexpr "status"} boogie_si_record_i32($i59);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i60 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $i61 := net2272_ep_read($p0, 6);
    call {:si_unique_call 766} {:cexpr "tmp___4"} boogie_si_record_i8($i61);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 64);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p6 := $p58;
    assume true;
    goto $bb5, $bb22;

  $bb22:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb5:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} net2272_ep_write($p0, 6, 4);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i7 := net2272_ep_read($p0, 6);
    call {:si_unique_call 744} {:cexpr "tmp___6"} boogie_si_record_i8($i7);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i8 := $sext.i8.i32($i7);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i9 := $sge.i32($i8, 0);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb6_dummy;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i50 == 1;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} set_fifo_bytecount($p0, 0);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i30 := net2272_ep_read($p0, 13);
    call {:si_unique_call 753} {:cexpr "tmp___1"} boogie_si_record_i8($i30);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i31 := net2272_ep_read($p0, 12);
    call {:si_unique_call 755} {:cexpr "tmp___2"} boogie_si_record_i8($i31);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i30);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32($i32, 8);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i31);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i33, $i34);
    call {:si_unique_call 756} {:cexpr "max"} boogie_si_record_i32($i35);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb12;

  $bb28_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3565;
}



const net2272_read_fifo: ref;

axiom net2272_read_fifo == $sub.ref(0, 267130);

procedure net2272_read_fifo($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.2, $CurrAddr, $M.0, $M.9, $M.10;



implementation net2272_read_fifo($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i48: i1;
  var $i47: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i54: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i2, $p3 := 0, $p1;
    goto $bb1;

  $bb1:
    call $i2, $p3, $i4, $p6, $p7, $p9, $i10, $i11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $p20, $i21, $p23, $i24, $i25, $i26, $p28, $i29, $i30, $i31, $i32, $p33, $p34, $p35, $p36, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i47, $i49, $i50, $i51, $i52, $i53, $p56, $i57, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i54, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $p88, $i89, $i90, $p92, $p93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i103, $i104, $i105, $i106 := net2272_read_fifo_loop_$bb1($p0, $i2, $p3, $i4, $p6, $p7, $p9, $i10, $i11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $p20, $i21, $p23, $i24, $i25, $i26, $p28, $i29, $i30, $i31, $i32, $p33, $p34, $p35, $p36, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i47, $i49, $i50, $i51, $i52, $i53, $p56, $i57, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i54, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $p88, $i89, $i90, $p92, $p93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i103, $i104, $i105, $i106);
    goto $bb1_last;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb2;

  $bb2:
    call $i4, $p6, $p7, $p9, $i10, $i11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $p20, $i21, $p23, $i24, $i25, $i26, $p28, $i29, $i30, $i31, $i32, $p33, $p34, $p35, $p36, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i47, $i49, $i50, $i51, $i52, $i53, $p56, $i57, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i103, $i104, $i105, $i106 := net2272_read_fifo_loop_$bb2($p0, $p3, $i4, $p6, $p7, $p9, $i10, $i11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $p20, $i21, $p23, $i24, $i25, $i26, $p28, $i29, $i30, $i31, $i32, $p33, $p34, $p35, $p36, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i47, $i49, $i50, $i51, $i52, $i53, $p56, $i57, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i103, $i104, $i105, $i106);
    goto $bb2_last;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p7, $mul.ref($i11, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} prefetchw($p12);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i13 := net2272_ep_read($p0, 13);
    call {:si_unique_call 772} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i14 := net2272_ep_read($p0, 12);
    call {:si_unique_call 774} {:cexpr "tmp___1"} boogie_si_record_i8($i14);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i13);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 8);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i14);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i16, $i17);
    call {:si_unique_call 775} {:cexpr "count"} boogie_si_record_i32($i18);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} net2272_ep_write($p0, 6, 24);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i21, $i24);
    call {:si_unique_call 777} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i18, $i25);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i43, $i44 := $i18, $i4;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i45 := net2272_read_packet($p0, $p12, $p3, $i43);
    call {:si_unique_call 780} {:cexpr "tmp___2"} boogie_si_record_i32($i45);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i44, 0);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i47 := 1;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i46 == 1);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i45, 0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i47 := $i48;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i47);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 782} {:cexpr "tmp___6"} boogie_si_record_i64($i51);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i53 := $i44;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i52 == 1);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.1, $p59);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i57, $i60);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 784} {:cexpr "tmp___7"} boogie_si_record_i64($i64);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i78 := $i44;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i103 := net2272_ep_read($p0, 6);
    call {:si_unique_call 802} {:cexpr "tmp___10"} boogie_si_record_i8($i103);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 64);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i102 := 0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $r := $i102;
    return;

  $bb44:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i44;
    goto $bb44_dummy;

  $bb24:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i54 := $i78;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i54, 0);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i79 == 1);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} net2272_done($p0, $p3, 0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.1, $p80);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i32($i83);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 791} {:cexpr "tmp___3"} boogie_si_record_i64($i86);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i89 := list_empty($p88);
    call {:si_unique_call 796} {:cexpr "tmp___5"} boogie_si_record_i32($i89);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i102 := 1;
    goto $bb41;

  $bb32:
    assume $i90 == 1;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p94, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i96 := net2272_kick_dma($p0, $p95);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 798} {:cexpr "status"} boogie_si_record_i32($i96);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i96, 0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb34:
    assume $i97 == 1;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $i98 := net2272_ep_read($p0, 6);
    call {:si_unique_call 800} {:cexpr "tmp___4"} boogie_si_record_i8($i98);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 64);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i2, $p3 := $i54, $p95;
    goto $bb36_dummy;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i87 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} net2272_ep_write($p0, 10, 0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} net2272_ep_write($p0, 9, 0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} net2272_ep_write($p0, 8, 0);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} net2272_out_flush($p0);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} net2272_done($p0, $p3, $sub.i32(0, 75));
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i65 == 1;
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p3);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(42, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.1, $p67);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 786} {:cexpr "tmp___8"} boogie_si_record_i64($i73);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb23;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i75 := 1;
    goto $bb22;

  $bb15:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb13;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i31 := $srem.i32($i25, $i30);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i4;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32(0, $i25);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i42 := $i25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i42, $i40;
    goto $bb11;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb10;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} dev_err.ref.ref.ref.i32.i32($p36, .str.51, $p39, $i18, $i25);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb7;

  $bb44_dummy:
    assume false;
    return;

  $bb2_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3651;

  $bb36_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3649;
}



const prefetchw: ref;

axiom prefetchw == $sub.ref(0, 268162);

procedure prefetchw($p0: ref);
  free requires assertsPassed;



implementation prefetchw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} devirtbounce.11(0, 0, $p0);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    return;
}



const net2272_read_packet: ref;

axiom net2272_read_packet == $sub.ref(0, 269194);

procedure net2272_read_packet($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_read_packet($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var vslice_dummy_var_6: i16;
  var vslice_dummy_var_7: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} {:cexpr "net2272_read_packet:arg:avail"} boogie_si_record_i32($i3);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p6 := net2272_reg_addr($p5, 5);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, $i3);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, $i11);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32($i3, $i17);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    call {:si_unique_call 806} {:cexpr "is_short"} boogie_si_record_i32($i19);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i3, 0);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 808} {:cexpr "tmp___2"} boogie_si_record_i64($i23);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i3);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 811} {:cexpr "tmp___3"} boogie_si_record_i64($i29);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i34, $p35 := $i32, $p1;
    goto $bb8;

  $bb8:
    call $i34, $p35, $p36, $p37, $i38, $i39, $i40 := net2272_read_packet_loop_$bb8($p7, $i34, $p35, $p36, $p37, $i38, $i39, $i40);
    goto $bb8_last;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(1, 2));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p7);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i38 := readw($p37);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p35, $i38);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i34, 2);
    call {:si_unique_call 814} {:cexpr "avail"} boogie_si_record_i32($i39);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i41 := net2272_ep_read($p0, 6);
    call {:si_unique_call 816} {:cexpr "tmp___5"} boogie_si_record_i8($i41);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 16);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} vslice_dummy_var_7 := net2272_ep_read($p0, 6);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i34, $p35 := $i39, $p36;
    goto $bb9_dummy;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i3, 1);
    call {:si_unique_call 812} {:cexpr "avail"} boogie_si_record_i32($i31);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb7;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p7);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} vslice_dummy_var_6 := readw($p25);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3830;
}



const net2272_out_flush: ref;

axiom net2272_out_flush == $sub.ref(0, 270226);

procedure net2272_out_flush($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_out_flush($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} assert_out_naking($p0, .str.52);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} net2272_ep_write($p0, 6, 10);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} net2272_ep_write($p0, 7, $sub.i8(0, 128));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    return;
}



const net2272_kick_dma: ref;

axiom net2272_kick_dma == $sub.ref(0, 271258);

procedure net2272_kick_dma($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation net2272_kick_dma($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p55: ref;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $p63: ref;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i8;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $i93: i8;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i8;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i8;
  var $i111: i8;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i32;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i8;
  var $i126: i32;
  var $i127: i8;
  var $p128: ref;
  var $p129: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i2 := $M.14;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 2);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(107, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} net2272_ep_write($p0, 15, $sub.i8(0, 128));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(2104, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    call {:si_unique_call 822} {:cexpr "size"} boogie_si_record_i32($i32);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $sub.i32(0, 2));
    call {:si_unique_call 823} {:cexpr "size"} boogie_si_record_i32($i33);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p0);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(106, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i56 := net2272_ep_read($p0, 6);
    call {:si_unique_call 827} {:cexpr "tmp"} boogie_si_record_i8($i56);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p59);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.1, $p63);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i66 := net2272_request_dma($p58, $i61, $i65, $i33, 1);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 829} {:cexpr "tmp___1"} boogie_si_record_i32($i66);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i56);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 64);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i70 == 1);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p77);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, $sub.i32(0, 131073));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p77, $i79);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} net2272_ep_write($p0, 14, $sub.i8(0, 128));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i56);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 16);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} net2272_ep_write($p0, 11, 0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.1, $p128);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} net2272_start_dma($p129);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb10;

  $bb30:
    assume $i82 == 1;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.1, $p85);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.1, $p87);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i89 := $lshr.i8($i88, 3);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i90 := $and.i8($i89, 1);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i92 := $shl.i32($i91, 3);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i94 := $sext.i8.i32($i93);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i95 := $or.i32($i94, 16);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p96);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.1, $p98);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i100 := $lshr.i8($i99, 4);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i101 := $and.i8($i100, 1);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i103 := $shl.i32($i102, 2);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i105 := $sext.i8.i32($i104);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i106 := $or.i32($i95, $i105);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.1, $p107);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.1, $p109);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i111 := $lshr.i8($i110, 5);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i112 := $and.i8($i111, 1);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i114 := $shl.i32($i113, 1);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i8($i114);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i116 := $sext.i8.i32($i115);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i106, $i116);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.1, $p118);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i121 := $ashr.i32($i120, 1);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i8($i121);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i123 := $sext.i8.i32($i122);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i124 := $or.i32($i117, $i123);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i8($i124);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i8($i126);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} net2272_write($p84, 28, $i127);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 16);
    goto $bb10;

  $bb27:
    assume $i70 == 1;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.1, $p72);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, $sub.i32(0, 131073));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i74, 131072);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p72, $i75);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i67 == 1;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 16);
    goto $bb10;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.1, $p45);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i48 := net2272_request_dma($p40, $i43, $i47, $i33, 0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 825} {:cexpr "tmp___0"} boogie_si_record_i32($i48);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, $i33);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, $i53);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i49 == 1;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 16);
    goto $bb10;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 16);
    goto $bb10;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb3;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb3;
}



const net2272_request_dma: ref;

axiom net2272_request_dma == $sub.ref(0, 272290);

procedure net2272_request_dma($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation net2272_request_dma($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i8;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $i70: i8;
  var $i71: i8;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $i79: i8;
  var $i80: i8;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $i93: i8;
  var $i10: i32;
  var vslice_dummy_var_8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} {:cexpr "net2272_request_dma:arg:ep"} boogie_si_record_i32($i1);
    call {:si_unique_call 835} {:cexpr "net2272_request_dma:arg:buf"} boogie_si_record_i32($i2);
    call {:si_unique_call 836} {:cexpr "net2272_request_dma:arg:len"} boogie_si_record_i32($i3);
    call {:si_unique_call 837} {:cexpr "net2272_request_dma:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(2104, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i4, 1);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, $sub.i8(0, 65));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i16 := $or.i8($i15, 64);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, $i16);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1576, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.1, $p17);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 36948);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.1, $p60);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i62 := $lshr.i8($i61, 3);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i63 := $and.i8($i62, 1);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i65 := $shl.i32($i64, 3);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i67 := $sext.i8.i32($i66);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, 48);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.1, $p69);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i71 := $lshr.i8($i70, 4);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i72 := $and.i8($i71, 1);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i74 := $shl.i32($i73, 2);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i76 := $sext.i8.i32($i75);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i68, $i76);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.1, $p78);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i80 := $lshr.i8($i79, 5);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i81 := $and.i8($i80, 1);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i83 := $shl.i32($i82, 1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i85 := $sext.i8.i32($i84);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i77, $i85);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i89 := $lshr.i32($i1, 1);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i89);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i92 := $or.i32($i88, $i91);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} net2272_write($p0, 28, $i93);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_8 := net2272_read($p0, 29);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(128, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} writel(187457, $p25);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(136, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} writel(1048576, $p30);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(132, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} writel($i2, $p35);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(140, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} writel($i3, $p40);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i41 := $shl.i32($i4, 3);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 4);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(144, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} writel($i42, $p47);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(104, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i53 := readl($p52);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 844} {:cexpr "tmp"} boogie_si_record_i32($i53);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i53, 262144);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(104, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} writel($i54, $p59);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i3, 16777216);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;
}



const net2272_start_dma: ref;

axiom net2272_start_dma == $sub.ref(0, 273322);

procedure net2272_start_dma($p0: ref);
  free requires assertsPassed;



implementation net2272_start_dma($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1576, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 36948);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2144, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(168, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} writeb(3, $p9);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const assert_out_naking: ref;

axiom assert_out_naking == $sub.ref(0, 274354);

procedure assert_out_naking($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation assert_out_naking($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    return;
}



const readw: ref;

axiom readw == $sub.ref(0, 275386);

procedure readw($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation readw($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 849} $i2 := devirtbounce.12(0, $p1);
    call {:si_unique_call 850} {:cexpr "ret"} boogie_si_record_i16($i2);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.prefetch: ref;

axiom llvm.prefetch == $sub.ref(0, 276418);

procedure llvm.prefetch($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const net2272_write_packet: ref;

axiom net2272_write_packet == $sub.ref(0, 277450);

procedure net2272_write_packet($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_write_packet($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p22: ref;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i31: i32;
  var $p32: ref;
  var $p44: ref;
  var $i45: i32;
  var $p29: ref;
  var $i30: i32;
  var $p46: ref;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $i60: i8;
  var $i61: i32;
  var $i62: i8;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} {:cexpr "net2272_write_packet:arg:max"} boogie_si_record_i32($i3);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p6 := net2272_reg_addr($p5, 5);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i10, $i13);
    call {:si_unique_call 853} {:cexpr "_min1"} boogie_si_record_i32($i14);
    call {:si_unique_call 854} {:cexpr "net2272_write_packet:arg:_min2"} boogie_si_record_i32($i3);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32($i14, $i3);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i16 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, $i16);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, $i20);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i32($i16, 1);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i27 := ldv__builtin_expect($i26, 1);
    call {:si_unique_call 856} {:cexpr "tmp___4"} boogie_si_record_i64($i27);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p29, $i30 := $p1, $i16;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p29);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i30, 0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 862} {:cexpr "tmp___5"} boogie_si_record_i64($i50);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb12:
    assume $i51 == 1;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i54 := net2272_read($p53, 34);
    call {:si_unique_call 864} {:cexpr "tmp___0"} boogie_si_record_i8($i54);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i54);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 254);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} net2272_write($p56, 34, $i59);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p46);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p7);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} writeb($i62, $p63);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i54);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} net2272_write($p65, 34, $i67);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i31, $p32 := $i16, $p1;
    goto $bb7;

  $bb7:
    call $p33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i31, $p32, $p44, $i45 := net2272_write_packet_loop_$bb7($p7, $p33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i31, $p32, $p44, $i45);
    goto $bb7_last;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(1, 2));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.1, $p32);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p7);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} writew($i36, $p37);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i31, 2);
    call {:si_unique_call 858} {:cexpr "count"} boogie_si_record_i32($i38);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i39 := $ugt.i32($i38, 1);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i42 := ldv__builtin_expect($i41, 1);
    call {:si_unique_call 860} {:cexpr "tmp___4"} boogie_si_record_i64($i42);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p44, $i45 := $p33, $i38;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p29, $i30 := $p44, $i45;
    goto $bb6;

  $bb9:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i31, $p32 := $i38, $p33;
    goto $bb9_dummy;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 278482);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} __list_del_entry($p0);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} INIT_LIST_HEAD($p0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    return;
}



const usb_gadget_unmap_request: ref;

axiom usb_gadget_unmap_request == $sub.ref(0, 279514);

procedure usb_gadget_unmap_request($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation usb_gadget_unmap_request($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} {:cexpr "usb_gadget_unmap_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    return;
}



const usb_gadget_giveback_request: ref;

axiom usb_gadget_giveback_request == $sub.ref(0, 280546);

procedure usb_gadget_giveback_request($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_gadget_giveback_request($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 281578);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 282610);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 283642);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 871} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 872} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const stop_activity: ref;

axiom stop_activity == $sub.ref(0, 284674);

procedure stop_activity($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.0, $M.9, $M.10;



implementation stop_activity($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} net2272_usb_reset($p0);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} net2272_dequeue_all($p8);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(1, 112));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} net2272_dequeue_all($p18);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(2, 112));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} net2272_dequeue_all($p21);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(3, 112));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} net2272_dequeue_all($p24);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p6);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} net2272_usb_reinit($p0);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_spin_unlock_101($p11);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1));
    call {:si_unique_call 877} devirtbounce.7($p13, $p14);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} ldv_spin_lock_102($p15);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const net2272_ep0_start: ref;

axiom net2272_ep0_start == $sub.ref(0, 285706);

procedure net2272_ep0_start($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_ep0_start($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} net2272_ep_write($p2, 15, $sub.i8(0, 124));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} net2272_ep_write($p2, 14, 72);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i8($i4, 1);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, 1);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 3);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 34);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} net2272_write($p0, 24, $i14);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} net2272_write($p0, 32, 97);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} net2272_write($p0, 33, 84);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    return;
}



const usb_gadget_udc_reset: ref;

axiom usb_gadget_udc_reset == $sub.ref(0, 286738);

procedure usb_gadget_udc_reset($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_gadget_udc_reset($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    return;
}



const net2272_dequeue_all: ref;

axiom net2272_dequeue_all == $sub.ref(0, 287770);

procedure net2272_dequeue_all($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation net2272_dequeue_all($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 4097));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 4096);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i5);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i7 := list_empty($p6);
    call {:si_unique_call 888} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p10, $p11, $p12, $p13, $i14, $i15 := net2272_dequeue_all_loop_$bb4($p0, $p6, $p10, $p11, $p12, $p13, $i14, $i15);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} net2272_done($p0, $p13, $sub.i32(0, 108));
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i14 := list_empty($p6);
    call {:si_unique_call 891} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6_dummy;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272 == $sub.ref(0, 288802);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i0 := $M.16;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i3 := $M.16;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_assume($i5);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 894} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_net2272"} boogie_si_record_i32(2);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 289834);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} _raw_spin_lock($p2);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 290866);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock == $sub.ref(0, 291898);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 897} __VERIFIER_error();
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const net2272_ep_reset: ref;

axiom net2272_ep_reset == $sub.ref(0, 292930);

procedure net2272_ep_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_ep_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $0.ref);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} INIT_LIST_HEAD($p2);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} usb_ep_set_maxpacket_limit($p3, $sub.i32(0, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, net2272_ep_ops);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} net2272_ep_write($p0, 11, 0);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($sub.i8(0, 124));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} net2272_ep_write($p0, 15, $i7);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i15 := 80;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} net2272_ep_write($p0, 14, $i17);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} net2272_ep_write($p0, 6, 31);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} net2272_ep_write($p0, 7, $sub.i8(0, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32(80);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 3);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 902} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const usb_ep_set_maxpacket_limit: ref;

axiom usb_ep_set_maxpacket_limit == $sub.ref(0, 293962);

procedure usb_ep_set_maxpacket_limit($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation usb_ep_set_maxpacket_limit($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} {:cexpr "usb_ep_set_maxpacket_limit:arg:maxpacket_limit"} boogie_si_record_i32($i1);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(42, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p3, $i2);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i1);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p5, $i4);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    return;
}



const net2272_set_fifo_mode: ref;

axiom net2272_set_fifo_mode == $sub.ref(0, 294994);

procedure net2272_set_fifo_mode($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_set_fifo_mode($p0: ref, $i1: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i8;
  var $p15: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p29: ref;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p53: ref;
  var $p55: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $p73: ref;
  var $p75: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $p104: ref;
  var $p106: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} {:cexpr "net2272_set_fifo_mode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i2 := net2272_read($p0, 34);
    call {:si_unique_call 909} {:cexpr "tmp___0"} boogie_si_record_i8($i2);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 63);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    call {:si_unique_call 910} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i1, 6);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i8);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i6, $i9);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    call {:si_unique_call 911} {:cexpr "tmp"} boogie_si_record_i8($i11);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} net2272_write($p0, 34, $i13);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} INIT_LIST_HEAD($p15);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(1, 112)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} list_add_tail($p19, $p21);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, 0);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i1, 1);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i1, 2);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i1, 3);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(3, 112)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} list_add_tail($p104, $p106);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(3, 112)), $mul.ref(106, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.1, $p110);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, $sub.i32(0, 4096));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i112, 512);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p110, $i113);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(1, 112)), $mul.ref(106, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.1, $p97);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, $sub.i32(0, 4096));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i99, 1024);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p97, $i100);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(2, 112)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} list_add_tail($p73, $p75);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(2, 112)), $mul.ref(106, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32(1024);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.1, $p79);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i80, 4095);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i81, $sub.i32(0, 4096));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i83, $i82);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p79, $i84);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(1, 112)), $mul.ref(106, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32(1024);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p88);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i89, 4095);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i90, $sub.i32(0, 4096));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i93 := $or.i32($i92, $i91);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p88, $i93);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(2, 112)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} list_add_tail($p53, $p55);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(1, 112)), $mul.ref(106, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.1, $p59);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, $sub.i32(0, 4096));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, 1024);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p59, $i62);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(2, 112)), $mul.ref(106, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.1, $p66);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, $sub.i32(0, 4096));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, 512);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p66, $i69);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(2, 112)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} list_add_tail($p29, $p31);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(2, 112)), $mul.ref(106, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32(512);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p35);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i36, 4095);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i37, $sub.i32(0, 4096));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, $i38);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p35, $i40);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(1, 112)), $mul.ref(106, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32(512);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p44);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i45, 4095);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i46, $sub.i32(0, 4096));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i48, $i47);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, $i49);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    goto $bb18;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 296026);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} __list_add($p0, $p3, $p1);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 297058);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 298090);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 921} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 922} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p5 := external_alloc();
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_ioremap_nocache_134: ref;

axiom ldv_ioremap_nocache_134 == $sub.ref(0, 299122);

procedure ldv_ioremap_nocache_134($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_ioremap_nocache_134($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} {:cexpr "ldv_ioremap_nocache_134:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    call {:si_unique_call 925} {:cexpr "ldv_ioremap_nocache_134:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p2 := ldv_linux_arch_io_io_mem_remap();
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 300154);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iounmap_135: ref;

axiom ldv_iounmap_135 == $sub.ref(0, 301186);

procedure ldv_iounmap_135($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_iounmap_135($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_io_mem_remap: ref;

axiom ldv_linux_arch_io_io_mem_remap == $sub.ref(0, 302218);

procedure ldv_linux_arch_io_io_mem_remap() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_linux_arch_io_io_mem_remap() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $p0 := ldv_undef_ptr();
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $M.2 := $i4;
    call {:si_unique_call 930} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 303250);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 931} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 932} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_ioremap_nocache_132: ref;

axiom ldv_ioremap_nocache_132 == $sub.ref(0, 304282);

procedure ldv_ioremap_nocache_132($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_ioremap_nocache_132($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} {:cexpr "ldv_ioremap_nocache_132:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    call {:si_unique_call 934} {:cexpr "ldv_ioremap_nocache_132:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $p2 := ldv_linux_arch_io_io_mem_remap();
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_iounmap_133: ref;

axiom ldv_iounmap_133 == $sub.ref(0, 305314);

procedure ldv_iounmap_133($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_iounmap_133($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 306346);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(4294967295, $i1);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 307378);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 308410);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 940} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $p2 := ldv_kzalloc($i0, $i1);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 309442);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 310474);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    return;
}



const ldv_kzalloc: ref;

axiom ldv_kzalloc == $sub.ref(0, 311506);

procedure ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} {:cexpr "ldv_kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 943} {:cexpr "ldv_kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} ldv_check_alloc_flags($i1);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $p2 := ldv_zalloc($i0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} ldv_after_alloc($p2);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 312538);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 313570);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $p1 := ldv_calloc(1, $i0);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 314602);

procedure ldv_after_alloc($p0: ref);
  free requires assertsPassed;



implementation ldv_after_alloc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    return;
}



const ldv_calloc: ref;

axiom ldv_calloc == $sub.ref(0, 315634);

procedure ldv_calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} {:cexpr "ldv_calloc:arg:nmemb"} boogie_si_record_i64($i0);
    call {:si_unique_call 953} {:cexpr "ldv_calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i2 := ldv_undef_int();
    call {:si_unique_call 955} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $p4 := calloc($i0, $i1);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} ldv_assume($i7);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $i8 := ldv_is_err($p4);
    call {:si_unique_call 959} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} ldv_assume($i10);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 316666);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 963} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 317698);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i1 := $M.17;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 318730);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 968} __VERIFIER_error();
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 319762);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 970} __VERIFIER_error();
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 320794);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(4294967295, $i0);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const net2272_plat_probe: ref;

axiom net2272_plat_probe == $sub.ref(0, 321826);

procedure net2272_plat_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.2, $CurrAddr, assertsPassed, $M.0, $M.16, $M.9, $M.10;



implementation net2272_plat_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i24;
  var $i61: i24;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i24;
  var $i86: i24;
  var $i87: i24;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i8;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i97: i32;
  var $i71: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $p3 := platform_get_resource($p0, 1024, 0);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $p4 := platform_get_resource($p0, 512, 0);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $p5 := platform_get_resource($p0, 4096, 0);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p4);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.1, $p13);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $p16 := net2272_probe_init($p12, $i15);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i18 := IS_ERR($p17);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 980} {:cexpr "tmp___0"} boogie_si_record_i8($i19);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i25);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 1);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.1, $p29);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 2);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.1, $p33);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 4);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 8);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.1, $p41);
    call {:si_unique_call 983} {:cexpr "base"} boogie_si_record_i64($i42);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i43 := resource_size($p4);
    call {:si_unique_call 985} {:cexpr "len"} boogie_si_record_i64($i43);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p5);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $p50 := __request_region(iomem_resource, $i42, $i43, driver_name, 0);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p72 := ldv_ioremap_nocache_141($i42, $i43);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p16, $mul.ref(0, 2160)), $mul.ref(2136, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p74, $p72);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p16, $mul.ref(0, 2160)), $mul.ref(2136, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i98 := net2272_probe_fin($p16, 8);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 996} {:cexpr "ret"} boogie_si_record_i32($i98);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p16);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} platform_set_drvdata($p0, $p100);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i101 := net2272_read($p16, 34);
    call {:si_unique_call 1000} {:cexpr "tmp___5"} boogie_si_record_i8($i101);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i101);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 32);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p106 := (if $i105 == 1 then .str else .str.89);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} _dev_info.ref.ref.ref($p102, .str.88, $p106);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb40:
    assume $i99 == 1;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p16, $mul.ref(0, 2160)), $mul.ref(2136, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.1, $p107);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} ldv_iounmap_142($p109);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i97 := $i98;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __release_region(iomem_resource, $i42, $i43);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i71 := $i97;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i11 := $i71;
    goto $bb6;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i78 == 1;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p79, .str.1);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p80, .str.86);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p81, .str.43);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p82, .str.65);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i85 := $load.i24($M.7, $p84);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i86 := $and.i24($i85, $sub.i24(0, 262144));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i87 := $or.i24($i86, 2641);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p84, $i87);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p88, 0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.8, $p89);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i64($i90);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i92 := $and.i64($i91, 1);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i93 := ldv__builtin_expect($i92, 0);
    call {:si_unique_call 992} {:cexpr "tmp___4"} boogie_si_record_i64($i93);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32(0, 14);
    goto $bb38;

  $bb35:
    assume $i94 == 1;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p16, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} __dynamic_dev_dbg.ref.ref.ref($p2, $p96, .str.65);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p53, .str.1);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p54, .str.86);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p55, .str.43);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p56, .str.87);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i59 := $load.i24($M.7, $p58);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i60 := $and.i24($i59, $sub.i24(0, 262144));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i61 := $or.i24($i60, 2635);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p58, $i61);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p62, 0);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.8, $p63);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 1);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 988} {:cexpr "tmp___1"} boogie_si_record_i64($i67);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32(0, 16);
    goto $bb31;

  $bb28:
    assume $i68 == 1;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p16, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} __dynamic_dev_dbg.ref.ref.ref($p1, $p70, .str.87);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.1, $p46);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p16, $mul.ref(0, 2160)), $mul.ref(2128, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p49, $i48);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p16);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i22 := PTR_ERR($p21);
    call {:si_unique_call 982} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i11 := $i23;
    goto $bb6;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} dev_err.ref.ref($p10, .str.85);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const net2272_plat_remove: ref;

axiom net2272_plat_remove == $sub.ref(0, 322858);

procedure net2272_plat_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation net2272_plat_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} net2272_remove($p2);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(1440, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i5 := resource_size($p4);
    call {:si_unique_call 1005} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(1440, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} __release_region(iomem_resource, $i9, $i5);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} kfree($p10);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 323890);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const resource_size: ref;

axiom resource_size == $sub.ref(0, 324922);

procedure resource_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation resource_size($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, $p1);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64($i2, $i4);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const platform_get_resource: ref;

axiom platform_get_resource == $sub.ref(0, 325954);

procedure platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} {:cexpr "platform_get_resource:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1010} {:cexpr "platform_get_resource:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $p3 := external_alloc();
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_ioremap_nocache_141: ref;

axiom ldv_ioremap_nocache_141 == $sub.ref(0, 326986);

procedure ldv_ioremap_nocache_141($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_ioremap_nocache_141($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} {:cexpr "ldv_ioremap_nocache_141:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    call {:si_unique_call 1013} {:cexpr "ldv_ioremap_nocache_141:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $p2 := ldv_linux_arch_io_io_mem_remap();
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 328018);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} dev_set_drvdata($p2, $p1);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iounmap_142: ref;

axiom ldv_iounmap_142 == $sub.ref(0, 329050);

procedure ldv_iounmap_142($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_iounmap_142($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const net2272_enable: ref;

axiom net2272_enable == $sub.ref(0, 330082);

procedure net2272_enable($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $CurrAddr, assertsPassed;



implementation net2272_enable($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i64: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i8;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i8;
  var $i86: i32;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i8;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i8;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i8;
  var $i103: i32;
  var $i104: i8;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i8;
  var $i120: i8;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i8;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i8;
  var $i130: i32;
  var $i131: i8;
  var $i132: i8;
  var $i133: i32;
  var $i134: i32;
  var $i135: i8;
  var $i136: i32;
  var $i137: i8;
  var $p138: ref;
  var $i139: i8;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i24;
  var $i147: i24;
  var $i148: i24;
  var $p149: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i64;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $i156: i8;
  var $p157: ref;
  var $i158: i8;
  var $i159: i32;
  var $i160: i8;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i32;
  var $p172: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, $p2i.ref.i64(ep0name));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 5);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i26 == 1);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i31 := usb_endpoint_maxp($p1);
    call {:si_unique_call 1019} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 8191);
    call {:si_unique_call 1020} {:cexpr "max"} boogie_si_record_i32($i32);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p22, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p33);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i32);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 32767);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p38, $i37);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p39, $p1);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, $sub.i32(0, 4097));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p41, $i43);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, $sub.i32(0, 8193));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, $i47);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i32);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} net2272_ep_write($p3, 40, $i50);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i32, 65280);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i52 := $lshr.i32($i51, 8);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} net2272_ep_write($p3, 41, $i55);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} net2272_ep_write($p3, 7, $sub.i8(0, 128));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i56 := usb_endpoint_type($p1);
    call {:si_unique_call 1026} {:cexpr "tmp___1"} boogie_si_record_i32($i56);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    call {:si_unique_call 1027} {:cexpr "tmp"} boogie_si_record_i8($i57);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i58 := usb_endpoint_xfer_bulk($p1);
    call {:si_unique_call 1029} {:cexpr "tmp___2"} boogie_si_record_i32($i58);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $i71 := usb_endpoint_xfer_isoc($p1);
    call {:si_unique_call 1032} {:cexpr "tmp___3"} boogie_si_record_i32($i71);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i74);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p76);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i77, 1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i80 := $shl.i32($i79, 15);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i78, $sub.i32(0, 32769));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i81, $i80);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p76, $i82);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i57);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i84 := $shl.i32($i83, 5);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    call {:si_unique_call 1033} {:cexpr "tmp"} boogie_si_record_i8($i85);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i86 := $sext.i8.i32($i85);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.1, $p87);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i89 := $sext.i8.i32($i88);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 15);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i86, $i90);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i8($i91);
    call {:si_unique_call 1034} {:cexpr "tmp"} boogie_si_record_i8($i92);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i93 := usb_endpoint_dir_in($p1);
    call {:si_unique_call 1036} {:cexpr "tmp___4"} boogie_si_record_i32($i93);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i94 := $sext.i8.i32($i92);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i95 := $shl.i32($i93, 4);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i97 := $sext.i8.i32($i96);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i94, $i97);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    call {:si_unique_call 1037} {:cexpr "tmp"} boogie_si_record_i8($i99);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i100, 128);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    call {:si_unique_call 1038} {:cexpr "tmp"} boogie_si_record_i8($i102);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i103 := usb_endpoint_dir_in($p1);
    call {:si_unique_call 1040} {:cexpr "tmp___5"} boogie_si_record_i32($i103);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i104);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.1, $p106);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i107, 1);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i110 := $shl.i32($i109, 14);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i108, $sub.i32(0, 16385));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i112 := $or.i32($i111, $i110);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p106, $i112);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p3);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p113, $mul.ref(106, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.1, $p114);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i102);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i8($i118);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} net2272_ep_write($p3, 42, $i119);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i120 := net2272_read($p22, 32);
    call {:si_unique_call 1044} {:cexpr "tmp___6"} boogie_si_record_i8($i120);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.1, $p121);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i124 := $shl.i32(1, $i123);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i8($i124);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i126 := $sext.i8.i32($i125);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i127 := $sext.i8.i32($i120);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i128 := $or.i32($i126, $i127);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i8($i128);
    call {:si_unique_call 1045} {:cexpr "tmp"} boogie_si_record_i8($i129);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i8($i130);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} net2272_write($p22, 32, $i131);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i132 := net2272_ep_read($p3, 11);
    call {:si_unique_call 1048} {:cexpr "tmp___7"} boogie_si_record_i8($i132);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i134 := $or.i32($i133, 12);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i8($i134);
    call {:si_unique_call 1049} {:cexpr "tmp"} boogie_si_record_i8($i135);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i136);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} net2272_ep_write($p3, 11, $i137);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.1, $p138);
    call {:si_unique_call 1051} {:cexpr "tmp"} boogie_si_record_i8($i139);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p140, .str.1);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p141, .str.57);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p142, .str.43);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p143, .str.58);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i146 := $load.i24($M.7, $p145);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i147 := $and.i24($i146, $sub.i24(0, 262144));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i148 := $or.i24($i147, 256);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p145, $i148);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p149, 0);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.8, $p150);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i64($i151);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i153 := $and.i64($i152, 1);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i154 := ldv__builtin_expect($i153, 0);
    call {:si_unique_call 1053} {:cexpr "tmp___10"} boogie_si_record_i64($i154);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p22, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} ldv_spin_unlock_irqrestore_97($p172, $u3);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i155 == 1;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i156 := net2272_ep_read($p3, 42);
    call {:si_unique_call 1055} {:cexpr "tmp___8"} boogie_si_record_i8($i156);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.1, $p157);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i8($i159);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p161 := type_string($i160);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p22, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.1, $p162);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.1, $p164);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i32($i139);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i167 := $and.i32($i166, 15);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i168 := $sext.i8.i32($i139);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i169 := $slt.i32($i168, 0);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p170 := (if $i169 == 1 then .str.25 else .str.26);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i156);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref.ref.i32.i32($p2, $p163, .str.58, $p165, $i167, $p170, $p161, $i32, $i171);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i117 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} net2272_ep_write($p3, 15, $sub.i8(0, 128));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb20:
    assume $i59 == 1;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 3);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.1, $p66);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 2);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i68 == 1;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i32($i32, 64);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb30;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p22, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} ldv_spin_unlock_irqrestore_97($p70, $u3);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 34);
    goto $bb12;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i63 == 1;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i32, 512);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb24;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb26;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 108);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const net2272_disable: ref;

axiom net2272_disable == $sub.ref(0, 331114);

procedure net2272_disable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation net2272_disable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, $p2i.ref.i64(ep0name));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_99($p15);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} net2272_dequeue_all($p1);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} net2272_ep_reset($p1);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_spin_unlock_irqrestore_97($p18, $u3);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const net2272_alloc_request: ref;

axiom net2272_alloc_request == $sub.ref(0, 332146);

procedure net2272_alloc_request($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation net2272_alloc_request($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} {:cexpr "net2272_alloc_request:arg:gfp_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $p5 := kzalloc(112, $i1);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} INIT_LIST_HEAD($p9);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p4 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const net2272_free_request: ref;

axiom net2272_free_request == $sub.ref(0, 333178);

procedure net2272_free_request($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation net2272_free_request($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var vslice_dummy_var_9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i8 := list_empty($p7);
    call {:si_unique_call 1067} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1068} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i10);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 1070} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} vslice_dummy_var_9 := ldv__builtin_expect($i18, 0);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p6);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} kfree($p20);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} warn_slowpath_null(.str.43, 359);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const net2272_queue: ref;

axiom net2272_queue == $sub.ref(0, 334210);

procedure net2272_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $CurrAddr, assertsPassed, $M.2, $M.0, $M.9, $M.10;



implementation net2272_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i24;
  var $i93: i24;
  var $i94: i24;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i114: i8;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i113: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $i131: i32;
  var $i132: i64;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i64;
  var $i142: i64;
  var $i143: i1;
  var $p144: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1075} {:cexpr "net2272_queue:arg:gfp_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i17 := list_empty($p16);
    call {:si_unique_call 1077} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i35 == 1);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i40 := $M.14;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p31, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_103($p57);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p58, $sub.i32(0, 115));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(84, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p59, 0);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i61 := list_empty($p60);
    call {:si_unique_call 1082} {:cexpr "tmp___3"} boogie_si_record_i32($i61);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p128 := $p1;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i129, 0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i131 := $zext.i1.i32($i130);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i131);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i133 := ldv__builtin_expect($i132, 1);
    call {:si_unique_call 1106} {:cexpr "tmp___4"} boogie_si_record_i64($i133);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i138 := list_empty($p137);
    call {:si_unique_call 1109} {:cexpr "tmp___5"} boogie_si_record_i32($i138);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 0);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i140 := $zext.i1.i32($i139);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i140);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i142 := ldv__builtin_expect($i141, 1);
    call {:si_unique_call 1111} {:cexpr "tmp___6"} boogie_si_record_i64($i142);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p31, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} ldv_spin_unlock_irqrestore_97($p144, $u3);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i143 == 1;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} net2272_ep_write($p19, 14, $sub.i8(0, 128));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume $i134 == 1;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p128, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} list_add_tail($p135, $p136);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb37:
    assume $i62 == 1;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p19);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(106, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.1, $p64);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb39;

  $bb40:
    assume $i67 == 1;
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.1, $p68);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i75 := net2272_ep_read($p19, 6);
    call {:si_unique_call 1086} {:cexpr "s"} boogie_si_record_i8($i75);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 64);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i105 := net2272_kick_dma($p19, $p4);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    call {:si_unique_call 1096} {:cexpr "status"} boogie_si_record_i32($i105);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i105, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $p127 := $p1;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p128 := $p127;
    goto $bb76;

  $bb61:
    assume $i106 == 1;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p19);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p107, $mul.ref(106, 1));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.1, $p108);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i111 == 1);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $i114 := net2272_ep_read($p19, 6);
    call {:si_unique_call 1100} {:cexpr "s"} boogie_si_record_i8($i114);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 64);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i119 := 0;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i113 := $i119;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i113, 0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i121 := $zext.i1.i32($i120);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64($i121);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i123 := ldv__builtin_expect($i122, 0);
    call {:si_unique_call 1102} {:cexpr "tmp___2"} boogie_si_record_i64($i123);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $p126 := $p1;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p127 := $p126;
    goto $bb75;

  $bb69:
    assume $i124 == 1;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i125 := $sgt.i32($i113, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p126 := $0.ref;
    goto $bb74;

  $bb71:
    assume $i125 == 1;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb66:
    assume $i117 == 1;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $i118 := net2272_read_fifo($p19, $p4);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    call {:si_unique_call 1104} {:cexpr "status"} boogie_si_record_i32($i118);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i119 := $i118;
    goto $bb68;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i111 == 1;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i112 := net2272_write_fifo($p19, $p4);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    call {:si_unique_call 1098} {:cexpr "status"} boogie_si_record_i32($i112);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i113 := $i112;
    goto $bb65;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i78 == 1;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i75);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 32);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb51:
    assume $i81 == 1;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i82 := net2272_ep_read($p19, 7);
    call {:si_unique_call 1088} {:cexpr "tmp___1"} boogie_si_record_i8($i82);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 64);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb53:
    assume $i85 == 1;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p86, .str.1);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p87, .str.55);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p88, .str.43);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p89, .str.56);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i92 := $load.i24($M.7, $p91);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i93 := $and.i24($i92, $sub.i24(0, 262144));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i94 := $or.i24($i93, 878);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p91, $i94);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p95, 0);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.8, $p96);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i64($i97);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i99 := $and.i64($i98, 1);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i100 := ldv__builtin_expect($i99, 0);
    call {:si_unique_call 1090} {:cexpr "tmp___0"} boogie_si_record_i64($i100);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i104 := net2272_read_fifo($p19, $p4);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    call {:si_unique_call 1093} {:cexpr "status"} boogie_si_record_i32($i104);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} net2272_ep_write($p19, 6, 32);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i101 == 1;
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p31, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.1, $p102);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} __dynamic_dev_dbg.ref.ref.ref($p3, $p103, .str.56);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb42:
    assume $i71 == 1;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.1, $p72);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb44;

  $bb45:
    assume $i74 == 1;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} net2272_done($p19, $p4, 0);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i41 == 1;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p19);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(107, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb30;

  $bb31:
    assume $i46 == 1;
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p31, $mul.ref(0, 2160)), $mul.ref(0, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i51 := $lshr.i32($i50, 14);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 1);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i55 := usb_gadget_map_request($p47, $p1, $i54);
    call {:si_unique_call 1079} {:cexpr "status"} boogie_si_record_i32($i55);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i56 == 1;
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i15 := $i55;
    goto $bb8;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 108);
    goto $bb8;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb23;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb18;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb14;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const net2272_dequeue: ref;

axiom net2272_dequeue == $sub.ref(0, 335242);

procedure net2272_dequeue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $CurrAddr, assertsPassed;



implementation net2272_dequeue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p43: ref;
  var $p58: ref;
  var $p42: ref;
  var $p49: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i24;
  var $i80: i24;
  var $i81: i24;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_105($p19);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i32($i22, 12);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 1);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    call {:si_unique_call 1115} {:cexpr "stopped"} boogie_si_record_i32($i26);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, $sub.i32(0, 4097));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 4096);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, $i31);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p35, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(88, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i38, $i40);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p42 := $p36;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p49 := $p42;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p49, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p1);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i60, $i61);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p49, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i72 := $eq.i64($i69, $i71);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i26);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i95);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.1, $p97);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i98, 1);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i101 := $shl.i32($i100, 12);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i99, $sub.i32(0, 4097));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i102, $i101);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p97, $i103);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.1, $p104);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ldv_spin_unlock_irqrestore_97($p106, $u3);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i72 == 1;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p73, .str.1);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p74, .str.53);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p75, .str.43);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p76, .str.54);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i79 := $load.i24($M.7, $p78);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i80 := $and.i24($i79, $sub.i24(0, 262144));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i81 := $or.i24($i80, 971);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p78, $i81);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p82, 0);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.8, $p83);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i64($i84);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i86 := $and.i64($i85, 1);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 1118} {:cexpr "tmp"} boogie_si_record_i64($i87);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} net2272_done($p3, $p49, $sub.i32(0, 104));
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i88 == 1;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.1, $p89);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.1, $p91);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.1, $p93);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p92, .str.54, $p94);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb25:
    assume $i62 == 1;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} ldv_spin_unlock_irqrestore_97($p65, $u3);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb11;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p43 := $p36;
    goto $bb16;

  $bb16:
    call $p44, $i45, $i46, $i47, $p48, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p43, $p58 := net2272_dequeue_loop_$bb16($p1, $i40, $p44, $i45, $i46, $i47, $p48, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p43, $p58);
    goto $bb16_last;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p1);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i45, $i46);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p48 := $p43;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 112)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p53, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(88, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, $i40);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p58 := $p54;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p42 := $p58;
    goto $bb15;

  $bb22:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $p43 := $p54;
    goto $bb22_dummy;

  $bb18:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p49 := $p48;
    goto $bb20;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb11;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb22_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5415;
}



const net2272_set_halt: ref;

axiom net2272_set_halt == $sub.ref(0, 336274);

procedure net2272_set_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation net2272_set_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} {:cexpr "net2272_set_halt:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i2 := net2272_set_halt_and_wedge($p0, $i1, 0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    call {:si_unique_call 1124} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const net2272_set_wedge: ref;

axiom net2272_set_wedge == $sub.ref(0, 337306);

procedure net2272_set_wedge($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation net2272_set_wedge($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, $p2i.ref.i64(ep0name));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i8 := net2272_set_halt_and_wedge($p0, 1, 1);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 1126} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const net2272_fifo_status: ref;

axiom net2272_fifo_status == $sub.ref(0, 338338);

procedure net2272_fifo_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_fifo_status($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i8;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i16;
  var $i30: i8;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i16;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i16;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i16;
  var $i58: i16;
  var $i59: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i18 == 1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i25 := net2272_ep_read($p1, 13);
    call {:si_unique_call 1128} {:cexpr "tmp"} boogie_si_record_i8($i25);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i16($i25);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32($i27, 8);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    call {:si_unique_call 1129} {:cexpr "avail"} boogie_si_record_i16($i29);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i30 := net2272_ep_read($p1, 12);
    call {:si_unique_call 1131} {:cexpr "tmp___0"} boogie_si_record_i8($i30);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i29);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i16($i30);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i31, $i33);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    call {:si_unique_call 1132} {:cexpr "avail"} boogie_si_record_i16($i35);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 4095);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i36, $i42);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p1);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(106, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i58 := $i35;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i12 := $i59;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 4095);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i35);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i54, $i55);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    call {:si_unique_call 1133} {:cexpr "avail"} boogie_si_record_i16($i57);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb22;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 75);
    goto $bb9;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 108);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb12;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const net2272_fifo_flush: ref;

axiom net2272_fifo_flush == $sub.ref(0, 339370);

procedure net2272_fifo_flush($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_fifo_flush($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i17 == 1);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} net2272_ep_write($p1, 7, $sub.i8(0, 128));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb12;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const net2272_set_halt_and_wedge: ref;

axiom net2272_set_halt_and_wedge == $sub.ref(0, 340402);

procedure net2272_set_halt_and_wedge($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation net2272_set_halt_and_wedge($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i51: i1;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i8;
  var $i61: i8;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i50: i32;
  var $i41: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} {:cexpr "net2272_set_halt_and_wedge:arg:value"} boogie_si_record_i32($i1);
    call {:si_unique_call 1136} {:cexpr "net2272_set_halt_and_wedge:arg:wedged"} boogie_si_record_i32($i2);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i20 == 1);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_108($p37);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i39 := list_empty($p38);
    call {:si_unique_call 1141} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i40 == 1);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p3);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(106, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i1, 0);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i51 == 1);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} clear_halt($p3);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.1, $p69);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, $sub.i32(0, 8193));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p69, $i71);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i41 := $i50;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} ldv_spin_unlock_irqrestore_97($p74, $u3);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i14 := $i41;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i51 == 1;
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.1, $p52);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i55 == 1);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} set_halt($p3);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i2, 0);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i62 == 1;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.1, $p64);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, $sub.i32(0, 8193));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i66, 8192);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p64, $i67);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i55 == 1;
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i60 := $and.i8($i59, $sub.i8(0, 2));
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i61 := $or.i8($i60, 1);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p58, $i61);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb26:
    assume $i46 == 1;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i1, 0);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb28;

  $bb29:
    assume $i47 == 1;
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i48 := net2272_fifo_status($p0);
    call {:si_unique_call 1144} {:cexpr "tmp___0"} boogie_si_record_i32($i48);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i49 == 1);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i49 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 11);
    goto $bb35;

  $bb23:
    assume $i40 == 1;
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 11);
    goto $bb25;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i33 := usb_endpoint_xfer_isoc($p32);
    call {:si_unique_call 1138} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i34 == 1;
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb9;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 108);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb12;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const usb_endpoint_xfer_isoc: ref;

axiom usb_endpoint_xfer_isoc == $sub.ref(0, 341434);

procedure usb_endpoint_xfer_isoc($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_isoc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_108: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_108 == $sub.ref(0, 342466);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_108($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_108($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irqrestore_97: ref;

axiom ldv_spin_unlock_irqrestore_97 == $sub.ref(0, 343498);

procedure ldv_spin_unlock_irqrestore_97($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_spin_unlock_irqrestore_97($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} {:cexpr "ldv_spin_unlock_irqrestore_97:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_net2272();
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 344530);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 345562);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    return;
}



const __ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom __ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 346594);

procedure __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref);
  free requires assertsPassed;



implementation __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_105: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_105 == $sub.ref(0, 347626);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_105($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_105($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const usb_gadget_map_request: ref;

axiom usb_gadget_map_request == $sub.ref(0, 348658);

procedure usb_gadget_map_request($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_gadget_map_request($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1157} {:cexpr "usb_gadget_map_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1158} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1159} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_103: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_103 == $sub.ref(0, 349690);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_103($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_103($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 350722);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_99: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_99 == $sub.ref(0, 351754);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_99($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_99($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 352786);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96 == $sub.ref(0, 353818);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const usb_endpoint_type: ref;

axiom usb_endpoint_type == $sub.ref(0, 354850);

procedure usb_endpoint_type($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_type($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 355882);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 356914);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const type_string: ref;

axiom type_string == $sub.ref(0, 357946);

procedure type_string($i0: i8) returns ($r: ref);
  free requires assertsPassed;



implementation type_string($i0: i8) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} {:cexpr "type_string:arg:bmAttributes"} boogie_si_record_i8($i0);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 3);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 2);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 3);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i0);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 3);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p10 := .str.36;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p10 := .str.35;
    goto $bb14;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := .str.34;
    goto $bb14;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := .str.33;
    goto $bb14;
}



const net2272_get_frame: ref;

axiom net2272_get_frame == $sub.ref(0, 358978);

procedure net2272_get_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation net2272_get_frame($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i11: i8;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $p17: ref;
  var $i18: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_110($p5);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $i6 := net2272_read($p4, 27);
    call {:si_unique_call 1170} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i16($i6);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i8, 8);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    call {:si_unique_call 1171} {:cexpr "ret"} boogie_si_record_i16($i10);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i11 := net2272_read($p4, 26);
    call {:si_unique_call 1173} {:cexpr "tmp___0"} boogie_si_record_i8($i11);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i10);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i16($i11);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i12, $i14);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    call {:si_unique_call 1174} {:cexpr "ret"} boogie_si_record_i16($i16);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} ldv_spin_unlock_irqrestore_97($p17, $u3);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i16);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i3 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 19);
    goto $bb3;
}



const net2272_wakeup: ref;

axiom net2272_wakeup == $sub.ref(0, 360010);

procedure net2272_wakeup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation net2272_wakeup($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112($p4);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $i5 := net2272_read($p3, 24);
    call {:si_unique_call 1178} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 2);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} ldv_spin_unlock_irqrestore_97($p9, $u3);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} net2272_write($p3, 25, 8);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const net2272_set_selfpowered: ref;

axiom net2272_set_selfpowered == $sub.ref(0, 361042);

procedure net2272_set_selfpowered($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_set_selfpowered($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i8;
  var $i10: i8;
  var $i11: i8;
  var $i12: i8;
  var $i13: i8;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} {:cexpr "net2272_set_selfpowered:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i1, 0);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(1560, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i10 := $and.i8($i7, 1);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i11 := $shl.i8($i10, 7);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i9, 127);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i13 := $or.i8($i12, $i11);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, $i13);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const net2272_pullup: ref;

axiom net2272_pullup == $sub.ref(0, 362074);

procedure net2272_pullup($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation net2272_pullup($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i8;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i21: i8;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} {:cexpr "net2272_pullup:arg:is_on"} boogie_si_record_i32($i1);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114($p6);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i7 := net2272_read($p5, 24);
    call {:si_unique_call 1185} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i1, 0);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i13 := $and.i8($i10, 1);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i14 := $shl.i8($i13, 1);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i12, $sub.i8(0, 3));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i16 := $or.i8($i15, $i14);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, $i16);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i1, 0);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i7);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 247);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    call {:si_unique_call 1187} {:cexpr "tmp"} boogie_si_record_i8($i24);
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i21);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} net2272_write($p5, 24, $i26);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} ldv_spin_unlock_irqrestore_97($p27, $u3);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i7);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 8);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 1186} {:cexpr "tmp"} boogie_si_record_i8($i20);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb7;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const net2272_start: ref;

axiom net2272_start == $sub.ref(0, 363106);

procedure net2272_start($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation net2272_start($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $i19: i8;
  var $p21: ref;
  var $p22: ref;
  var $i11: i32;
  var $p25: ref;
  var $p28: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 3);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p15, 0);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(1, 112)), $mul.ref(72, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p25, 0);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(2, 112)), $mul.ref(72, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p28, 0);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 2160)), $mul.ref(1656, 1)), $mul.ref(3, 112)), $mul.ref(72, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p31, 0);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 2160)), $mul.ref(2112, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 3));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i19 := $or.i8($i18, 2);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, $i19);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, $0.ref);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p22, $p1);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} net2272_ep0_start($p12);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const net2272_stop: ref;

axiom net2272_stop == $sub.ref(0, 364138);

procedure net2272_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.0, $M.9, $M.10;



implementation net2272_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120($p2);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} stop_activity($p1, $0.ref);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} ldv_spin_unlock_irqrestore_97($p3, $u3);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $0.ref);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120 == $sub.ref(0, 365170);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114 == $sub.ref(0, 366202);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112 == $sub.ref(0, 367234);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_110: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_110 == $sub.ref(0, 368266);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_110($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_110($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const registers_show: ref;

axiom registers_show == $sub.ref(0, 369298);

procedure registers_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation registers_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i8;
  var $i11: i8;
  var $i12: i8;
  var $i13: i8;
  var $i14: i8;
  var $i15: i64;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p64: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i8;
  var $i73: i64;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $i90: i8;
  var $i91: i8;
  var $i92: i8;
  var $i93: i64;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i8;
  var $p139: ref;
  var $i140: i8;
  var $i141: i8;
  var $i142: i8;
  var $i143: i8;
  var $i144: i64;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $i155: i8;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i8;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $i167: i64;
  var $i168: i64;
  var $p169: ref;
  var $i170: i8;
  var $i171: i8;
  var $i172: i8;
  var $i173: i64;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i64;
  var $i184: i64;
  var $p185: ref;
  var $i186: i8;
  var $i187: i32;
  var $i188: i32;
  var $i189: i8;
  var $i190: i8;
  var $i191: i32;
  var $i192: i32;
  var $i193: i8;
  var $i194: i32;
  var $i195: i32;
  var $i196: i8;
  var $i197: i32;
  var $p198: ref;
  var $i199: i32;
  var $p200: ref;
  var $i201: i64;
  var $i202: i32;
  var $i203: i32;
  var $i204: i64;
  var $i205: i64;
  var $p206: ref;
  var $i88: i32;
  var $p89: ref;
  var $p207: ref;
  var $i208: i64;
  var $i210: i64;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i64;
  var $i217: i1;
  var $i218: i8;
  var $i219: i8;
  var $i220: i8;
  var $i221: i64;
  var $p223: ref;
  var $p224: ref;
  var $i225: i32;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $i242: i32;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $i250: i32;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $i254: i32;
  var $i255: i32;
  var $i256: i1;
  var $p257: ref;
  var $i258: i32;
  var $i259: i32;
  var $i260: i32;
  var $i261: i64;
  var $p262: ref;
  var $i263: i32;
  var $i264: i32;
  var $i265: i8;
  var $p266: ref;
  var $i267: i8;
  var $i268: i8;
  var $i269: i8;
  var $i270: i8;
  var $i271: i64;
  var $i272: i32;
  var $i273: i32;
  var $i274: i32;
  var $i275: i32;
  var $i276: i32;
  var $i277: i32;
  var $i278: i32;
  var $i279: i32;
  var $p280: ref;
  var $p281: ref;
  var $i282: i8;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $i288: i8;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i292: i32;
  var $i293: i32;
  var $i294: i64;
  var $i295: i64;
  var $p296: ref;
  var $i297: i8;
  var $i298: i8;
  var $i299: i8;
  var $i300: i64;
  var $i301: i32;
  var $i302: i32;
  var $i303: i32;
  var $i304: i32;
  var $i305: i32;
  var $i306: i32;
  var $i307: i32;
  var $i308: i32;
  var $i309: i32;
  var $i310: i64;
  var $i311: i64;
  var $p312: ref;
  var $i313: i8;
  var $i314: i32;
  var $i315: i32;
  var $i316: i8;
  var $i317: i8;
  var $i318: i32;
  var $i319: i32;
  var $i320: i8;
  var $i321: i32;
  var $i322: i32;
  var $i323: i8;
  var $i324: i32;
  var $p325: ref;
  var $i326: i32;
  var $p327: ref;
  var $i328: i64;
  var $i329: i32;
  var $i330: i32;
  var $i331: i64;
  var $i332: i64;
  var $p333: ref;
  var $i334: i32;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $i341: i64;
  var $i342: i1;
  var $i343: i8;
  var $i344: i8;
  var $i345: i8;
  var $i346: i64;
  var $p348: ref;
  var $p349: ref;
  var $i350: i32;
  var $i351: i32;
  var $i352: i32;
  var $i353: i1;
  var $p354: ref;
  var $i355: i32;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $i359: i32;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $i363: i32;
  var $i364: i32;
  var $i365: i1;
  var $p366: ref;
  var $i367: i32;
  var $i368: i32;
  var $i369: i1;
  var $p370: ref;
  var $i371: i32;
  var $i372: i32;
  var $i373: i1;
  var $p374: ref;
  var $i375: i32;
  var $i376: i32;
  var $i377: i1;
  var $p378: ref;
  var $i379: i32;
  var $i380: i32;
  var $i381: i1;
  var $p382: ref;
  var $i383: i32;
  var $i384: i32;
  var $i385: i32;
  var $i386: i64;
  var $p387: ref;
  var $i388: i32;
  var $i389: i32;
  var $i390: i8;
  var $p391: ref;
  var $i392: i8;
  var $i393: i8;
  var $i394: i8;
  var $i395: i8;
  var $i396: i64;
  var $i397: i32;
  var $i398: i32;
  var $i399: i32;
  var $i400: i32;
  var $i401: i32;
  var $i402: i32;
  var $i403: i32;
  var $i404: i32;
  var $p405: ref;
  var $p406: ref;
  var $i407: i8;
  var $i408: i32;
  var $i409: i1;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $i413: i8;
  var $i414: i32;
  var $i415: i1;
  var $p416: ref;
  var $i417: i32;
  var $i418: i32;
  var $i419: i64;
  var $i420: i64;
  var $p421: ref;
  var $i422: i8;
  var $i423: i8;
  var $i424: i8;
  var $i425: i64;
  var $i426: i32;
  var $i427: i32;
  var $i428: i32;
  var $i429: i32;
  var $i430: i32;
  var $i431: i32;
  var $i432: i32;
  var $i433: i32;
  var $i434: i32;
  var $i435: i64;
  var $i436: i64;
  var $p437: ref;
  var $i438: i8;
  var $i439: i32;
  var $i440: i32;
  var $i441: i8;
  var $i442: i8;
  var $i443: i32;
  var $i444: i32;
  var $i445: i8;
  var $i446: i32;
  var $i447: i32;
  var $i448: i8;
  var $i449: i32;
  var $p450: ref;
  var $i451: i32;
  var $p452: ref;
  var $i453: i64;
  var $i454: i32;
  var $i455: i32;
  var $i456: i64;
  var $i457: i64;
  var $p458: ref;
  var $i459: i32;
  var $p460: ref;
  var $p461: ref;
  var $p462: ref;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $i466: i64;
  var $i467: i1;
  var $i468: i8;
  var $i469: i8;
  var $i470: i8;
  var $i471: i64;
  var $p473: ref;
  var $p474: ref;
  var $i475: i32;
  var $i476: i32;
  var $i477: i32;
  var $i478: i1;
  var $p479: ref;
  var $i480: i32;
  var $i481: i32;
  var $i482: i1;
  var $p483: ref;
  var $i484: i32;
  var $i485: i32;
  var $i486: i1;
  var $p487: ref;
  var $i488: i32;
  var $i489: i32;
  var $i490: i1;
  var $p491: ref;
  var $i492: i32;
  var $i493: i32;
  var $i494: i1;
  var $p495: ref;
  var $i496: i32;
  var $i497: i32;
  var $i498: i1;
  var $p499: ref;
  var $i500: i32;
  var $i501: i32;
  var $i502: i1;
  var $p503: ref;
  var $i504: i32;
  var $i505: i32;
  var $i506: i1;
  var $p507: ref;
  var $i508: i32;
  var $i509: i32;
  var $i510: i32;
  var $i511: i64;
  var $p512: ref;
  var $i513: i32;
  var $i514: i32;
  var $i515: i8;
  var $p516: ref;
  var $i517: i8;
  var $i518: i8;
  var $i519: i8;
  var $i520: i8;
  var $i521: i64;
  var $i522: i32;
  var $i523: i32;
  var $i524: i32;
  var $i525: i32;
  var $i526: i32;
  var $i527: i32;
  var $i528: i32;
  var $i529: i32;
  var $p530: ref;
  var $p531: ref;
  var $i532: i8;
  var $i533: i32;
  var $i534: i1;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $i538: i8;
  var $i539: i32;
  var $i540: i1;
  var $p541: ref;
  var $i542: i32;
  var $i543: i32;
  var $i544: i64;
  var $i545: i64;
  var $p546: ref;
  var $i547: i8;
  var $i548: i8;
  var $i549: i8;
  var $i550: i64;
  var $i551: i32;
  var $i552: i32;
  var $i553: i32;
  var $i554: i32;
  var $i555: i32;
  var $i556: i32;
  var $i557: i32;
  var $i558: i32;
  var $i559: i32;
  var $i560: i64;
  var $i561: i64;
  var $p562: ref;
  var $i563: i8;
  var $i564: i32;
  var $i565: i32;
  var $i566: i8;
  var $i567: i8;
  var $i568: i32;
  var $i569: i32;
  var $i570: i8;
  var $i571: i32;
  var $i572: i32;
  var $i573: i8;
  var $i574: i32;
  var $p575: ref;
  var $i576: i32;
  var $p577: ref;
  var $i578: i64;
  var $i579: i32;
  var $i580: i32;
  var $i209: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116($p5);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(2104, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i10 := net2272_read($p4, 3);
    call {:si_unique_call 1205} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $i11 := net2272_read($p4, 2);
    call {:si_unique_call 1207} {:cexpr "tmp___1"} boogie_si_record_i8($i11);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i12 := net2272_read($p4, 33);
    call {:si_unique_call 1209} {:cexpr "tmp___2"} boogie_si_record_i8($i12);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $i13 := net2272_read($p4, 32);
    call {:si_unique_call 1211} {:cexpr "tmp___3"} boogie_si_record_i8($i13);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i14 := net2272_read($p4, 34);
    call {:si_unique_call 1213} {:cexpr "tmp___4"} boogie_si_record_i8($i14);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64(4096);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(2114, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.1, $p16);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i14);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i13);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i12);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i11);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i10);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i24 := scnprintf.ref.i64.ref.ref.ref.i32.i32.i32.i32.i32.i32($p2, $i15, .str.3, driver_name, driver_vers, $i18, $i19, $i20, $i21, $i22, $i23);
    call {:si_unique_call 1215} {:cexpr "tmp___5"} boogie_si_record_i32($i24);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(4096, $i24);
    call {:si_unique_call 1216} {:cexpr "size"} boogie_si_record_i32($i25);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i24);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref($i26, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i28 := net2272_read($p4, 28);
    call {:si_unique_call 1218} {:cexpr "t1"} boogie_si_record_i8($i28);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i25);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i28);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i28);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 1);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, 1);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref(ep_name, $mul.ref(0, 32)), $mul.ref($i34, 8));
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.18, $p35);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i28);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 16);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p40 := (if $i39 == 1 then .str.5 else .str);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i28);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 32);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p44 := (if $i43 == 1 then .str.6 else .str);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i28);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 64);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p48 := (if $i47 == 1 then .str.7 else .str);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i49 := $sext.i8.i32($i28);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p51 := (if $i50 == 1 then .str.8 else .str);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i52 := scnprintf.ref.i64.ref.i32.ref.ref.ref.ref.ref($p27, $i29, .str.4, $i30, $p36, $p40, $p44, $p48, $p51);
    call {:si_unique_call 1220} {:cexpr "tmp___6"} boogie_si_record_i32($i52);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i25, $i52);
    call {:si_unique_call 1221} {:cexpr "size"} boogie_si_record_i32($i53);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i52);
    $i55 := $add.i64($i26, $i54);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p2, $mul.ref($i55, 1));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i57 := net2272_read($p4, 25);
    call {:si_unique_call 1223} {:cexpr "t1"} boogie_si_record_i8($i57);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 1);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $p70 := .str.12;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i71 := net2272_read($p4, 48);
    call {:si_unique_call 1225} {:cexpr "tmp___7"} boogie_si_record_i8($i71);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $i72 := net2272_read($p4, 24);
    call {:si_unique_call 1227} {:cexpr "tmp___8"} boogie_si_record_i8($i72);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i53);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i72);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i57);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i71);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i77 := scnprintf.ref.i64.ref.i32.i32.i32.ref($p56, $i73, .str.13, $i74, $i75, $i76, $p70);
    call {:si_unique_call 1229} {:cexpr "tmp___9"} boogie_si_record_i32($i77);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32($i53, $i77);
    call {:si_unique_call 1230} {:cexpr "size"} boogie_si_record_i32($i78);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i77);
    $i80 := $add.i64($i55, $i79);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p2, $mul.ref($i80, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $i90 := net2272_ep_read($p83, 42);
    call {:si_unique_call 1232} {:cexpr "t1"} boogie_si_record_i8($i90);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $i91 := net2272_ep_read($p83, 15);
    call {:si_unique_call 1234} {:cexpr "t2"} boogie_si_record_i8($i91);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i92 := net2272_ep_read($p83, 11);
    call {:si_unique_call 1236} {:cexpr "tmp___10"} boogie_si_record_i8($i92);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i93 := $zext.i32.i64($i78);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i90);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i91);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i99 := $sext.i8.i32($i91);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 0);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p101 := (if $i100 == 1 then .str.15 else .str);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i91);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 64);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p105 := (if $i104 == 1 then .str.16 else .str);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i91);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 32);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p109 := (if $i108 == 1 then .str.17 else .str);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i91);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 16);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p113 := (if $i112 == 1 then .str.18 else .str);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i91);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 8);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p117 := (if $i116 == 1 then .str.19 else .str);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i91);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 4);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p121 := (if $i120 == 1 then .str.20 else .str);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i91);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 2);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p125 := (if $i124 == 1 then .str.21 else .str.22);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i91);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i127 := $and.i32($i126, 1);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p129 := (if $i128 == 1 then .str.23 else .str);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i92);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i131 := scnprintf.ref.i64.ref.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref.ref.i32($p81, $i93, .str.14, $p96, $i97, $i98, $p101, $p105, $p109, $p113, $p117, $p121, $p125, $p129, $i130);
    call {:si_unique_call 1238} {:cexpr "tmp___11"} boogie_si_record_i32($i131);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i132 := $sub.i32($i78, $i131);
    call {:si_unique_call 1239} {:cexpr "size"} boogie_si_record_i32($i132);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i131);
    $i134 := $add.i64($i80, $i133);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p2, $mul.ref($i134, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i90);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i137 := $ashr.i32($i136, 5);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i32.i8($i137);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $p139 := type_string($i138);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $i140 := net2272_ep_read($p83, 13);
    call {:si_unique_call 1242} {:cexpr "tmp___13"} boogie_si_record_i8($i140);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i141 := net2272_ep_read($p83, 12);
    call {:si_unique_call 1244} {:cexpr "tmp___14"} boogie_si_record_i8($i141);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i142 := net2272_ep_read($p83, 7);
    call {:si_unique_call 1246} {:cexpr "tmp___15"} boogie_si_record_i8($i142);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i143 := net2272_ep_read($p83, 6);
    call {:si_unique_call 1248} {:cexpr "tmp___16"} boogie_si_record_i8($i143);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i144 := $zext.i32.i64($i132);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i143);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i142);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i140);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i148 := $shl.i32($i147, 8);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i141);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i150 := $or.i32($i148, $i149);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i90);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i152 := $and.i32($i151, 15);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p83);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p153, $mul.ref(106, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.1, $p154);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i32($i155);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i156, 0);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $p158 := (if $i157 == 1 then .str.25 else .str.26);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p83);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p159, $mul.ref(106, 1));
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.1, $p160);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p164 := (if $i163 == 1 then .str.27 else .str);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i165 := scnprintf.ref.i64.ref.i32.i32.i32.i32.ref.ref.ref($p135, $i144, .str.24, $i145, $i146, $i150, $i152, $p158, $p139, $p164);
    call {:si_unique_call 1250} {:cexpr "tmp___17"} boogie_si_record_i32($i165);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i166 := $sub.i32($i132, $i165);
    call {:si_unique_call 1251} {:cexpr "size"} boogie_si_record_i32($i166);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i167 := $zext.i32.i64($i165);
    $i168 := $add.i64($i134, $i167);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p2, $mul.ref($i168, 1));
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i170 := net2272_ep_read($p83, 10);
    call {:si_unique_call 1253} {:cexpr "tmp___18"} boogie_si_record_i8($i170);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i171 := net2272_ep_read($p83, 9);
    call {:si_unique_call 1255} {:cexpr "tmp___19"} boogie_si_record_i8($i171);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i172 := net2272_ep_read($p83, 8);
    call {:si_unique_call 1257} {:cexpr "tmp___20"} boogie_si_record_i8($i172);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i173 := $zext.i32.i64($i166);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32($i170);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i175 := $shl.i32($i174, 16);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i171);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i177 := $shl.i32($i176, 8);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i178 := $or.i32($i175, $i177);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i172);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i180 := $or.i32($i178, $i179);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i181 := scnprintf.ref.i64.ref.i32($p169, $i173, .str.28, $i180);
    call {:si_unique_call 1259} {:cexpr "tmp___21"} boogie_si_record_i32($i181);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i182 := $sub.i32($i166, $i181);
    call {:si_unique_call 1260} {:cexpr "size"} boogie_si_record_i32($i182);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i183 := $zext.i32.i64($i181);
    $i184 := $add.i64($i168, $i183);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p2, $mul.ref($i184, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i186 := net2272_ep_read($p83, 44);
    call {:si_unique_call 1262} {:cexpr "tmp___22"} boogie_si_record_i8($i186);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i187 := $zext.i8.i32($i186);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i188 := $and.i32($i187, 3);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i189 := $trunc.i32.i8($i188);
    call {:si_unique_call 1263} {:cexpr "t1"} boogie_si_record_i8($i189);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i190 := net2272_ep_read($p83, 44);
    call {:si_unique_call 1265} {:cexpr "tmp___23"} boogie_si_record_i8($i190);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i32($i190);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i192 := $ashr.i32($i191, 2);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i32.i8($i192);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i195 := $and.i32($i194, 3);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i8($i195);
    call {:si_unique_call 1266} {:cexpr "t2"} boogie_si_record_i8($i196);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i196);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $p198 := buf_state_string($i197);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i199 := $zext.i8.i32($i189);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $p200 := buf_state_string($i199);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i201 := $zext.i32.i64($i182);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i202 := scnprintf.ref.i64.ref.ref.ref($p185, $i201, .str.29, $p200, $p198);
    call {:si_unique_call 1270} {:cexpr "tmp___26"} boogie_si_record_i32($i202);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i203 := $sub.i32($i182, $i202);
    call {:si_unique_call 1271} {:cexpr "size"} boogie_si_record_i32($i203);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i204 := $zext.i32.i64($i202);
    $i205 := $add.i64($i184, $i204);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p2, $mul.ref($i205, 1));
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i88, $p89 := $i203, $p206;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p211);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($p212, $mul.ref(1, 112));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i218 := net2272_ep_read($p213, 42);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i219 := net2272_ep_read($p213, 15);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i220 := net2272_ep_read($p213, 11);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i221 := $zext.i32.i64($i88);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p212, $mul.ref(1, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.1, $p223);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i225 := $zext.i8.i32($i218);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i226 := $zext.i8.i32($i219);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i227 := $sext.i8.i32($i219);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i228 := $slt.i32($i227, 0);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p229 := (if $i228 == 1 then .str.15 else .str);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i219);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i231 := $and.i32($i230, 64);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i231, 0);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p233 := (if $i232 == 1 then .str.16 else .str);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i219);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i235 := $and.i32($i234, 32);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i236 := $ne.i32($i235, 0);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p237 := (if $i236 == 1 then .str.17 else .str);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i238 := $zext.i8.i32($i219);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i239 := $and.i32($i238, 16);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i239, 0);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p241 := (if $i240 == 1 then .str.18 else .str);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i242 := $zext.i8.i32($i219);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i243 := $and.i32($i242, 8);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i244 := $ne.i32($i243, 0);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p245 := (if $i244 == 1 then .str.19 else .str);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i219);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i247 := $and.i32($i246, 4);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i248 := $ne.i32($i247, 0);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p249 := (if $i248 == 1 then .str.20 else .str);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i219);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i251 := $and.i32($i250, 2);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i251, 0);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p253 := (if $i252 == 1 then .str.21 else .str.22);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i254 := $zext.i8.i32($i219);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i255 := $and.i32($i254, 1);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p257 := (if $i256 == 1 then .str.23 else .str);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32($i220);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i259 := scnprintf.ref.i64.ref.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref.ref.i32($p89, $i221, .str.14, $p224, $i225, $i226, $p229, $p233, $p237, $p241, $p245, $p249, $p253, $p257, $i258);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i260 := $sub.i32($i88, $i259);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i261 := $zext.i32.i64($i259);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($p89, $mul.ref($i261, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i263 := $zext.i8.i32($i218);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i264 := $ashr.i32($i263, 5);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i32.i8($i264);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p266 := type_string($i265);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i267 := net2272_ep_read($p213, 13);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $i268 := net2272_ep_read($p213, 12);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i269 := net2272_ep_read($p213, 7);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $i270 := net2272_ep_read($p213, 6);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i271 := $zext.i32.i64($i260);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i272 := $zext.i8.i32($i270);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i273 := $zext.i8.i32($i269);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i274 := $zext.i8.i32($i267);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i275 := $shl.i32($i274, 8);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i276 := $zext.i8.i32($i268);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i277 := $or.i32($i275, $i276);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i32($i218);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i279 := $and.i32($i278, 15);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p280 := $bitcast.ref.ref($p213);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($p280, $mul.ref(106, 1));
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i282 := $load.i8($M.1, $p281);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i283 := $zext.i8.i32($i282);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i284 := $ne.i32($i283, 0);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $p285 := (if $i284 == 1 then .str.25 else .str.26);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p213);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($p286, $mul.ref(106, 1));
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i288 := $load.i8($M.1, $p287);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i289 := $zext.i8.i32($i288);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p291 := (if $i290 == 1 then .str.27 else .str);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i292 := scnprintf.ref.i64.ref.i32.i32.i32.i32.ref.ref.ref($p262, $i271, .str.24, $i272, $i273, $i277, $i279, $p285, $p266, $p291);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i293 := $sub.i32($i260, $i292);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i294 := $zext.i32.i64($i292);
    $i295 := $add.i64($i261, $i294);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($p89, $mul.ref($i295, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $i297 := net2272_ep_read($p213, 10);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i298 := net2272_ep_read($p213, 9);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $i299 := net2272_ep_read($p213, 8);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i300 := $zext.i32.i64($i293);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i301 := $zext.i8.i32($i297);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i302 := $shl.i32($i301, 16);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i303 := $zext.i8.i32($i298);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i304 := $shl.i32($i303, 8);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i305 := $or.i32($i302, $i304);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i32($i299);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i307 := $or.i32($i305, $i306);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i308 := scnprintf.ref.i64.ref.i32($p296, $i300, .str.28, $i307);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i309 := $sub.i32($i293, $i308);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i310 := $zext.i32.i64($i308);
    $i311 := $add.i64($i295, $i310);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($p89, $mul.ref($i311, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $i313 := net2272_ep_read($p213, 44);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i314 := $zext.i8.i32($i313);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i315 := $and.i32($i314, 3);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i316 := $trunc.i32.i8($i315);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i317 := net2272_ep_read($p213, 44);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i318 := $zext.i8.i32($i317);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i319 := $ashr.i32($i318, 2);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i320 := $trunc.i32.i8($i319);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i321 := $zext.i8.i32($i320);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i322 := $and.i32($i321, 3);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i323 := $trunc.i32.i8($i322);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i324 := $zext.i8.i32($i323);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $p325 := buf_state_string($i324);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i326 := $zext.i8.i32($i316);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p327 := buf_state_string($i326);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i328 := $zext.i32.i64($i309);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i329 := scnprintf.ref.i64.ref.ref.ref($p312, $i328, .str.29, $p327, $p325);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i330 := $sub.i32($i309, $i329);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i331 := $zext.i32.i64($i329);
    $i332 := $add.i64($i311, $i331);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($p89, $mul.ref($i332, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i334, $p335 := $i330, $p333;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p336);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($p337, $mul.ref(2, 112));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i343 := net2272_ep_read($p338, 42);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i344 := net2272_ep_read($p338, 15);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $i345 := net2272_ep_read($p338, 11);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i346 := $zext.i32.i64($i334);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($p337, $mul.ref(2, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p349 := $load.ref($M.1, $p348);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i350 := $zext.i8.i32($i343);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i351 := $zext.i8.i32($i344);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i352 := $sext.i8.i32($i344);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i353 := $slt.i32($i352, 0);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p354 := (if $i353 == 1 then .str.15 else .str);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i355 := $zext.i8.i32($i344);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i356 := $and.i32($i355, 64);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i357 := $ne.i32($i356, 0);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p358 := (if $i357 == 1 then .str.16 else .str);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i359 := $zext.i8.i32($i344);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i360 := $and.i32($i359, 32);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i361 := $ne.i32($i360, 0);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p362 := (if $i361 == 1 then .str.17 else .str);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i363 := $zext.i8.i32($i344);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i364 := $and.i32($i363, 16);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i364, 0);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p366 := (if $i365 == 1 then .str.18 else .str);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i367 := $zext.i8.i32($i344);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i368 := $and.i32($i367, 8);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i369 := $ne.i32($i368, 0);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p370 := (if $i369 == 1 then .str.19 else .str);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i371 := $zext.i8.i32($i344);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i372 := $and.i32($i371, 4);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i373 := $ne.i32($i372, 0);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p374 := (if $i373 == 1 then .str.20 else .str);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i375 := $zext.i8.i32($i344);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i376 := $and.i32($i375, 2);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i377 := $ne.i32($i376, 0);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p378 := (if $i377 == 1 then .str.21 else .str.22);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i379 := $zext.i8.i32($i344);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i380 := $and.i32($i379, 1);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i381 := $ne.i32($i380, 0);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p382 := (if $i381 == 1 then .str.23 else .str);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i383 := $zext.i8.i32($i345);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} $i384 := scnprintf.ref.i64.ref.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref.ref.i32($p335, $i346, .str.14, $p349, $i350, $i351, $p354, $p358, $p362, $p366, $p370, $p374, $p378, $p382, $i383);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i385 := $sub.i32($i334, $i384);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i386 := $zext.i32.i64($i384);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($p335, $mul.ref($i386, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i388 := $zext.i8.i32($i343);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i389 := $ashr.i32($i388, 5);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i390 := $trunc.i32.i8($i389);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p391 := type_string($i390);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $i392 := net2272_ep_read($p338, 13);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $i393 := net2272_ep_read($p338, 12);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $i394 := net2272_ep_read($p338, 7);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i395 := net2272_ep_read($p338, 6);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i396 := $zext.i32.i64($i385);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i397 := $zext.i8.i32($i395);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i398 := $zext.i8.i32($i394);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i399 := $zext.i8.i32($i392);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i400 := $shl.i32($i399, 8);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i401 := $zext.i8.i32($i393);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i402 := $or.i32($i400, $i401);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i403 := $zext.i8.i32($i343);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i404 := $and.i32($i403, 15);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p405 := $bitcast.ref.ref($p338);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($p405, $mul.ref(106, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i407 := $load.i8($M.1, $p406);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i408 := $zext.i8.i32($i407);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i409 := $ne.i32($i408, 0);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p410 := (if $i409 == 1 then .str.25 else .str.26);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p411 := $bitcast.ref.ref($p338);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($p411, $mul.ref(106, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i413 := $load.i8($M.1, $p412);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i414 := $zext.i8.i32($i413);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i415 := $ne.i32($i414, 0);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p416 := (if $i415 == 1 then .str.27 else .str);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i417 := scnprintf.ref.i64.ref.i32.i32.i32.i32.ref.ref.ref($p387, $i396, .str.24, $i397, $i398, $i402, $i404, $p410, $p391, $p416);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i418 := $sub.i32($i385, $i417);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i419 := $zext.i32.i64($i417);
    $i420 := $add.i64($i386, $i419);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($p335, $mul.ref($i420, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $i422 := net2272_ep_read($p338, 10);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $i423 := net2272_ep_read($p338, 9);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i424 := net2272_ep_read($p338, 8);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i425 := $zext.i32.i64($i418);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i426 := $zext.i8.i32($i422);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i427 := $shl.i32($i426, 16);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i428 := $zext.i8.i32($i423);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i429 := $shl.i32($i428, 8);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i430 := $or.i32($i427, $i429);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i431 := $zext.i8.i32($i424);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i432 := $or.i32($i430, $i431);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $i433 := scnprintf.ref.i64.ref.i32($p421, $i425, .str.28, $i432);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i434 := $sub.i32($i418, $i433);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i435 := $zext.i32.i64($i433);
    $i436 := $add.i64($i420, $i435);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($p335, $mul.ref($i436, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $i438 := net2272_ep_read($p338, 44);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i439 := $zext.i8.i32($i438);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i440 := $and.i32($i439, 3);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i441 := $trunc.i32.i8($i440);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $i442 := net2272_ep_read($p338, 44);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i443 := $zext.i8.i32($i442);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i444 := $ashr.i32($i443, 2);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i445 := $trunc.i32.i8($i444);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i446 := $zext.i8.i32($i445);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i447 := $and.i32($i446, 3);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i448 := $trunc.i32.i8($i447);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i449 := $zext.i8.i32($i448);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p450 := buf_state_string($i449);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i451 := $zext.i8.i32($i441);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p452 := buf_state_string($i451);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i453 := $zext.i32.i64($i434);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $i454 := scnprintf.ref.i64.ref.ref.ref($p437, $i453, .str.29, $p452, $p450);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i455 := $sub.i32($i434, $i454);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i456 := $zext.i32.i64($i454);
    $i457 := $add.i64($i436, $i456);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($p335, $mul.ref($i457, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i459, $p460 := $i455, $p458;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p462 := $bitcast.ref.ref($p461);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($p462, $mul.ref(3, 112));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i468 := net2272_ep_read($p463, 42);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i469 := net2272_ep_read($p463, 15);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i470 := net2272_ep_read($p463, 11);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i471 := $zext.i32.i64($i459);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($add.ref($p462, $mul.ref(3, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p474 := $load.ref($M.1, $p473);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i475 := $zext.i8.i32($i468);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i476 := $zext.i8.i32($i469);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i477 := $sext.i8.i32($i469);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i478 := $slt.i32($i477, 0);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p479 := (if $i478 == 1 then .str.15 else .str);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i480 := $zext.i8.i32($i469);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i481 := $and.i32($i480, 64);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i482 := $ne.i32($i481, 0);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p483 := (if $i482 == 1 then .str.16 else .str);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i484 := $zext.i8.i32($i469);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i485 := $and.i32($i484, 32);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i486 := $ne.i32($i485, 0);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p487 := (if $i486 == 1 then .str.17 else .str);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i488 := $zext.i8.i32($i469);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i489 := $and.i32($i488, 16);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i490 := $ne.i32($i489, 0);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p491 := (if $i490 == 1 then .str.18 else .str);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i492 := $zext.i8.i32($i469);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i493 := $and.i32($i492, 8);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i494 := $ne.i32($i493, 0);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p495 := (if $i494 == 1 then .str.19 else .str);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i496 := $zext.i8.i32($i469);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i497 := $and.i32($i496, 4);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i498 := $ne.i32($i497, 0);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p499 := (if $i498 == 1 then .str.20 else .str);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i500 := $zext.i8.i32($i469);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i501 := $and.i32($i500, 2);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i502 := $ne.i32($i501, 0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p503 := (if $i502 == 1 then .str.21 else .str.22);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i504 := $zext.i8.i32($i469);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i505 := $and.i32($i504, 1);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i506 := $ne.i32($i505, 0);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p507 := (if $i506 == 1 then .str.23 else .str);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i508 := $zext.i8.i32($i470);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $i509 := scnprintf.ref.i64.ref.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref.ref.i32($p460, $i471, .str.14, $p474, $i475, $i476, $p479, $p483, $p487, $p491, $p495, $p499, $p503, $p507, $i508);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i510 := $sub.i32($i459, $i509);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i511 := $zext.i32.i64($i509);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($p460, $mul.ref($i511, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i513 := $zext.i8.i32($i468);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i514 := $ashr.i32($i513, 5);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i515 := $trunc.i32.i8($i514);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $p516 := type_string($i515);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i517 := net2272_ep_read($p463, 13);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i518 := net2272_ep_read($p463, 12);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i519 := net2272_ep_read($p463, 7);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $i520 := net2272_ep_read($p463, 6);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i521 := $zext.i32.i64($i510);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i522 := $zext.i8.i32($i520);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i523 := $zext.i8.i32($i519);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i524 := $zext.i8.i32($i517);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i525 := $shl.i32($i524, 8);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i526 := $zext.i8.i32($i518);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i527 := $or.i32($i525, $i526);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i528 := $zext.i8.i32($i468);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i529 := $and.i32($i528, 15);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p530 := $bitcast.ref.ref($p463);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($p530, $mul.ref(106, 1));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i532 := $load.i8($M.1, $p531);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i533 := $zext.i8.i32($i532);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i534 := $ne.i32($i533, 0);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p535 := (if $i534 == 1 then .str.25 else .str.26);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p536 := $bitcast.ref.ref($p463);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($p536, $mul.ref(106, 1));
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i538 := $load.i8($M.1, $p537);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i539 := $zext.i8.i32($i538);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i540 := $ne.i32($i539, 0);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p541 := (if $i540 == 1 then .str.27 else .str);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i542 := scnprintf.ref.i64.ref.i32.i32.i32.i32.ref.ref.ref($p512, $i521, .str.24, $i522, $i523, $i527, $i529, $p535, $p516, $p541);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i543 := $sub.i32($i510, $i542);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i544 := $zext.i32.i64($i542);
    $i545 := $add.i64($i511, $i544);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($p460, $mul.ref($i545, 1));
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $i547 := net2272_ep_read($p463, 10);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i548 := net2272_ep_read($p463, 9);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $i549 := net2272_ep_read($p463, 8);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i550 := $zext.i32.i64($i543);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i551 := $zext.i8.i32($i547);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i552 := $shl.i32($i551, 16);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i553 := $zext.i8.i32($i548);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i554 := $shl.i32($i553, 8);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i555 := $or.i32($i552, $i554);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i556 := $zext.i8.i32($i549);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i557 := $or.i32($i555, $i556);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i558 := scnprintf.ref.i64.ref.i32($p546, $i550, .str.28, $i557);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i559 := $sub.i32($i543, $i558);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i560 := $zext.i32.i64($i558);
    $i561 := $add.i64($i545, $i560);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($p460, $mul.ref($i561, 1));
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i563 := net2272_ep_read($p463, 44);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i564 := $zext.i8.i32($i563);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i565 := $and.i32($i564, 3);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i566 := $trunc.i32.i8($i565);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i567 := net2272_ep_read($p463, 44);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i568 := $zext.i8.i32($i567);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i569 := $ashr.i32($i568, 2);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i570 := $trunc.i32.i8($i569);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i571 := $zext.i8.i32($i570);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i572 := $and.i32($i571, 3);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i573 := $trunc.i32.i8($i572);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i574 := $zext.i8.i32($i573);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $p575 := buf_state_string($i574);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i576 := $zext.i8.i32($i566);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p577 := buf_state_string($i576);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i578 := $zext.i32.i64($i559);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $i579 := scnprintf.ref.i64.ref.ref.ref($p562, $i578, .str.29, $p577, $p575);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i580 := $sub.i32($i559, $i579);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i209 := $i580;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(1584, 1));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} ldv_spin_unlock_irqrestore_97($p207, $u3);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i208 := $zext.i32.i64($i209);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i210 := $sub.i64(4096, $i208);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $r := $i210;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb40:
    assume 1 == 1;
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p462, $mul.ref(3, 112)), $mul.ref(96, 1));
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p465 := $load.ref($M.1, $p464);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i466 := $p2i.ref.i64($p465);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i467 := $eq.i64($i466, 0);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i467} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i467 == 1);
    goto $bb42;

  $bb43:
    assume $i467 == 1;
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i209 := $i459;
    goto $bb46;

  $bb32:
    assume 1 == 1;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p337, $mul.ref(2, 112)), $mul.ref(96, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.1, $p339);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i341 := $p2i.ref.i64($p340);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i342 := $eq.i64($i341, 0);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i342 == 1);
    goto $bb34;

  $bb35:
    assume $i342 == 1;
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i459, $p460 := $i334, $p335;
    goto $bb38;

  $bb24:
    assume 1 == 1;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p212, $mul.ref(1, 112)), $mul.ref(96, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.1, $p214);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i216 := $p2i.ref.i64($p215);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i217 := $eq.i64($i216, 0);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i217 == 1);
    goto $bb26;

  $bb27:
    assume $i217 == 1;
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i334, $p335 := $i88, $p89;
    goto $bb30;

  $bb15:
    assume 0 == 1;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb17;

  $bb18:
    assume $i87 == 1;
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i88, $p89 := $i78, $p81;
    goto $bb20;

  $bb4:
    assume $i60 == 1;
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i57);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 4);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i63 == 1);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2160)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.1, $p66);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $p69 := .str.11;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p64 := $p69;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p70 := $p64;
    goto $bb12;

  $bb9:
    assume $i68 == 1;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p69 := .str.10;
    goto $bb11;

  $bb6:
    assume $i63 == 1;
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p64 := .str.9;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116 == $sub.ref(0, 370330);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_net2272();
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const scnprintf: ref;

axiom scnprintf == $sub.ref(0, 371362);

procedure scnprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1332} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1333} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1335} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1336} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1337} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.i32.i32.i32.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: ref, p.8: ref, p.9: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32.i32.i32.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: ref, p.8: ref, p.9: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1338} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1339} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1340} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref, p.7: ref, p.8: ref, p.9: ref, p.10: ref, p.11: ref, p.12: ref, p.13: ref, p.14: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref, p.7: ref, p.8: ref, p.9: ref, p.10: ref, p.11: ref, p.12: ref, p.13: ref, p.14: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1341} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1342} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1343} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.i32.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1344} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1345} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1346} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.ref.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: ref, p.7: ref, p.8: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.ref.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: ref, p.7: ref, p.8: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1347} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1348} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1349} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1350} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1351} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1352} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const buf_state_string: ref;

axiom buf_state_string == $sub.ref(0, 372394);

procedure buf_state_string($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation buf_state_string($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} {:cexpr "buf_state_string:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i0, 1);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 2);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 3);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p5 := .str.41;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb13:
    assume $i4 == 1;
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p5 := .str.40;
    goto $bb18;

  $bb9:
    assume $i3 == 1;
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p5 := .str.39;
    goto $bb18;

  $bb5:
    assume $i2 == 1;
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p5 := .str.38;
    goto $bb18;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := .str.37;
    goto $bb18;
}



const ldv_EMGentry_exit_net2272_cleanup_14_2: ref;

axiom ldv_EMGentry_exit_net2272_cleanup_14_2 == $sub.ref(0, 373426);

procedure ldv_EMGentry_exit_net2272_cleanup_14_2($p0: ref);
  free requires assertsPassed;



implementation ldv_EMGentry_exit_net2272_cleanup_14_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} net2272_cleanup();
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    return;
}



const net2272_cleanup: ref;

axiom net2272_cleanup == $sub.ref(0, 374458);

procedure net2272_cleanup();
  free requires assertsPassed;



implementation net2272_cleanup()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} net2272_pci_unregister();
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} ldv_platform_driver_unregister_144(net2272_plat_driver);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    return;
}



const net2272_pci_unregister: ref;

axiom net2272_pci_unregister == $sub.ref(0, 375490);

procedure net2272_pci_unregister();
  free requires assertsPassed;



implementation net2272_pci_unregister()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} ldv_pci_unregister_driver_140(net2272_pci_driver);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister_144: ref;

axiom ldv_platform_driver_unregister_144 == $sub.ref(0, 376522);

procedure ldv_platform_driver_unregister_144($p0: ref);
  free requires assertsPassed;



implementation ldv_platform_driver_unregister_144($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} platform_driver_unregister($p0);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} ldv_platform_driver_unregister($0.ref, $p0);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 377554);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister: ref;

axiom ldv_platform_driver_unregister == $sub.ref(0, 378586);

procedure ldv_platform_driver_unregister($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_platform_driver_unregister($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} ldv_dispatch_deregister_10_1($p1);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_10_1: ref;

axiom ldv_dispatch_deregister_10_1 == $sub.ref(0, 379618);

procedure ldv_dispatch_deregister_10_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_10_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_unregister_driver_140: ref;

axiom ldv_pci_unregister_driver_140 == $sub.ref(0, 380650);

procedure ldv_pci_unregister_driver_140($p0: ref);
  free requires assertsPassed;



implementation ldv_pci_unregister_driver_140($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} pci_unregister_driver($p0);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} ldv_pci_unregister_driver($0.ref, $p0);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 381682);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_unregister_driver: ref;

axiom ldv_pci_unregister_driver == $sub.ref(0, 382714);

procedure ldv_pci_unregister_driver($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pci_unregister_driver($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} ldv_dispatch_deregister_12_1($p1);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_12_1: ref;

axiom ldv_dispatch_deregister_12_1 == $sub.ref(0, 383746);

procedure ldv_dispatch_deregister_12_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_12_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_net2272_init_14_15: ref;

axiom ldv_EMGentry_init_net2272_init_14_15 == $sub.ref(0, 384778);

procedure ldv_EMGentry_init_net2272_init_14_15($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.66, $M.68, $M.69, $CurrAddr, $M.2, $M.9, $M.10, $M.16, assertsPassed, $M.0;



implementation ldv_EMGentry_init_net2272_init_14_15($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i1 := net2272_init();
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    call {:si_unique_call 1365} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;
}



const net2272_init: ref;

axiom net2272_init == $sub.ref(0, 385810);

procedure net2272_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.66, $M.68, $M.69, $CurrAddr, $M.2, $M.9, $M.10, $M.16, assertsPassed, $M.0;



implementation net2272_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $i0 := net2272_pci_register();
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    call {:si_unique_call 1367} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i3 := ldv___platform_driver_register_143(net2272_plat_driver, __this_module);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    call {:si_unique_call 1369} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} net2272_pci_unregister();
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const net2272_pci_register: ref;

axiom net2272_pci_register == $sub.ref(0, 386842);

procedure net2272_pci_register() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.65, $M.66, $M.68, $M.69, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.16, $M.2, assertsPassed, $M.0;



implementation net2272_pci_register() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $i0 := ldv___pci_register_driver_139(net2272_pci_driver, __this_module, .str.1);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    call {:si_unique_call 1372} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;
}



const ldv___platform_driver_register_143: ref;

axiom ldv___platform_driver_register_143 == $sub.ref(0, 387874);

procedure ldv___platform_driver_register_143($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.66, $M.2, assertsPassed, $M.16, $M.0, $M.9, $M.10;



implementation ldv___platform_driver_register_143($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 1374} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $i3 := ldv___platform_driver_register($i2, $p0, $p1);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    call {:si_unique_call 1376} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 388906);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1377} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1378} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv___platform_driver_register: ref;

axiom ldv___platform_driver_register == $sub.ref(0, 389938);

procedure ldv___platform_driver_register($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.66, $M.2, assertsPassed, $M.16, $M.0, $M.9, $M.10;



implementation ldv___platform_driver_register($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} {:cexpr "ldv___platform_driver_register:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i3 := ldv_undef_int();
    call {:si_unique_call 1381} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i0, 0);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} ldv_assume($i8);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} ldv_assume($i6);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} ldv_dispatch_register_8_2($p1);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_433:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_8_2: ref;

axiom ldv_dispatch_register_8_2 == $sub.ref(0, 390970);

procedure ldv_dispatch_register_8_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.66, $M.2, assertsPassed, $M.16, $M.0, $M.9, $M.10;



implementation ldv_dispatch_register_8_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p1 := ldv_xmalloc(16);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p0);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} ldv_platform_platform_instance_2($p4);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;
}



const ldv_platform_platform_instance_2: ref;

axiom ldv_platform_platform_instance_2 == $sub.ref(0, 392002);

procedure ldv_platform_platform_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.65, $M.66, $M.2, $CurrAddr, assertsPassed, $M.16, $M.0, $M.9, $M.10;



implementation ldv_platform_platform_instance_2($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $p8 := ldv_xmalloc(1464);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i10 := ldv_undef_int();
    call {:si_unique_call 1390} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p9);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} ldv_free($p24);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $p30, $p31 := ldv_platform_platform_instance_2_loop_$bb7($p7, $p9, $p12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $p30, $p31);
    goto $bb7_last;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $i14 := ldv_platform_instance_probe_2_14($p13, $p9);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    call {:si_unique_call 1394} {:cexpr "ldv_2_probed_default"} boogie_si_record_i32($i14);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i15 := ldv_ldv_post_probe_152($i14);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    call {:si_unique_call 1396} {:cexpr "ldv_2_probed_default"} boogie_si_record_i32($i15);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $i16 := ldv_undef_int();
    call {:si_unique_call 1398} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i15, 0);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} ldv_assume($i21);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i22 := ldv_undef_int();
    call {:si_unique_call 1404} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 0);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} ldv_assume($i19);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i25, $i26, $i27, $i28 := ldv_platform_platform_instance_2_loop_$bb10($i25, $i26, $i27, $i28);
    goto $bb10_last;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i25, 2);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i28 := $i25;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 3);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ldv_stop();
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb23:
    assume $i29 == 1;
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} ldv_platform_instance_release_2_3($p31, $p9);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i27 == 1;
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} ldv_dispatch_pm_register_2_6();
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} ldv_dispatch_pm_deregister_2_5();
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} ldv_free($p6);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i25 := ldv_undef_int();
    call {:si_unique_call 1402} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_6775;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} ldv_ldv_pre_probe_151();
    goto corral_source_split_6757;
}



const ldv_ldv_pre_probe_151: ref;

axiom ldv_ldv_pre_probe_151 == $sub.ref(0, 393034);

procedure ldv_ldv_pre_probe_151();
  free requires assertsPassed;
  modifies $M.65, $M.66;



implementation ldv_ldv_pre_probe_151()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} ldv_pre_probe();
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_probe_2_14: ref;

axiom ldv_platform_instance_probe_2_14 == $sub.ref(0, 394066);

procedure ldv_platform_instance_probe_2_14($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.2, $CurrAddr, assertsPassed, $M.0, $M.16, $M.9, $M.10;



implementation ldv_platform_instance_probe_2_14($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i2 := net2272_plat_probe($p1);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    call {:si_unique_call 1413} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_152: ref;

axiom ldv_ldv_post_probe_152 == $sub.ref(0, 395098);

procedure ldv_ldv_post_probe_152($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, $M.66, assertsPassed;



implementation ldv_ldv_post_probe_152($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} {:cexpr "ldv_ldv_post_probe_152:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 1418} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_pm_register_2_6: ref;

axiom ldv_dispatch_pm_register_2_6 == $sub.ref(0, 396130);

procedure ldv_dispatch_pm_register_2_6();
  free requires assertsPassed;
  modifies $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_dispatch_pm_register_2_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p0 := ldv_xmalloc(16);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} ldv_platform_pm_ops_instance_3($p2);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_pm_deregister_2_5: ref;

axiom ldv_dispatch_pm_deregister_2_5 == $sub.ref(0, 397162);

procedure ldv_dispatch_pm_deregister_2_5();
  free requires assertsPassed;



implementation ldv_dispatch_pm_deregister_2_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_release_2_3: ref;

axiom ldv_platform_instance_release_2_3 == $sub.ref(0, 398194);

procedure ldv_platform_instance_release_2_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_platform_instance_release_2_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} vslice_dummy_var_10 := net2272_plat_remove($p1);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 399226);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_platform_pm_ops_instance_3: ref;

axiom ldv_platform_pm_ops_instance_3 == $sub.ref(0, 400258);

procedure ldv_platform_pm_ops_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_platform_pm_ops_instance_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $p147, $p148, $p149, $p150 := ldv_platform_pm_ops_instance_3_loop_$bb1($i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $p147, $p148, $p149, $p150);
    goto $bb1_last;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 4);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} ldv_stop();
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.26, $p25);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $i31 := ldv_undef_int();
    call {:si_unique_call 1430} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, 2);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 3);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} ldv_stop();
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.64, $p149);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} ldv_pm_ops_instance_complete_3_3($p150, $u6);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb40:
    assume $i34 == 1;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.52, $p111);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $i117 := ldv_undef_int();
    call {:si_unique_call 1451} {:cexpr "tmp___3"} boogie_si_record_i32($i117);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i118 == 1);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.58, $p131);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.60, $p137);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.62, $p143);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb106:
    assume $i146 == 1;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.63, $p147);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} ldv_pm_ops_instance_restore_3_4($p148, $u6);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i140 == 1;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.61, $p141);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} ldv_pm_ops_instance_restore_noirq_3_5($p142, $u6);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i134 == 1;
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.59, $p135);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} ldv_pm_ops_instance_poweroff_noirq_3_6($p136, $u6);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb91:
    assume $i118 == 1;
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.54, $p119);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.56, $p125);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb96:
    assume $i128 == 1;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.57, $p129);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} ldv_pm_ops_instance_restore_early_3_7($p130, $u6);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i122 == 1;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.55, $p123);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} ldv_pm_ops_instance_poweroff_late_3_8($p124, $u6);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i114 == 1;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.53, $p115);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} ldv_pm_ops_instance_poweroff_3_9($p116, $u6);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i33 == 1;
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.40, $p73);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i79 := ldv_undef_int();
    call {:si_unique_call 1443} {:cexpr "tmp___2"} boogie_si_record_i32($i79);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i80 == 1);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.46, $p93);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.48, $p99);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.50, $p105);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb85:
    assume $i108 == 1;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.51, $p109);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} ldv_pm_ops_instance_thaw_3_10($p110, $u6);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i102 == 1;
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.49, $p103);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} ldv_pm_ops_instance_thaw_noirq_3_11($p104, $u6);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i96 == 1;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.47, $p97);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} ldv_pm_ops_instance_freeze_noirq_3_12($p98, $u6);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i80 == 1;
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.42, $p81);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.44, $p87);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i90 == 1;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.45, $p91);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} ldv_pm_ops_instance_thaw_early_3_13($p92, $u6);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i84 == 1;
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.43, $p85);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} ldv_pm_ops_instance_freeze_late_3_14($p86, $u6);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i76 == 1;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.41, $p77);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} ldv_pm_ops_instance_freeze_3_15($p78, $u6);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i32 == 1;
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.28, $p35);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $i41 := ldv_undef_int();
    call {:si_unique_call 1434} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i42 == 1);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.34, $p55);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.36, $p61);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.38, $p67);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i70 == 1;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.39, $p71);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} ldv_pm_ops_instance_resume_3_16($p72, $u6);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i64 == 1;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.37, $p65);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} ldv_pm_ops_instance_resume_early_3_17($p66, $u6);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i58 == 1;
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.35, $p59);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} ldv_pm_ops_instance_suspend_late_3_18($p60, $u6);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i42 == 1;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.30, $p43);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.32, $p49);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i52 == 1;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.33, $p53);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} ldv_pm_ops_instance_resume_noirq_3_19($p54, $u6);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.31, $p47);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} ldv_pm_ops_instance_suspend_noirq_3_20($p48, $u6);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i38 == 1;
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.29, $p39);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} ldv_pm_ops_instance_suspend_3_21($p40, $u6);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.27, $p29);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} ldv_pm_ops_instance_prepare_3_22($p30, $u6);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.22, $p13);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.24, $p19);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i22 == 1;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.25, $p23);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} ldv_pm_ops_instance_runtime_resume_3_24($p24, $u6);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i16 == 1;
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.23, $p17);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} ldv_pm_ops_instance_runtime_suspend_3_25($p18, $u6);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.20, $p7);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.21, $p11);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} ldv_pm_ops_instance_runtime_idle_3_27($p12, $u6);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $i1 := ldv_undef_int();
    call {:si_unique_call 1423} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6830;
}



const ldv_pm_ops_instance_runtime_idle_3_27: ref;

axiom ldv_pm_ops_instance_runtime_idle_3_27 == $sub.ref(0, 401290);

procedure ldv_pm_ops_instance_runtime_idle_3_27($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_runtime_idle_3_27($p0: ref, $p1: ref)
{
  var vslice_dummy_var_11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} vslice_dummy_var_11 := devirtbounce.13($p0, $p1);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_suspend_3_25: ref;

axiom ldv_pm_ops_instance_runtime_suspend_3_25 == $sub.ref(0, 402322);

procedure ldv_pm_ops_instance_runtime_suspend_3_25($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_runtime_suspend_3_25($p0: ref, $p1: ref)
{
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} vslice_dummy_var_12 := devirtbounce.13($p0, $p1);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_resume_3_24: ref;

axiom ldv_pm_ops_instance_runtime_resume_3_24 == $sub.ref(0, 403354);

procedure ldv_pm_ops_instance_runtime_resume_3_24($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_runtime_resume_3_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} vslice_dummy_var_13 := devirtbounce.13($p0, $p1);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_prepare_3_22: ref;

axiom ldv_pm_ops_instance_prepare_3_22 == $sub.ref(0, 404386);

procedure ldv_pm_ops_instance_prepare_3_22($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_prepare_3_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} vslice_dummy_var_14 := devirtbounce.13($p0, $p1);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_3_21: ref;

axiom ldv_pm_ops_instance_suspend_3_21 == $sub.ref(0, 405418);

procedure ldv_pm_ops_instance_suspend_3_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_suspend_3_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} vslice_dummy_var_15 := devirtbounce.13($p0, $p1);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_noirq_3_20: ref;

axiom ldv_pm_ops_instance_suspend_noirq_3_20 == $sub.ref(0, 406450);

procedure ldv_pm_ops_instance_suspend_noirq_3_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_suspend_noirq_3_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} vslice_dummy_var_16 := devirtbounce.13($p0, $p1);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_noirq_3_19: ref;

axiom ldv_pm_ops_instance_resume_noirq_3_19 == $sub.ref(0, 407482);

procedure ldv_pm_ops_instance_resume_noirq_3_19($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_resume_noirq_3_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} vslice_dummy_var_17 := devirtbounce.13($p0, $p1);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_late_3_18: ref;

axiom ldv_pm_ops_instance_suspend_late_3_18 == $sub.ref(0, 408514);

procedure ldv_pm_ops_instance_suspend_late_3_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_suspend_late_3_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} vslice_dummy_var_18 := devirtbounce.13($p0, $p1);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_early_3_17: ref;

axiom ldv_pm_ops_instance_resume_early_3_17 == $sub.ref(0, 409546);

procedure ldv_pm_ops_instance_resume_early_3_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_resume_early_3_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} vslice_dummy_var_19 := devirtbounce.13($p0, $p1);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_3_16: ref;

axiom ldv_pm_ops_instance_resume_3_16 == $sub.ref(0, 410578);

procedure ldv_pm_ops_instance_resume_3_16($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_resume_3_16($p0: ref, $p1: ref)
{
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} vslice_dummy_var_20 := devirtbounce.13($p0, $p1);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_3_15: ref;

axiom ldv_pm_ops_instance_freeze_3_15 == $sub.ref(0, 411610);

procedure ldv_pm_ops_instance_freeze_3_15($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_freeze_3_15($p0: ref, $p1: ref)
{
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} vslice_dummy_var_21 := devirtbounce.13($p0, $p1);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_late_3_14: ref;

axiom ldv_pm_ops_instance_freeze_late_3_14 == $sub.ref(0, 412642);

procedure ldv_pm_ops_instance_freeze_late_3_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_freeze_late_3_14($p0: ref, $p1: ref)
{
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} vslice_dummy_var_22 := devirtbounce.13($p0, $p1);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_early_3_13: ref;

axiom ldv_pm_ops_instance_thaw_early_3_13 == $sub.ref(0, 413674);

procedure ldv_pm_ops_instance_thaw_early_3_13($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_thaw_early_3_13($p0: ref, $p1: ref)
{
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} vslice_dummy_var_23 := devirtbounce.13($p0, $p1);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_noirq_3_12: ref;

axiom ldv_pm_ops_instance_freeze_noirq_3_12 == $sub.ref(0, 414706);

procedure ldv_pm_ops_instance_freeze_noirq_3_12($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_freeze_noirq_3_12($p0: ref, $p1: ref)
{
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} vslice_dummy_var_24 := devirtbounce.13($p0, $p1);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_noirq_3_11: ref;

axiom ldv_pm_ops_instance_thaw_noirq_3_11 == $sub.ref(0, 415738);

procedure ldv_pm_ops_instance_thaw_noirq_3_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_thaw_noirq_3_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} vslice_dummy_var_25 := devirtbounce.13($p0, $p1);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_3_10: ref;

axiom ldv_pm_ops_instance_thaw_3_10 == $sub.ref(0, 416770);

procedure ldv_pm_ops_instance_thaw_3_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_thaw_3_10($p0: ref, $p1: ref)
{
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} vslice_dummy_var_26 := devirtbounce.13($p0, $p1);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_3_9: ref;

axiom ldv_pm_ops_instance_poweroff_3_9 == $sub.ref(0, 417802);

procedure ldv_pm_ops_instance_poweroff_3_9($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_poweroff_3_9($p0: ref, $p1: ref)
{
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} vslice_dummy_var_27 := devirtbounce.13($p0, $p1);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_late_3_8: ref;

axiom ldv_pm_ops_instance_poweroff_late_3_8 == $sub.ref(0, 418834);

procedure ldv_pm_ops_instance_poweroff_late_3_8($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_poweroff_late_3_8($p0: ref, $p1: ref)
{
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} vslice_dummy_var_28 := devirtbounce.13($p0, $p1);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_early_3_7: ref;

axiom ldv_pm_ops_instance_restore_early_3_7 == $sub.ref(0, 419866);

procedure ldv_pm_ops_instance_restore_early_3_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_restore_early_3_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} vslice_dummy_var_29 := devirtbounce.13($p0, $p1);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_noirq_3_6: ref;

axiom ldv_pm_ops_instance_poweroff_noirq_3_6 == $sub.ref(0, 420898);

procedure ldv_pm_ops_instance_poweroff_noirq_3_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_poweroff_noirq_3_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} vslice_dummy_var_30 := devirtbounce.13($p0, $p1);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_noirq_3_5: ref;

axiom ldv_pm_ops_instance_restore_noirq_3_5 == $sub.ref(0, 421930);

procedure ldv_pm_ops_instance_restore_noirq_3_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_restore_noirq_3_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} vslice_dummy_var_31 := devirtbounce.13($p0, $p1);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_3_4: ref;

axiom ldv_pm_ops_instance_restore_3_4 == $sub.ref(0, 422962);

procedure ldv_pm_ops_instance_restore_3_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pm_ops_instance_restore_3_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} vslice_dummy_var_32 := devirtbounce.13($p0, $p1);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_complete_3_3: ref;

axiom ldv_pm_ops_instance_complete_3_3 == $sub.ref(0, 423994);

procedure ldv_pm_ops_instance_complete_3_3($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pm_ops_instance_complete_3_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} net2272_gadget_release($p1);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 425026);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i1 := $M.65;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_598:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 426058);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.66, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i1 := $M.66;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_601:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 427090);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1488} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 428122);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} ldv_assume($i2);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 429154);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1492} __VERIFIER_error();
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 430186);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.66;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $M.66 := 0;
    call {:si_unique_call 1493} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 431218);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1495} __VERIFIER_error();
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 432250);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.65;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 1496} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 433282);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    return;
}



const ldv___pci_register_driver_139: ref;

axiom ldv___pci_register_driver_139 == $sub.ref(0, 434314);

procedure ldv___pci_register_driver_139($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.65, $M.66, $M.68, $M.69, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.16, $M.2, assertsPassed, $M.0;



implementation ldv___pci_register_driver_139($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1498} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $i4 := ldv___pci_register_driver($i3, $p0, $p1, $p2);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    call {:si_unique_call 1500} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 435346);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1501} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1502} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv___pci_register_driver: ref;

axiom ldv___pci_register_driver == $sub.ref(0, 436378);

procedure ldv___pci_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.65, $M.66, $M.68, $M.69, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.16, $M.2, assertsPassed, $M.0;



implementation ldv___pci_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} {:cexpr "ldv___pci_register_driver:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i4 := ldv_undef_int();
    call {:si_unique_call 1505} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i0, 0);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_assume($i9);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_assume($i7);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} ldv_dispatch_register_13_2($p1);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_613:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_13_2: ref;

axiom ldv_dispatch_register_13_2 == $sub.ref(0, 437410);

procedure ldv_dispatch_register_13_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.65, $M.66, $M.68, $M.69, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.16, $M.2, assertsPassed, $M.0;



implementation ldv_dispatch_register_13_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p1 := ldv_xmalloc(16);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p0);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_pci_pci_instance_1($p4);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;
}



const ldv_pci_pci_instance_1: ref;

axiom ldv_pci_pci_instance_1 == $sub.ref(0, 438442);

procedure ldv_pci_pci_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.65, $M.66, $M.1, $M.68, $M.69, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.16, $M.2, assertsPassed, $M.0;



implementation ldv_pci_pci_instance_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i26: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p8 := $u7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p9 := ldv_xmalloc(2968);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p11 := ldv_xmalloc(32);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $i13 := ldv_undef_int();
    call {:si_unique_call 1516} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p10);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} ldv_free($p31);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p12);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_free($p32);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i33, $i26, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $p79, $p80 := ldv_pci_pci_instance_1_loop_$bb7($p1, $p8, $p10, $p12, $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i33, $i26, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $p79, $p80);
    goto $bb7_last;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $i17 := ldv_pci_instance_probe_1_17($p16, $p10, $p12);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    call {:si_unique_call 1521} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i17);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $i18 := ldv_ldv_post_probe_150($i17);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    call {:si_unique_call 1523} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i18);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $i19 := ldv_undef_int();
    call {:si_unique_call 1525} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i18, 0);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} ldv_assume($i28);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $i29 := ldv_undef_int();
    call {:si_unique_call 1531} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb16_dummy;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 0);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ldv_assume($i22);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i23 := $i18;
    goto $bb10;

  $bb10:
    call $i23, $i24, $i25, $i33, $i26, $i34, $i35, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72 := ldv_pci_pci_instance_1_loop_$bb10($p1, $p8, $p10, $i23, $i24, $i25, $i33, $i26, $i34, $i35, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72);
    goto $bb10_last;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $i24 := ldv_undef_int();
    call {:si_unique_call 1529} {:cexpr "tmp___3"} boogie_si_record_i32($i24);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i26, 2);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i35 := $i26;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 3);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} ldv_stop();
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb26:
    assume $i36 == 1;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.1, $p73);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_pci_instance_release_1_2($p80, $p10);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i76 == 1;
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.1, $p77);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} ldv_pci_instance_shutdown_1_3($p78, $p10);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i48 := $i23;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $i49 := ldv_filter_err_code($i48);
    call {:si_unique_call 1538} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i49);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i49;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $i60 := ldv_filter_err_code($i59);
    call {:si_unique_call 1542} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i60);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i23 := $i60;
    goto $bb43_dummy;

  $bb41:
    assume $i70 == 1;
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_pci_instance_resume_1_5($p72, $p10);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i64 == 1;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_pci_instance_resume_early_1_6($p66, $p10);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i53 == 1;
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.67, $p56);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $i58 := ldv_pci_instance_suspend_late_1_7($p55, $p10, $i57);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    call {:si_unique_call 1540} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i58);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb37;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i42 == 1;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.67, $p45);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} $i47 := ldv_pci_instance_suspend_1_8($p44, $p10, $i46);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    call {:si_unique_call 1536} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i47);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb34;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call $i33, $i37, $i38 := ldv_pci_pci_instance_1_loop_$bb14($i33, $i37, $i38);
    goto $bb14_last;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $i37 := ldv_undef_int();
    call {:si_unique_call 1533} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i33 := $i37;
    assume true;
    goto $bb31, $bb20;

  $bb20:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i26 := $i33;
    goto $bb13;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb31_dummy;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} ldv_free($p7);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb43_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7274;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} ldv_ldv_pre_probe_149();
    goto corral_source_split_7256;
}



const ldv_ldv_pre_probe_149: ref;

axiom ldv_ldv_pre_probe_149 == $sub.ref(0, 439474);

procedure ldv_ldv_pre_probe_149();
  free requires assertsPassed;
  modifies $M.65, $M.66;



implementation ldv_ldv_pre_probe_149()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} ldv_pre_probe();
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_instance_probe_1_17: ref;

axiom ldv_pci_instance_probe_1_17 == $sub.ref(0, 440506);

procedure ldv_pci_instance_probe_1_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.2, $M.16, $CurrAddr, assertsPassed, $M.0;



implementation ldv_pci_instance_probe_1_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $i3 := net2272_pci_probe($p1, $p2);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    call {:si_unique_call 1551} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_150: ref;

axiom ldv_ldv_post_probe_150 == $sub.ref(0, 441538);

procedure ldv_ldv_post_probe_150($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, $M.66, assertsPassed;



implementation ldv_ldv_post_probe_150($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} {:cexpr "ldv_ldv_post_probe_150:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 1556} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_suspend_1_8: ref;

axiom ldv_pci_instance_suspend_1_8 == $sub.ref(0, 442570);

procedure ldv_pci_instance_suspend_1_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.68, $M.1, $M.16, $CurrAddr, assertsPassed;



implementation ldv_pci_instance_suspend_1_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.68 := $store.i32($M.68, $p4, $i2);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.68, $p5);
    call {:si_unique_call 1558} $i7 := devirtbounce.14($p0, $p1, $i6);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    call {:si_unique_call 1559} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 443602);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1562} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_pci_instance_suspend_late_1_7: ref;

axiom ldv_pci_instance_suspend_late_1_7 == $sub.ref(0, 444634);

procedure ldv_pci_instance_suspend_late_1_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.69, $M.1, $M.16, $CurrAddr, assertsPassed;



implementation ldv_pci_instance_suspend_late_1_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p4, $i2);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.69, $p5);
    call {:si_unique_call 1564} $i7 := devirtbounce.14($p0, $p1, $i6);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    call {:si_unique_call 1565} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_resume_early_1_6: ref;

axiom ldv_pci_instance_resume_early_1_6 == $sub.ref(0, 445666);

procedure ldv_pci_instance_resume_early_1_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pci_instance_resume_early_1_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_33 := devirtbounce.15($p0, $p1);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_resume_1_5: ref;

axiom ldv_pci_instance_resume_1_5 == $sub.ref(0, 446698);

procedure ldv_pci_instance_resume_1_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pci_instance_resume_1_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_34 := devirtbounce.15($p0, $p1);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_shutdown_1_3: ref;

axiom ldv_pci_instance_shutdown_1_3 == $sub.ref(0, 447730);

procedure ldv_pci_instance_shutdown_1_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, assertsPassed, $CurrAddr, $M.0, $M.9, $M.10;



implementation ldv_pci_instance_shutdown_1_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} devirtbounce.16($p0, $p1);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_release_1_2: ref;

axiom ldv_pci_instance_release_1_2 == $sub.ref(0, 448762);

procedure ldv_pci_instance_release_1_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, assertsPassed, $CurrAddr, $M.0, $M.9, $M.10;



implementation ldv_pci_instance_release_1_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} net2272_pci_remove($p1);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_12_14_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_12_14_4 == $sub.ref(0, 449794);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_12_14_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_12_14_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_14_14_5: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_14_14_5 == $sub.ref(0, 450826);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_14_14_5();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_14_14_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_io_instance_13_14_6: ref;

axiom ldv_dispatch_deregister_io_instance_13_14_6 == $sub.ref(0, 451858);

procedure ldv_dispatch_deregister_io_instance_13_14_6();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_io_instance_13_14_6()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_rtc_class_instance_11_14_7: ref;

axiom ldv_dispatch_deregister_rtc_class_instance_11_14_7 == $sub.ref(0, 452890);

procedure ldv_dispatch_deregister_rtc_class_instance_11_14_7();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_rtc_class_instance_11_14_7()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_12_14_8: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_12_14_8 == $sub.ref(0, 453922);

procedure ldv_dispatch_register_dummy_resourceless_instance_12_14_8();
  free requires assertsPassed;
  modifies $M.1, $M.16, $CurrAddr, assertsPassed;



implementation ldv_dispatch_register_dummy_resourceless_instance_12_14_8()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $p0 := ldv_xmalloc(16);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} ldv_struct_device_attribute_dummy_resourceless_instance_5($p2);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_5: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_5 == $sub.ref(0, 454954);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_5($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, $CurrAddr, assertsPassed;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_5($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $i1 := ldv_undef_int();
    call {:si_unique_call 1573} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} ldv_dummy_resourceless_instance_callback_5_3($u8, $u6, $u9, $p3);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} ldv_free($p3);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} $i4 := ldv_undef_int();
    call {:si_unique_call 1578} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} $p3 := ldv_xmalloc(1);
    goto corral_source_split_7415;
}



const ldv_dummy_resourceless_instance_callback_5_3: ref;

axiom ldv_dummy_resourceless_instance_callback_5_3 == $sub.ref(0, 455986);

procedure ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_35: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} vslice_dummy_var_35 := registers_show($p1, $p2, $p3);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_14_14_9: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_14_14_9 == $sub.ref(0, 457018);

procedure ldv_dispatch_register_dummy_resourceless_instance_14_14_9();
  free requires assertsPassed;
  modifies $M.16, $M.1, $CurrAddr, assertsPassed, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $M.9, $M.10;



implementation ldv_dispatch_register_dummy_resourceless_instance_14_14_9()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $p0 := ldv_xmalloc(16);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7($p2);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;
}



const ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7: ref;

axiom ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7 == $sub.ref(0, 458050);

procedure ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.1, assertsPassed, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.0, $M.9, $M.10;



implementation ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8 := ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8);
    goto $bb1_last;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i8 := $i1;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 7);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} ldv_stop();
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i9 == 1;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} ldv_dummy_resourceless_instance_callback_7_3($u10, $u11);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} ldv_dummy_resourceless_instance_callback_7_7($u14, $u11, $u0);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} ldv_dummy_resourceless_instance_callback_7_10($u14, $u11, $u0);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} ldv_dummy_resourceless_instance_callback_7_13($u12, $u11, $u13);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} ldv_dummy_resourceless_instance_callback_7_14($u10, $u11);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} ldv_dummy_resourceless_instance_callback_7_15($u10, $u11);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb31_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $i1 := ldv_undef_int();
    call {:si_unique_call 1583} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7434;
}



const ldv_dummy_resourceless_instance_callback_7_15: ref;

axiom ldv_dummy_resourceless_instance_callback_7_15 == $sub.ref(0, 459082);

procedure ldv_dummy_resourceless_instance_callback_7_15($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_15($p0: ref, $p1: ref)
{
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} vslice_dummy_var_36 := net2272_wakeup($p1);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_14: ref;

axiom ldv_dummy_resourceless_instance_callback_7_14 == $sub.ref(0, 460114);

procedure ldv_dummy_resourceless_instance_callback_7_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.0, $M.9, $M.10;



implementation ldv_dummy_resourceless_instance_callback_7_14($p0: ref, $p1: ref)
{
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} vslice_dummy_var_37 := net2272_stop($p1);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_13: ref;

axiom ldv_dummy_resourceless_instance_callback_7_13 == $sub.ref(0, 461146);

procedure ldv_dummy_resourceless_instance_callback_7_13($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_dummy_resourceless_instance_callback_7_13($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} vslice_dummy_var_38 := net2272_start($p1, $p2);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_10: ref;

axiom ldv_dummy_resourceless_instance_callback_7_10 == $sub.ref(0, 462178);

procedure ldv_dummy_resourceless_instance_callback_7_10($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_dummy_resourceless_instance_callback_7_10($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} {:cexpr "ldv_dummy_resourceless_instance_callback_7_10:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} vslice_dummy_var_39 := net2272_set_selfpowered($p1, $i2);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_7: ref;

axiom ldv_dummy_resourceless_instance_callback_7_7 == $sub.ref(0, 463210);

procedure ldv_dummy_resourceless_instance_callback_7_7($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_7($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} {:cexpr "ldv_dummy_resourceless_instance_callback_7_7:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} vslice_dummy_var_40 := net2272_pullup($p1, $i2);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_3: ref;

axiom ldv_dummy_resourceless_instance_callback_7_3 == $sub.ref(0, 464242);

procedure ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} vslice_dummy_var_41 := net2272_get_frame($p1);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_io_instance_13_14_10: ref;

axiom ldv_dispatch_register_io_instance_13_14_10 == $sub.ref(0, 465274);

procedure ldv_dispatch_register_io_instance_13_14_10();
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.16, assertsPassed, $M.2, $M.0, $M.9, $M.10;



implementation ldv_dispatch_register_io_instance_13_14_10()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $p0 := ldv_xmalloc(16);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} ldv_struct_usb_ep_ops_io_instance_6($p2);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;
}



const ldv_struct_usb_ep_ops_io_instance_6: ref;

axiom ldv_struct_usb_ep_ops_io_instance_6 == $sub.ref(0, 466306);

procedure ldv_struct_usb_ep_ops_io_instance_6($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $CurrAddr, assertsPassed, $M.2, $M.0, $M.9, $M.10;



implementation ldv_struct_usb_ep_ops_io_instance_6($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $p1 := ldv_xmalloc(9);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $p3 := ldv_xmalloc(64);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $p5 := ldv_xmalloc(88);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $i7 := ldv_undef_int();
    call {:si_unique_call 1605} {:cexpr "tmp___3"} boogie_si_record_i32($i7);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p2);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} ldv_free($p23);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} ldv_free($p24);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p6);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} ldv_free($p25);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38 := ldv_struct_usb_ep_ops_io_instance_6_loop_$bb4($p2, $p4, $p6, $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38);
    goto $bb4_last;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.70, $p9);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $i11 := ldv_io_instance_probe_6_11($p10, $p4, $p2);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    call {:si_unique_call 1610} {:cexpr "ldv_6_ret_default"} boogie_si_record_i32($i11);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $i12 := ldv_filter_err_code($i11);
    call {:si_unique_call 1612} {:cexpr "ldv_6_ret_default"} boogie_si_record_i32($i12);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $i13 := ldv_undef_int();
    call {:si_unique_call 1614} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i12, 0);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} ldv_assume($i20);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $i21 := ldv_undef_int();
    call {:si_unique_call 1623} {:cexpr "tmp___3"} boogie_si_record_i32($i21);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb12_dummy;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 0);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} ldv_assume($i16);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $i17 := ldv_undef_int();
    call {:si_unique_call 1617} {:cexpr "tmp___5"} boogie_si_record_i32($i17);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38 := ldv_struct_usb_ep_ops_io_instance_6_loop_$bb10($p4, $p6, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38);
    goto $bb10_last;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i28, 2);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i28, 3);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i28, 4);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i28, 5);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i28, 6);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i28, 7);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i28, 8);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} ldv_stop();
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $i37 := ldv_undef_int();
    call {:si_unique_call 1634} {:cexpr "tmp___5"} boogie_si_record_i32($i37);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb51_dummy;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($u15, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.71, $p26);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} ldv_io_instance_release_6_2($p27, $p4);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i36 == 1;
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} ldv_io_instance_callback_6_4($u22, $p4, $u0);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i35 == 1;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} ldv_io_instance_callback_6_19($u21, $p4, $p6);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i34 == 1;
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} ldv_io_instance_callback_6_20($u20, $p4);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb31:
    assume $i33 == 1;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} ldv_io_instance_callback_6_21($u16, $p4);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb27:
    assume $i32 == 1;
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} ldv_io_instance_callback_6_22($u19, $p4, $p6);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb23:
    assume $i31 == 1;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_io_instance_callback_6_23($u18, $p4, $p6, $u0);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} ldv_io_instance_callback_6_26($u17, $p4, $u0);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_io_instance_callback_6_29($u16, $p4);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb8;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb51_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} $i28 := ldv_undef_int();
    call {:si_unique_call 1621} {:cexpr "tmp___4"} boogie_si_record_i32($i28);
    goto corral_source_split_7545;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($u15, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7520;
}



const ldv_io_instance_probe_6_11: ref;

axiom ldv_io_instance_probe_6_11 == $sub.ref(0, 467338);

procedure ldv_io_instance_probe_6_11($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $CurrAddr, assertsPassed;



implementation ldv_io_instance_probe_6_11($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $i3 := net2272_enable($p1, $p2);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    call {:si_unique_call 1636} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_release_6_2: ref;

axiom ldv_io_instance_release_6_2 == $sub.ref(0, 468370);

procedure ldv_io_instance_release_6_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation ldv_io_instance_release_6_2($p0: ref, $p1: ref)
{
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} vslice_dummy_var_42 := net2272_disable($p1);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_6_29: ref;

axiom ldv_io_instance_callback_6_29 == $sub.ref(0, 469402);

procedure ldv_io_instance_callback_6_29($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation ldv_io_instance_callback_6_29($p0: ref, $p1: ref)
{
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} vslice_dummy_var_43 := net2272_set_wedge($p1);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_6_26: ref;

axiom ldv_io_instance_callback_6_26 == $sub.ref(0, 470434);

procedure ldv_io_instance_callback_6_26($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation ldv_io_instance_callback_6_26($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} {:cexpr "ldv_io_instance_callback_6_26:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} vslice_dummy_var_44 := net2272_set_halt($p1, $i2);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_6_23: ref;

axiom ldv_io_instance_callback_6_23 == $sub.ref(0, 471466);

procedure ldv_io_instance_callback_6_23($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $CurrAddr, assertsPassed, $M.2, $M.0, $M.9, $M.10;



implementation ldv_io_instance_callback_6_23($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} {:cexpr "ldv_io_instance_callback_6_23:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} vslice_dummy_var_45 := net2272_queue($p1, $p2, $i3);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_6_22: ref;

axiom ldv_io_instance_callback_6_22 == $sub.ref(0, 472498);

procedure ldv_io_instance_callback_6_22($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_6_22($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} net2272_free_request($p1, $p2);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_6_21: ref;

axiom ldv_io_instance_callback_6_21 == $sub.ref(0, 473530);

procedure ldv_io_instance_callback_6_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_6_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} vslice_dummy_var_46 := net2272_fifo_status($p1);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_6_20: ref;

axiom ldv_io_instance_callback_6_20 == $sub.ref(0, 474562);

procedure ldv_io_instance_callback_6_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_6_20($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} net2272_fifo_flush($p1);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_6_19: ref;

axiom ldv_io_instance_callback_6_19 == $sub.ref(0, 475594);

procedure ldv_io_instance_callback_6_19($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $CurrAddr, assertsPassed;



implementation ldv_io_instance_callback_6_19($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} vslice_dummy_var_47 := net2272_dequeue($p1, $p2);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_6_4: ref;

axiom ldv_io_instance_callback_6_4 == $sub.ref(0, 476626);

procedure ldv_io_instance_callback_6_4($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation ldv_io_instance_callback_6_4($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_48: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} {:cexpr "ldv_io_instance_callback_6_4:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} vslice_dummy_var_48 := net2272_alloc_request($p1, $i2);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_rtc_class_instance_11_14_11: ref;

axiom ldv_dispatch_register_rtc_class_instance_11_14_11 == $sub.ref(0, 477658);

procedure ldv_dispatch_register_rtc_class_instance_11_14_11();
  free requires assertsPassed;
  modifies $M.65, $M.66, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_dispatch_register_rtc_class_instance_11_14_11()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $p0 := ldv_xmalloc(16);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} ldv_rtc_rtc_class_instance_4($p2);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;
}



const ldv_rtc_rtc_class_instance_4: ref;

axiom ldv_rtc_rtc_class_instance_4 == $sub.ref(0, 478690);

procedure ldv_rtc_rtc_class_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.65, $M.66, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, assertsPassed, $CurrAddr, $M.0, $M.9, $M.10;



implementation ldv_rtc_rtc_class_instance_4($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $i1 := ldv_undef_int();
    call {:si_unique_call 1652} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb4;

  $bb4:
    call $i3, $p4, $p5, $i6, $i7, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $p24 := ldv_rtc_rtc_class_instance_4_loop_$bb4($i3, $p4, $p5, $i6, $i7, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $p24);
    goto $bb4_last;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} ldv_ldv_pre_probe_153();
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($u23, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.72, $p4);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $i12 := ldv_ldv_post_probe_154($i11);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    call {:si_unique_call 1657} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32($i12);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $i13 := ldv_undef_int();
    call {:si_unique_call 1659} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i12, 0);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} ldv_assume($i18);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} $i19 := ldv_undef_int();
    call {:si_unique_call 1665} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i12;
    goto $bb12_dummy;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 0);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} ldv_assume($i16);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i21, $i22 := ldv_rtc_rtc_class_instance_4_loop_$bb10($i21, $i22);
    goto $bb10_last;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($u23, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.74, $p23);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} ldv_rtc_class_instance_release_4_2($p24, $u6);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb14_dummy;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($u23, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.73, $p8);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $i10 := ldv_rtc_class_instance_probe_4_10($p9, $u6);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    call {:si_unique_call 1655} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32($i10);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb7;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  $bb14_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $i21 := ldv_undef_int();
    call {:si_unique_call 1663} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_7675;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7648;
}



const ldv_ldv_pre_probe_153: ref;

axiom ldv_ldv_pre_probe_153 == $sub.ref(0, 479722);

procedure ldv_ldv_pre_probe_153();
  free requires assertsPassed;
  modifies $M.65, $M.66;



implementation ldv_ldv_pre_probe_153()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} ldv_pre_probe();
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    return;
}



const ldv_rtc_class_instance_probe_4_10: ref;

axiom ldv_rtc_class_instance_probe_4_10 == $sub.ref(0, 480754);

procedure ldv_rtc_class_instance_probe_4_10($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_rtc_class_instance_probe_4_10($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $i2 := devirtbounce.13($p0, $p1);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    call {:si_unique_call 1671} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_154: ref;

axiom ldv_ldv_post_probe_154 == $sub.ref(0, 481786);

procedure ldv_ldv_post_probe_154($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, $M.66, assertsPassed;



implementation ldv_ldv_post_probe_154($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} {:cexpr "ldv_ldv_post_probe_154:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 1676} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;
}



const ldv_rtc_class_instance_release_4_2: ref;

axiom ldv_rtc_class_instance_release_4_2 == $sub.ref(0, 482818);

procedure ldv_rtc_class_instance_release_4_2($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_rtc_class_instance_release_4_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} net2272_gadget_release($p1);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    return;
}



const ldv_entry_EMGentry_14: ref;

axiom ldv_entry_EMGentry_14 == $sub.ref(0, 483850);

procedure ldv_entry_EMGentry_14($p0: ref);
  free requires assertsPassed;
  modifies $M.65, $M.66, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $CurrAddr, assertsPassed, $M.2, $M.68, $M.69, $M.9, $M.10, $M.0;



implementation ldv_entry_EMGentry_14($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $i1 := ldv_EMGentry_init_net2272_init_14_15($u24);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    call {:si_unique_call 1679} {:cexpr "ldv_14_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} $i2 := ldv_ldv_post_init_145($i1);
    call {:si_unique_call 1681} {:cexpr "ldv_14_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $i3 := ldv_undef_int();
    call {:si_unique_call 1683} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} ldv_assume($i8);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} $i9 := ldv_undef_int();
    call {:si_unique_call 1689} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} ldv_EMGentry_exit_net2272_cleanup_14_2($u25);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} ldv_ldv_check_final_state_147();
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} ldv_stop();
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} ldv_dispatch_register_rtc_class_instance_11_14_11();
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} ldv_dispatch_register_io_instance_13_14_10();
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_dispatch_register_dummy_resourceless_instance_14_14_9();
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} ldv_dispatch_register_dummy_resourceless_instance_12_14_8();
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} ldv_dispatch_deregister_rtc_class_instance_11_14_7();
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} ldv_dispatch_deregister_io_instance_13_14_6();
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} ldv_dispatch_deregister_dummy_resourceless_instance_14_14_5();
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} ldv_dispatch_deregister_dummy_resourceless_instance_12_14_4();
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} ldv_assume($i6);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} ldv_ldv_check_final_state_146();
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} ldv_stop();
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  SeqInstr_769:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_145: ref;

axiom ldv_ldv_post_init_145 == $sub.ref(0, 484882);

procedure ldv_ldv_post_init_145($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, $M.66;



implementation ldv_ldv_post_init_145($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} {:cexpr "ldv_ldv_post_init_145:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} $i1 := ldv_post_init($i0);
    call {:si_unique_call 1705} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_146: ref;

axiom ldv_ldv_check_final_state_146 == $sub.ref(0, 485914);

procedure ldv_ldv_check_final_state_146();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_146()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} ldv_linux_block_request_check_final_state();
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  SeqInstr_790:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_147: ref;

axiom ldv_ldv_check_final_state_147 == $sub.ref(0, 486946);

procedure ldv_ldv_check_final_state_147();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_147()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} ldv_linux_block_request_check_final_state();
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 487978);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 489010);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i0 := $M.75;
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_913:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 490042);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i0 := $M.76;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 491074);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i0 := $M.77;
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 492106);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i0 := $M.78;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 493138);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i0 := $M.79;
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 494170);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i0 := $M.80;
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 495202);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i0 := $M.81;
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i3 := $M.82;
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 496234);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i0 := $M.83;
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 497266);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i0 := $M.84;
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 498298);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i0 := $M.85;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 499330);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i0 := $M.86;
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 500362);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i0 := $M.87;
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 501394);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i0 := $M.88;
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i3 := $M.88;
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 502426);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i0 := $M.89;
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_955:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 503458);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i0 := $M.90;
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 504490);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i0 := $M.91;
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_961:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 505522);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i0 := $M.92;
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 506554);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i0 := $M.93;
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 507586);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i0 := $M.94;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 508618);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1768} __VERIFIER_error();
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 509650);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1770} __VERIFIER_error();
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 510682);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1772} __VERIFIER_error();
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 511714);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1774} __VERIFIER_error();
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 512746);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1776} __VERIFIER_error();
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 513778);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1778} __VERIFIER_error();
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 514810);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1780} __VERIFIER_error();
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 515842);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1782} __VERIFIER_error();
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 516874);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1784} __VERIFIER_error();
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 517906);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1786} __VERIFIER_error();
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 518938);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1788} __VERIFIER_error();
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 519970);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1790} __VERIFIER_error();
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 521002);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1792} __VERIFIER_error();
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 522034);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1794} __VERIFIER_error();
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 523066);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1796} __VERIFIER_error();
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 524098);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1798} __VERIFIER_error();
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 525130);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1800} __VERIFIER_error();
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 526162);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1802} __VERIFIER_error();
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 527194);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1804} __VERIFIER_error();
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 528226);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1806} __VERIFIER_error();
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 529258);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1808} __VERIFIER_error();
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1033:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 530290);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1811} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 531322);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.2, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.87, $M.84, $M.85, $M.86, $M.89, $M.65, $M.90, $M.91, $M.92, $M.93, $M.66, $M.94, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.88, $M.16, $M.0, $M.76, $M.75, $M.132, $M.133, $M.1, $M.134, $M.15, $M.14, $M.13, $M.12, $M.11, $M.18, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, assertsPassed, $M.68, $M.69, $M.9, $M.10;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 1812} $initialize();
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} ldv_ldv_initialize_148();
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} ldv_entry_EMGentry_14($0.ref);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_148: ref;

axiom ldv_ldv_initialize_148 == $sub.ref(0, 532354);

procedure ldv_ldv_initialize_148();
  free requires assertsPassed;



implementation ldv_ldv_initialize_148()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 533386);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} ldv_assume($i2);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 534418);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 535450);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1818} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 1} true;
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 536482);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 537514);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 538546);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 539578);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 540610);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 541642);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 542674);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 543706);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 544738);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 545770);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 546802);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 547834);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 548866);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1819} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1820} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1821} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1822} __VERIFIER_assume($i4);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 549898);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 550930);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 551962);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 552994);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 554026);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 555058);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 556090);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 557122);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 558154);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 559186);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 560218);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 561250);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 562282);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 563314);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 564346);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 565378);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 566410);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1823} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1824} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 567442);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 568474);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1825} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1826} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 569506);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 570538);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 571570);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1827} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1828} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1829} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1830} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $p6 := malloc($i5);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    call {:si_unique_call 1832} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_1;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 572602);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 573634);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.17, $M.2, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.87, $M.84, $M.85, $M.86, $M.89, $M.65, $M.90, $M.91, $M.92, $M.93, $M.66, $M.94, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.88, $M.16, $M.0, $M.76, $M.75, $M.132, $M.133, $M.1, $M.134, $M.15, $M.14, $M.13, $M.12, $M.11, $M.18;



implementation __SMACK_static_init()
{

  $bb0:
    $M.17 := 1;
    call {:si_unique_call 1833} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.2 := 0;
    call {:si_unique_call 1834} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 1835} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1836} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 1837} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 1838} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.81 := 1;
    call {:si_unique_call 1839} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.82 := 1;
    call {:si_unique_call 1840} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.83 := 1;
    call {:si_unique_call 1841} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.87 := 0;
    call {:si_unique_call 1842} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1843} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 1844} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 1845} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 1846} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.65 := 0;
    call {:si_unique_call 1847} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 1848} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 1849} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 1850} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    call {:si_unique_call 1851} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 1852} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1853} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 1854} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    call {:si_unique_call 1855} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 1856} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 1857} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    $M.99 := $store.i32($M.99, __mod_pci__pci_ids_device_table, 0);
    $M.100 := $store.i32($M.100, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.101 := $store.i32($M.101, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.104 := $store.i32($M.104, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.105 := $store.i64($M.105, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.99 := $store.i32($M.99, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.100 := $store.i32($M.100, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.101 := $store.i32($M.101, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.104 := $store.i32($M.104, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.105 := $store.i64($M.105, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.99 := $store.i32($M.99, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.100 := $store.i32($M.100, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.101 := $store.i32($M.101, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.104 := $store.i32($M.104, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.105 := $store.i64($M.105, $add.ref($add.ref($add.ref(__mod_pci__pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.88 := 0;
    call {:si_unique_call 1858} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    call {:si_unique_call 1859} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    call {:si_unique_call 1860} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 1861} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 1862} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    $M.16 := 1;
    call {:si_unique_call 1863} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_net2272"} boogie_si_record_i32(1);
    call {:si_unique_call 1864} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 1865} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 1866} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    call {:si_unique_call 1867} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    $M.0 := 0;
    call {:si_unique_call 1868} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.76 := 0;
    call {:si_unique_call 1869} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 1870} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.132 := $store.ref($M.132, dev_attr_registers, .str.83);
    $M.132 := $store.i16($M.132, $add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(32, 1)), registers_show);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(dev_attr_registers, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.133 := $store.i8($M.133, driver_desc, 80);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(1, 1)), 76);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(2, 1)), 88);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(3, 1)), 32);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(4, 1)), 78);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(5, 1)), 69);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(6, 1)), 84);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(7, 1)), 50);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(8, 1)), 50);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(9, 1)), 55);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(10, 1)), 50);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(11, 1)), 32);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(12, 1)), 85);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(13, 1)), 83);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(14, 1)), 66);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(15, 1)), 32);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(16, 1)), 80);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(17, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(18, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(19, 1)), 105);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(20, 1)), 112);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(21, 1)), 104);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(22, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(23, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(24, 1)), 97);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(25, 1)), 108);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(26, 1)), 32);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(27, 1)), 67);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(28, 1)), 111);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(29, 1)), 110);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(30, 1)), 116);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(31, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(32, 1)), 111);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(33, 1)), 108);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(34, 1)), 108);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(35, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(36, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(driver_desc, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.1 := $store.ref($M.1, net2272_ops, net2272_get_frame);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), net2272_wakeup);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), net2272_set_selfpowered);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), net2272_pullup);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), net2272_start);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), net2272_stop);
    $M.134 := $store.i8($M.134, net2272_test_packet, 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(1, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(2, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(3, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(4, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(5, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(6, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(7, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(8, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(9, 1)), $sub.i8(0, 86));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(10, 1)), $sub.i8(0, 86));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(11, 1)), $sub.i8(0, 86));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(12, 1)), $sub.i8(0, 86));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(13, 1)), $sub.i8(0, 86));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(14, 1)), $sub.i8(0, 86));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(15, 1)), $sub.i8(0, 86));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(16, 1)), $sub.i8(0, 86));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(17, 1)), $sub.i8(0, 18));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(18, 1)), $sub.i8(0, 18));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(19, 1)), $sub.i8(0, 18));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(20, 1)), $sub.i8(0, 18));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(21, 1)), $sub.i8(0, 18));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(22, 1)), $sub.i8(0, 18));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(23, 1)), $sub.i8(0, 18));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(24, 1)), $sub.i8(0, 18));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(25, 1)), $sub.i8(0, 2));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(26, 1)), $sub.i8(0, 1));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(27, 1)), $sub.i8(0, 1));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(28, 1)), $sub.i8(0, 1));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(29, 1)), $sub.i8(0, 1));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(30, 1)), $sub.i8(0, 1));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(31, 1)), $sub.i8(0, 1));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(32, 1)), $sub.i8(0, 1));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(33, 1)), $sub.i8(0, 1));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(34, 1)), $sub.i8(0, 1));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(35, 1)), $sub.i8(0, 1));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(36, 1)), $sub.i8(0, 1));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(37, 1)), 127);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(38, 1)), $sub.i8(0, 65));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(39, 1)), $sub.i8(0, 33));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(40, 1)), $sub.i8(0, 17));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(41, 1)), $sub.i8(0, 9));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(42, 1)), $sub.i8(0, 5));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(43, 1)), $sub.i8(0, 3));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(44, 1)), $sub.i8(0, 4));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(45, 1)), 126);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(46, 1)), $sub.i8(0, 65));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(47, 1)), $sub.i8(0, 33));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(48, 1)), $sub.i8(0, 17));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(49, 1)), $sub.i8(0, 9));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(50, 1)), $sub.i8(0, 3));
    $M.134 := $store.i8($M.134, $add.ref($add.ref(net2272_test_packet, $mul.ref(0, 52)), $mul.ref(51, 1)), 126);
    $M.15 := 0;
    call {:si_unique_call 1871} {:cexpr "enable_suspend"} boogie_si_record_i16(0);
    $M.1 := $store.ref($M.1, net2272_ep_ops, net2272_enable);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ep_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), net2272_disable);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ep_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), net2272_alloc_request);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ep_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), net2272_free_request);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ep_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), net2272_queue);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ep_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), net2272_dequeue);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ep_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), net2272_set_halt);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ep_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), net2272_set_wedge);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ep_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), net2272_fifo_status);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_ep_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), net2272_fifo_flush);
    $M.14 := 0;
    call {:si_unique_call 1872} {:cexpr "use_dma"} boogie_si_record_i8(0);
    $M.13 := 2;
    call {:si_unique_call 1873} {:cexpr "dma_mode"} boogie_si_record_i16(2);
    $M.12 := 0;
    call {:si_unique_call 1874} {:cexpr "fifo_mode"} boogie_si_record_i16(0);
    $M.11 := 1;
    call {:si_unique_call 1875} {:cexpr "dma_ep"} boogie_si_record_i16(1);
    $M.1 := $store.i8($M.1, ep0name, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0name, $mul.ref(0, 4)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0name, $mul.ref(0, 4)), $mul.ref(2, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0name, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.18 := $store.ref($M.18, ep_name, ep0name);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(ep_name, $mul.ref(0, 32)), $mul.ref(1, 8)), .str.30);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(ep_name, $mul.ref(0, 32)), $mul.ref(2, 8)), .str.31);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(ep_name, $mul.ref(0, 32)), $mul.ref(3, 8)), .str.32);
    $M.1 := $store.i8($M.1, driver_vers, 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(1, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(2, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(3, 1)), 54);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(5, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(6, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(7, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(8, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(9, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(11, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(12, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(13, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(14, 1)), 55);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(15, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(16, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(17, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(18, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(19, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(21, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(22, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_vers, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.1 := $store.ref($M.1, net2272_plat_driver, net2272_plat_probe);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(8, 1)), net2272_plat_remove);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(0, 1)), driver_name);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(160, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(net2272_plat_driver, $mul.ref(0, 176)), $mul.ref(168, 1)), 0);
    $M.1 := $store.i32($M.1, pci_ids, 4277);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 36948);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 426238);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4277);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 12914);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 426238);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i8($M.1, driver_name, 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_name, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_name, $mul.ref(0, 8)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_name, $mul.ref(0, 8)), $mul.ref(3, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_name, $mul.ref(0, 8)), $mul.ref(4, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_name, $mul.ref(0, 8)), $mul.ref(5, 1)), 55);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_name, $mul.ref(0, 8)), $mul.ref(6, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_name, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.ref($M.1, net2272_pci_driver, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), driver_name);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), pci_ids);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), net2272_pci_probe);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), net2272_pci_remove);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(net2272_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i8($M.1, .str.78, 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(1, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(2, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.79, 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(1, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(2, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(3, 1)), 87);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(5, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(6, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(7, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(8, 1)), 81);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, .str.80, 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 10)), $mul.ref(1, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 10)), $mul.ref(2, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 10)), $mul.ref(3, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 10)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 10)), $mul.ref(5, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 10)), $mul.ref(6, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 10)), $mul.ref(7, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 10)), $mul.ref(8, 1)), 81);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, .str.81, 66);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.81, $mul.ref(0, 6)), $mul.ref(1, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.81, $mul.ref(0, 6)), $mul.ref(2, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.81, $mul.ref(0, 6)), $mul.ref(3, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.81, $mul.ref(0, 6)), $mul.ref(4, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.81, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.82, 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(2, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(3, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(4, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str, 0);
    $M.1 := $store.i8($M.1, .str.89, 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.89, $mul.ref(0, 4)), $mul.ref(1, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.89, $mul.ref(0, 4)), $mul.ref(2, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.89, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.30, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 5)), $mul.ref(2, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 5)), $mul.ref(3, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.31, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 5)), $mul.ref(2, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 5)), $mul.ref(3, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.32, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(2, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(3, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.25, 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 3)), $mul.ref(1, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.1 := $store.i8($M.1, .str.26, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 4)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.33, 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 5)), $mul.ref(1, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 5)), $mul.ref(2, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 5)), $mul.ref(3, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.34, 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 4)), $mul.ref(2, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.35, 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(1, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(3, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.36, 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(1, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(2, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(3, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(6, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.5, 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 6)), $mul.ref(1, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 6)), $mul.ref(2, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 6)), $mul.ref(3, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 6)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.6, 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 8)), $mul.ref(2, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 8)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 8)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 8)), $mul.ref(5, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 8)), $mul.ref(6, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.7, 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 5)), $mul.ref(1, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 5)), $mul.ref(2, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 5)), $mul.ref(3, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.8, 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(1, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(2, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(4, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(5, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.15, 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(1, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(2, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(3, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.16, 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 6)), $mul.ref(1, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 6)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 6)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 6)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.17, 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 6)), $mul.ref(1, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 6)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 6)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 6)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.18, 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(1, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(5, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(6, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(7, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(9, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.19, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(1, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(2, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(3, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(5, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(6, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.20, 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(1, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(2, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(3, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(4, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(7, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.21, 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(1, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(2, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(3, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(4, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(5, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.22, 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(1, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(2, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(3, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(5, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.23, 72);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(1, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(2, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(3, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.27, 42);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    call {:si_unique_call 1876} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 574666);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 575698);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(net2272_stop, $p0);
    assume {:branchcond $i24} true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i24 == 1);
    $i23 := $eq.ref(net2272_wakeup, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i23 == 1);
    $i22 := $eq.ref(net2272_get_frame, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(net2272_fifo_status, $p0);
    assume {:branchcond $i21} true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(net2272_set_wedge, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(net2272_disable, $p0);
    assume {:branchcond $i19} true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(net2272_plat_remove, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(net2272_plat_probe, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1877} $i2 := net2272_plat_probe($p1);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    $r := $i2;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i18 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1878} $i4 := net2272_plat_remove($p3);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    $r := $i4;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1879} $i6 := net2272_disable($p5);
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    $r := $i6;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1880} $i8 := net2272_set_wedge($p7);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    $r := $i8;
    return;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1881} $i10 := net2272_fifo_status($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1882} $i12 := net2272_get_frame($p11);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    $r := $i12;
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1883} $i14 := net2272_wakeup($p13);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    $r := $i14;
    return;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1884} $i16 := net2272_stop($p15);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    $r := $i16;
    return;

  SeqInstr_1060:
    assume !assertsPassed;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 576730);

procedure devirtbounce.2(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 577762);

procedure devirtbounce.3(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 578794);

procedure devirtbounce.4(funcPtr: ref, arg: i8, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i8, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 579826);

procedure devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 580858);

procedure devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $CurrAddr, $M.9, $M.10, assertsPassed, $M.2, $M.0;



implementation devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(net2272_irq, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1885} $i1 := net2272_irq(arg, arg1);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    $r := $i1;
    return;

  SeqInstr_1063:
    assume !assertsPassed;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 581890);

procedure devirtbounce.7(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, assertsPassed, $CurrAddr, $M.0, $M.9, $M.10;



implementation devirtbounce.7(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(net2272_fifo_flush, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i6 == 1);
    $i5 := $eq.ref(net2272_gadget_release, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i5 == 1);
    $i4 := $eq.ref(net2272_pci_remove, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1886} net2272_pci_remove($p1);
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    return;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i5 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1887} net2272_gadget_release($p2);
    return;

  $bb4:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1888} net2272_fifo_flush($p3);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 582922);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i23 := $eq.ref(net2272_start, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i23 == 1);
    $i22 := $eq.ref(net2272_dequeue, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i22 == 1);
    $i21 := $eq.ref(net2272_enable, $p0);
    assume {:branchcond $i21} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i21 == 1);
    $i20 := $eq.ref(net2272_read_fifo, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i20 == 1);
    $i19 := $eq.ref(net2272_write_fifo, $p0);
    assume {:branchcond $i19} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i19 == 1);
    $i18 := $eq.ref(net2272_pci_probe, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume false;
    return;

  $bb2:
    assume $i18 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1889} $i3 := net2272_pci_probe($p1, $p2);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    $r := $i3;
    return;

  SeqInstr_1069:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i19 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1890} $i6 := net2272_write_fifo($p4, $p5);
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    $r := $i6;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1891} $i9 := net2272_read_fifo($p7, $p8);
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    $r := $i9;
    return;

  SeqInstr_1075:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1892} $i12 := net2272_enable($p10, $p11);
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    $r := $i12;
    return;

  SeqInstr_1078:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i22 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1893} $i15 := net2272_dequeue($p13, $p14);
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    $r := $i15;
    return;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1894} $i17 := net2272_start(arg, $p16);
    $r := $i17;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 583954);

procedure devirtbounce.9(funcPtr: ref, arg: i16, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: i16, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 584986);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(net2272_start, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(net2272_dequeue, $p0);
    assume {:branchcond $i19} true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(net2272_enable, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(net2272_read_fifo, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i17 == 1);
    $i16 := $eq.ref(net2272_write_fifo, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i16 == 1);
    $i15 := $eq.ref(net2272_pci_probe, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1895} $i3 := net2272_pci_probe($p1, $p2);
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    $r := $i3;
    return;

  SeqInstr_1084:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    call {:si_unique_call 1896} $i4 := net2272_write_fifo(arg, arg1);
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    $r := $i4;
    return;

  SeqInstr_1087:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 1897} $i5 := net2272_read_fifo(arg, arg1);
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    $r := $i5;
    return;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    $p6 := $bitcast.ref.ref(arg);
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1898} $i8 := net2272_enable($p6, $p7);
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    $r := $i8;
    return;

  SeqInstr_1093:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i19 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1899} $i11 := net2272_dequeue($p9, $p10);
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    $r := $i11;
    return;

  SeqInstr_1096:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i20 == 1;
    $p12 := $bitcast.ref.ref(arg);
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1900} $i14 := net2272_start($p12, $p13);
    $r := $i14;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 586018);

procedure devirtbounce.11(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 587050);

procedure devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i16);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i16)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 588082);

procedure devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(net2272_wakeup, $p0);
    assume {:branchcond $i24} true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i24 == 1);
    $i23 := $eq.ref(net2272_get_frame, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i23 == 1);
    $i22 := $eq.ref(net2272_fifo_status, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(net2272_set_wedge, $p0);
    assume {:branchcond $i21} true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(net2272_disable, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(net2272_plat_remove, $p0);
    assume {:branchcond $i19} true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(net2272_stop, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(net2272_plat_probe, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1901} $i2 := net2272_plat_probe($p1);
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    $r := $i2;
    return;

  SeqInstr_1099:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i18 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1902} $i4 := net2272_stop($p3);
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    $r := $i4;
    return;

  SeqInstr_1102:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1903} $i6 := net2272_plat_remove($p5);
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    $r := $i6;
    return;

  SeqInstr_1105:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1904} $i8 := net2272_disable($p7);
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    $r := $i8;
    return;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1905} $i10 := net2272_set_wedge($p9);
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    $r := $i10;
    return;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1906} $i12 := net2272_fifo_status($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i23 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1907} $i14 := net2272_get_frame($p13);
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    $r := $i14;
    return;

  SeqInstr_1114:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1908} $i16 := net2272_wakeup($p15);
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    $r := $i16;
    return;

  SeqInstr_1117:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 589114);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(net2272_pullup, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(net2272_set_selfpowered, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(net2272_set_halt, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1909} $i2 := net2272_set_halt($p1, arg1);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    $r := $i2;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1910} $i4 := net2272_set_selfpowered($p3, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1911} $i6 := net2272_pullup($p5, arg1);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    $r := $i6;
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 590146);

procedure devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(net2272_stop, $p0);
    assume {:branchcond $i24} true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i24 == 1);
    $i23 := $eq.ref(net2272_wakeup, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i23 == 1);
    $i22 := $eq.ref(net2272_get_frame, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(net2272_fifo_status, $p0);
    assume {:branchcond $i21} true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(net2272_set_wedge, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(net2272_disable, $p0);
    assume {:branchcond $i19} true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(net2272_plat_remove, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(net2272_plat_probe, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1912} $i2 := net2272_plat_probe($p1);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    $r := $i2;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i18 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1913} $i4 := net2272_plat_remove($p3);
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    $r := $i4;
    return;

  SeqInstr_1129:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1914} $i6 := net2272_disable($p5);
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    $r := $i6;
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1915} $i8 := net2272_set_wedge($p7);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    $r := $i8;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1916} $i10 := net2272_fifo_status($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1917} $i12 := net2272_get_frame($p11);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    $r := $i12;
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1918} $i14 := net2272_wakeup($p13);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    $r := $i14;
    return;

  SeqInstr_1141:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1919} $i16 := net2272_stop($p15);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    $r := $i16;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 591178);

procedure devirtbounce.16(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, assertsPassed, $CurrAddr, $M.0, $M.9, $M.10;



implementation devirtbounce.16(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(net2272_fifo_flush, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i5 == 1);
    $i4 := $eq.ref(net2272_gadget_release, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i4 == 1);
    $i3 := $eq.ref(net2272_pci_remove, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 1920} net2272_pci_remove(arg);
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    return;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1921} net2272_gadget_release($p1);
    return;

  $bb4:
    assume $i5 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1922} net2272_fifo_flush($p2);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: ref;

const $u20: ref;

const $u21: ref;

const $u22: ref;

const $u23: ref;

const $u24: ref;

const $u25: ref;

const $u3: i64;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.17, $M.2, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.87, $M.84, $M.85, $M.86, $M.89, $M.65, $M.90, $M.91, $M.92, $M.93, $M.66, $M.94, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.88, $M.16, $M.0, $M.76, $M.75, $M.132, $M.133, $M.1, $M.134, $M.15, $M.14, $M.13, $M.12, $M.11, $M.18, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1923} __SMACK_static_init();
    call {:si_unique_call 1924} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.17, $M.2, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.87, $M.84, $M.85, $M.86, $M.89, $M.65, $M.90, $M.91, $M.92, $M.93, $M.66, $M.94, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.88, $M.16, $M.0, $M.76, $M.75, $M.132, $M.133, $M.1, $M.134, $M.15, $M.14, $M.13, $M.12, $M.11, $M.18, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.68, $M.69, $M.9, $M.10;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation {:SIextraRecBound 4} net2272_rdk1_remove_loop_$bb1(in_$p0: ref, in_$i23: i1, in_$i25: i64, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i64, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i47: i64, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p55: ref, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i32, in_$i60: i64, in_$i24: i32, in_$i61: i32, in_$i62: i1, in_$i22: i32) returns (out_$i23: i1, out_$i25: i64, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i64, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i47: i64, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p55: ref, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i32, out_$i60: i64, out_$i24: i32, out_$i61: i32, out_$i62: i1, out_$i22: i32)
{

  entry:
    out_$i23, out_$i25, out_$p28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$p44, out_$i45, out_$i46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i24, out_$i61, out_$i62, out_$i22 := in_$i23, in_$i25, in_$p28, in_$i29, in_$i30, in_$p33, in_$i34, in_$i35, in_$i36, in_$p39, in_$i40, in_$i41, in_$p44, in_$i45, in_$i46, in_$i47, in_$p50, in_$i51, in_$i52, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i24, in_$i61, in_$i62, in_$i22;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_147;

  $bb13:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i61;
    goto $bb13_dummy;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    out_$i62 := $sle.i32(out_$i61, 3);
    goto corral_source_split_155;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i24, 1);
    call {:si_unique_call 36} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_154;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i59;
    goto $bb5;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    goto $bb5;

  $bb3:
    assume out_$i23 == 1;
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 1);
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} __release_region(iomem_resource, out_$i29, out_$i60);
    goto corral_source_split_187;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    goto corral_source_split_186;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60 := out_$i22, 0;
    goto $bb12;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60 := out_$i22, out_$i58;
    goto $bb12;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(out_$i57, 1);
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$i57 := $sub.i64(out_$i51, out_$i56);
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.1, out_$p55);
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i52, 56)), $mul.ref(0, 1));
    goto corral_source_split_169;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i22);
    goto corral_source_split_168;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.1, out_$p50);
    goto corral_source_split_167;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i47, 56)), $mul.ref(8, 1));
    goto corral_source_split_166;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i22);
    goto corral_source_split_165;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb8;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.1, out_$p33);
    goto corral_source_split_162;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i30, 56)), $mul.ref(0, 1));
    goto corral_source_split_161;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i22);
    goto corral_source_split_160;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.1, out_$p28);
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i25, 56)), $mul.ref(0, 1));
    goto corral_source_split_158;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i22);
    goto corral_source_split_157;

  $bb4:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i40, out_$i45);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.1, out_$p44);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i41, 56)), $mul.ref(0, 1));
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i22);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.1, out_$p39);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i36, 56)), $mul.ref(8, 1));
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i22);
    goto corral_source_split_175;

  $bb9:
    assume !(out_$i35 == 1);
    goto corral_source_split_174;

  $bb11:
    assume !(out_$i46 == 1);
    goto corral_source_split_183;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i23, out_$i25, out_$p28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$p44, out_$i45, out_$i46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i24, out_$i61, out_$i62, out_$i22 := net2272_rdk1_remove_loop_$bb1(in_$p0, out_$i23, out_$i25, out_$p28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$p44, out_$i45, out_$i46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i24, out_$i61, out_$i62, out_$i22);
    return;

  exit:
    return;
}



procedure net2272_rdk1_remove_loop_$bb1(in_$p0: ref, in_$i23: i1, in_$i25: i64, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i64, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i47: i64, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p55: ref, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i32, in_$i60: i64, in_$i24: i32, in_$i61: i32, in_$i62: i1, in_$i22: i32) returns (out_$i23: i1, out_$i25: i64, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i64, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i47: i64, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p55: ref, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i32, out_$i60: i64, out_$i24: i32, out_$i61: i32, out_$i62: i1, out_$i22: i32);



implementation {:SIextraRecBound 2} net2272_rdk1_probe_loop_$bb33(in_$p0: ref, in_$p2: ref, in_$i164: i64, in_$p165: ref, in_$p166: ref, in_$i167: i64, in_$p170: ref, in_$i171: i64, in_$i172: i64, in_$p175: ref, in_$i176: i64, in_$i177: i1, in_$i178: i64, in_$p181: ref, in_$i182: i64, in_$i183: i64, in_$p186: ref, in_$i187: i64, in_$i188: i1, in_$i189: i64, in_$p192: ref, in_$i193: i64, in_$i194: i64, in_$p197: ref, in_$i198: i64, in_$i199: i64, in_$i200: i64, in_$i201: i64, in_$i202: i32, in_$i203: i1, in_$i163: i32) returns (out_$i164: i64, out_$p165: ref, out_$p166: ref, out_$i167: i64, out_$p170: ref, out_$i171: i64, out_$i172: i64, out_$p175: ref, out_$i176: i64, out_$i177: i1, out_$i178: i64, out_$p181: ref, out_$i182: i64, out_$i183: i64, out_$p186: ref, out_$i187: i64, out_$i188: i1, out_$i189: i64, out_$p192: ref, out_$i193: i64, out_$i194: i64, out_$p197: ref, out_$i198: i64, out_$i199: i64, out_$i200: i64, out_$i201: i64, out_$i202: i32, out_$i203: i1, out_$i163: i32)
{

  entry:
    out_$i164, out_$p165, out_$p166, out_$i167, out_$p170, out_$i171, out_$i172, out_$p175, out_$i176, out_$i177, out_$i178, out_$p181, out_$i182, out_$i183, out_$p186, out_$i187, out_$i188, out_$i189, out_$p192, out_$i193, out_$i194, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i163 := in_$i164, in_$p165, in_$p166, in_$i167, in_$p170, in_$i171, in_$i172, in_$p175, in_$i176, in_$i177, in_$i178, in_$p181, in_$i182, in_$i183, in_$p186, in_$i187, in_$i188, in_$i189, in_$p192, in_$i193, in_$i194, in_$p197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i163;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_582;

  $bb41:
    assume out_$i203 == 1;
    assume {:verifier.code 0} true;
    out_$i163 := out_$i202;
    goto $bb41_dummy;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    out_$i203 := $sge.i32(out_$i202, 0);
    goto corral_source_split_619;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    out_$i202 := $sub.i32(out_$i163, 1);
    call {:si_unique_call 113} {:cexpr "i"} boogie_si_record_i32(out_$i202);
    goto corral_source_split_618;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} __release_region(iomem_resource, out_$i171, out_$i201);
    goto corral_source_split_617;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_616;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    out_$i201 := 0;
    goto $bb40;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$i201 := out_$i200;
    goto $bb40;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    out_$i200 := $add.i64(out_$i199, 1);
    goto corral_source_split_603;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    out_$i199 := $sub.i64(out_$i193, out_$i198);
    goto corral_source_split_602;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$i198 := $load.i64($M.1, out_$p197);
    goto corral_source_split_601;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i194, 56)), $mul.ref(0, 1));
    goto corral_source_split_600;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    out_$i194 := $sext.i32.i64(out_$i163);
    goto corral_source_split_599;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i64($M.1, out_$p192);
    goto corral_source_split_598;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i189, 56)), $mul.ref(8, 1));
    goto corral_source_split_597;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i189 := $sext.i32.i64(out_$i163);
    goto corral_source_split_596;

  $bb38:
    assume {:verifier.code 0} true;
    assume out_$i188 == 1;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    assume out_$i177 == 1;
    goto $bb36;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb37;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i64(out_$i176, 0);
    goto corral_source_split_594;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i64($M.1, out_$p175);
    goto corral_source_split_593;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i172, 56)), $mul.ref(0, 1));
    goto corral_source_split_592;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    out_$i172 := $sext.i32.i64(out_$i163);
    goto corral_source_split_591;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i64($M.1, out_$p170);
    goto corral_source_split_590;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i167, 56)), $mul.ref(0, 1));
    goto corral_source_split_589;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    out_$i167 := $sext.i32.i64(out_$i163);
    goto corral_source_split_588;

  SeqInstr_69:
    goto corral_source_split_587;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} ldv_iounmap_133(out_$p166);
    goto SeqInstr_68;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$p166 := $load.ref($M.9, out_$p165);
    goto corral_source_split_586;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i164, 8));
    goto corral_source_split_585;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i164 := $sext.i32.i64(out_$i163);
    goto corral_source_split_584;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    out_$i188 := $ne.i64(out_$i182, out_$i187);
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i64($M.1, out_$p186);
    goto corral_source_split_611;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i183, 56)), $mul.ref(0, 1));
    goto corral_source_split_610;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    out_$i183 := $sext.i32.i64(out_$i163);
    goto corral_source_split_609;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i64($M.1, out_$p181);
    goto corral_source_split_608;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i178, 56)), $mul.ref(8, 1));
    goto corral_source_split_607;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$i178 := $sext.i32.i64(out_$i163);
    goto corral_source_split_606;

  $bb37:
    assume !(out_$i177 == 1);
    goto corral_source_split_605;

  $bb39:
    assume !(out_$i188 == 1);
    goto corral_source_split_614;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i164, out_$p165, out_$p166, out_$i167, out_$p170, out_$i171, out_$i172, out_$p175, out_$i176, out_$i177, out_$i178, out_$p181, out_$i182, out_$i183, out_$p186, out_$i187, out_$i188, out_$i189, out_$p192, out_$i193, out_$i194, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i163 := net2272_rdk1_probe_loop_$bb33(in_$p0, in_$p2, out_$i164, out_$p165, out_$p166, out_$i167, out_$p170, out_$i171, out_$i172, out_$p175, out_$i176, out_$i177, out_$i178, out_$p181, out_$i182, out_$i183, out_$p186, out_$i187, out_$i188, out_$i189, out_$p192, out_$i193, out_$i194, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i163);
    return;

  exit:
    return;
}



procedure net2272_rdk1_probe_loop_$bb33(in_$p0: ref, in_$p2: ref, in_$i164: i64, in_$p165: ref, in_$p166: ref, in_$i167: i64, in_$p170: ref, in_$i171: i64, in_$i172: i64, in_$p175: ref, in_$i176: i64, in_$i177: i1, in_$i178: i64, in_$p181: ref, in_$i182: i64, in_$i183: i64, in_$p186: ref, in_$i187: i64, in_$i188: i1, in_$i189: i64, in_$p192: ref, in_$i193: i64, in_$i194: i64, in_$p197: ref, in_$i198: i64, in_$i199: i64, in_$i200: i64, in_$i201: i64, in_$i202: i32, in_$i203: i1, in_$i163: i32) returns (out_$i164: i64, out_$p165: ref, out_$p166: ref, out_$i167: i64, out_$p170: ref, out_$i171: i64, out_$i172: i64, out_$p175: ref, out_$i176: i64, out_$i177: i1, out_$i178: i64, out_$p181: ref, out_$i182: i64, out_$i183: i64, out_$p186: ref, out_$i187: i64, out_$i188: i1, out_$i189: i64, out_$p192: ref, out_$i193: i64, out_$i194: i64, out_$p197: ref, out_$i198: i64, out_$i199: i64, out_$i200: i64, out_$i201: i64, out_$i202: i32, out_$i203: i1, out_$i163: i32);
  modifies $M.2, assertsPassed;



implementation net2272_rdk1_probe_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i6: i1, in_$i8: i64, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$i19: i64, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p38: ref, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$i76: i64, in_$i77: i64, in_$i7: i32, in_$i96: i32, in_$i97: i1, in_$i5: i32) returns (out_$i6: i1, out_$i8: i64, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$i19: i64, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p38: ref, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$i76: i64, out_$i77: i64, out_$i7: i32, out_$i96: i32, out_$i97: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$i8, out_$p11, out_$i12, out_$i13, out_$p16, out_$i17, out_$i18, out_$i19, out_$p22, out_$i23, out_$i24, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i7, out_$i96, out_$i97, out_$i5 := in_$i6, in_$i8, in_$p11, in_$i12, in_$i13, in_$p16, in_$i17, in_$i18, in_$i19, in_$p22, in_$i23, in_$i24, in_$p27, in_$i28, in_$i29, in_$i30, in_$p33, in_$i34, in_$i35, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$p67, in_$i68, in_$p69, in_$i70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i7, in_$i96, in_$i97, in_$i5;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_390;

  $bb26:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i96;
    goto $bb26_dummy;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$i97 := $sle.i32(out_$i96, 3);
    goto corral_source_split_398;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i7, 1);
    call {:si_unique_call 85} {:cexpr "i"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_397;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_396;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i7 := out_$i5;
    goto $bb5;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    out_$i7 := out_$i5;
    goto $bb5;

  $bb3:
    assume out_$i6 == 1;
    goto corral_source_split_394;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i5, 1);
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb21:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76, out_$i77 := out_$i5, out_$i12, out_$i42;
    assume true;
    goto $bb21;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i64(out_$i73, 0);
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_473;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.9, out_$p71);
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i70, 8));
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i5);
    goto corral_source_split_470;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p69, out_$p67);
    goto corral_source_split_469;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i68, 8));
    goto corral_source_split_468;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i5);
    goto corral_source_split_467;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} out_$p67 := ldv_ioremap_nocache_132(out_$i12, out_$i42);
    goto corral_source_split_466;

  $bb14:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i5;
    assume true;
    goto $bb14;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i64(out_$i44, 0);
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} out_$p43 := __request_region(iomem_resource, out_$i12, out_$i42, driver_name, 0);
    goto corral_source_split_429;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$i42 := 0;
    goto $bb12;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i41;
    goto $bb12;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i64(out_$i40, 1);
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i64(out_$i34, out_$i39);
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i64($M.1, out_$p38);
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i35, 56)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i5);
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.1, out_$p33);
    goto corral_source_split_410;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i30, 56)), $mul.ref(8, 1));
    goto corral_source_split_409;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i5);
    goto corral_source_split_408;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i29 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    goto $bb8;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_406;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.1, out_$p16);
    goto corral_source_split_405;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i13, 56)), $mul.ref(0, 1));
    goto corral_source_split_404;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i5);
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i64($M.1, out_$p11);
    call {:si_unique_call 86} {:cexpr "resource"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_402;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i8, 56)), $mul.ref(0, 1));
    goto corral_source_split_401;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_400;

  $bb4:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i23, out_$i28);
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.1, out_$p27);
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i24, 56)), $mul.ref(0, 1));
    goto corral_source_split_422;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i5);
    goto corral_source_split_421;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i64($M.1, out_$p22);
    goto corral_source_split_420;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i19, 56)), $mul.ref(8, 1));
    goto corral_source_split_419;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i5);
    goto corral_source_split_418;

  $bb9:
    assume !(out_$i18 == 1);
    goto corral_source_split_417;

  $bb11:
    assume !(out_$i29 == 1);
    goto corral_source_split_426;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i6, out_$i8, out_$p11, out_$i12, out_$i13, out_$p16, out_$i17, out_$i18, out_$i19, out_$p22, out_$i23, out_$i24, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i7, out_$i96, out_$i97, out_$i5 := net2272_rdk1_probe_loop_$bb1(in_$p0, in_$p2, out_$i6, out_$i8, out_$p11, out_$i12, out_$i13, out_$p16, out_$i17, out_$i18, out_$i19, out_$p22, out_$i23, out_$i24, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i7, out_$i96, out_$i97, out_$i5);
    return;

  exit:
    return;
}



procedure net2272_rdk1_probe_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i6: i1, in_$i8: i64, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$i19: i64, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p38: ref, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$i76: i64, in_$i77: i64, in_$i7: i32, in_$i96: i32, in_$i97: i1, in_$i5: i32) returns (out_$i6: i1, out_$i8: i64, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$i19: i64, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p38: ref, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$i76: i64, out_$i77: i64, out_$i7: i32, out_$i96: i32, out_$i97: i1, out_$i5: i32);
  modifies $M.9, $M.2;



implementation net2272_rdk2_probe_loop_$bb29(in_$p0: ref, in_$p2: ref, in_$i131: i64, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$p137: ref, in_$i138: i64, in_$i139: i64, in_$p142: ref, in_$i143: i64, in_$i144: i1, in_$i145: i64, in_$p148: ref, in_$i149: i64, in_$i150: i64, in_$p153: ref, in_$i154: i64, in_$i155: i1, in_$i156: i64, in_$p159: ref, in_$i160: i64, in_$i161: i64, in_$p164: ref, in_$i165: i64, in_$i166: i64, in_$i167: i64, in_$i168: i64, in_$i169: i32, in_$i170: i1, in_$i130: i32) returns (out_$i131: i64, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$p137: ref, out_$i138: i64, out_$i139: i64, out_$p142: ref, out_$i143: i64, out_$i144: i1, out_$i145: i64, out_$p148: ref, out_$i149: i64, out_$i150: i64, out_$p153: ref, out_$i154: i64, out_$i155: i1, out_$i156: i64, out_$p159: ref, out_$i160: i64, out_$i161: i64, out_$p164: ref, out_$i165: i64, out_$i166: i64, out_$i167: i64, out_$i168: i64, out_$i169: i32, out_$i170: i1, out_$i130: i32)
{

  entry:
    out_$i131, out_$p132, out_$p133, out_$i134, out_$p137, out_$i138, out_$i139, out_$p142, out_$i143, out_$i144, out_$i145, out_$p148, out_$i149, out_$i150, out_$p153, out_$i154, out_$i155, out_$i156, out_$p159, out_$i160, out_$i161, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i130 := in_$i131, in_$p132, in_$p133, in_$i134, in_$p137, in_$i138, in_$i139, in_$p142, in_$i143, in_$i144, in_$i145, in_$p148, in_$i149, in_$i150, in_$p153, in_$i154, in_$i155, in_$i156, in_$p159, in_$i160, in_$i161, in_$p164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i130;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_779;

  $bb37:
    assume out_$i170 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := out_$i169;
    goto $bb37_dummy;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    out_$i170 := $sge.i32(out_$i169, 0);
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$i169 := $sub.i32(out_$i130, 1);
    call {:si_unique_call 139} {:cexpr "i"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} __release_region(iomem_resource, out_$i138, out_$i168);
    goto corral_source_split_814;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$i168 := 0;
    goto $bb36;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i167;
    goto $bb36;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    out_$i167 := $add.i64(out_$i166, 1);
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$i166 := $sub.i64(out_$i160, out_$i165);
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i64($M.1, out_$p164);
    goto corral_source_split_798;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i161, 56)), $mul.ref(0, 1));
    goto corral_source_split_797;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    out_$i161 := $sext.i32.i64(out_$i130);
    goto corral_source_split_796;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i64($M.1, out_$p159);
    goto corral_source_split_795;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i156, 56)), $mul.ref(8, 1));
    goto corral_source_split_794;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i156 := $sext.i32.i64(out_$i130);
    goto corral_source_split_793;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i155 == 1;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i144 == 1;
    goto $bb32;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i64(out_$i143, 0);
    goto corral_source_split_791;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i64($M.1, out_$p142);
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i139, 56)), $mul.ref(0, 1));
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$i139 := $sext.i32.i64(out_$i130);
    goto corral_source_split_788;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i64($M.1, out_$p137);
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i134, 56)), $mul.ref(0, 1));
    goto corral_source_split_786;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$i134 := $sext.i32.i64(out_$i130);
    goto corral_source_split_785;

  SeqInstr_75:
    goto corral_source_split_784;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} ldv_iounmap_135(out_$p133);
    goto SeqInstr_74;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.10, out_$p132);
    goto corral_source_split_783;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(out_$i131, 8));
    goto corral_source_split_782;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i131 := $sext.i32.i64(out_$i130);
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$i155 := $ne.i64(out_$i149, out_$i154);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i64($M.1, out_$p153);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i150, 56)), $mul.ref(0, 1));
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$i150 := $sext.i32.i64(out_$i130);
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i64($M.1, out_$p148);
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i145, 56)), $mul.ref(8, 1));
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    out_$i145 := $sext.i32.i64(out_$i130);
    goto corral_source_split_803;

  $bb33:
    assume !(out_$i144 == 1);
    goto corral_source_split_802;

  $bb35:
    assume !(out_$i155 == 1);
    goto corral_source_split_811;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i131, out_$p132, out_$p133, out_$i134, out_$p137, out_$i138, out_$i139, out_$p142, out_$i143, out_$i144, out_$i145, out_$p148, out_$i149, out_$i150, out_$p153, out_$i154, out_$i155, out_$i156, out_$p159, out_$i160, out_$i161, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i130 := net2272_rdk2_probe_loop_$bb29(in_$p0, in_$p2, out_$i131, out_$p132, out_$p133, out_$i134, out_$p137, out_$i138, out_$i139, out_$p142, out_$i143, out_$i144, out_$i145, out_$p148, out_$i149, out_$i150, out_$p153, out_$i154, out_$i155, out_$i156, out_$p159, out_$i160, out_$i161, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i130);
    return;

  exit:
    return;
}



procedure net2272_rdk2_probe_loop_$bb29(in_$p0: ref, in_$p2: ref, in_$i131: i64, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$p137: ref, in_$i138: i64, in_$i139: i64, in_$p142: ref, in_$i143: i64, in_$i144: i1, in_$i145: i64, in_$p148: ref, in_$i149: i64, in_$i150: i64, in_$p153: ref, in_$i154: i64, in_$i155: i1, in_$i156: i64, in_$p159: ref, in_$i160: i64, in_$i161: i64, in_$p164: ref, in_$i165: i64, in_$i166: i64, in_$i167: i64, in_$i168: i64, in_$i169: i32, in_$i170: i1, in_$i130: i32) returns (out_$i131: i64, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$p137: ref, out_$i138: i64, out_$i139: i64, out_$p142: ref, out_$i143: i64, out_$i144: i1, out_$i145: i64, out_$p148: ref, out_$i149: i64, out_$i150: i64, out_$p153: ref, out_$i154: i64, out_$i155: i1, out_$i156: i64, out_$p159: ref, out_$i160: i64, out_$i161: i64, out_$p164: ref, out_$i165: i64, out_$i166: i64, out_$i167: i64, out_$i168: i64, out_$i169: i32, out_$i170: i1, out_$i130: i32);
  modifies $M.2, assertsPassed;



implementation net2272_rdk2_probe_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i6: i64, in_$p9: ref, in_$i10: i64, in_$i11: i64, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$i28: i64, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$i75: i64, in_$i94: i32, in_$i95: i1, in_$i5: i32) returns (out_$i6: i64, out_$p9: ref, out_$i10: i64, out_$i11: i64, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$i28: i64, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$i75: i64, out_$i94: i32, out_$i95: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p9, out_$i10, out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$i21, out_$i22, out_$p25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p65, out_$i66, out_$p67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i94, out_$i95, out_$i5 := in_$i6, in_$p9, in_$i10, in_$i11, in_$p14, in_$i15, in_$i16, in_$i17, in_$p20, in_$i21, in_$i22, in_$p25, in_$i26, in_$i27, in_$i28, in_$p31, in_$i32, in_$i33, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$p65, in_$i66, in_$p67, in_$i68, in_$p69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i94, in_$i95, in_$i5;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_625;

  $bb22:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i94;
    goto $bb22_dummy;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$i95 := $sle.i32(out_$i94, 1);
    goto corral_source_split_734;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i5, 1);
    call {:si_unique_call 128} {:cexpr "i"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_733;

  $bb17:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    out_$i73, out_$i74, out_$i75 := out_$i5, out_$i10, out_$i40;
    assume true;
    goto $bb17;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i64(out_$i71, 0);
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    out_$i71 := $p2i.ref.i64(out_$p70);
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.10, out_$p69);
    goto corral_source_split_699;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(out_$i68, 8));
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i5);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p67, out_$p65);
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(out_$i66, 8));
    goto corral_source_split_695;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i5);
    goto corral_source_split_694;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} out_$p65 := ldv_ioremap_nocache_134(out_$i10, out_$i40);
    goto corral_source_split_693;

  $bb10:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i5;
    assume true;
    goto $bb10;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i64(out_$i42, 0);
    goto corral_source_split_658;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_657;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} out_$p41 := __request_region(iomem_resource, out_$i10, out_$i40, driver_name, 0);
    goto corral_source_split_656;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_655;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$i40 := 0;
    goto $bb8;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i39;
    goto $bb8;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i64(out_$i38, 1);
    goto corral_source_split_642;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i64(out_$i32, out_$i37);
    goto corral_source_split_641;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.1, out_$p36);
    goto corral_source_split_640;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i33, 56)), $mul.ref(0, 1));
    goto corral_source_split_639;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i5);
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.1, out_$p31);
    goto corral_source_split_637;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i28, 56)), $mul.ref(8, 1));
    goto corral_source_split_636;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i5);
    goto corral_source_split_635;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i27 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume out_$i16 == 1;
    goto $bb4;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_633;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i64($M.1, out_$p14);
    goto corral_source_split_632;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i11, 56)), $mul.ref(0, 1));
    goto corral_source_split_631;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i5);
    goto corral_source_split_630;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i64($M.1, out_$p9);
    call {:si_unique_call 117} {:cexpr "resource"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_629;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i6, 56)), $mul.ref(0, 1));
    goto corral_source_split_628;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_627;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i21, out_$i26);
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.1, out_$p25);
    goto corral_source_split_650;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i22, 56)), $mul.ref(0, 1));
    goto corral_source_split_649;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i5);
    goto corral_source_split_648;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.1, out_$p20);
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(out_$i17, 56)), $mul.ref(8, 1));
    goto corral_source_split_646;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i5);
    goto corral_source_split_645;

  $bb5:
    assume !(out_$i16 == 1);
    goto corral_source_split_644;

  $bb7:
    assume !(out_$i27 == 1);
    goto corral_source_split_653;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i6, out_$p9, out_$i10, out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$i21, out_$i22, out_$p25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p65, out_$i66, out_$p67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i94, out_$i95, out_$i5 := net2272_rdk2_probe_loop_$bb1(in_$p0, in_$p2, out_$i6, out_$p9, out_$i10, out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$i21, out_$i22, out_$p25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p65, out_$i66, out_$p67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i94, out_$i95, out_$i5);
    return;

  exit:
    return;
}



procedure net2272_rdk2_probe_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i6: i64, in_$p9: ref, in_$i10: i64, in_$i11: i64, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$i28: i64, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$i75: i64, in_$i94: i32, in_$i95: i1, in_$i5: i32) returns (out_$i6: i64, out_$p9: ref, out_$i10: i64, out_$i11: i64, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$i28: i64, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$i75: i64, out_$i94: i32, out_$i95: i1, out_$i5: i32);
  modifies $M.10, $M.2;



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation net2272_handle_stat0_irqs_loop_$bb122(in_$p0: ref, in_$i345: i32, in_$i346: i32, in_$i347: i8, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i1, in_$i353: i32, in_$i354: i32, in_$i355: i32, in_$i356: i8, in_$p357: ref, in_$p358: ref, in_$i359: i64, in_$p360: ref, in_$i352: i8, in_$i361: i32, in_$i362: i32, in_$i363: i8, in_$i364: i32, in_$i365: i1, in_$i343: i8, in_$i344: i8) returns (out_$i345: i32, out_$i346: i32, out_$i347: i8, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i1, out_$i353: i32, out_$i354: i32, out_$i355: i32, out_$i356: i8, out_$p357: ref, out_$p358: ref, out_$i359: i64, out_$p360: ref, out_$i352: i8, out_$i361: i32, out_$i362: i32, out_$i363: i8, out_$i364: i32, out_$i365: i1, out_$i343: i8, out_$i344: i8)
{

  entry:
    out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i353, out_$i354, out_$i355, out_$i356, out_$p357, out_$p358, out_$i359, out_$p360, out_$i352, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i343, out_$i344 := in_$i345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i353, in_$i354, in_$i355, in_$i356, in_$p357, in_$p358, in_$i359, in_$p360, in_$i352, in_$i361, in_$i362, in_$i363, in_$i364, in_$i365, in_$i343, in_$i344;
    goto $bb122, exit;

  $bb122:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2763;

  $bb128:
    assume out_$i365 == 1;
    assume {:verifier.code 0} true;
    out_$i343, out_$i344 := out_$i363, out_$i352;
    goto $bb128_dummy;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    out_$i365 := $ne.i32(out_$i364, 0);
    goto corral_source_split_2780;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    out_$i364 := $zext.i8.i32(out_$i352);
    goto corral_source_split_2779;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i363 := $trunc.i32.i8(out_$i362);
    call {:si_unique_call 563} {:cexpr "num"} boogie_si_record_i8(out_$i363);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$i362 := $add.i32(out_$i361, 1);
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i361 := $zext.i8.i32(out_$i343);
    goto corral_source_split_2776;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_2775;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    out_$i352 := out_$i356;
    goto $bb126;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i352 := out_$i344;
    goto $bb126;

  $bb124:
    assume out_$i351 == 1;
    goto corral_source_split_2773;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$i351 := $eq.i32(out_$i350, 0);
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$i350 := $and.i32(out_$i348, out_$i349);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$i349 := $zext.i8.i32(out_$i347);
    goto corral_source_split_2769;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    out_$i348 := $zext.i8.i32(out_$i344);
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    out_$i347 := $trunc.i32.i8(out_$i346);
    call {:si_unique_call 562} {:cexpr "t"} boogie_si_record_i8(out_$i347);
    goto corral_source_split_2767;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$i346 := $shl.i32(1, out_$i345);
    goto corral_source_split_2766;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i345 := $zext.i8.i32(out_$i343);
    goto corral_source_split_2765;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    goto $bb123;

  SeqInstr_150:
    goto corral_source_split_2790;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} net2272_handle_ep(out_$p360);
    goto SeqInstr_149;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$p360 := $add.ref(out_$p358, $mul.ref(out_$i359, 112));
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$i359 := $zext.i8.i64(out_$i343);
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$p358 := $bitcast.ref.ref(out_$p357);
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$p357 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2160)), $mul.ref(1656, 1));
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    out_$i356 := $trunc.i32.i8(out_$i355);
    call {:si_unique_call 564} {:cexpr "scratch"} boogie_si_record_i8(out_$i356);
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$i355 := $xor.i32(out_$i353, out_$i354);
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$i354 := $zext.i8.i32(out_$i347);
    goto corral_source_split_2783;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i353 := $zext.i8.i32(out_$i344);
    goto corral_source_split_2782;

  $bb125:
    assume !(out_$i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb128_dummy:
    call {:si_unique_call 1} out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i353, out_$i354, out_$i355, out_$i356, out_$p357, out_$p358, out_$i359, out_$p360, out_$i352, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i343, out_$i344 := net2272_handle_stat0_irqs_loop_$bb122(in_$p0, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i353, out_$i354, out_$i355, out_$i356, out_$p357, out_$p358, out_$i359, out_$p360, out_$i352, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i343, out_$i344);
    return;

  exit:
    return;
}



procedure net2272_handle_stat0_irqs_loop_$bb122(in_$p0: ref, in_$i345: i32, in_$i346: i32, in_$i347: i8, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i1, in_$i353: i32, in_$i354: i32, in_$i355: i32, in_$i356: i8, in_$p357: ref, in_$p358: ref, in_$i359: i64, in_$p360: ref, in_$i352: i8, in_$i361: i32, in_$i362: i32, in_$i363: i8, in_$i364: i32, in_$i365: i1, in_$i343: i8, in_$i344: i8) returns (out_$i345: i32, out_$i346: i32, out_$i347: i8, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i1, out_$i353: i32, out_$i354: i32, out_$i355: i32, out_$i356: i8, out_$p357: ref, out_$p358: ref, out_$i359: i64, out_$p360: ref, out_$i352: i8, out_$i361: i32, out_$i362: i32, out_$i363: i8, out_$i364: i32, out_$i365: i1, out_$i343: i8, out_$i344: i8);
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0;



implementation net2272_handle_stat0_irqs_loop_$bb15(in_$p47: ref, in_$p55: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$i65: i32, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i1) returns (out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p64: ref, out_$i65: i32, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i1)
{

  entry:
    out_$p59, out_$p60, out_$p61, out_$p62, out_$p64, out_$i65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72 := in_$p59, in_$p60, in_$p61, in_$p62, in_$p64, in_$i65, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i72 == 1;
    goto $bb17_dummy;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 0);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} out_$i71 := list_empty(in_$p55);
    call {:si_unique_call 502} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_2359;

  SeqInstr_135:
    goto corral_source_split_2358;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} net2272_done(in_$p47, out_$p62, out_$i70);
    goto SeqInstr_134;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$i70 := (if out_$i69 == 1 then 0 else $sub.i32(0, 71));
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i65, out_$i68);
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.1, out_$p67);
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(out_$p61, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.1, out_$p64);
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(out_$p61, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(out_$p61, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.1, out_$p59);
    goto corral_source_split_2349;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(in_$p47, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2348;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p59, out_$p60, out_$p61, out_$p62, out_$p64, out_$i65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72 := net2272_handle_stat0_irqs_loop_$bb15(in_$p47, in_$p55, out_$p59, out_$p60, out_$p61, out_$p62, out_$p64, out_$i65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72);
    return;

  exit:
    return;
}



procedure net2272_handle_stat0_irqs_loop_$bb15(in_$p47: ref, in_$p55: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$i65: i32, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i1) returns (out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p64: ref, out_$i65: i32, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i1);
  modifies $M.1, $M.16, assertsPassed;



implementation net2272_get_ep_by_addr_loop_$bb8(in_$i1: i16, in_$i19: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i8, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p21: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i8, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p21: ref)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p48, out_$i49, out_$i50, out_$p21 := in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p43, in_$p44, in_$p45, in_$p46, in_$p48, in_$i49, in_$i50, in_$p21;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3053;

  $bb20:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p21 := out_$p46;
    goto $bb20_dummy;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, in_$i19);
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_3067;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref($sub.ref(0, 24), 112)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3066;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p45, $mul.ref($sub.ref(0, 24), 112));
    goto corral_source_split_3065;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_3064;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_3063;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3062;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i25 == 1;
    goto corral_source_split_3060;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, 0);
    goto corral_source_split_3058;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_3057;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, out_$p22);
    goto corral_source_split_3056;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_3055;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14:
    assume out_$i34 == 1;
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i32, 128);
    goto corral_source_split_3077;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    out_$i32 := $xor.i32(out_$i30, out_$i31);
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i29);
    goto corral_source_split_3075;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(in_$i1);
    goto corral_source_split_3074;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i8($M.1, out_$p28);
    call {:si_unique_call 607} {:cexpr "bEndpointAddress"} boogie_si_record_i8(out_$i29);
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.1, out_$p26);
    goto corral_source_split_3071;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_3070;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb18:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p21;
    assume true;
    goto $bb18;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, 15);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$i37 := $xor.i32(out_$i35, out_$i36);
    goto corral_source_split_3084;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i29);
    goto corral_source_split_3083;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(in_$i1);
    goto corral_source_split_3082;

  $bb15:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p48, out_$i49, out_$i50, out_$p21 := net2272_get_ep_by_addr_loop_$bb8(in_$i1, in_$i19, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p48, out_$i49, out_$i50, out_$p21);
    return;

  exit:
    return;
}



procedure net2272_get_ep_by_addr_loop_$bb8(in_$i1: i16, in_$i19: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i8, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p21: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i8, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p21: ref);



implementation net2272_set_test_mode_loop_$bb4(in_$p0: ref, in_$i6: i8, in_$i7: i32, in_$i8: i32, in_$i9: i1) returns (out_$i6: i8, out_$i7: i32, out_$i8: i32, out_$i9: i1)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i9 := in_$i6, in_$i7, in_$i8, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i9 == 1;
    goto $bb6_dummy;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, 0);
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$i8 := $and.i32(out_$i7, 4);
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i8.i32(out_$i6);
    goto corral_source_split_3164;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} out_$i6 := net2272_read(in_$p0, 6);
    call {:si_unique_call 632} {:cexpr "tmp"} boogie_si_record_i8(out_$i6);
    goto corral_source_split_3163;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i9 := net2272_set_test_mode_loop_$bb4(in_$p0, out_$i6, out_$i7, out_$i8, out_$i9);
    return;

  exit:
    return;
}



procedure net2272_set_test_mode_loop_$bb4(in_$p0: ref, in_$i6: i8, in_$i7: i32, in_$i8: i32, in_$i9: i1) returns (out_$i6: i8, out_$i7: i32, out_$i8: i32, out_$i9: i1);



implementation net2272_cancel_dma_loop_$bb9(in_$p17: ref, in_$p24: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$p24: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29 := in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i29 == 1;
    goto $bb11_dummy;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 0);
    goto corral_source_split_3328;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i32(out_$i27, 16);
    goto corral_source_split_3327;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} out_$i26 := readb(out_$p25);
    call {:si_unique_call 697} {:cexpr "tmp"} boogie_si_record_i8(out_$i26);
    goto corral_source_split_3325;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p24, $mul.ref(168, 1));
    goto corral_source_split_3324;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.1, in_$p17);
    goto corral_source_split_3323;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29 := net2272_cancel_dma_loop_$bb9(in_$p17, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure net2272_cancel_dma_loop_$bb9(in_$p17: ref, in_$p24: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$p24: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i1);



implementation net2272_write_fifo_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$i19: i8, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i8, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$p39: ref, in_$i40: i32, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_vslice_dummy_var_5: i8) returns (out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$i19: i8, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i8, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$p39: ref, out_$i40: i32, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_vslice_dummy_var_5: i8)
{

  entry:
    out_$p11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$i66, out_$i67, out_$i68, out_vslice_dummy_var_5 := in_$p11, in_$p12, in_$p14, in_$i15, in_$i16, in_$p17, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p39, in_$i40, in_$p42, in_$i43, in_$i44, in_$i45, in_$i66, in_$i67, in_$i68, in_vslice_dummy_var_5;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i68 == 1;
    goto $bb28_dummy;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$i68 := $sge.i32(out_$i67, 0);
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i8.i32(out_$i66);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} out_$i66 := net2272_ep_read(in_$p0, 6);
    call {:si_unique_call 769} {:cexpr "tmp___6"} boogie_si_record_i8(out_$i66);
    goto corral_source_split_3641;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} net2272_ep_write(in_$p0, 6, 4);
    goto corral_source_split_3640;

  $bb14:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i37;
    assume true;
    goto $bb14;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i40, out_$i43);
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.1, out_$p42);
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.1, out_$p39);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} out_$i37 := net2272_write_packet(in_$p0, out_$p17, in_$p5, out_$i36);
    call {:si_unique_call 758} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3603;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3602;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := out_$i24;
    goto $bb12;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i35;
    goto $bb12;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$i35 := $or.i32(out_$i33, out_$i34);
    call {:si_unique_call 756} {:cexpr "max"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i31);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$i33 := $shl.i32(out_$i32, 8);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i30);
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} out_$i31 := net2272_ep_read(in_$p0, 12);
    call {:si_unique_call 755} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i31);
    goto corral_source_split_3596;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} out_$i30 := net2272_ep_read(in_$p0, 13);
    call {:si_unique_call 753} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i30);
    goto corral_source_split_3595;

  $bb10:
    assume out_$i29 == 1;
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i29 := $ult.i32(out_$i24, out_$i28);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i16($M.1, out_$p26);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$i24 := $or.i32(out_$i22, out_$i23);
    call {:si_unique_call 751} {:cexpr "max"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i20);
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$i22 := $shl.i32(out_$i21, 8);
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i19);
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} out_$i20 := net2272_ep_read(in_$p0, 12);
    call {:si_unique_call 750} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i20);
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} out_$i19 := net2272_ep_read(in_$p0, 13);
    call {:si_unique_call 748} {:cexpr "tmp"} boogie_si_record_i8(out_$i19);
    goto corral_source_split_3583;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} out_vslice_dummy_var_5 := net2272_ep_read(in_$p0, 6);
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} llvm.prefetch(out_$p17, 0, 3, 1);
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p12, $mul.ref(out_$i16, 1));
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.1, out_$p14);
    goto corral_source_split_3578;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.1, out_$p11);
    goto corral_source_split_3576;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3575;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$i66, out_$i67, out_$i68, out_vslice_dummy_var_5 := net2272_write_fifo_loop_$bb8(in_$p0, in_$p5, out_$p11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$i66, out_$i67, out_$i68, out_vslice_dummy_var_5);
    return;

  exit:
    return;
}



procedure net2272_write_fifo_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$i19: i8, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i8, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$p39: ref, in_$i40: i32, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_vslice_dummy_var_5: i8) returns (out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$i19: i8, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i8, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$p39: ref, out_$i40: i32, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_vslice_dummy_var_5: i8);
  modifies $M.1;



implementation net2272_write_fifo_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$i7: i8, in_$i8: i32, in_$i9: i1, in_$p5: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$i19: i8, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i8, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$p39: ref, in_$i40: i32, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i61: i8, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_vslice_dummy_var_5: i8) returns (out_$p6: ref, out_$i7: i8, out_$i8: i32, out_$i9: i1, out_$p5: ref, out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$i19: i8, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i8, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$p39: ref, out_$i40: i32, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i61: i8, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_vslice_dummy_var_5: i8)
{

  entry:
    out_$p6, out_$i7, out_$i8, out_$i9, out_$p5, out_$p11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i67, out_$i68, out_vslice_dummy_var_5 := in_$p6, in_$i7, in_$i8, in_$i9, in_$p5, in_$p11, in_$p12, in_$p14, in_$i15, in_$i16, in_$p17, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p39, in_$i40, in_$p42, in_$i43, in_$i44, in_$i45, in_$p47, in_$i48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i66, in_$i67, in_$i68, in_vslice_dummy_var_5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3565;

  $bb6:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$p5 := out_$p6;
    goto $bb6_dummy;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$i9 := $sge.i32(out_$i8, 0);
    goto corral_source_split_3571;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i8.i32(out_$i7);
    goto corral_source_split_3570;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} out_$i7 := net2272_ep_read(in_$p0, 6);
    call {:si_unique_call 744} {:cexpr "tmp___6"} boogie_si_record_i8(out_$i7);
    goto corral_source_split_3569;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} net2272_ep_write(in_$p0, 6, 4);
    goto corral_source_split_3568;

  $bb5:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3567;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$p6 := out_$p58;
    assume true;
    goto $bb5;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_3636;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$i63 := $and.i32(out_$i62, 64);
    goto corral_source_split_3635;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i8.i32(out_$i61);
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} out_$i61 := net2272_ep_read(in_$p0, 6);
    call {:si_unique_call 766} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i61);
    goto corral_source_split_3633;

  $bb20:
    assume out_$i60 == 1;
    goto corral_source_split_3632;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i59, 0);
    goto corral_source_split_3630;

  SeqInstr_192:
    call {:si_unique_call 764} {:cexpr "status"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_3629;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} out_$i59 := net2272_kick_dma(in_$p0, out_$p58);
    goto SeqInstr_191;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p57, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_3627;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.1, out_$p55);
    goto corral_source_split_3626;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3625;

  $bb18:
    assume out_$i53 == 1;
    goto corral_source_split_3624;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_3622;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} out_$i52 := list_empty(out_$p51);
    call {:si_unique_call 762} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3621;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3620;

  SeqInstr_189:
    goto corral_source_split_3619;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} net2272_done(in_$p0, out_$p5, 0);
    goto SeqInstr_188;

  $bb16:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} set_fifo_bytecount(in_$p0, 0);
    goto corral_source_split_3617;

  $bb15:
    assume out_$i50 == 1;
    goto corral_source_split_3616;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$i50 := $ult.i32(out_$i45, out_$i49);
    goto corral_source_split_3614;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i48);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i16($M.1, out_$p47);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3611;

  $bb13:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i37;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i40, out_$i43);
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.1, out_$p42);
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.1, out_$p39);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(out_$p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} out_$i37 := net2272_write_packet(in_$p0, out_$p17, out_$p5, out_$i36);
    call {:si_unique_call 758} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3603;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3602;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := out_$i24;
    goto $bb12;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i35;
    goto $bb12;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$i35 := $or.i32(out_$i33, out_$i34);
    call {:si_unique_call 756} {:cexpr "max"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i31);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$i33 := $shl.i32(out_$i32, 8);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i30);
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} out_$i31 := net2272_ep_read(in_$p0, 12);
    call {:si_unique_call 755} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i31);
    goto corral_source_split_3596;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} out_$i30 := net2272_ep_read(in_$p0, 13);
    call {:si_unique_call 753} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i30);
    goto corral_source_split_3595;

  $bb10:
    assume out_$i29 == 1;
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i29 := $ult.i32(out_$i24, out_$i28);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i16($M.1, out_$p26);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$i24 := $or.i32(out_$i22, out_$i23);
    call {:si_unique_call 751} {:cexpr "max"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i20);
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$i22 := $shl.i32(out_$i21, 8);
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i19);
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} out_$i20 := net2272_ep_read(in_$p0, 12);
    call {:si_unique_call 750} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i20);
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} out_$i19 := net2272_ep_read(in_$p0, 13);
    call {:si_unique_call 748} {:cexpr "tmp"} boogie_si_record_i8(out_$i19);
    goto corral_source_split_3583;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} out_vslice_dummy_var_5 := net2272_ep_read(in_$p0, 6);
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} llvm.prefetch(out_$p17, 0, 3, 1);
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p12, $mul.ref(out_$i16, 1));
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.1, out_$p14);
    goto corral_source_split_3578;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.1, out_$p11);
    goto corral_source_split_3576;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(out_$p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3575;

  $bb8:
    call out_$p11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$i66, out_$i67, out_$i68, out_vslice_dummy_var_5 := net2272_write_fifo_loop_$bb8(in_$p0, out_$p5, out_$p11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$i66, out_$i67, out_$i68, out_vslice_dummy_var_5);
    goto $bb8_last;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i68 == 1;
    assume false;
    return;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$i68 := $sge.i32(out_$i67, 0);
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i8.i32(out_$i66);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} out_$i66 := net2272_ep_read(in_$p0, 6);
    call {:si_unique_call 769} {:cexpr "tmp___6"} boogie_si_record_i8(out_$i66);
    goto corral_source_split_3641;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} net2272_ep_write(in_$p0, 6, 4);
    goto corral_source_split_3640;

  $bb14:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$i7, out_$i8, out_$i9, out_$p5, out_$p11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i67, out_$i68, out_vslice_dummy_var_5 := net2272_write_fifo_loop_$bb4(in_$p0, out_$p6, out_$i7, out_$i8, out_$i9, out_$p5, out_$p11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i67, out_$i68, out_vslice_dummy_var_5);
    return;

  exit:
    return;
}



procedure net2272_write_fifo_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$i7: i8, in_$i8: i32, in_$i9: i1, in_$p5: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$i19: i8, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i8, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$p39: ref, in_$i40: i32, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i61: i8, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_vslice_dummy_var_5: i8) returns (out_$p6: ref, out_$i7: i8, out_$i8: i32, out_$i9: i1, out_$p5: ref, out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$i19: i8, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i8, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$p39: ref, out_$i40: i32, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i61: i8, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_vslice_dummy_var_5: i8);
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation net2272_read_fifo_loop_$bb2(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$i10: i32, in_$i11: i64, in_$p12: ref, in_$i13: i8, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$p20: ref, in_$i21: i32, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p28: ref, in_$i29: i16, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i48: i1, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$i53: i32, in_$p56: ref, in_$i57: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$i106: i1) returns (out_$i4: i32, out_$p6: ref, out_$p7: ref, out_$p9: ref, out_$i10: i32, out_$i11: i64, out_$p12: ref, out_$i13: i8, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$p20: ref, out_$i21: i32, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p28: ref, out_$i29: i16, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i48: i1, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$i53: i32, out_$p56: ref, out_$i57: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$i106: i1)
{

  entry:
    out_$i4, out_$p6, out_$p7, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i103, out_$i104, out_$i105, out_$i106 := in_$i4, in_$p6, in_$p7, in_$p9, in_$i10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p20, in_$i21, in_$p23, in_$i24, in_$i25, in_$i26, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i48, in_$i47, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p56, in_$i57, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i103, in_$i104, in_$i105, in_$i106;
    goto $bb2, exit;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3651;

  $bb44:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i44;
    goto $bb44_dummy;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 0);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$i105 := $and.i32(out_$i104, 64);
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i8.i32(out_$i103);
    goto corral_source_split_3788;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} out_$i103 := net2272_ep_read(in_$p0, 6);
    call {:si_unique_call 802} {:cexpr "tmp___10"} boogie_si_record_i8(out_$i103);
    goto corral_source_split_3787;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb25:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i44;
    assume true;
    goto $bb25;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_3743;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  $bb19:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := 0;
    goto $bb23;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i75;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3740;

  $bb21:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := 0;
    goto $bb22;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$i75 := 1;
    goto $bb22;

  $bb20:
    assume out_$i74 == 1;
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} out_$i73 := ldv__builtin_expect(out_$i72, 0);
    call {:si_unique_call 786} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_3734;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i1.i32(out_$i70);
    goto corral_source_split_3733;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 0);
    goto corral_source_split_3732;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i8.i32(out_$i68);
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.1, out_$p67);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(out_$p66, $mul.ref(42, 1));
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_3728;

  $bb18:
    assume out_$i65 == 1;
    goto corral_source_split_3727;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} out_$i64 := ldv__builtin_expect(out_$i63, 0);
    call {:si_unique_call 784} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i62);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i1.i32(out_$i61);
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i57, out_$i60);
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.1, out_$p59);
    goto corral_source_split_3717;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3716;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.1, out_$p56);
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3714;

  $bb16:
    assume !(out_$i52 == 1);
    goto corral_source_split_3713;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i44;
    assume true;
    goto $bb16;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} out_$i51 := ldv__builtin_expect(out_$i50, 0);
    call {:si_unique_call 782} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i1.i32(out_$i47);
    goto corral_source_split_3703;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3702;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i48;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    goto $bb13;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$i47 := 1;
    assume true;
    goto $bb12, $bb14;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i44, 0);
    goto corral_source_split_3700;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_$i45 := net2272_read_packet(in_$p0, out_$p12, in_$p3, out_$i43);
    call {:si_unique_call 780} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3699;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  $bb4:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := out_$i18, out_$i4;
    goto $bb11;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := out_$i42, out_$i40;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3696;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i25;
    goto $bb10;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    out_$i42 := 0;
    goto $bb10;

  $bb8:
    assume out_$i41 == 1;
    goto corral_source_split_3692;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(0, out_$i25);
    goto corral_source_split_3690;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3689;

  $bb6:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := out_$i4;
    goto $bb7;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i40 := 1;
    goto $bb7;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} dev_err.ref.ref.ref.i32.i32(out_$p36, .str.51, out_$p39, out_$i18, out_$i25);
    goto corral_source_split_3687;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.1, out_$p38);
    goto corral_source_split_3686;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.1, out_$p35);
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.1, out_$p33);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3681;

  $bb5:
    assume out_$i32 == 1;
    goto corral_source_split_3680;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i31 := $srem.i32(out_$i25, out_$i30);
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i29);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i16($M.1, out_$p28);
    goto corral_source_split_3675;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3674;

  $bb3:
    assume out_$i26 == 1;
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$i26 := $sgt.i32(out_$i18, out_$i25);
    goto corral_source_split_3671;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i32(out_$i21, out_$i24);
    call {:si_unique_call 777} {:cexpr "tmp"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.1, out_$p23);
    goto corral_source_split_3669;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.1, out_$p20);
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} net2272_ep_write(in_$p0, 6, 24);
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$i18 := $or.i32(out_$i16, out_$i17);
    call {:si_unique_call 775} {:cexpr "count"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i8.i32(out_$i14);
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$i16 := $shl.i32(out_$i15, 8);
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i13);
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} out_$i14 := net2272_ep_read(in_$p0, 12);
    call {:si_unique_call 774} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i14);
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} out_$i13 := net2272_ep_read(in_$p0, 13);
    call {:si_unique_call 772} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i13);
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} prefetchw(out_$p12);
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p7, $mul.ref(out_$i11, 1));
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i10);
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.1, out_$p9);
    goto corral_source_split_3655;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.1, out_$p6);
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3652;

  $bb9:
    assume !(out_$i41 == 1);
    goto corral_source_split_3694;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i45, 0);
    goto corral_source_split_3709;

  $bb14:
    assume !(out_$i46 == 1);
    goto corral_source_split_3708;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i4, out_$p6, out_$p7, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i103, out_$i104, out_$i105, out_$i106 := net2272_read_fifo_loop_$bb2(in_$p0, in_$p3, out_$i4, out_$p6, out_$p7, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i103, out_$i104, out_$i105, out_$i106);
    return;

  exit:
    return;
}



procedure net2272_read_fifo_loop_$bb2(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$i10: i32, in_$i11: i64, in_$p12: ref, in_$i13: i8, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$p20: ref, in_$i21: i32, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p28: ref, in_$i29: i16, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i48: i1, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$i53: i32, in_$p56: ref, in_$i57: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$i106: i1) returns (out_$i4: i32, out_$p6: ref, out_$p7: ref, out_$p9: ref, out_$i10: i32, out_$i11: i64, out_$p12: ref, out_$i13: i8, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$p20: ref, out_$i21: i32, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p28: ref, out_$i29: i16, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i48: i1, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$i53: i32, out_$p56: ref, out_$i57: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$i106: i1);
  modifies $M.1;



implementation net2272_read_fifo_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i4: i32, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$i10: i32, in_$i11: i64, in_$p12: ref, in_$i13: i8, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$p20: ref, in_$i21: i32, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p28: ref, in_$i29: i16, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i48: i1, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$i53: i32, in_$p56: ref, in_$i57: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i54: i32, in_$i79: i1, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i8, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$i106: i1) returns (out_$i2: i32, out_$p3: ref, out_$i4: i32, out_$p6: ref, out_$p7: ref, out_$p9: ref, out_$i10: i32, out_$i11: i64, out_$p12: ref, out_$i13: i8, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$p20: ref, out_$i21: i32, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p28: ref, out_$i29: i16, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i48: i1, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$i53: i32, out_$p56: ref, out_$i57: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i54: i32, out_$i79: i1, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i8, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$i106: i1)
{

  entry:
    out_$i2, out_$p3, out_$i4, out_$p6, out_$p7, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i54, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i105, out_$i106 := in_$i2, in_$p3, in_$i4, in_$p6, in_$p7, in_$p9, in_$i10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p20, in_$i21, in_$p23, in_$i24, in_$i25, in_$i26, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i48, in_$i47, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p56, in_$i57, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i54, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$p92, in_$p93, in_$p94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i103, in_$i104, in_$i105, in_$i106;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3649;

  $bb36:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i2, out_$p3 := out_$i54, out_$p95;
    goto $bb36_dummy;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 0);
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$i100 := $and.i32(out_$i99, 64);
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i98);
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} out_$i98 := net2272_ep_read(in_$p0, 6);
    call {:si_unique_call 800} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i98);
    goto corral_source_split_3780;

  $bb34:
    assume out_$i97 == 1;
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i96, 0);
    goto corral_source_split_3777;

  SeqInstr_201:
    call {:si_unique_call 798} {:cexpr "status"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_3776;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} out_$i96 := net2272_kick_dma(in_$p0, out_$p95);
    goto SeqInstr_200;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p94, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_3775;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$p94 := $bitcast.ref.ref(out_$p93);
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.1, out_$p92);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3772;

  $bb32:
    assume out_$i90 == 1;
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 0);
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} out_$i89 := list_empty(out_$p88);
    call {:si_unique_call 796} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_3768;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3767;

  $bb30:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} net2272_ep_write(in_$p0, 8, 0);
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} net2272_ep_write(in_$p0, 9, 0);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} net2272_ep_write(in_$p0, 10, 0);
    goto corral_source_split_3763;

  $bb29:
    assume out_$i87 == 1;
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, 0);
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} out_$i86 := ldv__builtin_expect(out_$i85, 0);
    call {:si_unique_call 791} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i84);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i1.i32(out_$i83);
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 0);
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3755;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i8($M.1, out_$p80);
    goto corral_source_split_3754;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3753;

  SeqInstr_198:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_195:
    goto corral_source_split_3749;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} net2272_done(in_$p0, out_$p3, $sub.i32(0, 75));
    goto SeqInstr_194;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} net2272_out_flush(in_$p0);
    goto corral_source_split_3748;

  $bb26:
    assume out_$i79 == 1;
    goto corral_source_split_3747;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i54, 0);
    goto corral_source_split_3725;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3724;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i78;
    goto $bb17;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i53;
    goto $bb17;

  $bb15:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3711;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i44;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} out_$i51 := ldv__builtin_expect(out_$i50, 0);
    call {:si_unique_call 782} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i1.i32(out_$i47);
    goto corral_source_split_3703;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3702;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i48;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    goto $bb13;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$i47 := 1;
    assume true;
    goto $bb12, $bb14;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i44, 0);
    goto corral_source_split_3700;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_$i45 := net2272_read_packet(in_$p0, out_$p12, out_$p3, out_$i43);
    call {:si_unique_call 780} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3699;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  $bb4:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := out_$i18, out_$i4;
    goto $bb11;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := out_$i42, out_$i40;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3696;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i25;
    goto $bb10;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    out_$i42 := 0;
    goto $bb10;

  $bb8:
    assume out_$i41 == 1;
    goto corral_source_split_3692;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(0, out_$i25);
    goto corral_source_split_3690;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3689;

  $bb6:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := out_$i4;
    goto $bb7;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i40 := 1;
    goto $bb7;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} dev_err.ref.ref.ref.i32.i32(out_$p36, .str.51, out_$p39, out_$i18, out_$i25);
    goto corral_source_split_3687;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.1, out_$p38);
    goto corral_source_split_3686;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.1, out_$p35);
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 2160)), $mul.ref(1568, 1));
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.1, out_$p33);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3681;

  $bb5:
    assume out_$i32 == 1;
    goto corral_source_split_3680;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i31 := $srem.i32(out_$i25, out_$i30);
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i29);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i16($M.1, out_$p28);
    goto corral_source_split_3675;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3674;

  $bb3:
    assume out_$i26 == 1;
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$i26 := $sgt.i32(out_$i18, out_$i25);
    goto corral_source_split_3671;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i32(out_$i21, out_$i24);
    call {:si_unique_call 777} {:cexpr "tmp"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.1, out_$p23);
    goto corral_source_split_3669;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.1, out_$p20);
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} net2272_ep_write(in_$p0, 6, 24);
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$i18 := $or.i32(out_$i16, out_$i17);
    call {:si_unique_call 775} {:cexpr "count"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i8.i32(out_$i14);
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$i16 := $shl.i32(out_$i15, 8);
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i13);
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} out_$i14 := net2272_ep_read(in_$p0, 12);
    call {:si_unique_call 774} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i14);
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} out_$i13 := net2272_ep_read(in_$p0, 13);
    call {:si_unique_call 772} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i13);
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} prefetchw(out_$p12);
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p7, $mul.ref(out_$i11, 1));
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i10);
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.1, out_$p9);
    goto corral_source_split_3655;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(out_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.1, out_$p6);
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($add.ref(out_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3652;

  $bb2:
    call out_$i4, out_$p6, out_$p7, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i103, out_$i104, out_$i105, out_$i106 := net2272_read_fifo_loop_$bb2(in_$p0, out_$p3, out_$i4, out_$p6, out_$p7, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i103, out_$i104, out_$i105, out_$i106);
    goto $bb2_last;

  $bb2_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$i4 := out_$i2;
    goto $bb2;

  $bb44:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i44;
    assume false;
    return;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 0);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$i105 := $and.i32(out_$i104, 64);
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i8.i32(out_$i103);
    goto corral_source_split_3788;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} out_$i103 := net2272_ep_read(in_$p0, 6);
    call {:si_unique_call 802} {:cexpr "tmp___10"} boogie_si_record_i8(out_$i103);
    goto corral_source_split_3787;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb25:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i44;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_3743;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  $bb19:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := 0;
    goto $bb23;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i75;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3740;

  $bb21:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := 0;
    goto $bb22;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$i75 := 1;
    goto $bb22;

  $bb20:
    assume out_$i74 == 1;
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} out_$i73 := ldv__builtin_expect(out_$i72, 0);
    call {:si_unique_call 786} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_3734;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i1.i32(out_$i70);
    goto corral_source_split_3733;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 0);
    goto corral_source_split_3732;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i8.i32(out_$i68);
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.1, out_$p67);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(out_$p66, $mul.ref(42, 1));
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p3);
    goto corral_source_split_3728;

  $bb18:
    assume out_$i65 == 1;
    goto corral_source_split_3727;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} out_$i64 := ldv__builtin_expect(out_$i63, 0);
    call {:si_unique_call 784} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i62);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i1.i32(out_$i61);
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i57, out_$i60);
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.1, out_$p59);
    goto corral_source_split_3717;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(out_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3716;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.1, out_$p56);
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3714;

  $bb16:
    assume !(out_$i52 == 1);
    goto corral_source_split_3713;

  $bb9:
    assume !(out_$i41 == 1);
    goto corral_source_split_3694;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i45, 0);
    goto corral_source_split_3709;

  $bb14:
    assume !(out_$i46 == 1);
    goto corral_source_split_3708;

  $bb24:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3745;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} net2272_done(in_$p0, out_$p3, 0);
    goto SeqInstr_197;

  $bb27:
    assume !(out_$i79 == 1);
    goto corral_source_split_3751;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i2, out_$p3, out_$i4, out_$p6, out_$p7, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i54, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i105, out_$i106 := net2272_read_fifo_loop_$bb1(in_$p0, out_$i2, out_$p3, out_$i4, out_$p6, out_$p7, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i54, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i105, out_$i106);
    return;

  exit:
    return;
}



procedure net2272_read_fifo_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i4: i32, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$i10: i32, in_$i11: i64, in_$p12: ref, in_$i13: i8, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$p20: ref, in_$i21: i32, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p28: ref, in_$i29: i16, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i48: i1, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$i53: i32, in_$p56: ref, in_$i57: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i54: i32, in_$i79: i1, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i8, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$i106: i1) returns (out_$i2: i32, out_$p3: ref, out_$i4: i32, out_$p6: ref, out_$p7: ref, out_$p9: ref, out_$i10: i32, out_$i11: i64, out_$p12: ref, out_$i13: i8, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$p20: ref, out_$i21: i32, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p28: ref, out_$i29: i16, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i48: i1, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$i53: i32, out_$p56: ref, out_$i57: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i54: i32, out_$i79: i1, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i8, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$i106: i1);
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation net2272_read_packet_loop_$bb8(in_$p7: ref, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i1) returns (out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40 := in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3830;

  $bb9:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i34, out_$p35 := out_$i39, out_$p36;
    goto $bb9_dummy;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i32(out_$i34, 2);
    call {:si_unique_call 814} {:cexpr "avail"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p35, out_$i38);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} out_$i38 := readw(out_$p37);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p35, $mul.ref(1, 2));
    goto corral_source_split_3831;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40 := net2272_read_packet_loop_$bb8(in_$p7, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure net2272_read_packet_loop_$bb8(in_$p7: ref, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i1) returns (out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i1);
  modifies $M.1;



implementation net2272_write_packet_loop_$bb7(in_$p7: ref, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i16, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$i31: i32, in_$p32: ref, in_$p44: ref, in_$i45: i32) returns (out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i16, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$i31: i32, out_$p32: ref, out_$p44: ref, out_$i45: i32)
{

  entry:
    out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i31, out_$p32, out_$p44, out_$i45 := in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i31, in_$p32, in_$p44, in_$i45;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;

  $bb9:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i31, out_$p32 := out_$i38, out_$p33;
    goto $bb9_dummy;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$p44, out_$i45 := out_$p33, out_$i38;
    assume true;
    goto $bb9;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} out_$i42 := ldv__builtin_expect(out_$i41, 1);
    call {:si_unique_call 860} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i39);
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$i39 := $ugt.i32(out_$i38, 1);
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i32(out_$i31, 2);
    call {:si_unique_call 858} {:cexpr "count"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} writew(out_$i36, out_$p37);
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i16(out_$i35);
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i34);
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i16($M.1, out_$p32);
    goto corral_source_split_4181;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p32, $mul.ref(1, 2));
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i31, out_$p32, out_$p44, out_$i45 := net2272_write_packet_loop_$bb7(in_$p7, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i31, out_$p32, out_$p44, out_$i45);
    return;

  exit:
    return;
}



procedure net2272_write_packet_loop_$bb7(in_$p7: ref, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i16, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$i31: i32, in_$p32: ref, in_$p44: ref, in_$i45: i32) returns (out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i16, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$i31: i32, out_$p32: ref, out_$p44: ref, out_$i45: i32);



implementation net2272_dequeue_all_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15 := in_$p10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i15 == 1;
    goto $bb6_dummy;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} out_$i14 := list_empty(in_$p6);
    call {:si_unique_call 891} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_4325;

  SeqInstr_234:
    goto corral_source_split_4324;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} net2272_done(in_$p0, out_$p13, $sub.i32(0, 108));
    goto SeqInstr_233;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p12, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.1, out_$p10);
    goto corral_source_split_4321;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 112)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4320;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15 := net2272_dequeue_all_loop_$bb4(in_$p0, in_$p6, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure net2272_dequeue_all_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1);
  modifies $M.1, $M.16, assertsPassed;



implementation net2272_dequeue_loop_$bb16(in_$p1: ref, in_$i40: i64, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p43: ref, in_$p58: ref) returns (out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p43: ref, out_$p58: ref)
{

  entry:
    out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43, out_$p58 := in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p43, in_$p58;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5415;

  $bb22:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$p43 := out_$p54;
    goto $bb22_dummy;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$p58 := out_$p54;
    assume true;
    goto $bb22;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, in_$i40);
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_5435;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p53, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(88, 1));
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p53, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_5433;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_5432;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.1, out_$p51);
    goto corral_source_split_5431;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 112)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_5430;

  $bb19:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p43;
    assume true;
    goto $bb19;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i45, out_$i46);
    goto corral_source_split_5420;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_5419;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_5418;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5417;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43, out_$p58 := net2272_dequeue_loop_$bb16(in_$p1, in_$i40, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43, out_$p58);
    return;

  exit:
    return;
}



procedure net2272_dequeue_loop_$bb16(in_$p1: ref, in_$i40: i64, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p43: ref, in_$p58: ref) returns (out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p43: ref, out_$p58: ref);



implementation ldv_platform_platform_instance_2_loop_$bb10(in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32) returns (out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$i28 := in_$i25, in_$i26, in_$i27, in_$i28;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} out_$i25 := ldv_undef_int();
    call {:si_unique_call 1402} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_6775;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i26 == 1;
    goto corral_source_split_6783;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 1);
    goto corral_source_split_6776;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} ldv_dispatch_pm_deregister_2_5();
    goto corral_source_split_6790;

  SeqInstr_447:
    goto corral_source_split_6789;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} ldv_dispatch_pm_register_2_6();
    goto SeqInstr_446;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i27 == 1;
    goto corral_source_split_6787;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i25;
    assume true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i25, 2);
    goto corral_source_split_6785;

  $bb16:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$i28 := ldv_platform_platform_instance_2_loop_$bb10(out_$i25, out_$i26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure ldv_platform_platform_instance_2_loop_$bb10(in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32) returns (out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32);
  modifies $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_platform_platform_instance_2_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31 := in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} ldv_ldv_pre_probe_151();
    goto corral_source_split_6757;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i23 == 1;
    goto $bb12_dummy;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_6779;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} out_$i22 := ldv_undef_int();
    call {:si_unique_call 1404} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_6778;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_450:
    goto corral_source_split_6798;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} ldv_platform_instance_release_2_3(out_$p31, in_$p9);
    goto SeqInstr_449;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.1, out_$p30);
    goto corral_source_split_6797;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p7, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_6796;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i29 == 1;
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 3);
    goto corral_source_split_6792;

  $bb20:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i25;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i25, 2);
    goto corral_source_split_6785;

  $bb16:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 1);
    goto corral_source_split_6776;

  $bb10:
    call out_$i25, out_$i26, out_$i27, out_$i28 := ldv_platform_platform_instance_2_loop_$bb10(out_$i25, out_$i26, out_$i27, out_$i28);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} out_$i25 := ldv_undef_int();
    call {:si_unique_call 1402} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_6775;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb28:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i26 == 1;
    goto corral_source_split_6783;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} ldv_dispatch_pm_deregister_2_5();
    goto corral_source_split_6790;

  SeqInstr_447:
    goto corral_source_split_6789;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} ldv_dispatch_pm_register_2_6();
    goto SeqInstr_446;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i27 == 1;
    goto corral_source_split_6787;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} ldv_assume(out_$i19);
    goto corral_source_split_6768;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i32(out_$i18);
    goto corral_source_split_6767;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i15, 0);
    goto corral_source_split_6766;

  $bb8:
    assume out_$i17 == 1;
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_6763;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} out_$i16 := ldv_undef_int();
    call {:si_unique_call 1398} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_6762;

  SeqInstr_444:
    call {:si_unique_call 1396} {:cexpr "ldv_2_probed_default"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_6761;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} out_$i15 := ldv_ldv_post_probe_152(out_$i14);
    goto SeqInstr_443;

  SeqInstr_441:
    call {:si_unique_call 1394} {:cexpr "ldv_2_probed_default"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_6760;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} out_$i14 := ldv_platform_instance_probe_2_14(out_$p13, in_$p9);
    goto SeqInstr_440;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.1, out_$p12);
    goto corral_source_split_6759;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p7, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6758;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} ldv_assume(out_$i21);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i1.i32(out_$i20);
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i15, 0);
    goto corral_source_split_6771;

  $bb9:
    assume !(out_$i17 == 1);
    goto corral_source_split_6770;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31 := ldv_platform_platform_instance_2_loop_$bb7(in_$p7, in_$p9, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31);
    return;

  exit:
    return;
}



procedure ldv_platform_platform_instance_2_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref);
  modifies $M.65, $M.66, $M.2, assertsPassed, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.0, $M.9, $M.10;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation ldv_platform_pm_ops_instance_3_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p92, in_$p93, in_$p94, in_$i95, in_$i96, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$p129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$p135, in_$p136, in_$p137, in_$p138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p143, in_$p144, in_$i145, in_$i146, in_$p147, in_$p148, in_$p149, in_$p150;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1423} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_6830;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_468:
    goto corral_source_split_6867;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} ldv_pm_ops_instance_runtime_idle_3_27(out_$p12, $u6);
    goto SeqInstr_467;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.21, out_$p11);
    goto corral_source_split_6866;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_6865;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_6864;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_6838;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_6837;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.20, out_$p7);
    goto corral_source_split_6836;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_6835;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_6833;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_6831;

  $bb27:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_474:
    goto corral_source_split_6882;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} ldv_pm_ops_instance_runtime_resume_3_24(out_$p24, $u6);
    goto SeqInstr_473;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.25, out_$p23);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_6880;

  $bb26:
    assume out_$i22 == 1;
    goto corral_source_split_6879;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_6877;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_6876;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.24, out_$p19);
    goto corral_source_split_6875;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_6874;

  $bb24:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_471:
    goto corral_source_split_6872;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} ldv_pm_ops_instance_runtime_suspend_3_25(out_$p18, $u6);
    goto SeqInstr_470;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.23, out_$p17);
    goto corral_source_split_6871;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_6870;

  $bb23:
    assume out_$i16 == 1;
    goto corral_source_split_6869;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_6847;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_6846;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.22, out_$p13);
    goto corral_source_split_6845;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_6844;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_6842;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_6840;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} ldv_pm_ops_instance_complete_3_3(out_$p150, $u6);
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.64, out_$p149);
    goto corral_source_split_6980;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_6979;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_495:
    goto corral_source_split_6977;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} ldv_pm_ops_instance_resume_3_16(out_$p72, $u6);
    goto SeqInstr_494;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.39, out_$p71);
    goto corral_source_split_6976;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_6975;

  $bb63:
    assume out_$i70 == 1;
    goto corral_source_split_6974;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_6957;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_6956;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.38, out_$p67);
    goto corral_source_split_6955;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_6954;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_486:
    goto corral_source_split_6952;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} ldv_pm_ops_instance_resume_noirq_3_19(out_$p54, $u6);
    goto SeqInstr_485;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.33, out_$p53);
    goto corral_source_split_6951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_6950;

  $bb53:
    assume out_$i52 == 1;
    goto corral_source_split_6949;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_6946;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.32, out_$p49);
    goto corral_source_split_6945;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_6944;

  $bb51:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_483:
    goto corral_source_split_6942;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} ldv_pm_ops_instance_suspend_noirq_3_20(out_$p48, $u6);
    goto SeqInstr_482;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.31, out_$p47);
    goto corral_source_split_6941;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_6940;

  $bb50:
    assume out_$i46 == 1;
    goto corral_source_split_6939;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_6931;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_6930;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.30, out_$p43);
    goto corral_source_split_6929;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_6928;

  $bb48:
    assume out_$i42 == 1;
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_6925;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} out_$i41 := ldv_undef_int();
    call {:si_unique_call 1434} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_6924;

  $bb46:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_480:
    goto corral_source_split_6922;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} ldv_pm_ops_instance_suspend_3_21(out_$p40, $u6);
    goto SeqInstr_479;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.29, out_$p39);
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_6920;

  $bb45:
    assume out_$i38 == 1;
    goto corral_source_split_6919;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_6897;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_6896;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.28, out_$p35);
    goto corral_source_split_6895;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_6894;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i32 == 1;
    goto corral_source_split_6892;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_6890;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} out_$i31 := ldv_undef_int();
    call {:si_unique_call 1430} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_6889;

  $bb30:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_477:
    goto corral_source_split_6887;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} ldv_pm_ops_instance_prepare_3_22(out_$p30, $u6);
    goto SeqInstr_476;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.27, out_$p29);
    goto corral_source_split_6886;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_6885;

  $bb29:
    assume out_$i28 == 1;
    goto corral_source_split_6884;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_6856;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_6855;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.26, out_$p25);
    goto corral_source_split_6854;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_6853;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_6851;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i1;
    assume true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_6849;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb61:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_492:
    goto corral_source_split_6972;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} ldv_pm_ops_instance_resume_early_3_17(out_$p66, $u6);
    goto SeqInstr_491;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.37, out_$p65);
    goto corral_source_split_6971;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_6970;

  $bb60:
    assume out_$i64 == 1;
    goto corral_source_split_6969;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_6967;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_6966;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.36, out_$p61);
    goto corral_source_split_6965;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_6964;

  $bb58:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_489:
    goto corral_source_split_6962;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} ldv_pm_ops_instance_suspend_late_3_18(out_$p60, $u6);
    goto SeqInstr_488;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.35, out_$p59);
    goto corral_source_split_6961;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_6960;

  $bb57:
    assume out_$i58 == 1;
    goto corral_source_split_6959;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_6937;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_6936;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.34, out_$p55);
    goto corral_source_split_6935;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_6934;

  $bb49:
    assume !(out_$i42 == 1);
    goto corral_source_split_6933;

  $bb86:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_513:
    goto corral_source_split_7041;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} ldv_pm_ops_instance_thaw_3_10(out_$p110, $u6);
    goto SeqInstr_512;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.51, out_$p109);
    goto corral_source_split_7040;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_7039;

  $bb85:
    assume out_$i108 == 1;
    goto corral_source_split_7038;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, 0);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.50, out_$p105);
    goto corral_source_split_7019;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_7018;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_504:
    goto corral_source_split_7016;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} ldv_pm_ops_instance_thaw_early_3_13(out_$p92, $u6);
    goto SeqInstr_503;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.45, out_$p91);
    goto corral_source_split_7015;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_7014;

  $bb75:
    assume out_$i90 == 1;
    goto corral_source_split_7013;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, 0);
    goto corral_source_split_7011;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_7010;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.44, out_$p87);
    goto corral_source_split_7009;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_7008;

  $bb73:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_501:
    goto corral_source_split_7006;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} ldv_pm_ops_instance_freeze_late_3_14(out_$p86, $u6);
    goto SeqInstr_500;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.43, out_$p85);
    goto corral_source_split_7005;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_7004;

  $bb72:
    assume out_$i84 == 1;
    goto corral_source_split_7003;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_6995;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_6994;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.42, out_$p81);
    goto corral_source_split_6993;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_6992;

  $bb70:
    assume out_$i80 == 1;
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_6989;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} out_$i79 := ldv_undef_int();
    call {:si_unique_call 1443} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_6988;

  $bb68:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_498:
    goto corral_source_split_6986;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} ldv_pm_ops_instance_freeze_3_15(out_$p78, $u6);
    goto SeqInstr_497;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.41, out_$p77);
    goto corral_source_split_6985;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_6984;

  $bb67:
    assume out_$i76 == 1;
    goto corral_source_split_6983;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_6906;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_6905;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.40, out_$p73);
    goto corral_source_split_6904;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i33 == 1;
    goto corral_source_split_6901;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_6899;

  $bb33:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb83:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_510:
    goto corral_source_split_7036;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} ldv_pm_ops_instance_thaw_noirq_3_11(out_$p104, $u6);
    goto SeqInstr_509;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.49, out_$p103);
    goto corral_source_split_7035;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_7034;

  $bb82:
    assume out_$i102 == 1;
    goto corral_source_split_7033;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_7030;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.48, out_$p99);
    goto corral_source_split_7029;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_7028;

  $bb80:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_507:
    goto corral_source_split_7026;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} ldv_pm_ops_instance_freeze_noirq_3_12(out_$p98, $u6);
    goto SeqInstr_506;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.47, out_$p97);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_7024;

  $bb79:
    assume out_$i96 == 1;
    goto corral_source_split_7023;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i64(out_$i95, 0);
    goto corral_source_split_7001;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    out_$i95 := $p2i.ref.i64(out_$p94);
    goto corral_source_split_7000;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.46, out_$p93);
    goto corral_source_split_6999;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_6998;

  $bb71:
    assume !(out_$i80 == 1);
    goto corral_source_split_6997;

  $bb107:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_531:
    goto corral_source_split_7101;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} ldv_pm_ops_instance_restore_3_4(out_$p148, $u6);
    goto SeqInstr_530;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.63, out_$p147);
    goto corral_source_split_7100;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_7099;

  $bb106:
    assume out_$i146 == 1;
    goto corral_source_split_7098;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i64(out_$i145, 0);
    goto corral_source_split_7081;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    out_$i145 := $p2i.ref.i64(out_$p144);
    goto corral_source_split_7080;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.62, out_$p143);
    goto corral_source_split_7079;

  $bb99:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_7078;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb97:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_522:
    goto corral_source_split_7076;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} ldv_pm_ops_instance_restore_early_3_7(out_$p130, $u6);
    goto SeqInstr_521;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.57, out_$p129);
    goto corral_source_split_7075;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_7074;

  $bb96:
    assume out_$i128 == 1;
    goto corral_source_split_7073;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i127, 0);
    goto corral_source_split_7071;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_7070;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.56, out_$p125);
    goto corral_source_split_7069;

  $bb95:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_7068;

  $bb94:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_519:
    goto corral_source_split_7066;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} ldv_pm_ops_instance_poweroff_late_3_8(out_$p124, $u6);
    goto SeqInstr_518;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.55, out_$p123);
    goto corral_source_split_7065;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_7064;

  $bb93:
    assume out_$i122 == 1;
    goto corral_source_split_7063;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_7055;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_7054;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.54, out_$p119);
    goto corral_source_split_7053;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_7052;

  $bb91:
    assume out_$i118 == 1;
    goto corral_source_split_7051;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_7049;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} out_$i117 := ldv_undef_int();
    call {:si_unique_call 1451} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_7048;

  $bb89:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_516:
    goto corral_source_split_7046;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} ldv_pm_ops_instance_poweroff_3_9(out_$p116, $u6);
    goto SeqInstr_515;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.53, out_$p115);
    goto corral_source_split_7045;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_7044;

  $bb88:
    assume out_$i114 == 1;
    goto corral_source_split_7043;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_6915;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_6914;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.52, out_$p111);
    goto corral_source_split_6913;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_6912;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i34 == 1;
    goto corral_source_split_6910;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_6908;

  $bb37:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb104:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_528:
    goto corral_source_split_7096;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} ldv_pm_ops_instance_restore_noirq_3_5(out_$p142, $u6);
    goto SeqInstr_527;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.61, out_$p141);
    goto corral_source_split_7095;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_7094;

  $bb103:
    assume out_$i140 == 1;
    goto corral_source_split_7093;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i64(out_$i139, 0);
    goto corral_source_split_7091;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    out_$i139 := $p2i.ref.i64(out_$p138);
    goto corral_source_split_7090;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.60, out_$p137);
    goto corral_source_split_7089;

  $bb102:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_7088;

  $bb101:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_525:
    goto corral_source_split_7086;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} ldv_pm_ops_instance_poweroff_noirq_3_6(out_$p136, $u6);
    goto SeqInstr_524;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    out_$p136 := $load.ref($M.59, out_$p135);
    goto corral_source_split_7085;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_7084;

  $bb100:
    assume out_$i134 == 1;
    goto corral_source_split_7083;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    out_$i134 := $ne.i64(out_$i133, 0);
    goto corral_source_split_7061;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    out_$i133 := $p2i.ref.i64(out_$p132);
    goto corral_source_split_7060;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.58, out_$p131);
    goto corral_source_split_7059;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_7058;

  $bb92:
    assume !(out_$i118 == 1);
    goto corral_source_split_7057;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} ldv_stop();
    goto corral_source_split_6917;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150 := ldv_platform_pm_ops_instance_3_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150);
    return;

  exit:
    return;
}



procedure ldv_platform_pm_ops_instance_3_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref);
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10;



implementation ldv_pci_pci_instance_1_loop_$bb14(in_$i33: i32, in_$i37: i32, in_$i38: i1) returns (out_$i33: i32, out_$i37: i32, out_$i38: i1)
{

  entry:
    out_$i33, out_$i37, out_$i38 := in_$i33, in_$i37, in_$i38;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    goto $bb31_dummy;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i37;
    assume true;
    goto $bb31;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 1);
    goto corral_source_split_7286;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} out_$i37 := ldv_undef_int();
    call {:si_unique_call 1533} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_7285;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i33, out_$i37, out_$i38 := ldv_pci_pci_instance_1_loop_$bb14(out_$i33, out_$i37, out_$i38);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_1_loop_$bb14(in_$i33: i32, in_$i37: i32, in_$i38: i1) returns (out_$i33: i32, out_$i37: i32, out_$i38: i1);



implementation ldv_pci_pci_instance_1_loop_$bb10(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref) returns (out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref)
{

  entry:
    out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72 := in_$i23, in_$i24, in_$i25, in_$i33, in_$i26, in_$i34, in_$i35, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7274;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i60;
    goto $bb43_dummy;

  $bb42:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_636:
    goto corral_source_split_7351;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_pci_instance_resume_1_5(out_$p72, in_$p10);
    goto SeqInstr_635;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.1, out_$p71);
    goto corral_source_split_7350;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_7349;

  $bb41:
    assume out_$i70 == 1;
    goto corral_source_split_7348;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_7346;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_7345;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.1, out_$p67);
    goto corral_source_split_7344;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_7343;

  $bb39:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_633:
    goto corral_source_split_7341;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_pci_instance_resume_early_1_6(out_$p66, in_$p10);
    goto SeqInstr_632;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.1, out_$p65);
    goto corral_source_split_7340;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_7339;

  $bb38:
    assume out_$i64 == 1;
    goto corral_source_split_7338;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_7336;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.1, out_$p61);
    goto corral_source_split_7334;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_7333;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} out_$i60 := ldv_filter_err_code(out_$i59);
    call {:si_unique_call 1542} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_7332;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_7331;

  $bb36:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := out_$i49;
    goto $bb37;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i58;
    goto $bb37;

  SeqInstr_630:
    call {:si_unique_call 1540} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_7329;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_$i58 := ldv_pci_instance_suspend_late_1_7(out_$p55, in_$p10, out_$i57);
    goto SeqInstr_629;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.67, out_$p56);
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.1, out_$p54);
    goto corral_source_split_7326;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_7325;

  $bb35:
    assume out_$i53 == 1;
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_7321;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.1, out_$p50);
    goto corral_source_split_7320;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_7319;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} out_$i49 := ldv_filter_err_code(out_$i48);
    call {:si_unique_call 1538} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_7318;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_7317;

  $bb33:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := out_$i23;
    goto $bb34;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i47;
    goto $bb34;

  SeqInstr_627:
    call {:si_unique_call 1536} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_7315;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} out_$i47 := ldv_pci_instance_suspend_1_8(out_$p44, in_$p10, out_$i46);
    goto SeqInstr_626;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.67, out_$p45);
    goto corral_source_split_7314;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7313;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_7312;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_7311;

  $bb32:
    assume out_$i42 == 1;
    goto corral_source_split_7310;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_7297;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_7296;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.1, out_$p39);
    goto corral_source_split_7295;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_7294;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_7292;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i26;
    assume true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i26, 2);
    goto corral_source_split_7290;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb13;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i33;
    goto $bb13;

  $bb20:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7288;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i37;
    assume true;
    goto $bb31, $bb20;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 1);
    goto corral_source_split_7286;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} out_$i37 := ldv_undef_int();
    call {:si_unique_call 1533} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_7285;

  $bb14:
    call out_$i33, out_$i37, out_$i38 := ldv_pci_pci_instance_1_loop_$bb14(out_$i33, out_$i37, out_$i38);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    assume false;
    return;

  $bb11:
    assume out_$i25 == 1;
    goto corral_source_split_7278;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 1);
    goto corral_source_split_7276;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} out_$i24 := ldv_undef_int();
    call {:si_unique_call 1529} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_7275;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72 := ldv_pci_pci_instance_1_loop_$bb10(in_$p1, in_$p8, in_$p10, out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_1_loop_$bb10(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref) returns (out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref);
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, assertsPassed, $M.0, $M.9, $M.10, $M.69, $M.68;



implementation ldv_pci_pci_instance_1_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$i33, out_$i26, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80 := in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i27, in_$i28, in_$i29, in_$i30, in_$i33, in_$i26, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$p79, in_$p80;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} ldv_ldv_pre_probe_149();
    goto corral_source_split_7256;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb16_dummy;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_7281;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} out_$i29 := ldv_undef_int();
    call {:si_unique_call 1531} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_7280;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_642:
    goto corral_source_split_7360;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_pci_instance_release_1_2(out_$p80, in_$p10);
    goto SeqInstr_641;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.1, out_$p79);
    goto corral_source_split_7359;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_7358;

  $bb45:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_639:
    goto corral_source_split_7356;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} ldv_pci_instance_shutdown_1_3(out_$p78, in_$p10);
    goto SeqInstr_638;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.1, out_$p77);
    goto corral_source_split_7355;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_7354;

  $bb44:
    assume out_$i76 == 1;
    goto corral_source_split_7353;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_7306;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_7305;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.1, out_$p73);
    goto corral_source_split_7304;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_7303;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i36 == 1;
    goto corral_source_split_7301;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 3);
    goto corral_source_split_7299;

  $bb23:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i26;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i26, 2);
    goto corral_source_split_7290;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb13;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i33;
    goto $bb13;

  $bb20:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7288;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i37;
    assume true;
    goto $bb31, $bb20;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 1);
    goto corral_source_split_7286;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} out_$i37 := ldv_undef_int();
    call {:si_unique_call 1533} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_7285;

  $bb14:
    call out_$i33, out_$i37, out_$i38 := ldv_pci_pci_instance_1_loop_$bb14(out_$i33, out_$i37, out_$i38);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    assume false;
    return;

  $bb11:
    assume out_$i25 == 1;
    goto corral_source_split_7278;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 1);
    goto corral_source_split_7276;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} out_$i24 := ldv_undef_int();
    call {:si_unique_call 1529} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_7275;

  $bb10:
    call out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72 := ldv_pci_pci_instance_1_loop_$bb10(in_$p1, in_$p8, in_$p10, out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7274;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i18;
    goto $bb10;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i60;
    assume false;
    return;

  $bb42:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_636:
    goto corral_source_split_7351;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_pci_instance_resume_1_5(out_$p72, in_$p10);
    goto SeqInstr_635;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.1, out_$p71);
    goto corral_source_split_7350;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_7349;

  $bb41:
    assume out_$i70 == 1;
    goto corral_source_split_7348;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_7346;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_7345;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.1, out_$p67);
    goto corral_source_split_7344;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_7343;

  $bb39:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_633:
    goto corral_source_split_7341;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_pci_instance_resume_early_1_6(out_$p66, in_$p10);
    goto SeqInstr_632;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.1, out_$p65);
    goto corral_source_split_7340;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_7339;

  $bb38:
    assume out_$i64 == 1;
    goto corral_source_split_7338;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_7336;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.1, out_$p61);
    goto corral_source_split_7334;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_7333;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} out_$i60 := ldv_filter_err_code(out_$i59);
    call {:si_unique_call 1542} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_7332;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_7331;

  $bb36:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := out_$i49;
    goto $bb37;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i58;
    goto $bb37;

  SeqInstr_630:
    call {:si_unique_call 1540} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_7329;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_$i58 := ldv_pci_instance_suspend_late_1_7(out_$p55, in_$p10, out_$i57);
    goto SeqInstr_629;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.67, out_$p56);
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.1, out_$p54);
    goto corral_source_split_7326;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_7325;

  $bb35:
    assume out_$i53 == 1;
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_7321;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.1, out_$p50);
    goto corral_source_split_7320;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_7319;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} out_$i49 := ldv_filter_err_code(out_$i48);
    call {:si_unique_call 1538} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_7318;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_7317;

  $bb33:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := out_$i23;
    goto $bb34;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i47;
    goto $bb34;

  SeqInstr_627:
    call {:si_unique_call 1536} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_7315;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} out_$i47 := ldv_pci_instance_suspend_1_8(out_$p44, in_$p10, out_$i46);
    goto SeqInstr_626;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.67, out_$p45);
    goto corral_source_split_7314;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7313;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_7312;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_7311;

  $bb32:
    assume out_$i42 == 1;
    goto corral_source_split_7310;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_7297;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_7296;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.1, out_$p39);
    goto corral_source_split_7295;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_7294;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_7292;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ldv_assume(out_$i22);
    goto corral_source_split_7267;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_7266;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i18, 0);
    goto corral_source_split_7265;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_7264;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_7262;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} out_$i19 := ldv_undef_int();
    call {:si_unique_call 1525} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_7261;

  SeqInstr_624:
    call {:si_unique_call 1523} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_7260;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} out_$i18 := ldv_ldv_post_probe_150(out_$i17);
    goto SeqInstr_623;

  SeqInstr_621:
    call {:si_unique_call 1521} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_7259;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} out_$i17 := ldv_pci_instance_probe_1_17(out_$p16, in_$p10, in_$p12);
    goto SeqInstr_620;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_7258;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_7257;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} ldv_assume(out_$i28);
    goto corral_source_split_7272;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i32(out_$i27);
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i18, 0);
    goto corral_source_split_7270;

  $bb9:
    assume !(out_$i20 == 1);
    goto corral_source_split_7269;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$i33, out_$i26, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80 := ldv_pci_pci_instance_1_loop_$bb7(in_$p1, in_$p8, in_$p10, in_$p12, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$i33, out_$i26, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_1_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref);
  modifies $M.65, $M.66, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, assertsPassed, $CurrAddr, $M.0, $M.9, $M.10, $M.69, $M.68;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_7415;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_7419;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1578} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_7418;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} ldv_free(out_$p3);
    goto corral_source_split_7417;

  SeqInstr_675:
    goto corral_source_split_7416;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} ldv_dummy_resourceless_instance_callback_5_3($u8, $u6, $u9, out_$p3);
    goto SeqInstr_674;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.1, $M.16, assertsPassed;



implementation ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i32)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1583} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_7434;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_684:
    goto corral_source_split_7439;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} ldv_dummy_resourceless_instance_callback_7_15($u10, $u11);
    goto SeqInstr_683;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_7437;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_7435;

  SeqInstr_687:
    goto corral_source_split_7445;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} ldv_dummy_resourceless_instance_callback_7_14($u10, $u11);
    goto SeqInstr_686;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_7443;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_7441;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} ldv_dummy_resourceless_instance_callback_7_13($u12, $u11, $u13);
    goto corral_source_split_7451;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_7449;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_7447;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} ldv_dummy_resourceless_instance_callback_7_10($u14, $u11, $u0);
    goto corral_source_split_7457;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_7455;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_7453;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_690:
    goto corral_source_split_7463;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} ldv_dummy_resourceless_instance_callback_7_7($u14, $u11, $u0);
    goto SeqInstr_689;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_7461;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_7459;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_693:
    goto corral_source_split_7469;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} ldv_dummy_resourceless_instance_callback_7_3($u10, $u11);
    goto SeqInstr_692;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_7467;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i1;
    assume true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_7465;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8 := ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i32);
  modifies $M.16, assertsPassed, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.0, $M.9, $M.10;



implementation ldv_struct_usb_ep_ops_io_instance_6_loop_$bb10(in_$p4: ref, in_$p6: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i32, in_$i38: i1) returns (out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i32, out_$i38: i1)
{

  entry:
    out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38 := in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} out_$i28 := ldv_undef_int();
    call {:si_unique_call 1621} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_7545;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb51_dummy;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_7604;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} out_$i37 := ldv_undef_int();
    call {:si_unique_call 1634} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_7603;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_717:
    goto corral_source_split_7557;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_io_instance_callback_6_29($u16, in_$p4);
    goto SeqInstr_716;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i29 == 1;
    goto corral_source_split_7555;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 1);
    goto corral_source_split_7546;

  SeqInstr_720:
    goto corral_source_split_7563;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} ldv_io_instance_callback_6_26($u17, in_$p4, $u0);
    goto SeqInstr_719;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i30 == 1;
    goto corral_source_split_7561;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i28, 2);
    goto corral_source_split_7559;

  $bb16:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_723:
    goto corral_source_split_7569;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_io_instance_callback_6_23($u18, in_$p4, in_$p6, $u0);
    goto SeqInstr_722;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i31 == 1;
    goto corral_source_split_7567;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i28, 3);
    goto corral_source_split_7565;

  $bb20:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} ldv_io_instance_callback_6_22($u19, in_$p4, in_$p6);
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i32 == 1;
    goto corral_source_split_7573;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i28, 4);
    goto corral_source_split_7571;

  $bb24:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} ldv_io_instance_callback_6_21($u16, in_$p4);
    goto corral_source_split_7581;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i33 == 1;
    goto corral_source_split_7579;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i28, 5);
    goto corral_source_split_7577;

  $bb28:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} ldv_io_instance_callback_6_20($u20, in_$p4);
    goto corral_source_split_7587;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i34 == 1;
    goto corral_source_split_7585;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i28, 6);
    goto corral_source_split_7583;

  $bb32:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_726:
    goto corral_source_split_7593;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} ldv_io_instance_callback_6_19($u21, in_$p4, in_$p6);
    goto SeqInstr_725;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i35 == 1;
    goto corral_source_split_7591;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i28, 7);
    goto corral_source_split_7589;

  $bb36:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_729:
    goto corral_source_split_7599;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} ldv_io_instance_callback_6_4($u22, in_$p4, $u0);
    goto SeqInstr_728;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i36 == 1;
    goto corral_source_split_7597;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i28, 8);
    goto corral_source_split_7595;

  $bb40:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} ldv_stop();
    goto corral_source_split_7601;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38 := ldv_struct_usb_ep_ops_io_instance_6_loop_$bb10(in_$p4, in_$p6, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38);
    return;

  exit:
    return;
}



procedure ldv_struct_usb_ep_ops_io_instance_6_loop_$bb10(in_$p4: ref, in_$p6: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i32, in_$i38: i1) returns (out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i32, out_$i38: i1);
  modifies $M.1, $M.16, assertsPassed, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.2, $M.0, $M.9, $M.10;



implementation ldv_struct_usb_ep_ops_io_instance_6_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i32, in_$i38: i1) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i32, out_$i38: i1)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38 := in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($u15, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7520;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb12_dummy;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_7549;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} out_$i21 := ldv_undef_int();
    call {:si_unique_call 1623} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_7548;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_714:
    goto corral_source_split_7541;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} ldv_io_instance_release_6_2(out_$p27, in_$p4);
    goto SeqInstr_713;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.71, out_$p26);
    goto corral_source_split_7540;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($u15, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_7539;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    goto $bb8;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_7532;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} out_$i17 := ldv_undef_int();
    call {:si_unique_call 1617} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_7531;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} ldv_assume(out_$i16);
    goto corral_source_split_7530;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_7529;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i12, 0);
    goto corral_source_split_7528;

  $bb5:
    assume out_$i14 == 1;
    goto corral_source_split_7527;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_7525;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} out_$i13 := ldv_undef_int();
    call {:si_unique_call 1614} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_7524;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} out_$i12 := ldv_filter_err_code(out_$i11);
    call {:si_unique_call 1612} {:cexpr "ldv_6_ret_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_7523;

  SeqInstr_711:
    call {:si_unique_call 1610} {:cexpr "ldv_6_ret_default"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_7522;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} out_$i11 := ldv_io_instance_probe_6_11(out_$p10, in_$p4, in_$p2);
    goto SeqInstr_710;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.70, out_$p9);
    goto corral_source_split_7521;

  $bb14:
    assume out_$i38 == 1;
    goto corral_source_split_7553;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb51;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_7604;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} out_$i37 := ldv_undef_int();
    call {:si_unique_call 1634} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_7603;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_717:
    goto corral_source_split_7557;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_io_instance_callback_6_29($u16, in_$p4);
    goto SeqInstr_716;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i29 == 1;
    goto corral_source_split_7555;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 1);
    goto corral_source_split_7546;

  $bb10:
    call out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38 := ldv_struct_usb_ep_ops_io_instance_6_loop_$bb10(in_$p4, in_$p6, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} out_$i28 := ldv_undef_int();
    call {:si_unique_call 1621} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_7545;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    assume false;
    return;

  $bb9:
    assume !(out_$i18 == 1);
    goto corral_source_split_7543;

  SeqInstr_720:
    goto corral_source_split_7563;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} ldv_io_instance_callback_6_26($u17, in_$p4, $u0);
    goto SeqInstr_719;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i30 == 1;
    goto corral_source_split_7561;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i28, 2);
    goto corral_source_split_7559;

  $bb16:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_723:
    goto corral_source_split_7569;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_io_instance_callback_6_23($u18, in_$p4, in_$p6, $u0);
    goto SeqInstr_722;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i31 == 1;
    goto corral_source_split_7567;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i28, 3);
    goto corral_source_split_7565;

  $bb20:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} ldv_io_instance_callback_6_22($u19, in_$p4, in_$p6);
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i32 == 1;
    goto corral_source_split_7573;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i28, 4);
    goto corral_source_split_7571;

  $bb24:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} ldv_io_instance_callback_6_21($u16, in_$p4);
    goto corral_source_split_7581;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i33 == 1;
    goto corral_source_split_7579;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i28, 5);
    goto corral_source_split_7577;

  $bb28:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} ldv_io_instance_callback_6_20($u20, in_$p4);
    goto corral_source_split_7587;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i34 == 1;
    goto corral_source_split_7585;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i28, 6);
    goto corral_source_split_7583;

  $bb32:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_726:
    goto corral_source_split_7593;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} ldv_io_instance_callback_6_19($u21, in_$p4, in_$p6);
    goto SeqInstr_725;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i35 == 1;
    goto corral_source_split_7591;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i28, 7);
    goto corral_source_split_7589;

  $bb36:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_729:
    goto corral_source_split_7599;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} ldv_io_instance_callback_6_4($u22, in_$p4, $u0);
    goto SeqInstr_728;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i36 == 1;
    goto corral_source_split_7597;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i28, 8);
    goto corral_source_split_7595;

  $bb40:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} ldv_stop();
    goto corral_source_split_7601;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} ldv_assume(out_$i20);
    goto corral_source_split_7537;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i32(out_$i19);
    goto corral_source_split_7536;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i12, 0);
    goto corral_source_split_7535;

  $bb6:
    assume !(out_$i14 == 1);
    goto corral_source_split_7534;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38 := ldv_struct_usb_ep_ops_io_instance_6_loop_$bb4(in_$p2, in_$p4, in_$p6, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38);
    return;

  exit:
    return;
}



procedure ldv_struct_usb_ep_ops_io_instance_6_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i32, in_$i38: i1) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i32, out_$i38: i1);
  modifies $M.1, $M.16, assertsPassed, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.2, $M.0, $M.9, $M.10;



implementation ldv_rtc_rtc_class_instance_4_loop_$bb10(in_$i21: i32, in_$i22: i1) returns (out_$i21: i32, out_$i22: i1)
{

  entry:
    out_$i21, out_$i22 := in_$i21, in_$i22;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} out_$i21 := ldv_undef_int();
    call {:si_unique_call 1663} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_7675;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb14_dummy;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_7676;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22 := ldv_rtc_rtc_class_instance_4_loop_$bb10(out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure ldv_rtc_rtc_class_instance_4_loop_$bb10(in_$i21: i32, in_$i22: i1) returns (out_$i21: i32, out_$i22: i1);



implementation ldv_rtc_rtc_class_instance_4_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24 := in_$i3, in_$p4, in_$p5, in_$i6, in_$i7, in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7648;

  $bb12:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i12;
    goto $bb12_dummy;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_7679;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} out_$i19 := ldv_undef_int();
    call {:si_unique_call 1665} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_7678;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} ldv_rtc_class_instance_release_4_2(out_$p24, $u6);
    goto corral_source_split_7686;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.74, out_$p23);
    goto corral_source_split_7685;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($u23, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_7684;

  $bb15:
    assume !(out_$i22 == 1);
    goto corral_source_split_7683;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_7676;

  $bb10:
    call out_$i21, out_$i22 := ldv_rtc_rtc_class_instance_4_loop_$bb10(out_$i21, out_$i22);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} out_$i21 := ldv_undef_int();
    call {:si_unique_call 1663} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_7675;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    assume false;
    return;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} ldv_assume(out_$i16);
    goto corral_source_split_7668;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_7667;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i12, 0);
    goto corral_source_split_7666;

  $bb8:
    assume out_$i14 == 1;
    goto corral_source_split_7665;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_7663;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} out_$i13 := ldv_undef_int();
    call {:si_unique_call 1659} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_7662;

  SeqInstr_759:
    call {:si_unique_call 1657} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_7661;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} out_$i12 := ldv_ldv_post_probe_154(out_$i11);
    goto SeqInstr_758;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7660;

  $bb6:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := out_$i3;
    goto $bb7;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i10;
    goto $bb7;

  SeqInstr_756:
    call {:si_unique_call 1655} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_7658;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} out_$i10 := ldv_rtc_class_instance_probe_4_10(out_$p9, $u6);
    goto SeqInstr_755;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.73, out_$p8);
    goto corral_source_split_7657;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($u23, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_7656;

  $bb5:
    assume out_$i7 == 1;
    goto corral_source_split_7655;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i64(out_$i6, 0);
    goto corral_source_split_7653;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_7652;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.72, out_$p4);
    goto corral_source_split_7651;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref($u23, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_7650;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} ldv_ldv_pre_probe_153();
    goto corral_source_split_7649;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} ldv_assume(out_$i18);
    goto corral_source_split_7673;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i32(out_$i17);
    goto corral_source_split_7672;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i12, 0);
    goto corral_source_split_7671;

  $bb9:
    assume !(out_$i14 == 1);
    goto corral_source_split_7670;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24 := ldv_rtc_rtc_class_instance_4_loop_$bb4(out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24);
    return;

  exit:
    return;
}



procedure ldv_rtc_rtc_class_instance_4_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref);
  modifies $M.65, $M.66, assertsPassed, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.16, $M.2, $CurrAddr, $M.0, $M.9, $M.10;


