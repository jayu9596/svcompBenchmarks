var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: ref;

var $M.8: i32;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]ref;

var $M.17: [ref]ref;

var $M.18: [ref]ref;

var $M.19: [ref]ref;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]i8;

var $M.24: [ref]ref;

var $M.25: i32;

var $M.26: [ref]i8;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]i8;

var $M.34: [ref]ref;

var $M.37: [ref]i32;

var $M.39: [ref]i32;

var $M.40: [ref]i8;

var $M.41: [ref]ref;

var $M.42: [ref]ref;

var $M.43: [ref]ref;

var $M.44: [ref]ref;

var $M.45: [ref]ref;

var $M.46: [ref]ref;

var $M.47: [ref]i24;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $M.50: [ref]i8;

var $M.52: [ref]i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i16;

var $M.56: i16;

var $M.57: [ref]i8;

var $M.119: [ref]i8;

var $M.120: [ref]i8;

var $M.121: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 521575);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const usb_serial_generic_device: ref;

axiom usb_serial_generic_device == $sub.ref(0, 2588);

const {:count 2} generic_device_ids: ref;

axiom generic_device_ids == $sub.ref(0, 3676);

const {:count 8} .str.1: ref;

axiom .str.1 == $sub.ref(0, 4708);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const dev_attr_port_number: ref;

axiom dev_attr_port_number == $sub.ref(0, 5780);

const {:count 2} drv_attrs: ref;

axiom drv_attrs == $sub.ref(0, 6900);

const {:count 2} serial_drivers: ref;

axiom serial_drivers == $sub.ref(0, 7940);

const product: ref;

axiom product == $sub.ref(0, 8966);

const vendor: ref;

axiom vendor == $sub.ref(0, 9992);

const usb_serial_driver: ref;

axiom usb_serial_driver == $sub.ref(0, 11320);

const serial_proc_fops: ref;

axiom serial_proc_fops == $sub.ref(0, 12560);

const serial_ops: ref;

axiom serial_ops == $sub.ref(0, 13856);

const serial_port_ops: ref;

axiom serial_port_ops == $sub.ref(0, 14928);

const usb_serial_driver_list: ref;

axiom usb_serial_driver_list == $sub.ref(0, 15968);

const table_lock: ref;

axiom table_lock == $sub.ref(0, 17160);

const ldv_mutex_table_lock: ref;

axiom ldv_mutex_table_lock == $sub.ref(0, 18188);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 19216);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 20244);

const ldv_mutex_disc_mutex_of_usb_serial: ref;

axiom ldv_mutex_disc_mutex_of_usb_serial == $sub.ref(0, 21272);

const {:count 254} serial_table: ref;

axiom serial_table == $sub.ref(0, 24328);

const usb_serial_tty_driver: ref;

axiom usb_serial_tty_driver == $sub.ref(0, 25360);

const usb_serial_bus_type: ref;

axiom usb_serial_bus_type == $sub.ref(0, 26520);

const .str: ref;

axiom .str == $sub.ref(0, 27554);

const {:count 35} .str.111: ref;

axiom .str.111 == $sub.ref(0, 28613);

const {:count 205} .str.4: ref;

axiom .str.4 == $sub.ref(0, 29842);

const {:count 13} .str.112: ref;

axiom .str.112 == $sub.ref(0, 30879);

const {:count 32} .str.113: ref;

axiom .str.113 == $sub.ref(0, 31935);

const {:count 11} .str.13: ref;

axiom .str.13 == $sub.ref(0, 32970);

const {:count 45} .str.121: ref;

axiom .str.121 == $sub.ref(0, 34039);

const {:count 39} .str.118: ref;

axiom .str.118 == $sub.ref(0, 35102);

const {:count 21} .str.15: ref;

axiom .str.15 == $sub.ref(0, 36147);

const {:count 11} .str.16: ref;

axiom .str.16 == $sub.ref(0, 37182);

const {:count 18} .str.107: ref;

axiom .str.107 == $sub.ref(0, 38224);

const {:count 208} .str.19: ref;

axiom .str.19 == $sub.ref(0, 39456);

const {:count 4} .str.47: ref;

axiom .str.47 == $sub.ref(0, 40484);

const {:count 16} .str.106: ref;

axiom .str.106 == $sub.ref(0, 41524);

const {:count 16} .str.105: ref;

axiom .str.105 == $sub.ref(0, 42564);

const {:count 13} .str.103: ref;

axiom .str.103 == $sub.ref(0, 43601);

const {:count 14} .str.96: ref;

axiom .str.96 == $sub.ref(0, 44639);

const {:count 18} .str.102: ref;

axiom .str.102 == $sub.ref(0, 45681);

const {:count 16} .str.101: ref;

axiom .str.101 == $sub.ref(0, 46721);

const {:count 19} .str.100: ref;

axiom .str.100 == $sub.ref(0, 47764);

const {:count 13} .str.98: ref;

axiom .str.98 == $sub.ref(0, 48801);

const {:count 17} .str.99: ref;

axiom .str.99 == $sub.ref(0, 49842);

const {:count 23} .str.104: ref;

axiom .str.104 == $sub.ref(0, 50889);

const {:count 18} .str.97: ref;

axiom .str.97 == $sub.ref(0, 51931);

const {:count 13} .str.94: ref;

axiom .str.94 == $sub.ref(0, 52968);

const {:count 17} .str.95: ref;

axiom .str.95 == $sub.ref(0, 54009);

const {:count 15} .str.108: ref;

axiom .str.108 == $sub.ref(0, 55048);

const {:count 21} .str.17: ref;

axiom .str.17 == $sub.ref(0, 56093);

const {:count 13} .str.93: ref;

axiom .str.93 == $sub.ref(0, 57130);

const {:count 12} .str.92: ref;

axiom .str.92 == $sub.ref(0, 58166);

const {:count 27} .str.82: ref;

axiom .str.82 == $sub.ref(0, 59217);

const {:count 4} .str.83: ref;

axiom .str.83 == $sub.ref(0, 60245);

const {:count 7} .str.85: ref;

axiom .str.85 == $sub.ref(0, 61276);

const {:count 11} .str.84: ref;

axiom .str.84 == $sub.ref(0, 62311);

const {:count 11} .str.86: ref;

axiom .str.86 == $sub.ref(0, 63346);

const {:count 26} .str.87: ref;

axiom .str.87 == $sub.ref(0, 64396);

const {:count 14} .str.88: ref;

axiom .str.88 == $sub.ref(0, 65434);

const {:count 9} .str.89: ref;

axiom .str.89 == $sub.ref(0, 66467);

const {:count 9} .str.90: ref;

axiom .str.90 == $sub.ref(0, 67500);

const {:count 10} .str.91: ref;

axiom .str.91 == $sub.ref(0, 68534);

const {:count 21} .str.51: ref;

axiom .str.51 == $sub.ref(0, 69579);

const {:count 17} .str.18: ref;

axiom .str.18 == $sub.ref(0, 70620);

const {:count 14} .str.20: ref;

axiom .str.20 == $sub.ref(0, 71658);

const {:count 28} .str.21: ref;

axiom .str.21 == $sub.ref(0, 72710);

const {:count 28} .str.22: ref;

axiom .str.22 == $sub.ref(0, 73762);

const {:count 30} .str.23: ref;

axiom .str.23 == $sub.ref(0, 74816);

const {:count 31} .str.24: ref;

axiom .str.24 == $sub.ref(0, 75871);

const {:count 35} .str.25: ref;

axiom .str.25 == $sub.ref(0, 76930);

const {:count 36} .str.26: ref;

axiom .str.26 == $sub.ref(0, 77990);

const {:count 62} .str.27: ref;

axiom .str.27 == $sub.ref(0, 79076);

const {:count 57} .str.28: ref;

axiom .str.28 == $sub.ref(0, 80157);

const {:count 47} .str.29: ref;

axiom .str.29 == $sub.ref(0, 81228);

const {:count 77} .str.30: ref;

axiom .str.30 == $sub.ref(0, 82329);

const {:count 71} .str.31: ref;

axiom .str.31 == $sub.ref(0, 83424);

const {:count 23} .str.32: ref;

axiom .str.32 == $sub.ref(0, 84471);

const {:count 46} .str.33: ref;

axiom .str.33 == $sub.ref(0, 85541);

const {:count 22} .str.34: ref;

axiom .str.34 == $sub.ref(0, 86587);

const {:count 14} .str.35: ref;

axiom .str.35 == $sub.ref(0, 87625);

const {:count 91} .str.36: ref;

axiom .str.36 == $sub.ref(0, 88740);

const {:count 93} .str.37: ref;

axiom .str.37 == $sub.ref(0, 89857);

const {:count 29} .str.38: ref;

axiom .str.38 == $sub.ref(0, 90910);

const {:count 9} .str.39: ref;

axiom .str.39 == $sub.ref(0, 91943);

const {:count 15} .str.40: ref;

axiom .str.40 == $sub.ref(0, 92982);

const {:count 43} .str.41: ref;

axiom .str.41 == $sub.ref(0, 94049);

const {:count 16} .str.48: ref;

axiom .str.48 == $sub.ref(0, 95089);

const {:count 7} .str.49: ref;

axiom .str.49 == $sub.ref(0, 96120);

const {:count 22} .str.50: ref;

axiom .str.50 == $sub.ref(0, 97166);

const {:count 24} .str.46: ref;

axiom .str.46 == $sub.ref(0, 98214);

const {:count 13} .str.43: ref;

axiom .str.43 == $sub.ref(0, 99251);

const {:count 27} .str.44: ref;

axiom .str.44 == $sub.ref(0, 100302);

const {:count 28} .str.45: ref;

axiom .str.45 == $sub.ref(0, 101354);

const {:count 20} .str.42: ref;

axiom .str.42 == $sub.ref(0, 102398);

const {:count 7} .str.117: ref;

axiom .str.117 == $sub.ref(0, 103429);

const {:count 12} .str.119: ref;

axiom .str.119 == $sub.ref(0, 104465);

const {:count 4} .str.120: ref;

axiom .str.120 == $sub.ref(0, 105493);

const {:count 31} .str.109: ref;

axiom .str.109 == $sub.ref(0, 106548);

const {:count 31} .str.110: ref;

axiom .str.110 == $sub.ref(0, 107603);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 22} .str.114: ref;

axiom .str.114 == $sub.ref(0, 108649);

const {:count 27} .str.115: ref;

axiom .str.115 == $sub.ref(0, 109700);

const {:count 31} .str.116: ref;

axiom .str.116 == $sub.ref(0, 110755);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 48} .str.74: ref;

axiom .str.74 == $sub.ref(0, 111827);

const {:count 36} .str.52: ref;

axiom .str.52 == $sub.ref(0, 112887);

const {:count 51} .str.53: ref;

axiom .str.53 == $sub.ref(0, 113962);

const {:count 50} .str.54: ref;

axiom .str.54 == $sub.ref(0, 115036);

const {:count 31} .str.14: ref;

axiom .str.14 == $sub.ref(0, 116091);

const {:count 27} .str.55: ref;

axiom .str.55 == $sub.ref(0, 117142);

const {:count 24} .str.56: ref;

axiom .str.56 == $sub.ref(0, 118190);

const {:count 35} .str.57: ref;

axiom .str.57 == $sub.ref(0, 119249);

const {:count 25} .str.58: ref;

axiom .str.58 == $sub.ref(0, 120298);

const {:count 36} .str.59: ref;

axiom .str.59 == $sub.ref(0, 121358);

const {:count 25} .str.60: ref;

axiom .str.60 == $sub.ref(0, 122407);

const {:count 36} .str.61: ref;

axiom .str.61 == $sub.ref(0, 123467);

const {:count 30} .str.62: ref;

axiom .str.62 == $sub.ref(0, 124521);

const {:count 41} .str.63: ref;

axiom .str.63 == $sub.ref(0, 125586);

const {:count 35} .str.64: ref;

axiom .str.64 == $sub.ref(0, 126645);

const {:count 46} .str.65: ref;

axiom .str.65 == $sub.ref(0, 127715);

const {:count 38} .str.66: ref;

axiom .str.66 == $sub.ref(0, 128777);

const {:count 49} .str.67: ref;

axiom .str.67 == $sub.ref(0, 129850);

const {:count 39} .str.68: ref;

axiom .str.68 == $sub.ref(0, 130913);

const {:count 50} .str.69: ref;

axiom .str.69 == $sub.ref(0, 131987);

const {:count 36} .str.70: ref;

axiom .str.70 == $sub.ref(0, 133047);

const {:count 47} .str.71: ref;

axiom .str.71 == $sub.ref(0, 134118);

const {:count 40} .str.72: ref;

axiom .str.72 == $sub.ref(0, 135182);

const {:count 51} .str.73: ref;

axiom .str.73 == $sub.ref(0, 136257);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 39} .str.10: ref;

axiom .str.10 == $sub.ref(0, 137320);

const {:count 30} .str.9: ref;

axiom .str.9 == $sub.ref(0, 138374);

const {:count 38} .str.7: ref;

axiom .str.7 == $sub.ref(0, 139436);

const {:count 21} .str.8: ref;

axiom .str.8 == $sub.ref(0, 140481);

const {:count 35} .str.6: ref;

axiom .str.6 == $sub.ref(0, 141540);

const {:count 17} .str.5: ref;

axiom .str.5 == $sub.ref(0, 142581);

const {:count 30} .str.3: ref;

axiom .str.3 == $sub.ref(0, 143635);

const {:count 48} .str.75: ref;

axiom .str.75 == $sub.ref(0, 144707);

const {:count 16} .str.76: ref;

axiom .str.76 == $sub.ref(0, 145747);

const {:count 7} .str.77: ref;

axiom .str.77 == $sub.ref(0, 146778);

const tty_std_termios: ref;

axiom tty_std_termios == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 45} .str.78: ref;

axiom .str.78 == $sub.ref(0, 147847);

const {:count 38} .str.79: ref;

axiom .str.79 == $sub.ref(0, 148909);

const {:count 52} .str.80: ref;

axiom .str.80 == $sub.ref(0, 149985);

const {:count 42} .str.81: ref;

axiom .str.81 == $sub.ref(0, 151051);

const {:count 18} .str.2: ref;

axiom .str.2 == $sub.ref(0, 152093);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 29} .str.11: ref;

axiom .str.11 == $sub.ref(0, 153146);

const {:count 16} .str.12: ref;

axiom .str.12 == $sub.ref(0, 154186);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 155218);

const {:count 3} .str.1.258: ref;

axiom .str.1.258 == $sub.ref(0, 156245);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 157283);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 158311);

const usb_serial_generic_resume: ref;

axiom usb_serial_generic_resume == $sub.ref(0, 159343);

procedure usb_serial_generic_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_generic_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i16: i32;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i6: i32;
  var $i7: i32;
  var $i37: i32;
  var $i5: i32;
  var $i38: i1;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i5, 0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i39 := (if $i38 == 1 then $sub.i32(0, 5) else 0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $p11, $p13, $i14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i16, $i33, $i34, $i35, $i36, $i6, $i7, $i37 := usb_serial_generic_resume_loop_$bb4($p0, $p1, $i8, $p10, $p11, $p13, $i14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i16, $i33, $i34, $i35, $i36, $i6, $i7, $i37);
    goto $bb4_last;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i8, 8));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 2632)), $mul.ref(8, 1)), $mul.ref(552, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $i14 := constant_test_bit(31, $p13);
    call {:si_unique_call 1} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 2632)), $mul.ref(1088, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i6;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 2632)), $mul.ref(1160, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i24;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i16 := $i32;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i7, 1);
    call {:si_unique_call 2} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p1);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, $i33);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i37 := $i16;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i5 := $i37;
    goto $bb3;

  $bb22:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i16, $i33;
    goto $bb22_dummy;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i28 := usb_serial_generic_write_start($p11);
    call {:si_unique_call 7} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i24;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb21;

  $bb18:
    assume $i29 == 1;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i24, 1);
    call {:si_unique_call 8} {:cexpr "c"} boogie_si_record_i32($i30);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb20;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i20 := usb_serial_generic_submit_read_urbs($p11, 16);
    call {:si_unique_call 4} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i6;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb15;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i6, 1);
    call {:si_unique_call 5} {:cexpr "c"} boogie_si_record_i32($i22);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb14;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i16 := $i6;
    goto $bb8;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9;
}



const usb_serial_generic_throttle: ref;

axiom usb_serial_generic_throttle == $sub.ref(0, 160375);

procedure usb_serial_generic_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_serial_generic_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p5 := spinlock_check($p4);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 11} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(1473, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} spin_unlock_irqrestore($p8, $i6);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_unthrottle: ref;

axiom usb_serial_generic_unthrottle == $sub.ref(0, 161407);

procedure usb_serial_generic_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_generic_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var vslice_dummy_var_6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} spin_lock_irq($p4);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(1472, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    call {:si_unique_call 14} {:cexpr "was_throttled"} boogie_si_record_i32($i7);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(1473, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(1472, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} spin_unlock_irq($p10);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i7, 0);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_6 := usb_serial_generic_submit_read_urbs($p3, 208);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 162439);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 163471);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} _raw_spin_lock_irq($p2);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 164503);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} _raw_spin_unlock_irq($p2);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_submit_read_urbs: ref;

axiom usb_serial_generic_submit_read_urbs == $sub.ref(0, 165535);

procedure usb_serial_generic_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_generic_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i7: i1;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i8: i32;
  var $i6: i32;
  var $i15: i32;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} {:cexpr "usb_serial_generic_submit_read_urbs:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i2 := usb_serial_generic_submit_read_urb($p0, 0, $i1);
    call {:si_unique_call 21} {:cexpr "res"} boogie_si_record_i32($i2);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i4, $i5 := 0, $i2;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i15 := usb_serial_generic_submit_read_urb($p0, 1, $i1);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i4, $i5 := 1, $i15;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sge.i32($i4, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb10;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i8 := $i4;
    goto $bb14;

  $bb14:
    call $i9, $p11, $p12, $i13, $i14, $i8 := usb_serial_generic_submit_read_urbs_loop_$bb14($p0, $i9, $p11, $p12, $i13, $i14, $i8);
    goto $bb14_last;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref($i9, 8));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} usb_kill_urb($p12);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i8, 1);
    call {:si_unique_call 24} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i13, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i14 == 1);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb16_dummy;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;
}



const usb_serial_generic_submit_read_urb: ref;

axiom usb_serial_generic_submit_read_urb == $sub.ref(0, 166567);

procedure usb_serial_generic_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_generic_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $p33: ref;
  var $p35: ref;
  var $i7: i32;
  var vslice_dummy_var_7: i32;
  var vslice_dummy_var_8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 26} {:cexpr "usb_serial_generic_submit_read_urb:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 27} {:cexpr "usb_serial_generic_submit_read_urb:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1144, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i5 := test_and_clear_bit($i1, $p4);
    call {:si_unique_call 29} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.111);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.4);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.112);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.5, $p13);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 304);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p13, $i16);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 31} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i1);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref($i26, 8));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i30 := usb_submit_urb($p29, $i2);
    call {:si_unique_call 34} {:cexpr "res"} boogie_si_record_i32($i30);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i30, $sub.i32(0, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1144, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} set_bit($i1, $p35);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i7 := $i30;
    goto $bb3;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_8 := dev_err.ref.ref.ref.i32($p33, .str.113, .str.111, $i30);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} vslice_dummy_var_7 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p24, .str.112, .str.111, $i1);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 167599);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    return;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 168631);

procedure test_and_clear_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_clear_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 38} $i2 := devirtbounce(0, $p1, $i0, $p1);
    call {:si_unique_call 39} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 169663);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 41} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 170695);

procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 1} true;
    call {:si_unique_call 42} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 43} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 1} true;
    call {:si_unique_call 44} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 45} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 1} true;
    call {:si_unique_call 46} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 47} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 48} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 49} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 1} true;
    call {:si_unique_call 50} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 51} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 1} true;
    call {:si_unique_call 52} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 53} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 171727);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 54} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 172759);

procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 58} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 1} true;
    call {:si_unique_call 59} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 60} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 173791);

procedure set_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} {:cexpr "set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 62} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 174823);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 175855);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_device_match: ref;

axiom usb_serial_device_match == $sub.ref(0, 176887);

procedure usb_serial_device_match($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_device_match($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 40), 536));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(0, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p8);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const usb_serial_device_probe: ref;

axiom usb_serial_device_probe == $sub.ref(0, 177919);

procedure usb_serial_device_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation usb_serial_device_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i24: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i5: i32;
  var vslice_dummy_var_9: ref;
  var vslice_dummy_var_10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(0, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i10 := usb_autopm_get_interface($p9);
    call {:si_unique_call 64} {:cexpr "retval"} boogie_si_record_i32($i10);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(0, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 536)), $mul.ref(312, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i25 := device_create_file($p0, dev_attr_port_number);
    call {:si_unique_call 69} {:cexpr "retval"} boogie_si_record_i32($i25);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1016, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    call {:si_unique_call 72} {:cexpr "minor"} boogie_si_record_i32($i37);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p38 := $M.7;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} vslice_dummy_var_9 := tty_register_device($p38, $i37, $p0);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(0, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p15, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vslice_dummy_var_10 := _dev_info.ref.ref.ref.i32($p44, .str.118, $p46, $i37);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(0, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} usb_autopm_put_interface($p51);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i5 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref(0, 536)), $mul.ref(320, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i25;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i24 := $i34;
    goto $bb12;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p15, $mul.ref(0, 536)), $mul.ref(320, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    call {:si_unique_call 70} $i33 := devirtbounce.2($p32, $p2);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 71} {:cexpr "retval"} boogie_si_record_i32($i33);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb19;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 536)), $mul.ref(312, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 65} $i22 := devirtbounce.2($p21, $p2);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 66} {:cexpr "retval"} boogie_si_record_i32($i22);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb12;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const usb_serial_device_remove: ref;

axiom usb_serial_device_remove == $sub.ref(0, 178951);

procedure usb_serial_device_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation usb_serial_device_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i5: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(0, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} vslice_dummy_var_11 := usb_autopm_get_interface($p9);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1016, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 76} {:cexpr "minor"} boogie_si_record_i32($i13);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p14 := $M.7;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} tty_unregister_device($p14, $i13);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1488, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} device_remove_file($p15, dev_attr_port_number);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(0, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 536)), $mul.ref(320, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p19, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} vslice_dummy_var_12 := _dev_info.ref.ref.ref.i32($p0, .str.121, $p29, $i13);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(0, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} usb_autopm_put_interface($p34);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i5 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 536)), $mul.ref(320, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    call {:si_unique_call 79} $i26 := devirtbounce.2($p25, $p2);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 80} {:cexpr "retval"} boogie_si_record_i32($i26);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb7;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const usb_autopm_get_interface: ref;

axiom usb_autopm_get_interface == $sub.ref(0, 179983);

procedure usb_autopm_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 83} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 84} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_unregister_device: ref;

axiom tty_unregister_device == $sub.ref(0, 181015);

procedure tty_unregister_device($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation tty_unregister_device($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} {:cexpr "tty_unregister_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    return;
}



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 182047);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 183079);

procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 87} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 1} true;
    call {:si_unique_call 88} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 89} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 90} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 91} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_autopm_put_interface: ref;

axiom usb_autopm_put_interface == $sub.ref(0, 184111);

procedure usb_autopm_put_interface($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    return;
}



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 185143);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 1} true;
    call {:si_unique_call 92} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 93} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_register_device: ref;

axiom tty_register_device == $sub.ref(0, 186175);

procedure tty_register_device($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_register_device($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} {:cexpr "tty_register_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p3 := external_alloc();
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 187207);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 1} true;
    call {:si_unique_call 96} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 97} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const serial_port_carrier_raised: ref;

axiom serial_port_carrier_raised == $sub.ref(0, 188239);

procedure serial_port_carrier_raised($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation serial_port_carrier_raised($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 2632));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 2632)), $mul.ref(0, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(472, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(472, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 98} $i13 := devirtbounce.2($p12, $p2);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 99} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const serial_port_dtr_rts: ref;

axiom serial_port_dtr_rts == $sub.ref(0, 189271);

procedure serial_port_dtr_rts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation serial_port_dtr_rts($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} {:cexpr "serial_port_dtr_rts:arg:on"} boogie_si_record_i32($i1);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 8), 2632));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 2632)), $mul.ref(0, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(464, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} ldv_mutex_lock_24($p12);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p5);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(24, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} ldv_mutex_unlock_25($p20);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(464, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 102} devirtbounce.3($p19, $p3, $i1);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_port_shutdown: ref;

axiom serial_port_shutdown == $sub.ref(0, 190303);

procedure serial_port_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed, $M.25;



implementation serial_port_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 2632));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 2632)), $mul.ref(0, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(360, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(360, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 104} devirtbounce.4($p12, $p2);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const serial_port_activate: ref;

axiom serial_port_activate == $sub.ref(0, 191335);

procedure serial_port_activate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.27, $M.28, $M.29, $M.30, $M.8, $M.25, $M.37, $M.24, assertsPassed, $M.49, $M.50, $CurrAddr;



implementation serial_port_activate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i12: i32;
  var $p20: ref;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 8), 2632));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 2632)), $mul.ref(0, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} ldv_mutex_lock_17($p6);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(24, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 2632)), $mul.ref(0, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 536)), $mul.ref(352, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 106} $i19 := devirtbounce.5($p18, $p1, $p3);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 107} {:cexpr "retval"} boogie_si_record_i32($i19);
    assume {:verifier.code 0} true;
    $i12 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} ldv_mutex_unlock_18($p20);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i12, 0);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i22 := usb_translate_errors($i12);
    call {:si_unique_call 110} {:cexpr "retval"} boogie_si_record_i32($i22);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb6;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_17: ref;

axiom ldv_mutex_lock_17 == $sub.ref(0, 192367);

procedure ldv_mutex_lock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} ldv_mutex_lock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} mutex_lock($p0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_18: ref;

axiom ldv_mutex_unlock_18 == $sub.ref(0, 193399);

procedure ldv_mutex_unlock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} ldv_mutex_unlock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} mutex_unlock($p0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const usb_translate_errors: ref;

axiom usb_translate_errors == $sub.ref(0, 194431);

procedure usb_translate_errors($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_translate_errors($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    call {:si_unique_call 115} {:cexpr "usb_translate_errors:arg:error_code"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, $sub.i32(0, 12));
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i8 := $i0;
    goto $bb20;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, $sub.i32(0, 12));
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb10;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb15;

  $bb12:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, $sub.i32(0, 95));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb18;
}



const ldv_mutex_unlock_disc_mutex_of_usb_serial: ref;

axiom ldv_mutex_unlock_disc_mutex_of_usb_serial == $sub.ref(0, 195463);

procedure ldv_mutex_unlock_disc_mutex_of_usb_serial($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_disc_mutex_of_usb_serial($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} ldv_error();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 117} {:cexpr "ldv_mutex_disc_mutex_of_usb_serial"} boogie_si_record_i32(1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 196495);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 197527);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 118} __VERIFIER_error();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_disc_mutex_of_usb_serial: ref;

axiom ldv_mutex_lock_disc_mutex_of_usb_serial == $sub.ref(0, 198559);

procedure ldv_mutex_lock_disc_mutex_of_usb_serial($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_disc_mutex_of_usb_serial($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 120} {:cexpr "ldv_mutex_disc_mutex_of_usb_serial"} boogie_si_record_i32(2);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 199591);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_24: ref;

axiom ldv_mutex_lock_24 == $sub.ref(0, 200623);

procedure ldv_mutex_lock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} ldv_mutex_lock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} mutex_lock($p0);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_25: ref;

axiom ldv_mutex_unlock_25 == $sub.ref(0, 201655);

procedure ldv_mutex_unlock_25($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} ldv_mutex_unlock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} mutex_unlock($p0);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const serial_install: ref;

axiom serial_install == $sub.ref(0, 202687);

procedure serial_install($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.25, $M.24, $M.49, $M.50, assertsPassed, $CurrAddr;



implementation serial_install($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i34: i32;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i29: i32;
  var $i18: i32;
  var $p58: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1424)), $mul.ref(32, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 125} {:cexpr "idx"} boogie_si_record_i32($i3);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p4 := usb_serial_get_by_index($i3);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i3, $i10);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i12, 8));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i24 := try_module_get($p23);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 130} {:cexpr "tmp"} boogie_si_record_i8($i25);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i32 := usb_autopm_get_interface($p31);
    call {:si_unique_call 132} {:cexpr "retval"} boogie_si_record_i32($i32);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p15, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i36 := tty_port_install($p35, $p0, $p1);
    call {:si_unique_call 135} {:cexpr "retval"} boogie_si_record_i32($i36);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} ldv_mutex_unlock_15($p38);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 536)), $mul.ref(480, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p15);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i7 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb24:
    assume $i44 == 1;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 536)), $mul.ref(480, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    call {:si_unique_call 138} devirtbounce.6($p48, $p1);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} usb_autopm_put_interface($p52);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i34 := $i36;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p54, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} module_put($p57);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i29 := $i34;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i18 := $i29;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} usb_serial_put($p4);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} ldv_mutex_unlock_16($p58);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i7 := $i18;
    goto $bb3;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb18;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb14;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb11;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 19);
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const serial_open: ref;

axiom serial_open == $sub.ref(0, 203719);

procedure serial_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var vslice_dummy_var_13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.92);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.19);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.47);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 291);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 141} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i26 := tty_port_open($p25, $p0, $p1);
    call {:si_unique_call 144} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} vslice_dummy_var_13 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.47, .str.92);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_close: ref;

axiom serial_close == $sub.ref(0, 204751);

procedure serial_close($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_close($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.9, $p3);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.93);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.19);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.47);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 329);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 147} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} tty_port_close($p25, $p0, $p1);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.10, $p22);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} vslice_dummy_var_14 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.47, .str.93);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_cleanup: ref;

axiom serial_cleanup == $sub.ref(0, 205783);

procedure serial_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed, $M.24, $M.49, $M.50, $M.25;



implementation serial_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.108);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.19);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.47);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 349);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 152} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(576, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p31, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} ldv_mutex_lock_19($p37);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p31);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(24, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p31, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} ldv_mutex_unlock_20($p45);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} usb_serial_put($p31);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} module_put($p36);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p31, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} usb_autopm_put_interface($p44);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_15 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.47, .str.108);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_write: ref;

axiom serial_write == $sub.ref(0, 206815);

procedure serial_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation serial_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i14: i32;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 160} {:cexpr "serial_write:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1744)), $mul.ref(24, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, .str.94);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.19);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str.95);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.5, $p20);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 380);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p20, $i23);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p24, 0);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 162} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 536)), $mul.ref(368, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 164} $i40 := devirtbounce.7($p39, $p0, $p6, $p1, $i2);
    call {:si_unique_call 165} {:cexpr "retval"} boogie_si_record_i32($i40);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i40;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i14 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i42 := usb_translate_errors($i40);
    call {:si_unique_call 167} {:cexpr "retval"} boogie_si_record_i32($i42);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb10;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vslice_dummy_var_16 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p32, .str.95, .str.94, $i2);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;
}



const serial_write_room: ref;

axiom serial_write_room == $sub.ref(0, 207847);

procedure serial_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.8, assertsPassed;



implementation serial_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.97);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.19);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.47);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 393);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 170} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 536)), $mul.ref(376, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 172} $i30 := devirtbounce.8($p29, $p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 173} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_17 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.47, .str.97);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_chars_in_buffer: ref;

axiom serial_chars_in_buffer == $sub.ref(0, 208879);

procedure serial_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.0, $CurrAddr, assertsPassed;



implementation serial_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i32: i32;
  var $p38: ref;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.104);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str.19);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.47);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.5, $p12);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 404);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p12, $i15);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 176} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} ldv_mutex_lock_21($p26);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p6);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(24, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 536)), $mul.ref(408, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    call {:si_unique_call 179} $i37 := devirtbounce.8($p36, $p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 180} {:cexpr "count"} boogie_si_record_i32($i37);
    assume {:verifier.code 0} true;
    $i32 := $i37;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} ldv_mutex_unlock_22($p38);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb6;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vslice_dummy_var_18 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p24, .str.47, .str.104);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_ioctl: ref;

axiom serial_ioctl == $sub.ref(0, 209911);

procedure serial_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i43: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 183} {:cexpr "serial_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 184} {:cexpr "serial_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.11, $p4);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.98);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str.19);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.99);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.5, $p12);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 444);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p12, $i15);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, 21596);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.13, $p44);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.14, $p46);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 536)), $mul.ref(384, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.16, $p48);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 515);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i43 := $i59;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb12:
    assume $i51 == 1;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.13, $p52);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.14, $p54);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 536)), $mul.ref(384, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.16, $p56);
    call {:si_unique_call 190} $i58 := devirtbounce.10($p57, $p0, $i1, $i2);
    call {:si_unique_call 191} {:cexpr "retval"} boogie_si_record_i32($i58);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb14;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.13, $p27);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.14, $p29);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 536)), $mul.ref(448, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.15, $p31);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 19);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb10;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.13, $p35);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.14, $p37);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 536)), $mul.ref(448, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.15, $p39);
    call {:si_unique_call 188} $i41 := devirtbounce.9($p40, $p0, $i2);
    call {:si_unique_call 189} {:cexpr "retval"} boogie_si_record_i32($i41);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb9;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.12, $p23);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_19 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p24, .str.99, .str.98, $i1);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_set_termios: ref;

axiom serial_set_termios == $sub.ref(0, 210943);

procedure serial_set_termios($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_set_termios($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.17, $p3);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.100);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.19);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.47);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 465);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 194} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.19, $p25);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.20, $p27);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 536)), $mul.ref(392, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.21, $p29);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(792, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} tty_termios_copy_hw($p39, $p1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.19, $p33);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.20, $p35);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 536)), $mul.ref(392, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.21, $p37);
    call {:si_unique_call 196} devirtbounce.11($p38, $p0, $p5, $p1);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.18, $p22);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} vslice_dummy_var_20 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.47, .str.100);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_throttle: ref;

axiom serial_throttle == $sub.ref(0, 211975);

procedure serial_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.8, $M.24, $M.49, $M.50, assertsPassed, $M.25;



implementation serial_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.101);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.19);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.47);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 422);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 200} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 536)), $mul.ref(416, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 536)), $mul.ref(416, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 202} devirtbounce.6($p37, $p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} vslice_dummy_var_21 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.47, .str.101);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_unthrottle: ref;

axiom serial_unthrottle == $sub.ref(0, 213007);

procedure serial_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.8, $M.24, $M.49, $M.50, assertsPassed, $M.25;



implementation serial_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.102);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.19);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.47);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 432);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 205} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 536)), $mul.ref(424, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 536)), $mul.ref(424, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 207} devirtbounce.6($p37, $p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} vslice_dummy_var_22 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.47, .str.102);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_hangup: ref;

axiom serial_hangup == $sub.ref(0, 214039);

procedure serial_hangup($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_hangup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.96);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.19);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.47);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 320);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 210} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} tty_port_hangup($p24);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} vslice_dummy_var_23 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.47, .str.96);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_break: ref;

axiom serial_break == $sub.ref(0, 215071);

procedure serial_break($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, assertsPassed;



implementation serial_break($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 214} {:cexpr "serial_break:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.103);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.19);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.47);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 477);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 216} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 536)), $mul.ref(400, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 536)), $mul.ref(400, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 218} devirtbounce.12($p38, $p0, $i1);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} vslice_dummy_var_24 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.47, .str.103);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_tiocmget: ref;

axiom serial_tiocmget == $sub.ref(0, 216103);

procedure serial_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.8, assertsPassed;



implementation serial_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.105);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.19);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.47);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 535);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 221} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 536)), $mul.ref(432, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 536)), $mul.ref(432, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 223} $i38 := devirtbounce.8($p37, $p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 224} {:cexpr "tmp___0"} boogie_si_record_i32($i38);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb6;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} vslice_dummy_var_25 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.47, .str.105);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_tiocmset: ref;

axiom serial_tiocmset == $sub.ref(0, 217135);

procedure serial_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 226} {:cexpr "serial_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 227} {:cexpr "serial_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.11, $p4);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.106);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str.19);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.47);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.5, $p12);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 547);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p12, $i15);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 229} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.13, $p26);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.14, $p28);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 536)), $mul.ref(440, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.22, $p30);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.13, $p34);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.14, $p36);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 536)), $mul.ref(440, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.22, $p38);
    call {:si_unique_call 231} $i40 := devirtbounce.13($p39, $p0, $i1, $i2);
    call {:si_unique_call 232} {:cexpr "tmp___0"} boogie_si_record_i32($i40);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.12, $p23);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} vslice_dummy_var_26 := __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p24, .str.47, .str.106);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_get_icount: ref;

axiom serial_get_icount == $sub.ref(0, 218167);

procedure serial_get_icount($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.27, $M.28, $M.29, $M.30, $CurrAddr, $M.8, $M.25, $M.37, $M.24, $M.49, $M.50, assertsPassed;



implementation serial_get_icount($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.107);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.19);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.47);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 559);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 235} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 536)), $mul.ref(456, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 536)), $mul.ref(456, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 237} $i39 := devirtbounce.14($p38, $p0, $p1);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 238} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb6;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(8, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vslice_dummy_var_27 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.47, .str.107);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_port_hangup: ref;

axiom tty_port_hangup == $sub.ref(0, 219199);

procedure tty_port_hangup($p0: ref);
  free requires assertsPassed;



implementation tty_port_hangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    return;
}



const tty_termios_copy_hw: ref;

axiom tty_termios_copy_hw == $sub.ref(0, 220231);

procedure tty_termios_copy_hw($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_termios_copy_hw($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_21: ref;

axiom ldv_mutex_lock_21 == $sub.ref(0, 221263);

procedure ldv_mutex_lock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} ldv_mutex_lock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} mutex_lock($p0);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_22: ref;

axiom ldv_mutex_unlock_22 == $sub.ref(0, 222295);

procedure ldv_mutex_unlock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} ldv_mutex_unlock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} mutex_unlock($p0);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_19: ref;

axiom ldv_mutex_lock_19 == $sub.ref(0, 223327);

procedure ldv_mutex_lock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} ldv_mutex_lock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} mutex_lock($p0);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_20: ref;

axiom ldv_mutex_unlock_20 == $sub.ref(0, 224359);

procedure ldv_mutex_unlock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} ldv_mutex_unlock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} mutex_unlock($p0);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const usb_serial_put: ref;

axiom usb_serial_put == $sub.ref(0, 225391);

procedure usb_serial_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed, $M.25;



implementation usb_serial_put($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_28 := kref_put($p1, destroy_serial);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 226423);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    return;
}



const destroy_serial: ref;

axiom destroy_serial == $sub.ref(0, 227455);

procedure destroy_serial($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.49, $M.50, $M.25, $CurrAddr, assertsPassed;



implementation destroy_serial($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i26: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 96), 280));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(25, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 255);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(24, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(27, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(16, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} usb_put_intf($p40);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(0, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} usb_put_dev($p42);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p2);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} kfree($p43);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb13;

  $bb13:
    call $i27, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $i36, $i37, $i38, $i26 := destroy_serial_loop_$bb13($p1, $p22, $i27, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $i36, $i37, $i38, $i26);
    goto $bb13_last;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(32, 1)), $mul.ref($i27, 8));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i26, 1);
    call {:si_unique_call 251} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p22);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, $i35);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb18:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i26 := $i35;
    goto $bb18_dummy;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p30, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p30, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} put_device($p34);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(8, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 536)), $mul.ref(304, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(8, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 536)), $mul.ref(304, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 249} devirtbounce.15($p21, $p2);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} return_serial($p2);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb18_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1426;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 228487);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed, $M.25;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 256} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 229519);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed, $M.25;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_29: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 258} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 260} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_29 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 264} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 265} devirtbounce.16($p2, $p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} warn_slowpath_null(.str.17, 70);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 230551);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 231583);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 268} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 269} devirtbounce.17(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.23, $p2);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const return_serial: ref;

axiom return_serial == $sub.ref(0, 232615);

procedure return_serial($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.25, assertsPassed;



implementation return_serial($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} ldv_mutex_lock_13(table_lock);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} ldv_mutex_unlock_14(table_lock);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $i7, $i8, $i9, $i10, $p11, $i12, $i13, $i14, $i15, $i5 := return_serial_loop_$bb4($p0, $p1, $p6, $i7, $i8, $i9, $i10, $p11, $i12, $i13, $i14, $i15, $i5);
    goto $bb4_last;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i5);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref($i10, 8));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p11, $0.ref);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i5, 1);
    call {:si_unique_call 271} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p1);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, $i12);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb6_dummy;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 233647);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_intf: ref;

axiom usb_put_intf == $sub.ref(0, 234679);

procedure usb_put_intf($p0: ref);
  free requires assertsPassed;



implementation usb_put_intf($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 235711);

procedure usb_put_dev($p0: ref);
  free requires assertsPassed;



implementation usb_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 236743);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} free_($p0);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 237775);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 274} $free($p0);
    return;
}



const ldv_mutex_lock_13: ref;

axiom ldv_mutex_lock_13 == $sub.ref(0, 238807);

procedure ldv_mutex_lock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} ldv_mutex_lock_table_lock($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} mutex_lock($p0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_14: ref;

axiom ldv_mutex_unlock_14 == $sub.ref(0, 239839);

procedure ldv_mutex_unlock_14($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} ldv_mutex_unlock_table_lock($p0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} mutex_unlock($p0);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_table_lock: ref;

axiom ldv_mutex_unlock_table_lock == $sub.ref(0, 240871);

procedure ldv_mutex_unlock_table_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_table_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} ldv_error();
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 280} {:cexpr "ldv_mutex_table_lock"} boogie_si_record_i32(1);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_table_lock: ref;

axiom ldv_mutex_lock_table_lock == $sub.ref(0, 241903);

procedure ldv_mutex_lock_table_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_table_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} ldv_error();
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 282} {:cexpr "ldv_mutex_table_lock"} boogie_si_record_i32(2);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_port_close: ref;

axiom tty_port_close == $sub.ref(0, 242935);

procedure tty_port_close($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation tty_port_close($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_open: ref;

axiom tty_port_open == $sub.ref(0, 243967);

procedure tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 1} true;
    call {:si_unique_call 283} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 284} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_get_by_index: ref;

axiom usb_serial_get_by_index == $sub.ref(0, 244999);

procedure usb_serial_get_by_index($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.25, $M.8, assertsPassed;



implementation usb_serial_get_by_index($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $p13: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} {:cexpr "usb_serial_get_by_index:arg:index"} boogie_si_record_i32($i0);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} ldv_mutex_lock_6(table_lock);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref($i1, 8));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.24, $p2);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p15 := $p3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} ldv_mutex_unlock_9(table_lock);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} ldv_mutex_lock_7($p6);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(24, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} kref_get($p14);
    assume {:verifier.code 0} true;
    $p13 := $p3;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p15 := $p13;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} ldv_mutex_unlock_8($p12);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb5;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 246031);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 291} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 292} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_port_install: ref;

axiom tty_port_install == $sub.ref(0, 247063);

procedure tty_port_install($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_install($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 293} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 294} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_unlock_15: ref;

axiom ldv_mutex_unlock_15 == $sub.ref(0, 248095);

procedure ldv_mutex_unlock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} ldv_mutex_unlock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} mutex_unlock($p0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_16: ref;

axiom ldv_mutex_unlock_16 == $sub.ref(0, 249127);

procedure ldv_mutex_unlock_16($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} ldv_mutex_unlock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} mutex_unlock($p0);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_6: ref;

axiom ldv_mutex_lock_6 == $sub.ref(0, 250159);

procedure ldv_mutex_lock_6($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} ldv_mutex_lock_table_lock($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} mutex_lock($p0);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_7: ref;

axiom ldv_mutex_lock_7 == $sub.ref(0, 251191);

procedure ldv_mutex_lock_7($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} ldv_mutex_lock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} mutex_lock($p0);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_8: ref;

axiom ldv_mutex_unlock_8 == $sub.ref(0, 252223);

procedure ldv_mutex_unlock_8($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} ldv_mutex_unlock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} mutex_unlock($p0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 253255);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_30: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 307} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 309} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} vslice_dummy_var_30 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 310} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 312} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 315} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} warn_slowpath_null(.str.17, 46);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_mutex_unlock_9: ref;

axiom ldv_mutex_unlock_9 == $sub.ref(0, 254287);

procedure ldv_mutex_unlock_9($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} ldv_mutex_unlock_table_lock($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} mutex_unlock($p0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 255319);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 320} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 321} $i3 := devirtbounce.18(0, $p2, $i0, $p2);
    call {:si_unique_call 322} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 256351);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);



const seq_read: ref;

axiom seq_read == $sub.ref(0, 257383);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);



const serial_proc_open: ref;

axiom serial_proc_open == $sub.ref(0, 258415);

procedure serial_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i2 := single_open($p1, serial_proc_show, $0.ref);
    call {:si_unique_call 324} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 259447);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);



const serial_proc_show: ref;

axiom serial_proc_show == $sub.ref(0, 260479);

procedure serial_proc_show($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.8, $CurrAddr, assertsPassed, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.49, $M.50;



implementation serial_proc_show($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p63: ref;
  var $i8: i32;
  var $i64: i32;
  var $i65: i1;
  var $i4: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} vslice_dummy_var_31 := seq_puts($p0, .str.82);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb1;

  $bb1:
    call $p5, $i6, $i7, $p10, $p11, $p13, $p14, $i15, $i16, $p17, $p18, $p20, $p21, $i22, $i23, $p24, $p26, $p28, $p29, $p30, $p31, $p33, $p34, $p36, $i37, $i38, $p39, $p40, $p42, $i43, $i44, $p46, $i47, $i48, $p50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $p60, $p63, $i8, $i64, $i65, $i4, vslice_dummy_var_32, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_35, vslice_dummy_var_36, vslice_dummy_var_37, vslice_dummy_var_38, vslice_dummy_var_39, vslice_dummy_var_40 := serial_proc_show_loop_$bb1($p0, $p2, $p5, $i6, $i7, $p10, $p11, $p13, $p14, $i15, $i16, $p17, $p18, $p20, $p21, $i22, $i23, $p24, $p26, $p28, $p29, $p30, $p31, $p33, $p34, $p36, $i37, $i38, $p39, $p40, $p42, $i43, $i44, $p46, $i47, $i48, $p50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $p60, $p63, $i8, $i64, $i65, $i4, vslice_dummy_var_32, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_35, vslice_dummy_var_36, vslice_dummy_var_37, vslice_dummy_var_38, vslice_dummy_var_39, vslice_dummy_var_40);
    goto $bb1_last;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p5 := usb_serial_get_by_index($i4);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} vslice_dummy_var_32 := seq_printf.ref.ref.i32($p0, .str.83, $i4);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} vslice_dummy_var_34 := seq_printf.ref.ref.ref($p0, .str.86, $p31);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(10, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} vslice_dummy_var_35 := seq_printf.ref.ref.i32.i32($p0, .str.87, $i38, $i44);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} vslice_dummy_var_36 := seq_printf.ref.ref.i32($p0, .str.88, $i48);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i4, $i52);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} vslice_dummy_var_37 := seq_printf.ref.ref.i32($p0, .str.89, $i54);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p2);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_38 := usb_make_path($p57, $p58, 40);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p2);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_39 := seq_printf.ref.ref.ref($p0, .str.90, $p60);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_40 := seq_putc($p0, 10);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} usb_serial_put($p5);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} ldv_mutex_unlock_23($p63);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i8 := $i4;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i8, 1);
    call {:si_unique_call 328} {:cexpr "i"} boogie_si_record_i32($i64);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i65 := $sle.i32($i64, 253);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i64;
    goto $bb13_dummy;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p26 := .str.85;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_33 := seq_printf.ref.ref.ref($p0, .str.84, $p26);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref(0, 608)), $mul.ref(24, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p26 := $p24;
    goto $bb11;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i8 := $i4;
    goto $bb5;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1667;
}



const single_open: ref;

axiom single_open == $sub.ref(0, 261511);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 1} true;
    call {:si_unique_call 340} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 341} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 262543);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_puts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 1} true;
    call {:si_unique_call 342} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 343} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 263575);

procedure seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 1} true;
    call {:si_unique_call 344} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 345} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 346} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 347} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 348} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 349} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 264607);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(64, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(4, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.91, $p6, $p8);
    call {:si_unique_call 352} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const seq_putc: ref;

axiom seq_putc == $sub.ref(0, 265639);

procedure seq_putc($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation seq_putc($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 353} {:cexpr "seq_putc:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 1} true;
    call {:si_unique_call 354} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 355} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 266671);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} ldv_mutex_unlock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} mutex_unlock($p0);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 267703);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const usb_serial_probe: ref;

axiom usb_serial_probe == $sub.ref(0, 268735);

procedure usb_serial_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.27, $M.28, $M.29, $M.30, $M.0, $M.25, $M.37, $M.24, $CurrAddr, assertsPassed, $M.8, $M.49, $M.50;



implementation usb_serial_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i1;
  var $i48: i8;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i24;
  var $i75: i24;
  var $i76: i24;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i24;
  var $i118: i24;
  var $i119: i24;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i64;
  var $i124: i64;
  var $i125: i64;
  var $i126: i1;
  var $i128: i64;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i24;
  var $i141: i24;
  var $i142: i24;
  var $p143: ref;
  var $p144: ref;
  var $i145: i8;
  var $i146: i64;
  var $i147: i64;
  var $i148: i64;
  var $i149: i1;
  var $i151: i64;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i24;
  var $i164: i24;
  var $i165: i24;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i64;
  var $i170: i64;
  var $i171: i64;
  var $i172: i1;
  var $i174: i64;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i24;
  var $i187: i24;
  var $i188: i24;
  var $p189: ref;
  var $p190: ref;
  var $i191: i8;
  var $i192: i64;
  var $i193: i64;
  var $i194: i64;
  var $i195: i1;
  var $i197: i64;
  var $p198: ref;
  var $i199: i32;
  var $i200: i32;
  var $i201: i32;
  var $i202: i8;
  var $i203: i32;
  var $i204: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i205: i32;
  var $i206: i32;
  var $i207: i32;
  var $i208: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $p210: ref;
  var $i211: i16;
  var $i212: i32;
  var $i213: i1;
  var $p215: ref;
  var $i216: i16;
  var $i217: i32;
  var $i218: i1;
  var $p221: ref;
  var $i222: i16;
  var $i223: i32;
  var $i224: i1;
  var $p226: ref;
  var $i227: i16;
  var $i228: i32;
  var $i229: i1;
  var $p231: ref;
  var $i232: i16;
  var $i233: i32;
  var $i234: i1;
  var $p236: ref;
  var $i237: i16;
  var $i238: i32;
  var $i239: i1;
  var $p241: ref;
  var $i242: i16;
  var $i243: i32;
  var $i244: i1;
  var $p246: ref;
  var $i247: i16;
  var $i248: i32;
  var $i249: i1;
  var $i219: i32;
  var $p250: ref;
  var $p251: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i64;
  var $i256: i64;
  var $i257: i1;
  var $p258: ref;
  var $p259: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p266: ref;
  var $i267: i8;
  var $i268: i32;
  var $i269: i1;
  var $p273: ref;
  var $p274: ref;
  var $i275: i64;
  var $p277: ref;
  var $i278: i32;
  var $i279: i1;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i24;
  var $i287: i24;
  var $i288: i24;
  var $p289: ref;
  var $p290: ref;
  var $i291: i8;
  var $i292: i64;
  var $i293: i64;
  var $i294: i64;
  var $i295: i1;
  var $i297: i64;
  var $p298: ref;
  var $i299: i32;
  var $i300: i32;
  var $i301: i32;
  var $i302: i8;
  var $i303: i32;
  var $i304: i1;
  var $i271: i32;
  var $i272: i32;
  var $i305: i32;
  var $i270: i32;
  var $i306: i32;
  var $i307: i1;
  var $i308: i1;
  var $p311: ref;
  var $p312: ref;
  var $i313: i32;
  var $i314: i64;
  var $i315: i1;
  var $i316: i1;
  var $p319: ref;
  var $p320: ref;
  var $i323: i32;
  var $i324: i1;
  var $p325: ref;
  var $p326: ref;
  var $i327: i64;
  var $i328: i1;
  var $p329: ref;
  var $p330: ref;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $i335: i8;
  var $i336: i32;
  var $i337: i32;
  var $i338: i32;
  var $i339: i8;
  var $p340: ref;
  var $i341: i8;
  var $p342: ref;
  var $i343: i8;
  var $p344: ref;
  var $i345: i8;
  var $p346: ref;
  var $i347: i8;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $i352: i1;
  var $i353: i32;
  var $i354: i1;
  var $i355: i32;
  var $i356: i1;
  var $i357: i32;
  var $p358: ref;
  var $i359: i8;
  var $i360: i32;
  var $i361: i1;
  var $i362: i32;
  var $i363: i8;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $i371: i24;
  var $i372: i24;
  var $i373: i24;
  var $p374: ref;
  var $p375: ref;
  var $i376: i8;
  var $i377: i64;
  var $i378: i64;
  var $i379: i64;
  var $i380: i1;
  var $i382: i1;
  var $p384: ref;
  var $p385: ref;
  var $i386: i64;
  var $i387: i1;
  var $p388: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $p404: ref;
  var $p406: ref;
  var $p408: ref;
  var $i409: i64;
  var $p411: ref;
  var $p412: ref;
  var $p414: ref;
  var $p416: ref;
  var $p418: ref;
  var $p420: ref;
  var $p421: ref;
  var $i422: i32;
  var $i423: i1;
  var $i383: i32;
  var $i424: i1;
  var $i426: i64;
  var $p427: ref;
  var $p428: ref;
  var $i429: i64;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $i436: i64;
  var $i437: i32;
  var $i438: i32;
  var $i439: i1;
  var $i440: i32;
  var $p441: ref;
  var $p442: ref;
  var $i443: i8;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $p448: ref;
  var $p450: ref;
  var $p451: ref;
  var $i452: i64;
  var $i453: i1;
  var $i454: i64;
  var $p455: ref;
  var $p457: ref;
  var $p459: ref;
  var $p460: ref;
  var $i461: i64;
  var $i462: i1;
  var $p463: ref;
  var $i464: i8;
  var $i465: i32;
  var $i466: i32;
  var $p468: ref;
  var $p469: ref;
  var $i470: i32;
  var $p472: ref;
  var $p473: ref;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $p478: ref;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $p484: ref;
  var $p485: ref;
  var $p486: ref;
  var $i487: i32;
  var $i488: i1;
  var $i425: i32;
  var $i489: i1;
  var $i491: i64;
  var $p492: ref;
  var $p493: ref;
  var $i494: i64;
  var $p496: ref;
  var $p497: ref;
  var $p499: ref;
  var $p500: ref;
  var $i501: i32;
  var $i502: i32;
  var $i503: i1;
  var $p504: ref;
  var $p505: ref;
  var $p506: ref;
  var $i507: i64;
  var $i508: i32;
  var $i509: i1;
  var $i510: i32;
  var $i511: i32;
  var $p512: ref;
  var $p513: ref;
  var $i514: i8;
  var $p515: ref;
  var $p516: ref;
  var $p517: ref;
  var $p519: ref;
  var $p521: ref;
  var $p522: ref;
  var $i523: i64;
  var $i524: i1;
  var $i525: i64;
  var $p526: ref;
  var $p528: ref;
  var $p530: ref;
  var $p531: ref;
  var $i532: i64;
  var $i533: i1;
  var $p534: ref;
  var $i535: i8;
  var $i536: i32;
  var $i537: i32;
  var $p539: ref;
  var $p540: ref;
  var $i541: i32;
  var $p543: ref;
  var $p544: ref;
  var $p545: ref;
  var $p546: ref;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $i558: i32;
  var $i559: i1;
  var $i490: i32;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $i564: i64;
  var $i565: i1;
  var $i566: i1;
  var $i568: i64;
  var $p569: ref;
  var $p570: ref;
  var $i571: i64;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $i579: i64;
  var $i580: i1;
  var $i581: i32;
  var $p582: ref;
  var $i583: i8;
  var $p584: ref;
  var $i585: i64;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $p589: ref;
  var $i590: i64;
  var $i591: i1;
  var $p592: ref;
  var $i593: i8;
  var $i594: i32;
  var $i595: i32;
  var $p596: ref;
  var $p597: ref;
  var $i598: i32;
  var $p599: ref;
  var $p600: ref;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $i607: i8;
  var $i608: i32;
  var $i609: i32;
  var $i610: i1;
  var $i567: i32;
  var $i611: i1;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $p615: ref;
  var $p616: ref;
  var $p617: ref;
  var $i618: i24;
  var $i619: i24;
  var $i620: i24;
  var $p621: ref;
  var $p622: ref;
  var $i623: i8;
  var $i624: i64;
  var $i625: i64;
  var $i626: i64;
  var $i627: i1;
  var $p629: ref;
  var $p630: ref;
  var $p631: ref;
  var $p632: ref;
  var $i633: i64;
  var $i634: i1;
  var $i635: i1;
  var $i637: i64;
  var $p638: ref;
  var $p639: ref;
  var $i640: i64;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $p647: ref;
  var $i648: i64;
  var $i649: i1;
  var $i650: i32;
  var $p651: ref;
  var $p652: ref;
  var $i653: i8;
  var $p654: ref;
  var $i655: i64;
  var $p656: ref;
  var $p657: ref;
  var $p658: ref;
  var $p659: ref;
  var $i660: i64;
  var $i661: i1;
  var $p662: ref;
  var $i663: i8;
  var $i664: i32;
  var $i665: i32;
  var $p666: ref;
  var $p667: ref;
  var $i668: i32;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $p675: ref;
  var $p676: ref;
  var $i677: i8;
  var $i678: i32;
  var $i679: i32;
  var $i680: i1;
  var $i636: i32;
  var $i681: i1;
  var $p682: ref;
  var $p683: ref;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $i688: i24;
  var $i689: i24;
  var $i690: i24;
  var $p691: ref;
  var $p692: ref;
  var $i693: i8;
  var $i694: i64;
  var $i695: i64;
  var $i696: i64;
  var $i697: i1;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $i702: i64;
  var $i703: i1;
  var $p704: ref;
  var $p705: ref;
  var $i706: i32;
  var $i707: i1;
  var $p708: ref;
  var $i709: i8;
  var $i710: i8;
  var $i711: i8;
  var $i712: i1;
  var $p713: ref;
  var $p714: ref;
  var $i715: i8;
  var $i716: i8;
  var $i717: i8;
  var $p718: ref;
  var $i719: i8;
  var $i720: i8;
  var $i721: i8;
  var $p722: ref;
  var $i723: i64;
  var $i724: i1;
  var $i726: i32;
  var $i727: i8;
  var $p728: ref;
  var $i729: i1;
  var $i731: i64;
  var $p733: ref;
  var $p734: ref;
  var $p735: ref;
  var $p736: ref;
  var $i737: i8;
  var $i738: i32;
  var $p740: ref;
  var $p741: ref;
  var $p742: ref;
  var $p743: ref;
  var $p744: ref;
  var $p745: ref;
  var $i746: i24;
  var $i747: i24;
  var $i748: i24;
  var $p749: ref;
  var $p750: ref;
  var $i751: i8;
  var $i752: i64;
  var $i753: i64;
  var $i754: i64;
  var $i755: i1;
  var $p756: ref;
  var $p757: ref;
  var $p759: ref;
  var $p760: ref;
  var $i761: i32;
  var $i762: i1;
  var $i764: i32;
  var $i765: i1;
  var $i730: i32;
  var $p766: ref;
  var $i767: i8;
  var $i768: i8;
  var $i769: i32;
  var $p771: ref;
  var $p772: ref;
  var $p774: ref;
  var $p775: ref;
  var $i43: i32;
  var $p776: ref;
  var $p777: ref;
  var $p779: ref;
  var $p781: ref;
  var $p782: ref;
  var $i783: i64;
  var $i784: i1;
  var $i785: i64;
  var $p786: ref;
  var $p788: ref;
  var $p790: ref;
  var $p791: ref;
  var $i792: i64;
  var $i793: i1;
  var $p794: ref;
  var $i795: i8;
  var $i796: i32;
  var $i797: i32;
  var $p799: ref;
  var $p800: ref;
  var $i801: i32;
  var $p803: ref;
  var $p804: ref;
  var $p805: ref;
  var $p806: ref;
  var $p807: ref;
  var $p808: ref;
  var $p809: ref;
  var $p810: ref;
  var $p811: ref;
  var $p813: ref;
  var $p815: ref;
  var $p816: ref;
  var $i817: i64;
  var $i818: i1;
  var $i819: i64;
  var $p820: ref;
  var $p822: ref;
  var $p824: ref;
  var $p825: ref;
  var $i826: i64;
  var $i827: i1;
  var $p828: ref;
  var $i829: i8;
  var $i830: i32;
  var $i831: i32;
  var $p833: ref;
  var $p834: ref;
  var $i835: i32;
  var $p837: ref;
  var $p838: ref;
  var $p839: ref;
  var $p840: ref;
  var $p841: ref;
  var $p842: ref;
  var $p843: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: ref;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p4 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p5 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $p18 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p19 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p20 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p22 := interface_to_usbdev($p0);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} ldv_mutex_lock_26(table_lock);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p23 := search_serial_device($p0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i47 := try_module_get($p46);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i8($i47);
    call {:si_unique_call 385} {:cexpr "tmp___1"} boogie_si_record_i8($i48);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i48);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} ldv_mutex_unlock_29(table_lock);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $p53 := create_serial($p22, $p0, $p23);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(272, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(8, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p89, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i94 := $sgt.i32($i93, 0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i95, $i96, $i97, $i98 := 0, 0, 0, 0;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i211 := $load.i16($M.26, $p210);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i212 := $zext.i16.i32($i211);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1659);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i213 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i222 := $load.i16($M.26, $p221);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i223 := $zext.i16.i32($i222);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 1367);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i224 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i232 := $load.i16($M.26, $p231);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i233 := $zext.i16.i32($i232);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 1423);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i234 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i242 := $load.i16($M.26, $p241);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i243 := $zext.i16.i32($i242);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 4597);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i244 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i313 := $i96;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i314 := $p2i.ref.i64($p23);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i315 := $eq.i64($i314, $p2i.ref.i64(usb_serial_generic_device));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    $i323 := 0;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i323, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i338 := $i323;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i339 := $trunc.i32.i8($i338);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p340, $i339);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i341 := $trunc.i32.i8($i97);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(30, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p342, $i341);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i32.i8($i98);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(31, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p344, $i343);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i345 := $trunc.i32.i8($i313);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(28, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p346, $i345);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i347 := $trunc.i32.i8($i95);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(29, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p348, $i347);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} vslice_dummy_var_53 := _dev_info.ref.ref.ref($p21, .str.32, $p350);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i352 := $sgt.i32($i97, $i98);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i352 == 1);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i353 := $i98;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i354 := $sgt.i32($i353, $i313);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i354 == 1);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i355 := $i313;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i356 := $sgt.i32($i355, $i95);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i356} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i356 == 1);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i357 := $i95;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i359 := $load.i8($M.0, $p358);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i360 := $zext.i8.i32($i359);
    call {:si_unique_call 443} {:cexpr "_max2___2"} boogie_si_record_i32($i360);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i361 := $sgt.i32($i357, $i360);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i361} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i361 == 1);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i362 := $i360;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i363 := $trunc.i32.i8($i362);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(27, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p364, $i363);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p365, .str);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p366, .str.18);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p367, .str.19);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p368, .str.33);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i371 := $load.i24($M.5, $p370);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i372 := $and.i24($i371, $sub.i24(0, 262144));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i373 := $or.i24($i372, 918);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p370, $i373);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p374, 0);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i376 := $load.i8($M.6, $p375);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i377 := $zext.i8.i64($i376);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i378 := $and.i64($i377, 1);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i379 := ldv__builtin_expect($i378, 0);
    call {:si_unique_call 445} {:cexpr "tmp___14"} boogie_si_record_i64($i379);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i380 := $ne.i64($i379, 0);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i382 := $slt.i32(0, $i362);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i382} true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i382 == 1);
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i424 := $slt.i32(0, $i97);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i424} true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i424 == 1);
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $i489 := $slt.i32(0, $i98);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i489} true;
    goto $bb168, $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume !($i489 == 1);
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p561 := $load.ref($M.0, $p560);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p561, $mul.ref(0, 536)), $mul.ref(488, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.0, $p562);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i564 := $p2i.ref.i64($p563);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i565 := $ne.i64($i564, 0);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i565} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i565 == 1);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i611 := $ne.i32($i313, 0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i611} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i611 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p630 := $load.ref($M.0, $p629);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($p630, $mul.ref(0, 536)), $mul.ref(496, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p632 := $load.ref($M.0, $p631);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i633 := $p2i.ref.i64($p632);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i634 := $ne.i64($i633, 0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i634} true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i634 == 1);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i681 := $ne.i32($i95, 0);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i681} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p699 := $bitcast.ref.ref($p53);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} usb_set_intfdata($p0, $p699);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(280, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p701 := $load.ref($M.0, $p700);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i702 := $p2i.ref.i64($p701);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i703 := $ne.i64($i702, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i703} true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i703 == 1);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i715 := $load.i8($M.0, $p714);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i716 := $and.i8($i715, $sub.i8(0, 5));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i717 := $or.i8($i716, 4);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p714, $i717);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i719 := $load.i8($M.0, $p718);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i720 := $and.i8($i719, $sub.i8(0, 2));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i721 := $or.i8($i720, 1);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p718, $i721);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p722 := get_free_serial($p53, $i338, $p6);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i723 := $p2i.ref.i64($p722);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i724 := $eq.i64($i723, 0);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i724} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i724 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i726 := $load.i32($M.37, $p6);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i727 := $trunc.i32.i8($i726);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p728, $i727);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i729 := $slt.i32(0, $i338);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i729} true;
    goto $bb253, $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    assume !($i729 == 1);
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i767 := $load.i8($M.0, $p766);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i768 := $and.i8($i767, $sub.i8(0, 2));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p766, $i768);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i769 := $load.i32($M.37, $p6);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} usb_serial_console_init($i769);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p772 := $load.ref($M.0, $p771);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} module_put($p772);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb253:
    assume $i729 == 1;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i730 := 0;
    goto $bb256;

  $bb256:
    call $i731, $p733, $p734, $p735, $p736, $i737, $i738, $p740, $p741, $p742, $p743, $p744, $p745, $i746, $i747, $i748, $p749, $p750, $i751, $i752, $i753, $i754, $i755, $p756, $p757, $p759, $p760, $i761, $i762, $i764, $i765, $i730, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61 := usb_serial_probe_loop_$bb256($p20, $p21, $p53, $i338, $i731, $p733, $p734, $p735, $p736, $i737, $i738, $p740, $p741, $p742, $p743, $p744, $p745, $i746, $i747, $i748, $p749, $p750, $i751, $i752, $i753, $i754, $i755, $p756, $p757, $p759, $p760, $i761, $i762, $i764, $i765, $i730, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61);
    goto $bb256_last;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $i731 := $sext.i32.i64($i730);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i731, 8));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p734 := $load.ref($M.0, $p733);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($p734, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($p734, $mul.ref(0, 2632)), $mul.ref(1016, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i737 := $load.i8($M.0, $p736);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i738 := $zext.i8.i32($i737);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_59 := dev_set_name.ref.ref.i32($p735, .str.39, $i738);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p740, .str);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p741, .str.18);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p742, .str.19);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p743, .str.40);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p745 := $bitcast.ref.ref($p744);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i746 := $load.i24($M.5, $p745);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i747 := $and.i24($i746, $sub.i24(0, 262144));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i748 := $or.i24($i747, 1085);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p745, $i748);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p749, 0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i751 := $load.i8($M.6, $p750);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i752 := $zext.i8.i64($i751);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i753 := $and.i64($i752, 1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i754 := ldv__builtin_expect($i753, 0);
    call {:si_unique_call 517} {:cexpr "tmp___31"} boogie_si_record_i64($i754);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i755 := $ne.i64($i754, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i755 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($p734, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} device_enable_async_suspend($p759);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p734, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i761 := device_add($p760);
    call {:si_unique_call 522} {:cexpr "retval"} boogie_si_record_i32($i761);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i762 := $ne.i32($i761, 0);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i762 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i764 := $add.i32($i730, 1);
    call {:si_unique_call 524} {:cexpr "i"} boogie_si_record_i32($i764);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i765 := $slt.i32($i764, $i338);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i765 == 1);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb264:
    assume $i765 == 1;
    assume {:verifier.code 0} true;
    $i730 := $i764;
    goto $bb264_dummy;

  $bb261:
    assume $i762 == 1;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_61 := dev_err.ref.ref($p21, .str.41);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb258:
    assume $i755 == 1;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($p734, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $p757 := dev_name($p756);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} vslice_dummy_var_60 := __dynamic_dev_dbg.ref.ref.ref.ref($p20, $p21, .str.40, $p757);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb250:
    assume $i724 == 1;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} vslice_dummy_var_58 := dev_err.ref.ref($p21, .str.38);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} usb_serial_put($p53);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p775 := $load.ref($M.0, $p774);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} module_put($p775);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 5);
    goto $bb6;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb240:
    assume $i703 == 1;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(280, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p705 := $load.ref($M.0, $p704);
    call {:si_unique_call 510} $i706 := devirtbounce.20($p705, $p53);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 511} {:cexpr "retval"} boogie_si_record_i32($i706);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i707 := $slt.i32($i706, 0);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i707} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i707 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i709 := $load.i8($M.0, $p708);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i710 := $and.i8($i709, $sub.i8(0, 5));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i711 := $or.i8($i710, 4);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p708, $i711);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i712 := $sgt.i32($i706, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i712} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i712 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb245:
    assume $i712 == 1;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p713, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb242:
    assume $i707 == 1;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb140;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb234:
    assume $i681 == 1;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p682, .str);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p683, .str.18);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p684, .str.19);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p685, .str.37);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p687 := $bitcast.ref.ref($p686);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i688 := $load.i24($M.5, $p687);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i689 := $and.i24($i688, $sub.i24(0, 262144));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i690 := $or.i24($i689, 1048);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p687, $i690);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p691, 0);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i693 := $load.i8($M.6, $p692);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i694 := $zext.i8.i64($i693);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i695 := $and.i64($i694, 1);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i696 := ldv__builtin_expect($i695, 0);
    call {:si_unique_call 508} {:cexpr "tmp___28"} boogie_si_record_i64($i696);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i697 := $ne.i64($i696, 0);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i697} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb236:
    assume $i697 == 1;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_57 := __dynamic_dev_dbg.ref.ref.ref($p19, $p21, .str.37);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb217:
    assume $i634 == 1;
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i635 := $slt.i32(0, $i95);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i635} true;
    goto $bb219, $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    assume !($i635 == 1);
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb219:
    assume $i635 == 1;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i636 := 0;
    goto $bb222;

  $bb222:
    call $i637, $p638, $p639, $i640, $p642, $p643, $p644, $p645, $p646, $p647, $i648, $i649, $i650, $p651, $p652, $i653, $p654, $i655, $p656, $p657, $p658, $p659, $i660, $i661, $p662, $i663, $i664, $i665, $p666, $p667, $i668, $p669, $p670, $p671, $p672, $p673, $p674, $p675, $p676, $i677, $i678, $i679, $i680, $i636 := usb_serial_probe_loop_$bb222($p3, $p22, $p53, $i95, $i637, $p638, $p639, $i640, $p642, $p643, $p644, $p645, $p646, $p647, $i648, $i649, $i650, $p651, $p652, $i653, $p654, $i655, $p656, $p657, $p658, $p659, $i660, $i661, $p662, $i663, $i664, $i665, $p666, $p667, $i668, $p669, $p670, $p671, $p672, $p673, $p674, $p675, $p676, $i677, $i678, $i679, $i680, $i636);
    goto $bb222_last;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i637 := $sext.i32.i64($i636);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref($i637, 8));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p639 := $load.ref($M.30, $p638);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i640 := $sext.i32.i64($i636);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i640, 8));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p643 := $load.ref($M.0, $p642);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p644 := usb_alloc_urb(0, 208);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($p643, $mul.ref(0, 2632)), $mul.ref(1064, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p645, $p644);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p643, $mul.ref(0, 2632)), $mul.ref(1064, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p647 := $load.ref($M.0, $p646);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i648 := $p2i.ref.i64($p647);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i649 := $eq.i64($i648, 0);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i649 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i650 := usb_endpoint_maxp($p639);
    call {:si_unique_call 500} {:cexpr "buffer_size"} boogie_si_record_i32($i650);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($p643, $mul.ref(0, 2632)), $mul.ref(1056, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p651, $i650);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($p639, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i653 := $load.i8($M.0, $p652);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p643, $mul.ref(0, 2632)), $mul.ref(1072, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p654, $i653);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i655 := $sext.i32.i64($i650);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p656 := kmalloc($i655, 208);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($p643, $mul.ref(0, 2632)), $mul.ref(1048, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p657, $p656);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($p643, $mul.ref(0, 2632)), $mul.ref(1048, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p659 := $load.ref($M.0, $p658);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i660 := $p2i.ref.i64($p659);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i661 := $eq.i64($i660, 0);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i661 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p639, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i663 := $load.i8($M.0, $p662);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i664 := $zext.i8.i32($i663);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i665 := __create_pipe($p22, $i664);
    call {:si_unique_call 503} {:cexpr "tmp___27"} boogie_si_record_i32($i665);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($p643, $mul.ref(0, 2632)), $mul.ref(1064, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p667 := $load.ref($M.0, $p666);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i668 := $or.i32($i665, 1073741824);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p643, $mul.ref(0, 2632)), $mul.ref(1048, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.0, $p669);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p672 := $load.ref($M.0, $p671);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p672, $mul.ref(0, 536)), $mul.ref(496, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p674 := $load.ref($M.0, $p673);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p675 := $bitcast.ref.ref($p643);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p639, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i677 := $load.i8($M.0, $p676);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i678 := $zext.i8.i32($i677);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} usb_fill_int_urb($p667, $p22, $i668, $p670, $i650, $p674, $p675, $i678);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i679 := $add.i32($i636, 1);
    call {:si_unique_call 505} {:cexpr "i"} boogie_si_record_i32($i679);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i680 := $slt.i32($i679, $i95);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i680 == 1);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb230:
    assume $i680 == 1;
    assume {:verifier.code 0} true;
    $i636 := $i679;
    goto $bb230_dummy;

  $bb227:
    assume $i661 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb224:
    assume $i649 == 1;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb211:
    assume $i611 == 1;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p612, .str);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p613, .str.18);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p614, .str.19);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p615, .str.36);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p617 := $bitcast.ref.ref($p616);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i618 := $load.i24($M.5, $p617);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i619 := $and.i24($i618, $sub.i24(0, 262144));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i620 := $or.i24($i619, 1022);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p617, $i620);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p621, 0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i623 := $load.i8($M.6, $p622);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i624 := $zext.i8.i64($i623);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i625 := $and.i64($i624, 1);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i626 := ldv__builtin_expect($i625, 0);
    call {:si_unique_call 496} {:cexpr "tmp___25"} boogie_si_record_i64($i626);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i627 := $ne.i64($i626, 0);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i627} true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb213:
    assume $i627 == 1;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_56 := __dynamic_dev_dbg.ref.ref.ref($p18, $p21, .str.36);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb194:
    assume $i565 == 1;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i566 := $slt.i32(0, $i313);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i566} true;
    goto $bb196, $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    assume !($i566 == 1);
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb196:
    assume $i566 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i567 := 0;
    goto $bb199;

  $bb199:
    call $i568, $p569, $p570, $i571, $p573, $p574, $p575, $p576, $p577, $p578, $i579, $i580, $i581, $p582, $i583, $p584, $i585, $p586, $p587, $p588, $p589, $i590, $i591, $p592, $i593, $i594, $i595, $p596, $p597, $i598, $p599, $p600, $p601, $p602, $p603, $p604, $p605, $p606, $i607, $i608, $i609, $i610, $i567 := usb_serial_probe_loop_$bb199($p2, $p22, $p53, $i313, $i568, $p569, $p570, $i571, $p573, $p574, $p575, $p576, $p577, $p578, $i579, $i580, $i581, $p582, $i583, $p584, $i585, $p586, $p587, $p588, $p589, $i590, $i591, $p592, $i593, $i594, $i595, $p596, $p597, $i598, $p599, $p600, $p601, $p602, $p603, $p604, $p605, $p606, $i607, $i608, $i609, $i610, $i567);
    goto $bb199_last;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i568 := $sext.i32.i64($i567);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i568, 8));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p570 := $load.ref($M.29, $p569);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i571 := $sext.i32.i64($i567);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i571, 8));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p574 := $load.ref($M.0, $p573);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p575 := usb_alloc_urb(0, 208);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p574, $mul.ref(0, 2632)), $mul.ref(1032, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p576, $p575);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p574, $mul.ref(0, 2632)), $mul.ref(1032, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p578 := $load.ref($M.0, $p577);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i579 := $p2i.ref.i64($p578);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i580 := $eq.i64($i579, 0);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i580 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i581 := usb_endpoint_maxp($p570);
    call {:si_unique_call 489} {:cexpr "buffer_size"} boogie_si_record_i32($i581);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p570, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i583 := $load.i8($M.0, $p582);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p574, $mul.ref(0, 2632)), $mul.ref(1040, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p584, $i583);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i585 := $sext.i32.i64($i581);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p586 := kmalloc($i585, 208);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p574, $mul.ref(0, 2632)), $mul.ref(1024, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p587, $p586);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p574, $mul.ref(0, 2632)), $mul.ref(1024, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p589 := $load.ref($M.0, $p588);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i590 := $p2i.ref.i64($p589);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i591 := $eq.i64($i590, 0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i591 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p570, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i593 := $load.i8($M.0, $p592);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i594 := $zext.i8.i32($i593);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i595 := __create_pipe($p22, $i594);
    call {:si_unique_call 492} {:cexpr "tmp___24"} boogie_si_record_i32($i595);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p574, $mul.ref(0, 2632)), $mul.ref(1032, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p597 := $load.ref($M.0, $p596);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i598 := $or.i32($i595, 1073741952);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p574, $mul.ref(0, 2632)), $mul.ref(1024, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p600 := $load.ref($M.0, $p599);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p602 := $load.ref($M.0, $p601);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p602, $mul.ref(0, 536)), $mul.ref(488, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p604 := $load.ref($M.0, $p603);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p605 := $bitcast.ref.ref($p574);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($p570, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i607 := $load.i8($M.0, $p606);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i608 := $zext.i8.i32($i607);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} usb_fill_int_urb($p597, $p22, $i598, $p600, $i581, $p604, $p605, $i608);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i609 := $add.i32($i567, 1);
    call {:si_unique_call 494} {:cexpr "i"} boogie_si_record_i32($i609);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i610 := $slt.i32($i609, $i313);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i610 == 1);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb207:
    assume $i610 == 1;
    assume {:verifier.code 0} true;
    $i567 := $i609;
    goto $bb207_dummy;

  $bb204:
    assume $i591 == 1;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb201:
    assume $i580 == 1;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb168:
    assume $i489 == 1;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i490 := 0;
    goto $bb171;

  $bb171:
    call $i491, $p492, $p493, $i494, $p496, $p497, $p499, $p500, $i501, $i502, $i503, $p504, $p505, $p506, $i507, $i508, $i509, $i510, $i511, $p512, $p513, $i514, $p515, $p516, $p517, $p519, $p521, $p522, $i523, $i524, $i525, $p526, $p528, $p530, $p531, $i532, $i533, $p534, $i535, $i536, $i537, $p539, $p540, $i541, $p543, $p544, $p545, $p546, $p547, $p548, $p549, $p551, $p552, $p553, $p555, $p556, $p557, $i558, $i559, $i490, $p776, $p777, $p779, $p781, $p782, $i783, $i784, $i785, $p786, $p788, $p790, $p791, $i792, $i793, $p794, $i795, $i796, $i797, $p799, $p800, $i801, $p803, $p804, $p805, $p806, $p807, $p808, $p809 := usb_serial_probe_loop_$bb171($p5, $p22, $p53, $i98, $i491, $p492, $p493, $i494, $p496, $p497, $p499, $p500, $i501, $i502, $i503, $p504, $p505, $p506, $i507, $i508, $i509, $i510, $i511, $p512, $p513, $i514, $p515, $p516, $p517, $p519, $p521, $p522, $i523, $i524, $i525, $p526, $p528, $p530, $p531, $i532, $i533, $p534, $i535, $i536, $i537, $p539, $p540, $i541, $p543, $p544, $p545, $p546, $p547, $p548, $p549, $p551, $p552, $p553, $p555, $p556, $p557, $i558, $i559, $i490, $p776, $p777, $p779, $p781, $p782, $i783, $i784, $i785, $p786, $p788, $p790, $p791, $i792, $i793, $p794, $i795, $i796, $i797, $p799, $p800, $i801, $p803, $p804, $p805, $p806, $p807, $p808, $p809);
    goto $bb171_last;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i491 := $sext.i32.i64($i490);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref($i491, 8));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p493 := $load.ref($M.28, $p492);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i494 := $sext.i32.i64($i490);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i494, 8));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p497 := $load.ref($M.0, $p496);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p500 := $bitcast.ref.ref($p499);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i501 := __kfifo_alloc($p500, 4096, 1, 208);
    call {:si_unique_call 472} {:cexpr "tmp___19"} boogie_si_record_i32($i501);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i502 := __kfifo_int_must_check_helper($i501);
    call {:si_unique_call 474} {:cexpr "tmp___20"} boogie_si_record_i32($i502);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i503 := $ne.i32($i502, 0);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p505 := $load.ref($M.0, $p504);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p505, $mul.ref(0, 536)), $mul.ref(264, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i507 := $load.i64($M.0, $p506);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i508 := $trunc.i64.i32($i507);
    call {:si_unique_call 475} {:cexpr "buffer_size"} boogie_si_record_i32($i508);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i509 := $eq.i32($i508, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i509 == 1);
    assume {:verifier.code 0} true;
    $i511 := $i508;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1160, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p512, $i511);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p493, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i514 := $load.i8($M.0, $p513);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1240, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p515, $i514);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1232, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} set_bit(0, $p516);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p517 := usb_alloc_urb(0, 208);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p519, $p517);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p522 := $load.ref($M.0, $p521);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i523 := $p2i.ref.i64($p522);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i524 := $eq.i64($i523, 0);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb183;

  $bb183:
    assume !($i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i525 := $sext.i32.i64($i511);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p526 := kmalloc($i525, 208);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(0, 8));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p528, $p526);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(0, 8));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p531 := $load.ref($M.0, $p530);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i532 := $p2i.ref.i64($p531);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i533 := $eq.i64($i532, 0);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb187;

  $bb187:
    assume !($i533 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p493, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i535 := $load.i8($M.0, $p534);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i536 := $zext.i8.i32($i535);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i537 := __create_pipe($p22, $i536);
    call {:si_unique_call 482} {:cexpr "tmp___22"} boogie_si_record_i32($i537);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p540 := $load.ref($M.0, $p539);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i541 := $or.i32($i537, $sub.i32(0, 1073741824));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(0, 8));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p544 := $load.ref($M.0, $p543);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p546 := $load.ref($M.0, $p545);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p546, $mul.ref(0, 536)), $mul.ref(512, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p548 := $load.ref($M.0, $p547);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p549 := $bitcast.ref.ref($p497);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} usb_fill_bulk_urb($p540, $p22, $i541, $p544, $i511, $p548, $p549);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1232, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} set_bit(1, $p776);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $p777 := usb_alloc_urb(0, 208);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p779, $p777);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p782 := $load.ref($M.0, $p781);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i783 := $p2i.ref.i64($p782);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i784 := $eq.i64($i783, 0);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i784 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $i785 := $sext.i32.i64($i511);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $p786 := kmalloc($i785, 208);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(1, 8));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p788, $p786);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p790 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(1, 8));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p791 := $load.ref($M.0, $p790);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i792 := $p2i.ref.i64($p791);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i793 := $eq.i64($i792, 0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i793 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p493, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i795 := $load.i8($M.0, $p794);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i796 := $zext.i8.i32($i795);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i797 := __create_pipe($p22, $i796);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p800 := $load.ref($M.0, $p799);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i801 := $or.i32($i797, $sub.i32(0, 1073741824));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p803 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(1, 8));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p804 := $load.ref($M.0, $p803);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p805 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p806 := $load.ref($M.0, $p805);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p806, $mul.ref(0, 536)), $mul.ref(512, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p808 := $load.ref($M.0, $p807);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p809 := $bitcast.ref.ref($p497);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} usb_fill_bulk_urb($p800, $p22, $i801, $p804, $i511, $p808, $p809);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p552 := $load.ref($M.0, $p551);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1168, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p553, $p552);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(0, 8));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p556 := $load.ref($M.0, $p555);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p497, $mul.ref(0, 2632)), $mul.ref(1152, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p557, $p556);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i558 := $add.i32($i490, 1);
    call {:si_unique_call 486} {:cexpr "i"} boogie_si_record_i32($i558);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i559 := $slt.i32($i558, $i98);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i559 == 1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb191:
    assume $i559 == 1;
    assume {:verifier.code 0} true;
    $i490 := $i558;
    goto $bb191_dummy;

  $bb270:
    assume {:verifier.code 0} true;
    assume $i793 == 1;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb267:
    assume {:verifier.code 0} true;
    assume $i784 == 1;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i533 == 1;
    goto $bb186;

  $bb181:
    assume {:verifier.code 0} true;
    assume $i524 == 1;
    goto $bb182;

  $bb176:
    assume $i509 == 1;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i510 := usb_endpoint_maxp($p493);
    call {:si_unique_call 477} {:cexpr "buffer_size"} boogie_si_record_i32($i510);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i511 := $i510;
    goto $bb178;

  $bb173:
    assume $i503 == 1;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb145:
    assume $i424 == 1;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i425 := 0;
    goto $bb148;

  $bb148:
    call $i426, $p427, $p428, $i429, $p431, $p432, $p433, $p434, $p435, $i436, $i437, $i438, $i439, $i440, $p441, $p442, $i443, $p444, $p445, $p446, $p448, $p450, $p451, $i452, $i453, $i454, $p455, $p457, $p459, $p460, $i461, $i462, $p463, $i464, $i465, $i466, $p468, $p469, $i470, $p472, $p473, $p474, $p475, $p476, $p477, $p478, $p480, $p481, $p482, $p484, $p485, $p486, $i487, $i488, $i425, $p810, $p811, $p813, $p815, $p816, $i817, $i818, $i819, $p820, $p822, $p824, $p825, $i826, $i827, $p828, $i829, $i830, $i831, $p833, $p834, $i835, $p837, $p838, $p839, $p840, $p841, $p842, $p843 := usb_serial_probe_loop_$bb148($p4, $p22, $p53, $i97, $i426, $p427, $p428, $i429, $p431, $p432, $p433, $p434, $p435, $i436, $i437, $i438, $i439, $i440, $p441, $p442, $i443, $p444, $p445, $p446, $p448, $p450, $p451, $i452, $i453, $i454, $p455, $p457, $p459, $p460, $i461, $i462, $p463, $i464, $i465, $i466, $p468, $p469, $i470, $p472, $p473, $p474, $p475, $p476, $p477, $p478, $p480, $p481, $p482, $p484, $p485, $p486, $i487, $i488, $i425, $p810, $p811, $p813, $p815, $p816, $i817, $i818, $i819, $p820, $p822, $p824, $p825, $i826, $i827, $p828, $i829, $i830, $i831, $p833, $p834, $i835, $p837, $p838, $p839, $p840, $p841, $p842, $p843);
    goto $bb148_last;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i426 := $sext.i32.i64($i425);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref($i426, 8));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.27, $p427);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i429 := $sext.i32.i64($i425);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i429, 8));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.0, $p431);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p434 := $load.ref($M.0, $p433);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p434, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i436 := $load.i64($M.0, $p435);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i437 := $trunc.i64.i32($i436);
    call {:si_unique_call 459} {:cexpr "__max1"} boogie_si_record_i32($i437);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i438 := usb_endpoint_maxp($p428);
    call {:si_unique_call 461} {:cexpr "tmp___16"} boogie_si_record_i32($i438);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i439 := $sgt.i32($i437, $i438);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i439 == 1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i440 := $i438;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1088, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p441, $i440);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p428, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i443 := $load.i8($M.0, $p442);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1104, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p444, $i443);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1144, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} set_bit(0, $p445);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $p446 := usb_alloc_urb(0, 208);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p448, $p446);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p451 := $load.ref($M.0, $p450);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i452 := $p2i.ref.i64($p451);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i453 := $eq.i64($i452, 0);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb157;

  $bb157:
    assume !($i453 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i454 := $sext.i32.i64($i440);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p455 := kmalloc($i454, 208);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(0, 8));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p457, $p455);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(0, 8));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p460 := $load.ref($M.0, $p459);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i461 := $p2i.ref.i64($p460);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i462 := $eq.i64($i461, 0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb161;

  $bb161:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p428, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i464 := $load.i8($M.0, $p463);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i465 := $zext.i8.i32($i464);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i466 := __create_pipe($p22, $i465);
    call {:si_unique_call 466} {:cexpr "tmp___18"} boogie_si_record_i32($i466);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p469 := $load.ref($M.0, $p468);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i470 := $or.i32($i466, $sub.i32(0, 1073741696));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(0, 8));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p473 := $load.ref($M.0, $p472);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p475 := $load.ref($M.0, $p474);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p475, $mul.ref(0, 536)), $mul.ref(504, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p477 := $load.ref($M.0, $p476);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p478 := $bitcast.ref.ref($p432);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} usb_fill_bulk_urb($p469, $p22, $i470, $p473, $i440, $p477, $p478);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p810 := $add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1144, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} set_bit(1, $p810);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $p811 := usb_alloc_urb(0, 208);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(1, 8));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p813, $p811);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(1, 8));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p816 := $load.ref($M.0, $p815);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i817 := $p2i.ref.i64($p816);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i818 := $eq.i64($i817, 0);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i818 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $i819 := $sext.i32.i64($i440);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p820 := kmalloc($i819, 208);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(1, 8));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p822, $p820);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(1, 8));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p825 := $load.ref($M.0, $p824);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i826 := $p2i.ref.i64($p825);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i827 := $eq.i64($i826, 0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i827 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p828 := $add.ref($add.ref($p428, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i829 := $load.i8($M.0, $p828);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i830 := $zext.i8.i32($i829);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i831 := __create_pipe($p22, $i830);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p833 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(1, 8));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p834 := $load.ref($M.0, $p833);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i835 := $or.i32($i831, $sub.i32(0, 1073741696));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(1, 8));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p838 := $load.ref($M.0, $p837);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p839 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p840 := $load.ref($M.0, $p839);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($p840, $mul.ref(0, 536)), $mul.ref(504, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p842 := $load.ref($M.0, $p841);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p843 := $bitcast.ref.ref($p432);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} usb_fill_bulk_urb($p834, $p22, $i835, $p838, $i440, $p842, $p843);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p481 := $load.ref($M.0, $p480);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1096, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p482, $p481);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(0, 8));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p485 := $load.ref($M.0, $p484);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p432, $mul.ref(0, 2632)), $mul.ref(1080, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p486, $p485);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i487 := $add.i32($i425, 1);
    call {:si_unique_call 470} {:cexpr "i"} boogie_si_record_i32($i487);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i488 := $slt.i32($i487, $i97);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i488 == 1);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb165:
    assume $i488 == 1;
    assume {:verifier.code 0} true;
    $i425 := $i487;
    goto $bb165_dummy;

  $bb276:
    assume {:verifier.code 0} true;
    assume $i827 == 1;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb273:
    assume {:verifier.code 0} true;
    assume $i818 == 1;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i462 == 1;
    goto $bb160;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i453 == 1;
    goto $bb156;

  $bb150:
    assume $i439 == 1;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i440 := $i437;
    goto $bb152;

  $bb133:
    assume $i382 == 1;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i383 := 0;
    goto $bb136;

  $bb136:
    call $p384, $p385, $i386, $i387, $p388, $p390, $p391, $p392, $p395, $p396, $p397, $p398, $p400, $p401, $p402, $p404, $p406, $p408, $i409, $p411, $p412, $p414, $p416, $p418, $p420, $p421, $i422, $i423, $i383, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_55 := usb_serial_probe_loop_$bb136($p0, $p15, $p16, $p17, $p53, $i362, $p384, $p385, $i386, $i387, $p388, $p390, $p391, $p392, $p395, $p396, $p397, $p398, $p400, $p401, $p402, $p404, $p406, $p408, $i409, $p411, $p412, $p414, $p416, $p418, $p420, $p421, $i422, $i423, $i383, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_55);
    goto $bb136_last;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $p384 := kzalloc(2624, 208);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p385 := $bitcast.ref.ref($p384);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i386 := $p2i.ref.i64($p385);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i387 := $eq.i64($i386, 0);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} tty_port_init($p388);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(8, 1)), $mul.ref(200, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p390, serial_port_ops);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p391, $p53);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} vslice_dummy_var_55 := spinlock_check($p392);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(944, 1)), $mul.ref(0, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p396 := $bitcast.ref.ref($p395);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} __raw_spin_lock_init($p396, .str.34, $p15);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(1392, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} __init_work($p397, 0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p398, 137438953408);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(1392, 1)), $mul.ref(0, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p401 := $bitcast.ref.ref($p400);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p402 := $bitcast.ref.ref($p17);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 454} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p401, $p402, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(1392, 1)), $mul.ref(32, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} lockdep_init_map($p404, .str.35, $p16, 0);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(1392, 1)), $mul.ref(8, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} INIT_LIST_HEAD($p406);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(1392, 1)), $mul.ref(24, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p408, usb_serial_port_work);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i409 := $sext.i32.i64($i383);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i409, 8));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p411, $p384);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(1488, 1)), $mul.ref(0, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p414, $p412);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(1488, 1)), $mul.ref(272, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p416, $0.ref);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(1488, 1)), $mul.ref(264, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p418, usb_serial_bus_type);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(1488, 1)), $mul.ref(1128, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p420, usb_serial_port_release);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p385, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} device_initialize($p421);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i422 := $add.i32($i383, 1);
    call {:si_unique_call 458} {:cexpr "i"} boogie_si_record_i32($i422);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i423 := $slt.i32($i422, $i362);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i423 == 1);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb142:
    assume $i423 == 1;
    assume {:verifier.code 0} true;
    $i383 := $i422;
    goto $bb142_dummy;

  $bb138:
    assume $i387 == 1;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb130:
    assume $i380 == 1;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} vslice_dummy_var_54 := __dynamic_dev_dbg.ref.ref.ref.i32($p14, $p21, .str.33, $i362);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume $i361 == 1;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i362 := $i357;
    goto $bb129;

  $bb124:
    assume $i356 == 1;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i357 := $i355;
    goto $bb126;

  $bb121:
    assume $i354 == 1;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i355 := $i353;
    goto $bb123;

  $bb118:
    assume $i352 == 1;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i353 := $i97;
    goto $bb120;

  $bb109:
    assume $i324 == 1;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(288, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.0, $p325);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i327 := $p2i.ref.i64($p326);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i328 := $ne.i64($i327, 0);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    $i332 := $i323;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    $i337 := $i332;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i338 := $i337;
    goto $bb117;

  $bb114:
    assume $i333 == 1;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.0, $p334);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i336 := $sext.i8.i32($i335);
    call {:si_unique_call 441} {:cexpr "num_ports"} boogie_si_record_i32($i336);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i337 := $i336;
    goto $bb116;

  $bb111:
    assume $i328 == 1;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(288, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.0, $p329);
    call {:si_unique_call 439} $i331 := devirtbounce.20($p330, $p53);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 440} {:cexpr "num_ports"} boogie_si_record_i32($i331);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i332 := $i331;
    goto $bb113;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i315 == 1;
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i98, 0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_51 := _dev_info.ref.ref($p21, .str.30);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_52 := _dev_info.ref.ref($p21, .str.31);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i323 := $i98;
    goto $bb108;

  $bb105:
    assume $i316 == 1;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vslice_dummy_var_50 := dev_err.ref.ref($p21, .str.29);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} usb_serial_put($p53);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.0, $p319);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} module_put($p320);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 5);
    goto $bb6;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb74:
    assume $i244 == 1;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(10, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i247 := $load.i16($M.26, $p246);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i248 := $zext.i16.i32($i247);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 5);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i219 := $i96;
    assume {:branchcond $i249} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i249 == 1);
    goto $bb76;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i249 == 1;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p22, $mul.ref(0, 1744)), $mul.ref(1320, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.26, $p250);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p251, $mul.ref(0, 680)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.31, $p253);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i255 := $p2i.ref.i64($p254);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i256 := $p2i.ref.i64($p0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i257 := $ne.i64($i255, $i256);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    $i306 := $i219;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i97, 0);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb96, $bb98;

  $bb98:
    assume !($i307 == 1);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i98, 0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i313 := $i306;
    goto $bb102;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} vslice_dummy_var_49 := _dev_info.ref.ref($p21, .str.28);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} usb_serial_put($p53);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.0, $p311);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} module_put($p312);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 19);
    goto $bb6;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i307 == 1;
    goto $bb97;

  $bb79:
    assume $i257 == 1;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p22, $mul.ref(0, 1744)), $mul.ref(1320, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.26, $p258);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p259, $mul.ref(0, 680)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.31, $p261);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p262, $mul.ref(0, 1288)), $mul.ref(8, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p264 := $load.ref($M.32, $p263);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p264, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i267 := $load.i8($M.33, $p266);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i268 := $zext.i8.i32($i267);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i269 := $sgt.i32($i268, 0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i270 := $i219;
    assume {:branchcond $i269} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i306 := $i270;
    goto $bb95;

  $bb81:
    assume $i269 == 1;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i271, $i272 := 0, $i219;
    goto $bb84;

  $bb84:
    call $p273, $p274, $i275, $p277, $i278, $i279, $p280, $p281, $p282, $p283, $p284, $p285, $i286, $i287, $i288, $p289, $p290, $i291, $i292, $i293, $i294, $i295, $i297, $p298, $i299, $i300, $i301, $i302, $i303, $i304, $i271, $i272, $i305, vslice_dummy_var_48 := usb_serial_probe_loop_$bb84($p2, $p13, $p21, $p264, $p266, $p273, $p274, $i275, $p277, $i278, $i279, $p280, $p281, $p282, $p283, $p284, $p285, $i286, $i287, $i288, $p289, $p290, $i291, $i292, $i293, $i294, $i295, $i297, $p298, $i299, $i300, $i301, $i302, $i303, $i304, $i271, $i272, $i305, vslice_dummy_var_48);
    goto $bb84_last;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p264, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.34, $p273);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i275 := $sext.i32.i64($i271);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p274, $mul.ref($i275, 64)), $mul.ref(0, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i278 := usb_endpoint_is_int_in($p277);
    call {:si_unique_call 425} {:cexpr "tmp___13"} boogie_si_record_i32($i278);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i279 := $ne.i32($i278, 0);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    $i300 := $i272;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i301 := $add.i32($i271, 1);
    call {:si_unique_call 430} {:cexpr "i"} boogie_si_record_i32($i301);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i302 := $load.i8($M.33, $p266);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i303 := $zext.i8.i32($i302);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i304 := $sgt.i32($i303, $i301);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i305 := $i300;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i270 := $i305;
    goto $bb83;

  $bb92:
    assume $i304 == 1;
    assume {:verifier.code 0} true;
    $i271, $i272 := $i301, $i300;
    goto $bb92_dummy;

  $bb86:
    assume $i279 == 1;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p280, .str);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p281, .str.18);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p282, .str.19);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p283, .str.27);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p284);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i286 := $load.i24($M.5, $p285);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i287 := $and.i24($i286, $sub.i24(0, 262144));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i288 := $or.i24($i287, 858);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p285, $i288);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p289, 0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i291 := $load.i8($M.6, $p290);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i292 := $zext.i8.i64($i291);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i293 := $and.i64($i292, 1);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i294 := ldv__builtin_expect($i293, 0);
    call {:si_unique_call 427} {:cexpr "tmp___12"} boogie_si_record_i64($i294);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i295 := $ne.i64($i294, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i297 := $sext.i32.i64($i272);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i297, 8));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p298, $p277);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i299 := $add.i32($i272, 1);
    call {:si_unique_call 429} {:cexpr "num_interrupt_in"} boogie_si_record_i32($i299);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i300 := $i299;
    goto $bb91;

  $bb88:
    assume $i295 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} vslice_dummy_var_48 := __dynamic_dev_dbg.ref.ref.ref($p13, $p21, .str.27);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb69:
    assume $i234 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(10, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i237 := $load.i16($M.26, $p236);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i238 := $zext.i16.i32($i237);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 38688);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i219 := $i96;
    assume {:branchcond $i239} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i239 == 1);
    goto $bb71;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb62;

  $bb64:
    assume $i224 == 1;
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(10, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i227 := $load.i16($M.26, $p226);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i228 := $zext.i16.i32($i227);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 8200);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i219 := $i96;
    assume {:branchcond $i229} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i229 == 1);
    goto $bb66;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i229 == 1;
    goto $bb62;

  $bb58:
    assume $i213 == 1;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(10, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i216 := $load.i16($M.26, $p215);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i216);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 8963);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i219 := $i96;
    assume {:branchcond $i218} true;
    goto $bb61, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb60;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb62;

  $bb26:
    assume $i94 == 1;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i99, $i100, $i101, $i102, $i103 := 0, 0, 0, 0, 0;
    goto $bb29;

  $bb29:
    call $p104, $p105, $i106, $p108, $i109, $i110, $p111, $p112, $p113, $p114, $p115, $p116, $i117, $i118, $i119, $p120, $p121, $i122, $i123, $i124, $i125, $i126, $i128, $p129, $i130, $i131, $i132, $i133, $p134, $p135, $p136, $p137, $p138, $p139, $i140, $i141, $i142, $p143, $p144, $i145, $i146, $i147, $i148, $i149, $i151, $p152, $i153, $i154, $i155, $i156, $p157, $p158, $p159, $p160, $p161, $p162, $i163, $i164, $i165, $p166, $p167, $i168, $i169, $i170, $i171, $i172, $i174, $p175, $i176, $i177, $i178, $i179, $p180, $p181, $p182, $p183, $p184, $p185, $i186, $i187, $i188, $p189, $p190, $i191, $i192, $i193, $i194, $i195, $i197, $p198, $i199, $i200, $i201, $i202, $i203, $i204, $i99, $i100, $i101, $i102, $i103, $i205, $i206, $i207, $i208, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47 := usb_serial_probe_loop_$bb29($p2, $p3, $p4, $p5, $p9, $p10, $p11, $p12, $p21, $p89, $p91, $p104, $p105, $i106, $p108, $i109, $i110, $p111, $p112, $p113, $p114, $p115, $p116, $i117, $i118, $i119, $p120, $p121, $i122, $i123, $i124, $i125, $i126, $i128, $p129, $i130, $i131, $i132, $i133, $p134, $p135, $p136, $p137, $p138, $p139, $i140, $i141, $i142, $p143, $p144, $i145, $i146, $i147, $i148, $i149, $i151, $p152, $i153, $i154, $i155, $i156, $p157, $p158, $p159, $p160, $p161, $p162, $i163, $i164, $i165, $p166, $p167, $i168, $i169, $i170, $i171, $i172, $i174, $p175, $i176, $i177, $i178, $i179, $p180, $p181, $p182, $p183, $p184, $p185, $i186, $i187, $i188, $p189, $p190, $i191, $i192, $i193, $i194, $i195, $i197, $p198, $i199, $i200, $i201, $i202, $i203, $i204, $i99, $i100, $i101, $i102, $i103, $i205, $i206, $i207, $i208, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47);
    goto $bb29_last;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p89, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i101);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p105, $mul.ref($i106, 64)), $mul.ref(0, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i109 := usb_endpoint_is_bulk_in($p108);
    call {:si_unique_call 400} {:cexpr "tmp___5"} boogie_si_record_i32($i109);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i131 := $i100;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i132 := usb_endpoint_is_bulk_out($p108);
    call {:si_unique_call 406} {:cexpr "tmp___7"} boogie_si_record_i32($i132);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i154 := $i99;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i155 := usb_endpoint_is_int_in($p108);
    call {:si_unique_call 412} {:cexpr "tmp___9"} boogie_si_record_i32($i155);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i177 := $i102;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i178 := usb_endpoint_is_int_out($p108);
    call {:si_unique_call 418} {:cexpr "tmp___11"} boogie_si_record_i32($i178);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    $i200 := $i103;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i101, 1);
    call {:si_unique_call 423} {:cexpr "i"} boogie_si_record_i32($i201);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.0, $p91);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($i202);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i204 := $sgt.i32($i203, $i201);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i205, $i206, $i207, $i208 := $i200, $i177, $i131, $i154;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i95, $i96, $i97, $i98 := $i205, $i206, $i207, $i208;
    goto $bb28;

  $bb55:
    assume $i204 == 1;
    assume {:verifier.code 0} true;
    $i99, $i100, $i101, $i102, $i103 := $i154, $i131, $i201, $i177, $i200;
    goto $bb55_dummy;

  $bb49:
    assume $i179 == 1;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p180, .str);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p181, .str.18);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p182, .str.19);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p183, .str.26);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p184);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i186 := $load.i24($M.5, $p185);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i187 := $and.i24($i186, $sub.i24(0, 262144));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i188 := $or.i24($i187, 834);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p185, $i188);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p189, 0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.6, $p190);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i64($i191);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i193 := $and.i64($i192, 1);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i194 := ldv__builtin_expect($i193, 0);
    call {:si_unique_call 420} {:cexpr "tmp___10"} boogie_si_record_i64($i194);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i195 := $ne.i64($i194, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64($i103);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref($i197, 8));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p198, $p108);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i199 := $add.i32($i103, 1);
    call {:si_unique_call 422} {:cexpr "num_interrupt_out"} boogie_si_record_i32($i199);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i200 := $i199;
    goto $bb54;

  $bb51:
    assume $i195 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_47 := __dynamic_dev_dbg.ref.ref.ref.i32($p12, $p21, .str.26, $i101);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb43:
    assume $i156 == 1;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p157, .str);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p158, .str.18);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p159, .str.19);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p160, .str.25);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i163 := $load.i24($M.5, $p162);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i164 := $and.i24($i163, $sub.i24(0, 262144));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i165 := $or.i24($i164, 827);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p162, $i165);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p166, 0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.6, $p167);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i64($i168);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i170 := $and.i64($i169, 1);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i171 := ldv__builtin_expect($i170, 0);
    call {:si_unique_call 414} {:cexpr "tmp___8"} boogie_si_record_i64($i171);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i172 := $ne.i64($i171, 0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i174 := $sext.i32.i64($i102);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i174, 8));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p175, $p108);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i102, 1);
    call {:si_unique_call 416} {:cexpr "num_interrupt_in"} boogie_si_record_i32($i176);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i177 := $i176;
    goto $bb48;

  $bb45:
    assume $i172 == 1;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_46 := __dynamic_dev_dbg.ref.ref.ref.i32($p11, $p21, .str.25, $i101);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb37:
    assume $i133 == 1;
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p134, .str);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p135, .str.18);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p136, .str.19);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p137, .str.24);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i140 := $load.i24($M.5, $p139);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i141 := $and.i24($i140, $sub.i24(0, 262144));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i142 := $or.i24($i141, 820);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p139, $i142);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p143, 0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.6, $p144);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i64($i145);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i147 := $and.i64($i146, 1);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i148 := ldv__builtin_expect($i147, 0);
    call {:si_unique_call 408} {:cexpr "tmp___6"} boogie_si_record_i64($i148);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i149 := $ne.i64($i148, 0);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64($i99);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref($i151, 8));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p152, $p108);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i153 := $add.i32($i99, 1);
    call {:si_unique_call 410} {:cexpr "num_bulk_out"} boogie_si_record_i32($i153);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i154 := $i153;
    goto $bb42;

  $bb39:
    assume $i149 == 1;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_45 := __dynamic_dev_dbg.ref.ref.ref.i32($p10, $p21, .str.24, $i101);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb31:
    assume $i110 == 1;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p111, .str);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p112, .str.18);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p113, .str.19);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p114, .str.23);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i117 := $load.i24($M.5, $p116);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i118 := $and.i24($i117, $sub.i24(0, 262144));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i119 := $or.i24($i118, 813);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p116, $i119);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p120, 0);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.6, $p121);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i64($i122);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i124 := $and.i64($i123, 1);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i125 := ldv__builtin_expect($i124, 0);
    call {:si_unique_call 402} {:cexpr "tmp___4"} boogie_si_record_i64($i125);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64($i100);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref($i128, 8));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p129, $p108);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i100, 1);
    call {:si_unique_call 404} {:cexpr "num_bulk_in"} boogie_si_record_i32($i130);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i131 := $i130;
    goto $bb36;

  $bb33:
    assume $i126 == 1;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_44 := __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p21, .str.23, $i101);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb17:
    assume $i62 == 1;
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $p63 := get_iface_id($p23, $p0);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(272, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    call {:si_unique_call 392} $i66 := devirtbounce.19($p65, $p53, $p63);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 393} {:cexpr "retval"} boogie_si_record_i32($i66);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i67 == 1;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p68, .str);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p69, .str.18);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p70, .str.19);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p71, .str.22);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i74 := $load.i24($M.5, $p73);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i75 := $and.i24($i74, $sub.i24(0, 262144));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i76 := $or.i24($i75, 798);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p73, $i76);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p77, 0);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.6, $p78);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i64($i79);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i81 := $and.i64($i80, 1);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i82 := ldv__builtin_expect($i81, 0);
    call {:si_unique_call 395} {:cexpr "tmp___3"} boogie_si_record_i64($i82);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} usb_serial_put($p53);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} module_put($p87);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i43 := $i66;
    goto $bb6;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i83 == 1;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} vslice_dummy_var_43 := __dynamic_dev_dbg.ref.ref.ref($p8, $p21, .str.22);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} module_put($p58);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i51 == 1;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} ldv_mutex_unlock_28(table_lock);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_42 := dev_err.ref.ref($p21, .str.21);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 5);
    goto $bb6;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb10;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} ldv_mutex_unlock_27(table_lock);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, .str);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p27, .str.18);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p28, .str.19);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p29, .str.20);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.5, $p31);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 773);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p31, $i34);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p35, 0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.6, $p36);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 382} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 19);
    goto $bb6;

  $bb3:
    assume $i41 == 1;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_41 := __dynamic_dev_dbg.ref.ref.ref($p7, $p21, .str.20);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb264_dummy:
    assume false;
    return;

  $bb256_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2804;

  $bb230_dummy:
    assume false;
    return;

  $bb222_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2663;

  $bb207_dummy:
    assume false;
    return;

  $bb199_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  $bb191_dummy:
    assume false;
    return;

  $bb171_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2457;

  $bb165_dummy:
    assume false;
    return;

  $bb148_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2367;

  $bb142_dummy:
    assume false;
    return;

  $bb136_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2305;

  $bb92_dummy:
    assume false;
    return;

  $bb84_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  $bb55_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1895;
}



const usb_serial_disconnect: ref;

axiom usb_serial_disconnect == $sub.ref(0, 269767);

procedure usb_serial_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, assertsPassed, $M.24, $M.49, $M.50, $CurrAddr, $M.25;



implementation usb_serial_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i14: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_62: i1;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} usb_serial_console_disconnect($p2);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} ldv_mutex_lock_30($p4);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 2));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i8 := $or.i8($i7, 1);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i8);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} ldv_mutex_unlock_31($p9);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 536)), $mul.ref(296, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} usb_serial_put($p2);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_63 := _dev_info.ref.ref($p3, .str.51);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 536)), $mul.ref(296, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    call {:si_unique_call 546} devirtbounce.15($p46, $p2);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb4;

  $bb4:
    call $i15, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $p26, $p27, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i14, vslice_dummy_var_62 := usb_serial_disconnect_loop_$bb4($p2, $p10, $i15, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $p26, $p27, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i14, vslice_dummy_var_62);
    goto $bb4_last;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i15, 8));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i14, 1);
    call {:si_unique_call 545} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p10);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, $i33);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i33;
    goto $bb15_dummy;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $p22 := tty_port_tty_get($p21);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} usb_serial_port_poison_urbs($p18);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2632)), $mul.ref(8, 1)), $mul.ref(464, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} __wake_up($p26, 1, 1, $0.ref);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 2632)), $mul.ref(1392, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_62 := cancel_work_sync($p27);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p18, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i30 := device_is_registered($p29);
    call {:si_unique_call 543} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p18, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} device_del($p32);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} tty_vhangup($p22);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} tty_kref_put($p22);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2932;
}



const usb_serial_suspend: ref;

axiom usb_serial_suspend == $sub.ref(0, 270799);

procedure usb_serial_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, assertsPassed;



implementation usb_serial_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i8;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i8;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i34: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i33: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p3, $i1);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p4 := usb_get_intfdata($p0);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, $sub.i8(0, 3));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i9 := $or.i8($i8, 2);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i9);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 536)), $mul.ref(328, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb11;

  $bb11:
    call $i34, $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i33 := usb_serial_suspend_loop_$bb11($p5, $p29, $i34, $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i33);
    goto $bb11_last;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i34, 8));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i33, 1);
    call {:si_unique_call 554} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p29);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, $i40);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i40;
    goto $bb16_dummy;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} usb_serial_port_poison_urbs($p37);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 536)), $mul.ref(328, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.39, $p20);
    call {:si_unique_call 551} $i22 := devirtbounce.21($p19, $p5, $i21);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 552} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i28 := $i22;
    goto $bb7;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i26 := $and.i8($i25, $sub.i8(0, 3));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i26);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i27 := $i22;
    goto $bb5;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3026;
}



const usb_serial_resume: ref;

axiom usb_serial_resume == $sub.ref(0, 271831);

procedure usb_serial_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $CurrAddr, assertsPassed;



implementation usb_serial_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i18: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} usb_serial_unpoison_port_urbs($p2);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, $sub.i8(0, 3));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $i5);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(336, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.40, $p8);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i18 := usb_serial_generic_resume($p2);
    call {:si_unique_call 560} {:cexpr "rv"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    $i17 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 536)), $mul.ref(336, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.40, $p14);
    call {:si_unique_call 557} $i16 := devirtbounce.20($p15, $p2);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 558} {:cexpr "rv"} boogie_si_record_i32($i16);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 272863);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_serial_unpoison_port_urbs: ref;

axiom usb_serial_unpoison_port_urbs == $sub.ref(0, 273895);

procedure usb_serial_unpoison_port_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_serial_unpoison_port_urbs($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i5 := usb_serial_unpoison_port_urbs_loop_$bb4($p0, $p1, $i6, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i5);
    goto $bb4_last;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i6, 8));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i5, 1);
    call {:si_unique_call 563} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p1);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, $i12);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb9_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} usb_serial_port_unpoison_urbs($p9);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3081;
}



const usb_serial_port_unpoison_urbs: ref;

axiom usb_serial_port_unpoison_urbs == $sub.ref(0, 274927);

procedure usb_serial_port_unpoison_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_serial_port_unpoison_urbs($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.40, $p2);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} usb_unpoison_urb($p3);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(1, 8));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.40, $p15);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} usb_unpoison_urb($p16);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.40, $p5);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} usb_unpoison_urb($p6);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.40, $p12);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} usb_unpoison_urb($p13);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1032, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.40, $p7);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} usb_unpoison_urb($p8);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1064, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.40, $p9);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} usb_unpoison_urb($p10);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    return;
}



const usb_unpoison_urb: ref;

axiom usb_unpoison_urb == $sub.ref(0, 275959);

procedure usb_unpoison_urb($p0: ref);
  free requires assertsPassed;



implementation usb_unpoison_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 276991);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p1 := external_alloc();
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const usb_serial_port_poison_urbs: ref;

axiom usb_serial_port_poison_urbs == $sub.ref(0, 278023);

procedure usb_serial_port_poison_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_serial_port_poison_urbs($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} usb_poison_urb($p3);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(1, 8));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} usb_poison_urb($p16);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} usb_poison_urb($p6);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} usb_poison_urb($p13);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1032, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} usb_poison_urb($p8);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1064, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} usb_poison_urb($p10);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    return;
}



const usb_poison_urb: ref;

axiom usb_poison_urb == $sub.ref(0, 279055);

procedure usb_poison_urb($p0: ref);
  free requires assertsPassed;



implementation usb_poison_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_console_disconnect: ref;

axiom usb_serial_console_disconnect == $sub.ref(0, 280087);

procedure usb_serial_console_disconnect($p0: ref);
  free requires assertsPassed;



implementation usb_serial_console_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_30: ref;

axiom ldv_mutex_lock_30 == $sub.ref(0, 281119);

procedure ldv_mutex_lock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} ldv_mutex_lock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} mutex_lock($p0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_31: ref;

axiom ldv_mutex_unlock_31 == $sub.ref(0, 282151);

procedure ldv_mutex_unlock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} ldv_mutex_unlock_disc_mutex_of_usb_serial($p0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} mutex_unlock($p0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const tty_port_tty_get: ref;

axiom tty_port_tty_get == $sub.ref(0, 283183);

procedure tty_port_tty_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_tty_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p1 := external_alloc();
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_vhangup: ref;

axiom tty_vhangup == $sub.ref(0, 284215);

procedure tty_vhangup($p0: ref);
  free requires assertsPassed;



implementation tty_vhangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    return;
}



const tty_kref_put: ref;

axiom tty_kref_put == $sub.ref(0, 285247);

procedure tty_kref_put($p0: ref);
  free requires assertsPassed;



implementation tty_kref_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 286279);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 583} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 287311);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 1} true;
    call {:si_unique_call 584} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 585} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_is_registered: ref;

axiom device_is_registered == $sub.ref(0, 288343);

procedure device_is_registered($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_is_registered($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(60, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i8($i3, 1);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, 1);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const device_del: ref;

axiom device_del == $sub.ref(0, 289375);

procedure device_del($p0: ref);
  free requires assertsPassed;



implementation device_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 290407);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 136), 1744));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const ldv_mutex_lock_26: ref;

axiom ldv_mutex_lock_26 == $sub.ref(0, 291439);

procedure ldv_mutex_lock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} ldv_mutex_lock_table_lock($p0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} mutex_lock($p0);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const search_serial_device: ref;

axiom search_serial_device == $sub.ref(0, 292471);

procedure search_serial_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation search_serial_device($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p12: ref;
  var $p13: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1)), $mul.ref(272, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 168), 304));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, usb_serial_driver_list);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 24), 536));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 536)), $mul.ref(24, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, $p2i.ref.i64(usb_serial_driver_list));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $r := $p24;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p12, $p13 := $p8, $0.ref;
    goto $bb4;

  $bb4:
    call $p14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p12, $p13 := search_serial_device_loop_$bb4($p0, $p5, $p14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p12, $p13);
    goto $bb4_last;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref(0, 536)), $mul.ref(160, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p5);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i16, $i17);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $p20 := $p13;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p23 := $p12;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 536)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref($sub.ref(0, 24), 536));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p28, $mul.ref($sub.ref(0, 24), 536)), $mul.ref(24, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $p2i.ref.i64(usb_serial_driver_list));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p12, $p13 := $p29, $p20;
    goto $bb13_dummy;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p24 := $p23;
    goto $bb11;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p19 := get_iface_id($p12, $p0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3208;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 293503);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} ldv_mutex_unlock_table_lock($p0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} mutex_unlock($p0);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_28: ref;

axiom ldv_mutex_unlock_28 == $sub.ref(0, 294535);

procedure ldv_mutex_unlock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} ldv_mutex_unlock_table_lock($p0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} mutex_unlock($p0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 295567);

procedure ldv_mutex_unlock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} ldv_mutex_unlock_table_lock($p0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} mutex_unlock($p0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const create_serial: ref;

axiom create_serial == $sub.ref(0, 296599);

procedure create_serial($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation create_serial($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $p4 := kzalloc(280, 208);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p9 := usb_get_dev($p0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p2);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p12 := usb_get_intf($p1);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} kref_init($p14);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} __mutex_init($p15, .str.42, $p3);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $sub.i8(0, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const get_iface_id: ref;

axiom get_iface_id == $sub.ref(0, 297631);

procedure get_iface_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation get_iface_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p27: ref;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(8, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p6 := usb_match_id($p1, $p5);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p28 := match_dynamic_id($p1, $p0);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $p28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $r := $p27;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, .str);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p32, .str.43);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p33, .str.19);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p34, .str.45);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.5, $p36);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 682);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p36, $i39);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p40, 0);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.6, $p41);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 609} {:cexpr "tmp___0"} boogie_si_record_i64($i45);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} vslice_dummy_var_65 := __dynamic_dev_dbg.ref.ref.ref($p3, $p47, .str.45);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.43);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.19);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.44);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.5, $p14);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 677);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p14, $i17);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 0);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 605} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p27 := $p6;
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_64 := __dynamic_dev_dbg.ref.ref.ref($p2, $p25, .str.44);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 298663);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 612} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 614} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_bulk_out: ref;

axiom usb_endpoint_is_bulk_out == $sub.ref(0, 299695);

procedure usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 616} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 618} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_int_in: ref;

axiom usb_endpoint_is_int_in == $sub.ref(0, 300727);

procedure usb_endpoint_is_int_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_int_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i1 := usb_endpoint_xfer_int($p0);
    call {:si_unique_call 620} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 622} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_int_out: ref;

axiom usb_endpoint_is_int_out == $sub.ref(0, 301759);

procedure usb_endpoint_is_int_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_int_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i1 := usb_endpoint_xfer_int($p0);
    call {:si_unique_call 624} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 626} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 302791);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 628} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const tty_port_init: ref;

axiom tty_port_init == $sub.ref(0, 303823);

procedure tty_port_init($p0: ref);
  free requires assertsPassed;



implementation tty_port_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 304855);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 305887);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 306919);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 307951);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 308983);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 310015);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_port_work: ref;

axiom usb_serial_port_work == $sub.ref(0, 311047);

procedure usb_serial_port_work($p0: ref);
  free requires assertsPassed;



implementation usb_serial_port_work($p0: ref)
{
  var $p1: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1392), 2632)), $mul.ref(8, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} tty_port_tty_wakeup($p3);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_port_release: ref;

axiom usb_serial_port_release == $sub.ref(0, 312079);

procedure usb_serial_port_release($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_port_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.46);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.19);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.47);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 616);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 635} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1032, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} usb_free_urb($p22);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1064, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} usb_free_urb($p24);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} usb_free_urb($p27);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1112, 1)), $mul.ref(0, 8));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} kfree($p30);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1128, 1)), $mul.ref(1, 8));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} usb_free_urb($p54);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1112, 1)), $mul.ref(1, 8));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} kfree($p57);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} usb_free_urb($p33);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1200, 1)), $mul.ref(0, 8));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} kfree($p36);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} usb_free_urb($p48);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1200, 1)), $mul.ref(1, 8));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} kfree($p51);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} __kfifo_free($p39);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1024, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} kfree($p41);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(1048, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} kfree($p43);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1488), 2632)), $mul.ref(8, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} tty_port_destroy($p44);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p3);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} kfree($p45);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_66 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p0, .str.47, .str.46);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const device_initialize: ref;

axiom device_initialize == $sub.ref(0, 313111);

procedure device_initialize($p0: ref);
  free requires assertsPassed;



implementation device_initialize($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 314143);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 315175);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 653} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $p2 := external_alloc();
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 316207);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 656} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 317239);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(0, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.26, $p2);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 318271);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 660} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    return;
}



const __kfifo_alloc: ref;

axiom __kfifo_alloc == $sub.ref(0, 319303);

procedure __kfifo_alloc($p0: ref, $i1: i32, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_alloc($p0: ref, $i1: i32, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 661} {:cexpr "__kfifo_alloc:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 662} {:cexpr "__kfifo_alloc:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 663} {:cexpr "__kfifo_alloc:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 664} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 665} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kfifo_int_must_check_helper: ref;

axiom __kfifo_int_must_check_helper == $sub.ref(0, 320335);

procedure __kfifo_int_must_check_helper($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_int_must_check_helper($i0: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} {:cexpr "__kfifo_int_must_check_helper:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 321367);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 668} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 669} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i4);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p5);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 1744)), $mul.ref(28, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 1744)), $mul.ref(28, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i7);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $sub.i32(0, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32(1, $i20);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 322399);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} vslice_dummy_var_67 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    return;
}



const get_free_serial: ref;

axiom get_free_serial == $sub.ref(0, 323431);

procedure get_free_serial($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.37, $M.24, $M.0, $M.25, $CurrAddr, assertsPassed;



implementation get_free_serial($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i37: i32;
  var $i44: i32;
  var $i47: i32;
  var $i48: i1;
  var $i34: i32;
  var $i45: i32;
  var $i46: i32;
  var $i49: i1;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i24;
  var $i58: i24;
  var $i59: i24;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i80: i64;
  var $p81: ref;
  var $i82: i32;
  var $i83: i8;
  var $i84: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i78: i32;
  var $i79: i32;
  var $i31: i32;
  var $i96: i32;
  var $i97: i1;
  var $i25: i32;
  var $p95: ref;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 673} {:cexpr "get_free_serial:arg:num_ports"} boogie_si_record_i32($i1);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.48);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.19);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.49);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 127);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 675} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p2, 0);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} ldv_mutex_lock_10(table_lock);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb4;

  $bb4:
    call $i26, $p27, $p28, $i29, $i30, $i32, $i33, $i35, $i36, $i38, $i39, $p40, $p41, $i42, $i43, $i37, $i44, $i47, $i48, $i34, $i45, $i46, $i49, $i50, $i31, $i96, $i97, $i25 := get_free_serial_loop_$bb4($i1, $i26, $p27, $p28, $i29, $i30, $i32, $i33, $i35, $i36, $i38, $i39, $p40, $p41, $i42, $i43, $i37, $i44, $i47, $i48, $i34, $i45, $i46, $i49, $i50, $i31, $i96, $i97, $i25);
    goto $bb4_last;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref($i26, 8));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.24, $p27);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i33 := $uge.i32($i32, 1);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i25, 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i46, 0);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i50 := $i45;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p2, $i50);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p51, .str);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p52, .str.48);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p53, .str.19);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p54, .str.50);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i57 := $load.i24($M.5, $p56);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i58 := $and.i24($i57, $sub.i24(0, 262144));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i59 := $or.i24($i58, 147);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p56, $i59);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p60, 0);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.6, $p61);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i64($i62);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i63, 1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 682} {:cexpr "tmp___0"} boogie_si_record_i64($i65);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.37, $p2);
    call {:si_unique_call 684} {:cexpr "i"} boogie_si_record_i32($i72);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.37, $p2);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, $i1);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i75 := $ugt.i32($i74, $i72);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i76 := $ule.i32($i72, 253);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i77 := $and.i1($i75, $i76);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} ldv_mutex_unlock_11(table_lock);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p95 := $p0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $r := $p95;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i77 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i78, $i79 := 0, $i72;
    goto $bb34;

  $bb34:
    call $i80, $p81, $i82, $i83, $i84, $p86, $p87, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i78, $i79 := get_free_serial_loop_$bb34($p0, $i1, $p2, $i80, $p81, $i82, $i83, $i84, $p86, $p87, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i78, $i79);
    goto $bb34_last;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref($i80, 8));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p81, $p0);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i78, 1);
    call {:si_unique_call 685} {:cexpr "j"} boogie_si_record_i32($i82);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i79);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i84 := $zext.i32.i64($i78);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i84, 8));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 2632)), $mul.ref(1016, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, $i83);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i79, 1);
    call {:si_unique_call 686} {:cexpr "i"} boogie_si_record_i32($i89);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.37, $p2);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, $i1);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i92 := $ugt.i32($i91, $i89);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i93 := $ule.i32($i89, 253);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i94 := $and.i1($i92, $i93);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i94 == 1);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb36:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $i78, $i79 := $i82, $i89;
    goto $bb36_dummy;

  $bb28:
    assume $i66 == 1;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.37, $p2);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} vslice_dummy_var_69 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p69, .str.50, .str.48, $i70);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i49 == 1;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i31 := $i45;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i31, 1);
    call {:si_unique_call 678} {:cexpr "i"} boogie_si_record_i32($i96);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i97 := $ule.i32($i96, 253);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} ldv_mutex_unlock_12(table_lock);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p95 := $0.ref;
    goto $bb39;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i25 := $i96;
    goto $bb40_dummy;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i34 := 1;
    goto $bb13;

  $bb13:
    call $i35, $i36, $i38, $i39, $p40, $p41, $i42, $i43, $i37, $i47, $i48, $i34 := get_free_serial_loop_$bb13($i32, $i35, $i36, $i38, $i39, $p40, $p41, $i42, $i43, $i37, $i47, $i48, $i34, $i25);
    goto $bb13_last;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i25, $i34);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i36 := $ugt.i32($i35, 253);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i37 := $i34;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i36 == 1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i25, $i34);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref($i39, 8));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.24, $p40);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i37 := $i34;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i34, 1);
    call {:si_unique_call 680} {:cexpr "j"} boogie_si_record_i32($i47);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i48 := $uge.i32($i32, $i47);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i48 == 1);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb22:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i34 := $i47;
    goto $bb22_dummy;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i25, $i37);
    call {:si_unique_call 679} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i44, 0;
    goto $bb20;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb16;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i31 := $i25;
    goto $bb8;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_68 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p23, .str.49, .str.48, $i1);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  $bb22_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3632;

  $bb40_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3613;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 324463);

procedure dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 1} true;
    call {:si_unique_call 689} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 690} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 325495);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p9 := kobject_name($p8);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const device_enable_async_suspend: ref;

axiom device_enable_async_suspend == $sub.ref(0, 326527);

procedure device_enable_async_suspend($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation device_enable_async_suspend($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i8;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(5, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(4, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, $sub.i8(0, 3));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i9 := $or.i8($i8, 2);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i9);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const device_add: ref;

axiom device_add == $sub.ref(0, 327559);

procedure device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 692} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 693} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_serial_console_init: ref;

axiom usb_serial_console_init == $sub.ref(0, 328591);

procedure usb_serial_console_init($i0: i32);
  free requires assertsPassed;



implementation usb_serial_console_init($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} {:cexpr "usb_serial_console_init:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    return;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 329623);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_10: ref;

axiom ldv_mutex_lock_10 == $sub.ref(0, 330655);

procedure ldv_mutex_lock_10($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} ldv_mutex_lock_table_lock($p0);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} mutex_lock($p0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_11: ref;

axiom ldv_mutex_unlock_11 == $sub.ref(0, 331687);

procedure ldv_mutex_unlock_11($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} ldv_mutex_unlock_table_lock($p0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} mutex_unlock($p0);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_12: ref;

axiom ldv_mutex_unlock_12 == $sub.ref(0, 332719);

procedure ldv_mutex_unlock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} ldv_mutex_unlock_table_lock($p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} mutex_unlock($p0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 333751);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 701} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 702} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 334783);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 704} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p2 := ldv_malloc($i0);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 335815);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 706} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 707} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 708} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p3 := malloc($i0);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i4 := ldv_is_err($p3);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 711} __VERIFIER_assume($i7);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 336847);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 712} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 337879);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 338911);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    return;
}



const __kfifo_free: ref;

axiom __kfifo_free == $sub.ref(0, 339943);

procedure __kfifo_free($p0: ref);
  free requires assertsPassed;



implementation __kfifo_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_destroy: ref;

axiom tty_port_destroy == $sub.ref(0, 340975);

procedure tty_port_destroy($p0: ref);
  free requires assertsPassed;



implementation tty_port_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_tty_wakeup: ref;

axiom tty_port_tty_wakeup == $sub.ref(0, 342007);

procedure tty_port_tty_wakeup($p0: ref);
  free requires assertsPassed;



implementation tty_port_tty_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 343039);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 344071);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 345103);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 346135);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_match_id: ref;

axiom usb_match_id == $sub.ref(0, 347167);

procedure usb_match_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_match_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $p2 := external_alloc();
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const match_dynamic_id: ref;

axiom match_dynamic_id == $sub.ref(0, 348199);

procedure match_dynamic_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation match_dynamic_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p15: ref;
  var $p32: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} spin_lock($p3);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(72, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i10, $i13);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} spin_unlock($p32);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p23 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p15 := $p7;
    goto $bb4;

  $bb4:
    call $p16, $i17, $i18, $p19, $p25, $p26, $p27, $p28, $i29, $i30, $p15 := match_dynamic_id_loop_$bb4($p0, $i13, $p16, $i17, $i18, $p19, $p25, $p26, $p27, $p28, $i29, $i30, $p15);
    goto $bb4_last;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i17 := usb_match_one_id($p0, $p16);
    call {:si_unique_call 716} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p19 := $p15;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, $i13);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p26;
    goto $bb10_dummy;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} spin_unlock($p21);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3860;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 349231);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} _raw_spin_lock($p2);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    return;
}



const usb_match_one_id: ref;

axiom usb_match_one_id == $sub.ref(0, 350263);

procedure usb_match_one_id($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_match_one_id($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 720} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 721} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 351295);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} _raw_spin_unlock($p2);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 352327);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 353359);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    return;
}



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 354391);

procedure usb_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p1 := external_alloc();
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 355423);

procedure usb_get_intf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p1 := external_alloc();
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 356455);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} atomic_set($p1, 1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 357487);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 358519);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    return;
}



const show_dynids: ref;

axiom show_dynids == $sub.ref(0, 359551);

procedure show_dynids($p0: ref, $p1: ref) returns ($r: i64);



const store_new_id: ref;

axiom store_new_id == $sub.ref(0, 360583);

procedure store_new_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);



const usb_store_new_id: ref;

axiom usb_store_new_id == $sub.ref(0, 361615);

procedure usb_store_new_id($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const usb_show_dynids: ref;

axiom usb_show_dynids == $sub.ref(0, 362647);

procedure usb_show_dynids($p0: ref, $p1: ref) returns ($r: i64);



const show_port_number: ref;

axiom show_port_number == $sub.ref(0, 363679);

procedure show_port_number($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 364711);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 365743);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 1} true;
    call {:si_unique_call 727} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 728} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 366775);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 367807);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 368839);

procedure constant_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i32($i0);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i32($i0, 64);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref($i3, 8));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i0, 63);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i5, $i7);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const usb_serial_generic_write_start: ref;

axiom usb_serial_generic_write_start == $sub.ref(0, 369871);

procedure usb_serial_generic_write_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_generic_write_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $i11: i64;
  var $p18: ref;
  var $p19: ref;
  var $i12: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $i77: i1;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $i4: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1296, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i2 := test_and_set_bit_lock(0, $p1);
    call {:si_unique_call 734} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $p6 := spinlock_check($p5);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 737} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1232, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i12 := $i7;
    goto $bb8;

  $bb8:
    call $p13, $i14, $i15, $i16, $i17, $i12, $p21, $p22, $p23, $i24, $p25, $p26, $p27, $i28, $i29, $i30, $i31, $p34, $i35, $i36, $p37, $i38, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $p61, $i62, $i63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $p90, $p91, $i92, $i93, $i94, $i95 := usb_serial_generic_write_start_loop_$bb8($p0, $p5, $p8, $p13, $i14, $i15, $i16, $i17, $i12, $p21, $p22, $p23, $i24, $p25, $p26, $p27, $i28, $i29, $i30, $i31, $p34, $i35, $i36, $p37, $i38, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $p61, $i62, $i63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $p90, $p91, $i92, $i93, $i94, $i95);
    goto $bb8_last;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i24, $i28);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i31 := $i12;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1232, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i35 := find_first_bit($p34, 2);
    call {:si_unique_call 746} {:cexpr "tmp___1"} boogie_si_record_i64($i35);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    call {:si_unique_call 747} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} spin_unlock_irqrestore($p37, $i12);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i36);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref($i38, 8));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 536)), $mul.ref(528, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1160, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    call {:si_unique_call 749} $i53 := devirtbounce.22($p47, $p0, $p49, $i52);
    call {:si_unique_call 750} {:cexpr "count"} boogie_si_record_i32($i53);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} usb_serial_debug_data($p55, .str.109, $i53, $p57);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p59 := spinlock_check($p58);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i60 := _raw_spin_lock_irqsave($p59);
    call {:si_unique_call 754} {:cexpr "flags"} boogie_si_record_i64($i60);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1288, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, $i53);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1288, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} spin_unlock_irqrestore($p65, $i60);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1232, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} clear_bit($i36, $p66);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i67 := usb_submit_urb($p41, 32);
    call {:si_unique_call 758} {:cexpr "result"} boogie_si_record_i32($i67);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i69, $i70, $i71 := $i36, $i53, $i67;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p90 := current_thread_info();
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i94 := $and.i64($i93, 67043328);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i95 := $eq.i64($i94, 0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb25;

  $bb25:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1296, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} clear_bit_unlock(0, $p96);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb9:
    assume $i95 == 1;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p13 := spinlock_check($p5);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 742} {:cexpr "flags"} boogie_si_record_i64($i14);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p8);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i17 := $i14;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb11_dummy;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1296, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} clear_bit_unlock(0, $p18);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} spin_unlock_irqrestore($p19, $i11);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb16:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p0);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(576, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i76 == 1);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1(1);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} vslice_dummy_var_70 := dev_err.ref.ref.ref.i32($p78, .str.110, .str.109, $i71);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1232, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} set_bit($i69, $p80);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p82 := spinlock_check($p81);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i83 := _raw_spin_lock_irqsave($p82);
    call {:si_unique_call 763} {:cexpr "flags"} boogie_si_record_i64($i83);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1288, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i85, $i70);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1288, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} spin_unlock_irqrestore($p88, $i83);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1296, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} clear_bit_unlock(0, $p89);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i4 := $i71;
    goto $bb3;

  $bb21:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb19;

  $bb12:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1296, 1));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} clear_bit_unlock(0, $p32);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} spin_unlock_irqrestore($p33, $i31);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3965;
}



const test_and_set_bit_lock: ref;

axiom test_and_set_bit_lock == $sub.ref(0, 370903);

procedure test_and_set_bit_lock($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_set_bit_lock($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} {:cexpr "test_and_set_bit_lock:arg:nr"} boogie_si_record_i32($i0);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i2 := test_and_set_bit($i0, $p1);
    call {:si_unique_call 770} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const clear_bit_unlock: ref;

axiom clear_bit_unlock == $sub.ref(0, 371935);

procedure clear_bit_unlock($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation clear_bit_unlock($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} {:cexpr "clear_bit_unlock:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 772} devirtbounce.23(0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} clear_bit($i0, $p1);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    return;
}



const find_first_bit: ref;

axiom find_first_bit == $sub.ref(0, 372967);

procedure find_first_bit($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_first_bit($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 774} {:cexpr "find_first_bit:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 776} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_serial_debug_data: ref;

axiom usb_serial_debug_data == $sub.ref(0, 373999);

procedure usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 778} {:cexpr "usb_serial_debug_data:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.114);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.115);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.116);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 365);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 780} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_71 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p4, $p0, .str.116, $p1, $i2, $i2, $p3);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 375031);

procedure clear_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 783} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 376063);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i0 := devirtbounce.24(0, kernel_stack);
    call {:si_unique_call 785} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 8152);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 377095);

procedure test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 787} $i2 := devirtbounce(0, $p1, $i0, $p1);
    call {:si_unique_call 788} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_serial_port_softint: ref;

axiom usb_serial_port_softint == $sub.ref(0, 378127);

procedure usb_serial_port_softint($p0: ref);
  free requires assertsPassed;



implementation usb_serial_port_softint($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_72: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1392, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} vslice_dummy_var_72 := schedule_work($p1);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 379159);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i2 := queue_work($p1, $p0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 791} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 380191);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i2 := queue_work_on(4096, $p0, $p1);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 793} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 381223);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 794} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 1} true;
    call {:si_unique_call 795} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 796} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_register_drivers: ref;

axiom usb_serial_register_drivers == $sub.ref(0, 382255);

procedure usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.25, assertsPassed, $CurrAddr;



implementation usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i8;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p24: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p40: ref;
  var $p52: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p60: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $p3 := kzalloc(304, 208);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(296, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i11 := $and.i8($i10, $sub.i8(0, 2));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i12 := $or.i8($i11, 1);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i12);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(296, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, $sub.i8(0, 3));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i16 := $or.i8($i15, 2);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i16);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, usb_serial_suspend);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, usb_serial_resume);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, usb_serial_probe);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, usb_serial_disconnect);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.41, $p0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i35 := usb_register_driver($p4, __this_module, .str);
    call {:si_unique_call 799} {:cexpr "rc"} boogie_si_record_i32($i35);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.41, $p0);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(72, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p2);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i55 := driver_attach($p54);
    call {:si_unique_call 803} {:cexpr "rc"} boogie_si_record_i32($i55);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p40 := $p0;
    goto $bb23;

  $bb23:
    call $p41, $p42, $p43, $i44, $i45, $p46, $i47, $p48, $p49, $i50, $i51, $p40 := usb_serial_register_drivers_loop_$bb23($p3, $p41, $p42, $p43, $i44, $i45, $p46, $i47, $p48, $p49, $i50, $i51, $p40);
    goto $bb23_last;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.41, $p40);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 536)), $mul.ref(160, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p3);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.41, $p40);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i44 := usb_serial_register($p43);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    call {:si_unique_call 801} {:cexpr "rc"} boogie_si_record_i32($i44);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p46, $i47 := $p40, $i44;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p40, $mul.ref(1, 8));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.41, $p48);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i51 == 1);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $p40 := $p48;
    goto $bb29_dummy;

  $bb25:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p46, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p46);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p0);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i64($i57, $i58);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} usb_deregister($p4);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i7 := $i47;
    goto $bb3;

  $bb32:
    assume $i59 == 1;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p60 := $p56;
    goto $bb35;

  $bb35:
    call $p61, $p62, $i63, $i64, $p60 := usb_serial_register_drivers_loop_$bb35($i58, $p61, $p62, $i63, $i64, $p60);
    goto $bb35_last;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.41, $p60);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} usb_serial_deregister($p61);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p60, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p60);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i64($i63, $i58);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i64 == 1);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb37:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $p60 := $p62;
    goto $bb37_dummy;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i7 := $i35;
    goto $bb3;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p24 := $p0;
    goto $bb8;

  $bb8:
    call $p25, $p26, $p27, $i28, $i29, $p31, $p32, $i33, $i34, $p24 := usb_serial_register_drivers_loop_$bb8($p25, $p26, $p27, $i28, $i29, $p31, $p32, $i33, $i34, $p24);
    goto $bb8_last;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.41, $p24);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 536)), $mul.ref(344, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p24, $mul.ref(1, 8));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.41, $p31);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p24 := $p31;
    goto $bb14_dummy;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, usb_serial_reset_resume);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb37_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4227;

  $bb29_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4197;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4167;
}



const usb_serial_reset_resume: ref;

axiom usb_serial_reset_resume == $sub.ref(0, 383287);

procedure usb_serial_reset_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $CurrAddr, assertsPassed;



implementation usb_serial_reset_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $i21: i8;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} usb_serial_unpoison_port_urbs($p2);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, $sub.i8(0, 3));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $i5);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(344, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.42, $p8);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(40, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, $sub.i8(0, 33));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i21 := $or.i8($i20, 32);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i21);
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 95);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 536)), $mul.ref(344, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.42, $p14);
    call {:si_unique_call 808} $i16 := devirtbounce.20($p15, $p2);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 809} {:cexpr "rv"} boogie_si_record_i32($i16);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 384319);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 1} true;
    call {:si_unique_call 810} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 811} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_register: ref;

axiom usb_serial_register == $sub.ref(0, 385351);

procedure usb_serial_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.25, assertsPassed, $CurrAddr;



implementation usb_serial_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i3: i32;
  var vslice_dummy_var_73: i64;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i1 := usb_disabled();
    call {:si_unique_call 813} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(160, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} usb_serial_operations_init($p0);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} ldv_mutex_lock_32(table_lock);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} list_add($p27, usb_serial_driver_list);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i28 := usb_serial_bus_register($p0);
    call {:si_unique_call 822} {:cexpr "retval"} boogie_si_record_i32($i28);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_75 := printk.ref.ref(.str.54, $p35);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} ldv_mutex_unlock_33(table_lock);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i3 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_74 := printk.ref.i32.ref(.str.53, $i28, $p31);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} list_del($p33);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32(1, 0);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 815} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} vslice_dummy_var_73 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} warn_slowpath_fmt.ref.i32.ref.ref(.str.19, 1376, .str.52, $p22);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p10);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 19);
    goto $bb3;
}



const driver_attach: ref;

axiom driver_attach == $sub.ref(0, 386383);

procedure driver_attach($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_attach($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 1} true;
    call {:si_unique_call 827} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 828} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_serial_deregister: ref;

axiom usb_serial_deregister == $sub.ref(0, 387415);

procedure usb_serial_deregister($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation usb_serial_deregister($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_76 := printk.ref.ref(.str.74, $p2);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} ldv_mutex_lock_34(table_lock);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} list_del($p4);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} usb_serial_bus_deregister($p0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} ldv_mutex_unlock_35(table_lock);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 388447);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 389479);

procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 834} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 835} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 838} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 839} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_34: ref;

axiom ldv_mutex_lock_34 == $sub.ref(0, 390511);

procedure ldv_mutex_lock_34($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ldv_mutex_lock_table_lock($p0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} mutex_lock($p0);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 391543);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_bus_deregister: ref;

axiom usb_serial_bus_deregister == $sub.ref(0, 392575);

procedure usb_serial_bus_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_serial_bus_deregister($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} free_dynids($p0);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} driver_unregister($p1);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_35: ref;

axiom ldv_mutex_unlock_35 == $sub.ref(0, 393607);

procedure ldv_mutex_unlock_35($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_35($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} ldv_mutex_unlock_table_lock($p0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} mutex_unlock($p0);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const free_dynids: ref;

axiom free_dynids == $sub.ref(0, 394639);

procedure free_dynids($p0: ref);
  free requires assertsPassed;



implementation free_dynids($p0: ref)
{
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p18: ref;
  var $p19: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} spin_lock($p2);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(72, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i13, $i16);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} spin_unlock($p30);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p18, $p19 := $p10, $p6;
    goto $bb4;

  $bb4:
    call $p20, $p21, $p23, $p24, $p26, $i27, $i28, $p18, $p19 := free_dynids_loop_$bb4($i16, $p20, $p21, $p23, $p24, $p26, $i27, $i28, $p18, $p19);
    goto $bb4_last;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} list_del($p20);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p19);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} kfree($p21);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i16);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p18, $p19 := $p24, $p18;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4388;
}



const driver_unregister: ref;

axiom driver_unregister == $sub.ref(0, 395671);

procedure driver_unregister($p0: ref);
  free requires assertsPassed;



implementation driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    return;
}



const usb_disabled: ref;

axiom usb_disabled == $sub.ref(0, 396703);

procedure usb_disabled() returns ($r: i32);
  free requires assertsPassed;



implementation usb_disabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 850} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 851} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 397735);

procedure warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_operations_init: ref;

axiom usb_serial_operations_init == $sub.ref(0, 398767);

procedure usb_serial_operations_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $CurrAddr;



implementation usb_serial_operations_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i24;
  var $i97: i24;
  var $i98: i24;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i24;
  var $i122: i24;
  var $i123: i24;
  var $p124: ref;
  var $p125: ref;
  var $i126: i8;
  var $i127: i64;
  var $i128: i64;
  var $i129: i64;
  var $i130: i1;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i24;
  var $i147: i24;
  var $i148: i24;
  var $p149: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i64;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $p157: ref;
  var $p158: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i24;
  var $i172: i24;
  var $i173: i24;
  var $p174: ref;
  var $p175: ref;
  var $i176: i8;
  var $i177: i64;
  var $i178: i64;
  var $i179: i64;
  var $i180: i1;
  var $p182: ref;
  var $p183: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i24;
  var $i197: i24;
  var $i198: i24;
  var $p199: ref;
  var $p200: ref;
  var $i201: i8;
  var $i202: i64;
  var $i203: i64;
  var $i204: i64;
  var $i205: i1;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i24;
  var $i222: i24;
  var $i223: i24;
  var $p224: ref;
  var $p225: ref;
  var $i226: i8;
  var $i227: i64;
  var $i228: i64;
  var $i229: i64;
  var $i230: i1;
  var $p232: ref;
  var $p233: ref;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(352, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(368, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(360, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(376, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(408, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p111);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i113 := $eq.i64($i112, 0);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(504, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i138 := $eq.i64($i137, 0);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(512, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p161);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i163 := $eq.i64($i162, 0);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(520, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i188 := $eq.i64($i187, 0);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(528, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p211);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i213 := $eq.i64($i212, 0);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    return;

  $bb49:
    assume $i213 == 1;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(528, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p214, usb_serial_generic_prepare_write_buffer);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p215, .str);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p216, .str.55);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p217, .str.19);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p218, .str.72);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p219);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i221 := $load.i24($M.47, $p220);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i222 := $and.i24($i221, $sub.i24(0, 262144));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i223 := $or.i24($i222, 1362);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.47 := $store.i24($M.47, $p220, $i223);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $p224, 0);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i226 := $load.i8($M.48, $p225);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i64($i226);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i228 := $and.i64($i227, 1);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i229 := ldv__builtin_expect($i228, 0);
    call {:si_unique_call 887} {:cexpr "tmp___7"} boogie_si_record_i64($i229);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i230 := $ne.i64($i229, 0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i230 == 1;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_85 := __dynamic_pr_debug.ref.ref.ref($p9, .str.73, $p233);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb43:
    assume $i188 == 1;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(520, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p189, usb_serial_generic_process_read_urb);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p190, .str);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p191, .str.55);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p192, .str.19);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p193, .str.70);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i196 := $load.i24($M.47, $p195);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i197 := $and.i24($i196, $sub.i24(0, 262144));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i198 := $or.i24($i197, 1361);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $M.47 := $store.i24($M.47, $p195, $i198);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $p199, 0);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.48, $p200);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i64($i201);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i203 := $and.i64($i202, 1);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i204 := ldv__builtin_expect($i203, 0);
    call {:si_unique_call 884} {:cexpr "tmp___6"} boogie_si_record_i64($i204);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i205 := $ne.i64($i204, 0);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i205 == 1;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_84 := __dynamic_pr_debug.ref.ref.ref($p8, .str.71, $p208);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb37:
    assume $i163 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(512, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p164, usb_serial_generic_write_bulk_callback);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p165, .str);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p166, .str.55);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p167, .str.19);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p168, .str.68);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i171 := $load.i24($M.47, $p170);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i172 := $and.i24($i171, $sub.i24(0, 262144));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i173 := $or.i24($i172, 1360);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.47 := $store.i24($M.47, $p170, $i173);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $p174, 0);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i176 := $load.i8($M.48, $p175);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i64($i176);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i178 := $and.i64($i177, 1);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i179 := ldv__builtin_expect($i178, 0);
    call {:si_unique_call 881} {:cexpr "tmp___5"} boogie_si_record_i64($i179);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i180 := $ne.i64($i179, 0);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i180 == 1;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} vslice_dummy_var_83 := __dynamic_pr_debug.ref.ref.ref($p7, .str.69, $p183);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb31:
    assume $i138 == 1;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(504, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, usb_serial_generic_read_bulk_callback);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p140, .str);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p141, .str.55);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p142, .str.19);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p143, .str.66);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i146 := $load.i24($M.47, $p145);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i147 := $and.i24($i146, $sub.i24(0, 262144));
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i148 := $or.i24($i147, 1359);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.47 := $store.i24($M.47, $p145, $i148);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $p149, 0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.48, $p150);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i64($i151);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i153 := $and.i64($i152, 1);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i154 := ldv__builtin_expect($i153, 0);
    call {:si_unique_call 878} {:cexpr "tmp___4"} boogie_si_record_i64($i154);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i155 == 1;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} vslice_dummy_var_82 := __dynamic_pr_debug.ref.ref.ref($p6, .str.67, $p158);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb25:
    assume $i113 == 1;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(408, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p114, usb_serial_generic_chars_in_buffer);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p115, .str);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p116, .str.55);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p117, .str.19);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p118, .str.64);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i121 := $load.i24($M.47, $p120);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i122 := $and.i24($i121, $sub.i24(0, 262144));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i123 := $or.i24($i122, 1358);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $M.47 := $store.i24($M.47, $p120, $i123);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $p124, 0);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.48, $p125);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i64($i126);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i128 := $and.i64($i127, 1);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $i129 := ldv__builtin_expect($i128, 0);
    call {:si_unique_call 875} {:cexpr "tmp___3"} boogie_si_record_i64($i129);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i129, 0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i130 == 1;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} vslice_dummy_var_81 := __dynamic_pr_debug.ref.ref.ref($p5, .str.65, $p133);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb19:
    assume $i88 == 1;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(376, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, usb_serial_generic_write_room);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p90, .str);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p91, .str.55);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p92, .str.19);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p93, .str.62);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i96 := $load.i24($M.47, $p95);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i97 := $and.i24($i96, $sub.i24(0, 262144));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i98 := $or.i24($i97, 1357);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.47 := $store.i24($M.47, $p95, $i98);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $p99, 0);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.48, $p100);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i64($i101);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i103 := $and.i64($i102, 1);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 872} {:cexpr "tmp___2"} boogie_si_record_i64($i104);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i105 == 1;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_80 := __dynamic_pr_debug.ref.ref.ref($p4, .str.63, $p108);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i63 == 1;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(360, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, usb_serial_generic_close);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p65, .str);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p66, .str.55);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p67, .str.19);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p68, .str.60);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.47, $p70);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 1356);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $M.47 := $store.i24($M.47, $p70, $i73);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $p74, 0);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.48, $p75);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 869} {:cexpr "tmp___1"} boogie_si_record_i64($i79);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i80 == 1;
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} vslice_dummy_var_79 := __dynamic_pr_debug.ref.ref.ref($p3, .str.61, $p83);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(368, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, usb_serial_generic_write);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p40, .str);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p41, .str.55);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p42, .str.19);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p43, .str.58);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.47, $p45);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 1355);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $M.47 := $store.i24($M.47, $p45, $i48);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $p49, 0);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.48, $p50);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 866} {:cexpr "tmp___0"} boogie_si_record_i64($i54);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i55 == 1;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} vslice_dummy_var_78 := __dynamic_pr_debug.ref.ref.ref($p2, .str.59, $p58);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(352, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, usb_serial_generic_open);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p15, .str);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p16, .str.55);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p17, .str.19);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p18, .str.56);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.47, $p20);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 1354);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $M.47 := $store.i24($M.47, $p20, $i23);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $p24, 0);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.48, $p25);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 863} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i30 == 1;
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} vslice_dummy_var_77 := __dynamic_pr_debug.ref.ref.ref($p1, .str.57, $p33);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_mutex_lock_32: ref;

axiom ldv_mutex_lock_32 == $sub.ref(0, 399799);

procedure ldv_mutex_lock_32($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} ldv_mutex_lock_table_lock($p0);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} mutex_lock($p0);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 400831);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} __list_add($p0, $p1, $p3);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_bus_register: ref;

axiom usb_serial_bus_register == $sub.ref(0, 401863);

procedure usb_serial_bus_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_serial_bus_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var vslice_dummy_var_86: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, usb_serial_bus_type);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} vslice_dummy_var_86 := spinlock_check($p5);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} __raw_spin_lock_init($p10, .str.14, $p1);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(72, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} INIT_LIST_HEAD($p12);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i14 := driver_register($p13);
    call {:si_unique_call 897} {:cexpr "retval"} boogie_si_record_i32($i14);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const ldv_mutex_unlock_33: ref;

axiom ldv_mutex_unlock_33 == $sub.ref(0, 402895);

procedure ldv_mutex_unlock_33($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ldv_mutex_unlock_table_lock($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} mutex_unlock($p0);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const driver_register: ref;

axiom driver_register == $sub.ref(0, 403927);

procedure driver_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 900} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 901} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 404959);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_open: ref;

axiom usb_serial_generic_open == $sub.ref(0, 405991);

procedure usb_serial_generic_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_generic_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p3 := spinlock_check($p2);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 904} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 2632)), $mul.ref(1472, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 2632)), $mul.ref(1473, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} spin_unlock_irqrestore($p7, $i4);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 2632)), $mul.ref(1088, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i11 := usb_serial_generic_submit_read_urbs($p1, 208);
    call {:si_unique_call 907} {:cexpr "result"} boogie_si_record_i32($i11);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 407023);

procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 1} true;
    call {:si_unique_call 908} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 909} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_serial_generic_write: ref;

axiom usb_serial_generic_write == $sub.ref(0, 408055);

procedure usb_serial_generic_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_generic_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i20: i32;
  var $i21: i32;
  var $i19: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} {:cexpr "usb_serial_generic_write:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2632)), $mul.ref(1160, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p10 := spinlock_check($p9);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i11 := _raw_spin_lock_irqsave($p10);
    call {:si_unique_call 913} {:cexpr "__flags"} boogie_si_record_i64($i11);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i3);
    call {:si_unique_call 914} {:cexpr "__n"} boogie_si_record_i64($i13);
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64(0, 0);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i13);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i21 := __kfifo_in($p15, $p2, $i20);
    call {:si_unique_call 918} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    assume {:verifier.code 0} true;
    $i19 := $i21;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} spin_unlock_irqrestore($p22, $i11);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i23 := usb_serial_generic_write_start($p1);
    call {:si_unique_call 921} {:cexpr "result"} boogie_si_record_i32($i23);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i7 := $i23;
    goto $bb3;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i13);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i18 := __kfifo_in_r($p15, $p2, $i17, 0);
    call {:si_unique_call 916} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const usb_serial_generic_close: ref;

axiom usb_serial_generic_close == $sub.ref(0, 409087);

procedure usb_serial_generic_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_serial_generic_close($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1160, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1088, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} usb_kill_urb($p24);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(1, 8));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} usb_kill_urb($p27);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} usb_kill_urb($p6);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} usb_kill_urb($p30);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p8 := spinlock_check($p7);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 926} {:cexpr "flags"} boogie_si_record_i64($i9);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i14);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} spin_unlock_irqrestore($p18, $i9);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const usb_serial_generic_write_room: ref;

axiom usb_serial_generic_write_room == $sub.ref(0, 410119);

procedure usb_serial_generic_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_generic_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i24;
  var $i45: i24;
  var $i46: i24;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i8: i32;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1160, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p10 := spinlock_check($p9);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i11 := _raw_spin_lock_irqsave($p10);
    call {:si_unique_call 933} {:cexpr "flags"} boogie_si_record_i64($i11);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i20, $i24);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i16, $i25);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    call {:si_unique_call 934} {:cexpr "__avail"} boogie_si_record_i32($i27);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64(0, 0);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i27;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i36 := __kfifo_uint_must_check_helper($i35);
    call {:si_unique_call 938} {:cexpr "tmp___3"} boogie_si_record_i32($i36);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} spin_unlock_irqrestore($p37, $i11);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, .str);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p39, .str.3);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p40, .str.4);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p41, .str.5);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i44 := $load.i24($M.5, $p43);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i45 := $and.i24($i44, $sub.i24(0, 262144));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i46 := $or.i24($i45, 274);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p43, $i46);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p47, 0);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.6, $p48);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 941} {:cexpr "tmp___4"} boogie_si_record_i64($i52);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i8 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_87 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p54, .str.5, .str.3, $i36);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i27);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i64($i29, 0);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb10;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32(0);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i27, $i31);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i33 := __kfifo_max_r($i32, 0);
    call {:si_unique_call 936} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const usb_serial_generic_chars_in_buffer: ref;

axiom usb_serial_generic_chars_in_buffer == $sub.ref(0, 411151);

procedure usb_serial_generic_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_generic_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i8: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1288, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1160, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p10 := spinlock_check($p9);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i11 := _raw_spin_lock_irqsave($p10);
    call {:si_unique_call 946} {:cexpr "flags"} boogie_si_record_i64($i11);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i16, $i20);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1288, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i21, $i23);
    call {:si_unique_call 947} {:cexpr "chars"} boogie_si_record_i32($i24);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} spin_unlock_irqrestore($p25, $i11);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, .str);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p27, .str.6);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p28, .str.4);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p29, .str.5);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.5, $p31);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 291);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p31, $i34);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p35, 0);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.6, $p36);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 950} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i41 == 1;
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_88 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p42, .str.5, .str.6, $i24);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const usb_serial_generic_read_bulk_callback: ref;

axiom usb_serial_generic_read_bulk_callback == $sub.ref(0, 412183);

procedure usb_serial_generic_read_bulk_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.8, $M.24, $M.49, $M.50, assertsPassed, $M.25;



implementation usb_serial_generic_read_bulk_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i8;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i14 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(1, 8));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p0);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i85, $i86);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i14 := 1;
    assume {:branchcond $i87} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := 2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(1144, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} set_bit($i15, $p16);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.7);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.4);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.8);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 379);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 956} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} usb_serial_debug_data($p60, .str.7, $i62, $p7);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 536)), $mul.ref(520, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    call {:si_unique_call 962} devirtbounce.25($p68, $p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $p70 := spinlock_check($p69);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i71 := _raw_spin_lock_irqsave($p70);
    call {:si_unique_call 965} {:cexpr "flags"} boogie_si_record_i64($i71);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(1473, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(1472, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i73);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(1472, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i77 := $sext.i8.i32($i76);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i78 == 1);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} spin_unlock_irqrestore($p81, $i71);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i78 == 1;
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} spin_unlock_irqrestore($p79, $i71);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} vslice_dummy_var_91 := usb_serial_generic_submit_read_urb($p5, $i15, 32);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, .str);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p41, .str.7);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p42, .str.4);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p43, .str.9);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.5, $p45);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 383);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p45, $i48);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p49, 0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.6, $p50);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 959} {:cexpr "tmp___0"} boogie_si_record_i64($i54);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i55 == 1;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_90 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p56, .str.9, .str.7, $i58);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} vslice_dummy_var_89 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p1, $p33, .str.8, .str.7, $i15, $i35);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb6;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;
}



const usb_serial_generic_write_bulk_callback: ref;

axiom usb_serial_generic_write_bulk_callback == $sub.ref(0, 413215);

procedure usb_serial_generic_write_bulk_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_generic_write_bulk_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 970} {:cexpr "status"} boogie_si_record_i32($i6);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i10, $i11);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p0);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i61, $i62);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i13 := 1;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := 2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $p16 := spinlock_check($p15);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i17 := _raw_spin_lock_irqsave($p16);
    call {:si_unique_call 973} {:cexpr "flags"} boogie_si_record_i64($i17);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1288, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i19, $i21);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1288, 1));
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1232, 1));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} set_bit($i14, $p24);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} spin_unlock_irqrestore($p25, $i17);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i6, 0);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} vslice_dummy_var_92 := usb_serial_generic_write_start($p4);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} usb_serial_port_softint($p4);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, .str);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, .str.10);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.4);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.9);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.5, $p32);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 419);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p32, $i35);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p36, 0);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 977} {:cexpr "tmp___0"} boogie_si_record_i64($i41);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $p46 := spinlock_check($p45);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i47 := _raw_spin_lock_irqsave($p46);
    call {:si_unique_call 982} {:cexpr "flags"} boogie_si_record_i64($i47);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    $p53 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i52);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} spin_unlock_irqrestore($p56, $i47);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} vslice_dummy_var_93 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p43, .str.9, .str.10, $i6);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb4;
}



const usb_serial_generic_process_read_urb: ref;

axiom usb_serial_generic_process_read_urb == $sub.ref(0, 414247);

procedure usb_serial_generic_process_read_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $CurrAddr;



implementation usb_serial_generic_process_read_urb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i25: i32;
  var $p26: ref;
  var $p40: ref;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(576, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(1480, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i24 := $ult.i32(0, $i23);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} tty_flip_buffer_push($p40);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i25, $p26 := 0, $p5;
    goto $bb14;

  $bb14:
    call $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i36, $p37, $i38, $i39, $i25, $p26, vslice_dummy_var_95 := usb_serial_generic_process_read_urb_loop_$bb14($p3, $p22, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i36, $p37, $i38, $i39, $i25, $p26, vslice_dummy_var_95);
    goto $bb14_last;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i29 := usb_serial_handle_sysrq_char($p3, $i28);
    call {:si_unique_call 988} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i25, 1);
    call {:si_unique_call 990} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p26, $mul.ref(1, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p22);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i39 := $ult.i32($i36, $i38);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i25, $p26 := $i36, $p37;
    goto $bb19_dummy;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p26);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} vslice_dummy_var_95 := tty_insert_flip_char($p31, $i34, 0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} vslice_dummy_var_94 := tty_insert_flip_string($p17, $p5, $i20);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5233;
}



const usb_serial_generic_prepare_write_buffer: ref;

axiom usb_serial_generic_prepare_write_buffer == $sub.ref(0, 415279);

procedure usb_serial_generic_prepare_write_buffer($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_generic_prepare_write_buffer($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i13: i32;
  var $i14: i32;
  var $i12: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} {:cexpr "usb_serial_generic_prepare_write_buffer:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p4 := spinlock_check($p3);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 994} {:cexpr "__flags"} boogie_si_record_i64($i5);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} {:cexpr "usb_serial_generic_prepare_write_buffer:arg:__n"} boogie_si_record_i64($i2);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64(0, 0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i2);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i14 := __kfifo_out($p8, $p1, $i13);
    call {:si_unique_call 999} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i15 := __kfifo_uint_must_check_helper($i12);
    call {:si_unique_call 1001} {:cexpr "__ret"} boogie_si_record_i32($i15);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} spin_unlock_irqrestore($p16, $i5);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i17 := __kfifo_uint_must_check_helper($i15);
    call {:si_unique_call 1004} {:cexpr "tmp___3"} boogie_si_record_i32($i17);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $i11 := __kfifo_out_r($p8, $p1, $i10, 0);
    call {:si_unique_call 997} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const __kfifo_out_r: ref;

axiom __kfifo_out_r == $sub.ref(0, 416311);

procedure __kfifo_out_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_out_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1005} {:cexpr "__kfifo_out_r:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1006} {:cexpr "__kfifo_out_r:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1007} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1008} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kfifo_out: ref;

axiom __kfifo_out == $sub.ref(0, 417343);

procedure __kfifo_out($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_out($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1009} {:cexpr "__kfifo_out:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1011} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __kfifo_uint_must_check_helper: ref;

axiom __kfifo_uint_must_check_helper == $sub.ref(0, 418375);

procedure __kfifo_uint_must_check_helper($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_uint_must_check_helper($i0: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} {:cexpr "__kfifo_uint_must_check_helper:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const tty_insert_flip_string: ref;

axiom tty_insert_flip_string == $sub.ref(0, 419407);

procedure tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} {:cexpr "tty_insert_flip_string:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i3 := tty_insert_flip_string_fixed_flag($p0, $p1, 0, $i2);
    call {:si_unique_call 1015} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_handle_sysrq_char: ref;

axiom usb_serial_handle_sysrq_char == $sub.ref(0, 420439);

procedure usb_serial_handle_sysrq_char($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_serial_handle_sysrq_char($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} {:cexpr "usb_serial_handle_sysrq_char:arg:ch"} boogie_si_record_i32($i1);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1480, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(576, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i1, 0);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1480, 1));
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, 0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, jiffies);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1480, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i11, $i13);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i15 := $slt.i64($i14, 0);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} handle_sysrq($i1);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2632)), $mul.ref(1480, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, 0);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb11;
}



const tty_insert_flip_char: ref;

axiom tty_insert_flip_char == $sub.ref(0, 421471);

procedure tty_insert_flip_char($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $M.50, $M.0, $CurrAddr;



implementation tty_insert_flip_char($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i34: i32;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p3, $i1);
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p4, $i2);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 936)), $mul.ref(0, 1)), $mul.ref(160, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i34 := tty_insert_flip_string_flags($p0, $p3, $p4, 1);
    call {:si_unique_call 1022} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i33 := $i34;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i11, $i13);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.50, $p4);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p17, $mul.ref($i20, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i15);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 1020} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.49, $p3);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i23);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p30, $mul.ref($i31, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i28);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i33 := 1;
    goto $bb6;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 422503);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    return;
}



const tty_insert_flip_string_flags: ref;

axiom tty_insert_flip_string_flags == $sub.ref(0, 423535);

procedure tty_insert_flip_string_flags($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_flags($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1023} {:cexpr "tty_insert_flip_string_flags:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1024} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1025} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const handle_sysrq: ref;

axiom handle_sysrq == $sub.ref(0, 424567);

procedure handle_sysrq($i0: i32);
  free requires assertsPassed;



implementation handle_sysrq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} {:cexpr "handle_sysrq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    return;
}



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 425599);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1027} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 1028} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1029} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1030} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kfifo_max_r: ref;

axiom __kfifo_max_r == $sub.ref(0, 426631);

procedure __kfifo_max_r($i0: i32, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_max_r($i0: i32, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1031} {:cexpr "__kfifo_max_r:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1032} {:cexpr "__kfifo_max_r:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1033} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1034} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __kfifo_in_r: ref;

axiom __kfifo_in_r == $sub.ref(0, 427663);

procedure __kfifo_in_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_in_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1035} {:cexpr "__kfifo_in_r:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1036} {:cexpr "__kfifo_in_r:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1037} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1038} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kfifo_in: ref;

axiom __kfifo_in == $sub.ref(0, 428695);

procedure __kfifo_in($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_in($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1039} {:cexpr "__kfifo_in:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1040} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1041} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_deregister_drivers: ref;

axiom usb_serial_deregister_drivers == $sub.ref(0, 429727);

procedure usb_serial_deregister_drivers($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation usb_serial_deregister_drivers($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p7: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.41, $p0);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(160, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.41, $p0);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} usb_deregister($p3);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} kfree($p13);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p7 := $p0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $p10, $i11, $i12, $p7 := usb_serial_deregister_drivers_loop_$bb4($p8, $p9, $p10, $i11, $i12, $p7);
    goto $bb4_last;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.41, $p7);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} usb_serial_deregister($p8);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref(1, 8));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.41, $p9);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb6_dummy;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5387;
}



const main: ref;

axiom main == $sub.ref(0, 430759);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.27, $M.28, $M.29, $M.30, $M.39, $M.57, $M.41, $M.56, $M.55, $M.25, $M.54, $M.53, $M.8, $M.24, $M.7, $M.119, $M.120, $M.121, $CurrAddr, $M.37, assertsPassed, $M.49, $M.50, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;

  $bb0:
    call {:si_unique_call 1045} $initialize();
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} ldv_initialize();
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} ldv_handler_precall();
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i1 := usb_serial_init();
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    call {:si_unique_call 1052} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3, $i4, $i5 := 0, 0, 0;
    goto $bb5;

  $bb5:
    call $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i67, $i68, $i69, $i71, $i72, $i73, $i74, $i37, $i38, $i39, $i3, $i4, $i5, $i75, $i76, $i77, $i78, $i79, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108 := main_loop_$bb5($p0, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i67, $i68, $i69, $i71, $i72, $i73, $i74, $i37, $i38, $i39, $i3, $i4, $i5, $i75, $i76, $i77, $i78, $i79, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108);
    goto $bb5_last;

  corral_source_split_5414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1054} $i75 := __VERIFIER_nondet_int();
    call {:si_unique_call 1055} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i75);
    call {:si_unique_call 1056} {:cexpr "tmp___1"} boogie_si_record_i32($i75);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb96;

  $bb96:
    assume !($i76 == 1);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i3, 0);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i77 == 1);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i4, 0);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i78 == 1);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i5, 0);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} ldv_handler_precall();
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} usb_serial_exit();
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} ldv_check_final_state();
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1057} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1058} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 1059} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i6, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i6, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i3, $i4, $i5 := $i37, $i38, $i39;
    goto corral_source_split_5524_dummy;

  $bb18:
    assume $i12 == 1;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i5, 3);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i5;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i74;
    goto $bb68;

  $bb90:
    assume $i73 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_handler_precall();
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} usb_serial_disconnect($u10);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb92;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i5, 2);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i72 := $i5;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i72;
    goto $bb68;

  $bb87:
    assume $i69 == 1;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_handler_precall();
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} vslice_dummy_var_108 := usb_serial_resume($u10);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i5, 1);
    call {:si_unique_call 1119} {:cexpr "ldv_s_usb_serial_driver_usb_driver"} boogie_si_record_i32($i71);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb89;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i13 == 1);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i5, 1);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i68 := $i5;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i68;
    goto $bb68;

  $bb84:
    assume $i63 == 1;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv_handler_precall();
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.52, $p64);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} vslice_dummy_var_107 := usb_serial_suspend($u10, $i65);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i5, 1);
    call {:si_unique_call 1116} {:cexpr "ldv_s_usb_serial_driver_usb_driver"} boogie_si_record_i32($i67);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb86;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i13 == 1;
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i5, 0);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i62 := $i5;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i62;
    goto $bb68;

  $bb78:
    assume $i58 == 1;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i59 := usb_serial_probe($u10, $u11);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 1110} {:cexpr "res_usb_serial_probe_36"} boogie_si_record_i32($i59);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} ldv_check_return_value($i59);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} ldv_check_return_value_probe($i59);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i5, 1);
    call {:si_unique_call 1113} {:cexpr "ldv_s_usb_serial_driver_usb_driver"} boogie_si_record_i32($i61);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i62 := $i61;
    goto $bb83;

  $bb80:
    assume $i60 == 1;
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i6, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i6, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i15 == 1);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} ldv_handler_precall();
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} vslice_dummy_var_97 := serial_install($u9, $u4);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i15 == 1;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_handler_precall();
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} serial_cleanup($u4);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i14 == 1;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} ldv_handler_precall();
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} vslice_dummy_var_96 := serial_get_icount($u4, $u8);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i6, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i6, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i6, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i18 == 1);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} ldv_handler_precall();
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} vslice_dummy_var_100 := serial_tiocmset($u4, $u3, $u3);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  $bb31:
    assume $i18 == 1;
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_handler_precall();
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_99 := serial_tiocmget($u4);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i17 == 1;
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} ldv_handler_precall();
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} vslice_dummy_var_98 := serial_chars_in_buffer($u4);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i6, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i6, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i20 == 1);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} ldv_handler_precall();
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} vslice_dummy_var_101 := serial_break($u4, $u3);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i20 == 1;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} ldv_handler_precall();
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} serial_unthrottle($u4);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i19 == 1;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} ldv_handler_precall();
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} serial_throttle($u4);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i6, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i6, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i6, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i6, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i24 == 1);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} ldv_handler_precall();
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} serial_set_termios($u4, $u7);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  $bb43:
    assume $i24 == 1;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} ldv_handler_precall();
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} vslice_dummy_var_103 := serial_ioctl($u4, $u3, $u6);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  $bb41:
    assume $i23 == 1;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} ldv_handler_precall();
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} vslice_dummy_var_102 := serial_write_room($u4);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i6, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i26 == 1);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} ldv_handler_precall();
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} serial_hangup($u4);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  $bb47:
    assume $i26 == 1;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} ldv_handler_precall();
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_104 := serial_write($u4, $u5, $u3);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  $bb45:
    assume $i25 == 1;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i4, 1);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $i4;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i48, $i5;
    goto $bb68;

  $bb75:
    assume $i47 == 1;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} ldv_handler_precall();
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} serial_close($u4, $u1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb77;

  $bb37:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i6, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i6, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i29 == 1);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i4, 0);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i4;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i46, $i5;
    goto $bb68;

  $bb69:
    assume $i42 == 1;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} ldv_handler_precall();
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $i43 := serial_open($u4, $u1);
    call {:si_unique_call 1104} {:cexpr "res_serial_open_7"} boogie_si_record_i32($i43);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} ldv_check_return_value($i43);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i4, 1);
    call {:si_unique_call 1106} {:cexpr "ldv_s_serial_ops_tty_operations"} boogie_si_record_i32($i45);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb74;

  $bb71:
    assume $i44 == 1;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb53:
    assume $i29 == 1;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} ldv_handler_precall();
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} serial_port_shutdown($u2);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i28 == 1;
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} ldv_handler_precall();
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_105 := serial_port_activate($u2, $u4);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i31 == 1);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} ldv_handler_precall();
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} serial_port_dtr_rts($u2, $u3);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i31 == 1;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} ldv_handler_precall();
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} vslice_dummy_var_106 := serial_port_carrier_raised($u2);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i3, $i4, $i5;
    goto $bb68;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb20;

  $bb59:
    assume $i32 == 1;
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i3, 0);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i3;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39 := $i36, $i4, $i5;
    goto $bb68;

  $bb61:
    assume $i33 == 1;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} ldv_handler_precall();
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i34 := serial_proc_open($u0, $u1);
    call {:si_unique_call 1098} {:cexpr "res_serial_proc_open_21"} boogie_si_record_i32($i34);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} ldv_check_return_value($i34);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb67;

  $bb63:
    assume $i35 == 1;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb95;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb95;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  corral_source_split_5524_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5414;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 431791);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.8, $M.53, $M.54, $M.25;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1122} {:cexpr "ldv_mutex_disc_mutex_of_usb_serial"} boogie_si_record_i32(1);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1123} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1124} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1125} {:cexpr "ldv_mutex_table_lock"} boogie_si_record_i32(1);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 432823);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_init: ref;

axiom usb_serial_init == $sub.ref(0, 433855);

procedure usb_serial_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.24, $M.0, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.25, assertsPassed, $CurrAddr;



implementation usb_serial_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i41: i32;
  var $i42: i1;
  var $i45: i32;
  var $i46: i1;
  var $i44: i32;
  var $p48: ref;
  var $i40: i32;
  var $i8: i32;
  var $p51: ref;
  var $i4: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $p0 := alloc_tty_driver(254);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $M.7 := $p0;
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p1 := $M.7;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, serial_table, $0.ref);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(1, 8)), $0.ref);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(2, 8)), $0.ref);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(3, 8)), $0.ref);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(4, 8)), $0.ref);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(5, 8)), $0.ref);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(6, 8)), $0.ref);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(7, 8)), $0.ref);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(8, 8)), $0.ref);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(9, 8)), $0.ref);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(10, 8)), $0.ref);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(11, 8)), $0.ref);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(12, 8)), $0.ref);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(13, 8)), $0.ref);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(14, 8)), $0.ref);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(15, 8)), $0.ref);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(16, 8)), $0.ref);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(17, 8)), $0.ref);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(18, 8)), $0.ref);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(19, 8)), $0.ref);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(20, 8)), $0.ref);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(21, 8)), $0.ref);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(22, 8)), $0.ref);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(23, 8)), $0.ref);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(24, 8)), $0.ref);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(25, 8)), $0.ref);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(26, 8)), $0.ref);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(27, 8)), $0.ref);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(28, 8)), $0.ref);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(29, 8)), $0.ref);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(30, 8)), $0.ref);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(31, 8)), $0.ref);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(32, 8)), $0.ref);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(33, 8)), $0.ref);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(34, 8)), $0.ref);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(35, 8)), $0.ref);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(36, 8)), $0.ref);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(37, 8)), $0.ref);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(38, 8)), $0.ref);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(39, 8)), $0.ref);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(40, 8)), $0.ref);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(41, 8)), $0.ref);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(42, 8)), $0.ref);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(43, 8)), $0.ref);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(44, 8)), $0.ref);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(45, 8)), $0.ref);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(46, 8)), $0.ref);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(47, 8)), $0.ref);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(48, 8)), $0.ref);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(49, 8)), $0.ref);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(50, 8)), $0.ref);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(51, 8)), $0.ref);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(52, 8)), $0.ref);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(53, 8)), $0.ref);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(54, 8)), $0.ref);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(55, 8)), $0.ref);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(56, 8)), $0.ref);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(57, 8)), $0.ref);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(58, 8)), $0.ref);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(59, 8)), $0.ref);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(60, 8)), $0.ref);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(61, 8)), $0.ref);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(62, 8)), $0.ref);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(63, 8)), $0.ref);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(64, 8)), $0.ref);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(65, 8)), $0.ref);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(66, 8)), $0.ref);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(67, 8)), $0.ref);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(68, 8)), $0.ref);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(69, 8)), $0.ref);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(70, 8)), $0.ref);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(71, 8)), $0.ref);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(72, 8)), $0.ref);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(73, 8)), $0.ref);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(74, 8)), $0.ref);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(75, 8)), $0.ref);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(76, 8)), $0.ref);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(77, 8)), $0.ref);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(78, 8)), $0.ref);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(79, 8)), $0.ref);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(80, 8)), $0.ref);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(81, 8)), $0.ref);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(82, 8)), $0.ref);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(83, 8)), $0.ref);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(84, 8)), $0.ref);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(85, 8)), $0.ref);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(86, 8)), $0.ref);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(87, 8)), $0.ref);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(88, 8)), $0.ref);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(89, 8)), $0.ref);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(90, 8)), $0.ref);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(91, 8)), $0.ref);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(92, 8)), $0.ref);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(93, 8)), $0.ref);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(94, 8)), $0.ref);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(95, 8)), $0.ref);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(96, 8)), $0.ref);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(97, 8)), $0.ref);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(98, 8)), $0.ref);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(99, 8)), $0.ref);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(100, 8)), $0.ref);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(101, 8)), $0.ref);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(102, 8)), $0.ref);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(103, 8)), $0.ref);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(104, 8)), $0.ref);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(105, 8)), $0.ref);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(106, 8)), $0.ref);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(107, 8)), $0.ref);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(108, 8)), $0.ref);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(109, 8)), $0.ref);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(110, 8)), $0.ref);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(111, 8)), $0.ref);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(112, 8)), $0.ref);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(113, 8)), $0.ref);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(114, 8)), $0.ref);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(115, 8)), $0.ref);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(116, 8)), $0.ref);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(117, 8)), $0.ref);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(118, 8)), $0.ref);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(119, 8)), $0.ref);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(120, 8)), $0.ref);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(121, 8)), $0.ref);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(122, 8)), $0.ref);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(123, 8)), $0.ref);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(124, 8)), $0.ref);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(125, 8)), $0.ref);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(126, 8)), $0.ref);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(127, 8)), $0.ref);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(128, 8)), $0.ref);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(129, 8)), $0.ref);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(130, 8)), $0.ref);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(131, 8)), $0.ref);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(132, 8)), $0.ref);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(133, 8)), $0.ref);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(134, 8)), $0.ref);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(135, 8)), $0.ref);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(136, 8)), $0.ref);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(137, 8)), $0.ref);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(138, 8)), $0.ref);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(139, 8)), $0.ref);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(140, 8)), $0.ref);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(141, 8)), $0.ref);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(142, 8)), $0.ref);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(143, 8)), $0.ref);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(144, 8)), $0.ref);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(145, 8)), $0.ref);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(146, 8)), $0.ref);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(147, 8)), $0.ref);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(148, 8)), $0.ref);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(149, 8)), $0.ref);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(150, 8)), $0.ref);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(151, 8)), $0.ref);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(152, 8)), $0.ref);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(153, 8)), $0.ref);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(154, 8)), $0.ref);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(155, 8)), $0.ref);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(156, 8)), $0.ref);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(157, 8)), $0.ref);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(158, 8)), $0.ref);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(159, 8)), $0.ref);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(160, 8)), $0.ref);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(161, 8)), $0.ref);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(162, 8)), $0.ref);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(163, 8)), $0.ref);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(164, 8)), $0.ref);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(165, 8)), $0.ref);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(166, 8)), $0.ref);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(167, 8)), $0.ref);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(168, 8)), $0.ref);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(169, 8)), $0.ref);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(170, 8)), $0.ref);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(171, 8)), $0.ref);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(172, 8)), $0.ref);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(173, 8)), $0.ref);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(174, 8)), $0.ref);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(175, 8)), $0.ref);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(176, 8)), $0.ref);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(177, 8)), $0.ref);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(178, 8)), $0.ref);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(179, 8)), $0.ref);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(180, 8)), $0.ref);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(181, 8)), $0.ref);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(182, 8)), $0.ref);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(183, 8)), $0.ref);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(184, 8)), $0.ref);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(185, 8)), $0.ref);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(186, 8)), $0.ref);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(187, 8)), $0.ref);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(188, 8)), $0.ref);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(189, 8)), $0.ref);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(190, 8)), $0.ref);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(191, 8)), $0.ref);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(192, 8)), $0.ref);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(193, 8)), $0.ref);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(194, 8)), $0.ref);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(195, 8)), $0.ref);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(196, 8)), $0.ref);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(197, 8)), $0.ref);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(198, 8)), $0.ref);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(199, 8)), $0.ref);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(200, 8)), $0.ref);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(201, 8)), $0.ref);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(202, 8)), $0.ref);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(203, 8)), $0.ref);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(204, 8)), $0.ref);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(205, 8)), $0.ref);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(206, 8)), $0.ref);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(207, 8)), $0.ref);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(208, 8)), $0.ref);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(209, 8)), $0.ref);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(210, 8)), $0.ref);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(211, 8)), $0.ref);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(212, 8)), $0.ref);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(213, 8)), $0.ref);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(214, 8)), $0.ref);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(215, 8)), $0.ref);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(216, 8)), $0.ref);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(217, 8)), $0.ref);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(218, 8)), $0.ref);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(219, 8)), $0.ref);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(220, 8)), $0.ref);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(221, 8)), $0.ref);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(222, 8)), $0.ref);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(223, 8)), $0.ref);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(224, 8)), $0.ref);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(225, 8)), $0.ref);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(226, 8)), $0.ref);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(227, 8)), $0.ref);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(228, 8)), $0.ref);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(229, 8)), $0.ref);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(230, 8)), $0.ref);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(231, 8)), $0.ref);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(232, 8)), $0.ref);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(233, 8)), $0.ref);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(234, 8)), $0.ref);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(235, 8)), $0.ref);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(236, 8)), $0.ref);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(237, 8)), $0.ref);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(238, 8)), $0.ref);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(239, 8)), $0.ref);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(240, 8)), $0.ref);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(241, 8)), $0.ref);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(242, 8)), $0.ref);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(243, 8)), $0.ref);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(244, 8)), $0.ref);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(245, 8)), $0.ref);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(246, 8)), $0.ref);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(247, 8)), $0.ref);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(248, 8)), $0.ref);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(249, 8)), $0.ref);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(250, 8)), $0.ref);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(251, 8)), $0.ref);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(252, 8)), $0.ref);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(253, 8)), $0.ref);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i5 := bus_register(usb_serial_bus_type);
    call {:si_unique_call 1128} {:cexpr "result"} boogie_si_record_i32($i5);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p9 := $M.7;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, .str);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p11 := $M.7;
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, .str.77);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p13 := $M.7;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 184)), $mul.ref(44, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 188);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p15 := $M.7;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p17 := $M.7;
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 3);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p19 := $M.7;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 184)), $mul.ref(58, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, 1);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p21 := $M.7;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, 12);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p23 := $M.7;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 184)), $mul.ref(60, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 1132} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p25, tty_std_termios, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p26 := $M.7;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(8, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 3261);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p29 := $M.7;
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(36, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 9600);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p32 := $M.7;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(40, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 9600);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p35 := $M.7;
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} tty_set_operations($p35, serial_ops);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p36 := $M.7;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i37 := tty_register_driver($p36);
    call {:si_unique_call 1135} {:cexpr "result"} boogie_si_record_i32($i37);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i41 := usb_register_driver(usb_serial_driver, __this_module, .str);
    call {:si_unique_call 1139} {:cexpr "result"} boogie_si_record_i32($i41);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i45 := usb_serial_generic_register();
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    call {:si_unique_call 1143} {:cexpr "result"} boogie_si_record_i32($i45);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i4 := $i45;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} vslice_dummy_var_114 := printk.ref.ref(.str.80, .str.76);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} usb_deregister(usb_serial_driver);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i44 := $i45;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p48 := $M.7;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} vslice_dummy_var_113 := tty_unregister_driver($p48);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i40 := $i44;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} bus_unregister(usb_serial_bus_type);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i8 := $i40;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_110 := printk.ref.ref.i32(.str.81, .str.76, $i8);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p51 := $M.7;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} put_tty_driver($p51);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i4 := $i8;
    goto $bb3;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} vslice_dummy_var_112 := printk.ref.ref(.str.79, .str.76);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i44 := $i41;
    goto $bb19;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} vslice_dummy_var_111 := printk.ref.ref(.str.78, .str.76);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i40 := $i37;
    goto $bb15;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_109 := printk.ref.ref(.str.75, .str.76);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb11;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 434887);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_return_value_probe: ref;

axiom ldv_check_return_value_probe == $sub.ref(0, 435919);

procedure ldv_check_return_value_probe($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value_probe($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} {:cexpr "ldv_check_return_value_probe:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_exit: ref;

axiom usb_serial_exit == $sub.ref(0, 436951);

procedure usb_serial_exit();
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation usb_serial_exit()
{
  var $p0: ref;
  var $p2: ref;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} usb_serial_console_exit();
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} usb_serial_generic_deregister();
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} usb_deregister(usb_serial_driver);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p0 := $M.7;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} vslice_dummy_var_115 := tty_unregister_driver($p0);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p2 := $M.7;
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} put_tty_driver($p2);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} bus_unregister(usb_serial_bus_type);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 437983);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i0 := $M.8;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} ldv_error();
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.53;
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} ldv_error();
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.54;
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} ldv_error();
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.25;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} ldv_error();
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_serial_console_exit: ref;

axiom usb_serial_console_exit == $sub.ref(0, 439015);

procedure usb_serial_console_exit();
  free requires assertsPassed;



implementation usb_serial_console_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_deregister: ref;

axiom usb_serial_generic_deregister == $sub.ref(0, 440047);

procedure usb_serial_generic_deregister();
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation usb_serial_generic_deregister()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} usb_serial_deregister_drivers(serial_drivers);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const tty_unregister_driver: ref;

axiom tty_unregister_driver == $sub.ref(0, 441079);

procedure tty_unregister_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_unregister_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1159} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1160} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const put_tty_driver: ref;

axiom put_tty_driver == $sub.ref(0, 442111);

procedure put_tty_driver($p0: ref);
  free requires assertsPassed;



implementation put_tty_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    return;
}



const bus_unregister: ref;

axiom bus_unregister == $sub.ref(0, 443143);

procedure bus_unregister($p0: ref);
  free requires assertsPassed;



implementation bus_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    return;
}



const alloc_tty_driver: ref;

axiom alloc_tty_driver == $sub.ref(0, 444175);

procedure alloc_tty_driver($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_tty_driver($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} {:cexpr "alloc_tty_driver:arg:lines"} boogie_si_record_i32($i0);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $p1 := __tty_alloc_driver($i0, __this_module, 0);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $i3 := IS_ERR($p2);
    call {:si_unique_call 1164} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const bus_register: ref;

axiom bus_register == $sub.ref(0, 445207);

procedure bus_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bus_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1165} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_set_operations: ref;

axiom tty_set_operations == $sub.ref(0, 446239);

procedure tty_set_operations($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_set_operations($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    return;
}



const tty_register_driver: ref;

axiom tty_register_driver == $sub.ref(0, 447271);

procedure tty_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1167} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1168} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_serial_generic_register: ref;

axiom usb_serial_generic_register == $sub.ref(0, 448303);

procedure usb_serial_generic_register() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.25, assertsPassed, $CurrAddr;



implementation usb_serial_generic_register() returns ($r: i32)
{
  var $i0: i16;
  var $i1: i16;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i0 := $M.55;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), $i0);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i1 := $M.56;
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), $i1);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, generic_device_ids, 3);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $i2 := usb_serial_register_drivers(serial_drivers, .str.2, generic_device_ids);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 1170} {:cexpr "retval"} boogie_si_record_i32($i2);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const __tty_alloc_driver: ref;

axiom __tty_alloc_driver == $sub.ref(0, 449335);

procedure __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} {:cexpr "__tty_alloc_driver:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1172} {:cexpr "__tty_alloc_driver:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p3 := external_alloc();
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 450367);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1175} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 451399);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1176} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 1} true;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 452431);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 453463);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 454495);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 455527);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 456559);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 457591);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 458623);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 459655);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 460687);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 461719);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 462751);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 463783);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 464815);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1178} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1179} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1180} __VERIFIER_assume($i4);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 465847);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 466879);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 467911);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 468943);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1181} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1182} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1183} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1184} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1185} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1186} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1187} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1188} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1189} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1190} __VERIFIER_assume($i7);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1191} __VERIFIER_assume($i11);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 469975);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 471007);

procedure __VERIFIER_nondet_long() returns ($r: i64);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 472039);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 473071);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 474103);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 475135);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 476167);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1192} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1193} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1194} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1195} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1196} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1197} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1198} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1199} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1200} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1201} __VERIFIER_assume($i7);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1202} __VERIFIER_assume($i11);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 477199);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 478231);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 479263);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 480295);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 481327);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 482359);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 483391);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 484423);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 485455);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1203} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1204} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1205} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1206} __VERIFIER_assume($i10);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 486487);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1207} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1208} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1209} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 487519);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1210} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1211} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1212} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 488551);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1213} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1214} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 489583);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 490615);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1215} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1216} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 491647);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 492679);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 493711);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 494743);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.0, $M.57, $M.41, $M.56, $M.55, $M.25, $M.54, $M.53, $M.8, $M.24, $M.7, $M.119, $M.120, $M.121;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1217} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, usb_serial_generic_device, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(8, 1)), generic_device_ids);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(16, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(256, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(264, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(336, 1)), usb_serial_generic_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(416, 1)), usb_serial_generic_throttle);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(424, 1)), usb_serial_generic_unthrottle);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 536)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.i16($M.0, generic_device_ids, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.57 := $store.ref($M.57, dev_attr_port_number, .str.119);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(32, 1)), show_port_number);
    $M.57 := $store.ref($M.57, $add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, drv_attrs, .str.117);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(32, 1)), show_dynids);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(0, 48)), $mul.ref(40, 1)), store_new_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(drv_attrs, $mul.ref(0, 96)), $mul.ref(1, 48)), $mul.ref(40, 1)), $0.ref);
    $M.41 := $store.ref($M.41, serial_drivers, usb_serial_generic_device);
    $M.41 := $store.ref($M.41, $add.ref($add.ref(serial_drivers, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.56 := $sub.i16(0, 1);
    call {:si_unique_call 1218} {:cexpr "product"} boogie_si_record_i16($sub.i16(0, 1));
    $M.55 := 1529;
    call {:si_unique_call 1219} {:cexpr "vendor"} boogie_si_record_i16(1529);
    $M.0 := $store.ref($M.0, usb_serial_driver, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), usb_serial_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), usb_serial_disconnect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), usb_serial_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), usb_serial_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 3);
    $M.0 := $store.ref($M.0, serial_port_ops, serial_port_carrier_raised);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 48)), $mul.ref(8, 1)), serial_port_dtr_rts);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 48)), $mul.ref(16, 1)), serial_port_shutdown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 48)), $mul.ref(32, 1)), serial_port_activate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, usb_serial_driver_list, usb_serial_driver_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_driver_list, $mul.ref(0, 16)), $mul.ref(8, 1)), usb_serial_driver_list);
    $M.0 := $store.i32($M.0, table_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.15);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(112, 1)), table_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.25 := 0;
    call {:si_unique_call 1220} {:cexpr "ldv_mutex_table_lock"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1221} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1222} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 1223} {:cexpr "ldv_mutex_disc_mutex_of_usb_serial"} boogie_si_record_i32(0);
    $M.24 := $store.ref($M.24, serial_table, $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(1, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(2, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(3, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(4, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(5, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(6, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(7, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(8, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(9, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(10, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(11, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(12, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(13, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(14, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(15, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(16, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(17, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(18, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(19, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(20, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(21, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(22, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(23, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(24, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(25, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(26, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(27, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(28, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(29, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(30, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(31, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(32, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(33, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(34, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(35, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(36, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(37, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(38, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(39, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(40, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(41, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(42, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(43, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(44, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(45, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(46, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(47, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(48, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(49, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(50, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(51, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(52, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(53, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(54, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(55, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(56, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(57, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(58, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(59, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(60, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(61, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(62, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(63, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(64, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(65, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(66, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(67, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(68, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(69, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(70, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(71, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(72, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(73, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(74, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(75, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(76, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(77, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(78, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(79, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(80, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(81, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(82, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(83, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(84, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(85, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(86, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(87, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(88, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(89, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(90, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(91, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(92, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(93, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(94, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(95, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(96, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(97, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(98, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(99, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(100, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(101, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(102, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(103, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(104, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(105, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(106, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(107, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(108, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(109, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(110, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(111, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(112, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(113, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(114, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(115, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(116, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(117, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(118, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(119, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(120, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(121, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(122, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(123, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(124, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(125, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(126, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(127, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(128, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(129, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(130, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(131, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(132, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(133, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(134, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(135, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(136, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(137, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(138, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(139, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(140, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(141, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(142, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(143, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(144, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(145, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(146, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(147, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(148, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(149, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(150, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(151, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(152, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(153, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(154, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(155, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(156, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(157, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(158, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(159, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(160, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(161, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(162, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(163, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(164, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(165, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(166, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(167, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(168, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(169, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(170, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(171, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(172, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(173, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(174, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(175, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(176, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(177, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(178, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(179, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(180, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(181, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(182, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(183, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(184, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(185, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(186, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(187, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(188, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(189, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(190, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(191, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(192, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(193, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(194, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(195, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(196, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(197, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(198, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(199, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(200, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(201, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(202, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(203, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(204, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(205, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(206, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(207, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(208, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(209, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(210, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(211, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(212, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(213, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(214, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(215, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(216, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(217, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(218, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(219, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(220, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(221, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(222, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(223, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(224, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(225, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(226, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(227, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(228, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(229, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(230, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(231, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(232, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(233, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(234, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(235, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(236, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(237, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(238, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(239, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(240, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(241, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(242, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(243, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(244, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(245, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(246, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(247, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(248, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(249, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(250, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(251, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(252, 8)), $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(253, 8)), $0.ref);
    $M.7 := $0.ref;
    $M.0 := $store.ref($M.0, usb_serial_bus_type, .str.13);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(40, 1)), drv_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(48, 1)), usb_serial_device_match);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(64, 1)), usb_serial_device_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(72, 1)), usb_serial_device_remove);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 136)), $mul.ref(128, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, .str, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.111, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(22, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(25, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(26, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(28, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(29, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(30, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(31, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(32, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(33, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.13, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 11)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 11)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 11)), $mul.ref(3, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 11)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 11)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 11)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 11)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(10, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(11, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(19, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.16, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.107, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.106, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.105, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.103, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.96, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.102, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.101, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.100, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.98, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.104, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(19, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(7, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.94, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(7, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.108, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 12)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 12)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 12)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 12)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 12)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 12)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 12)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.85, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.119 := $store.i8($M.119, .str.91, 117);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.91, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.18, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.43, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.117, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 7)), $mul.ref(2, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 7)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.120 := $store.i8($M.120, .str.120, 37);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(.str.120, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(.str.120, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(.str.120, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.109, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(25, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(27, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(28, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.114, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.10, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(25, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(26, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(27, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(28, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(29, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(30, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(31, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(32, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(33, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(34, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(35, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(36, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(37, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, .str.7, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(22, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(23, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(24, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(25, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(27, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(28, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(29, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(30, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(31, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(32, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(33, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(34, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(35, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(36, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.6, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(20, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(23, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(25, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(26, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(27, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(28, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(29, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(30, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(31, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(33, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.3, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(25, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(27, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(28, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.77, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 7)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 7)), $mul.ref(2, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 7)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 7)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 7)), $mul.ref(5, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.2, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.121 := $store.i8($M.121, .str.11, 117);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(1, 1)), 115);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(2, 1)), 98);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(4, 1)), 115);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(5, 1)), 101);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(6, 1)), 114);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(7, 1)), 105);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(8, 1)), 97);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(9, 1)), 108);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(10, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(11, 1)), 104);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(12, 1)), 97);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(13, 1)), 110);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(14, 1)), 100);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(15, 1)), 108);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(16, 1)), 101);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(17, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(18, 1)), 100);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(19, 1)), 99);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(20, 1)), 100);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(21, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(22, 1)), 99);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(23, 1)), 104);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(24, 1)), 97);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(25, 1)), 110);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(26, 1)), 103);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(27, 1)), 101);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(.str.11, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    call {:si_unique_call 1224} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 495775);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 496807);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 497839);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i33 := $eq.ref(usb_serial_generic_chars_in_buffer, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i33 == 1);
    $i32 := $eq.ref(usb_serial_generic_write_room, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i32 == 1);
    $i31 := $eq.ref(usb_serial_reset_resume, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i31 == 1);
    $i30 := $eq.ref(usb_serial_resume, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i30 == 1);
    $i29 := $eq.ref(serial_tiocmget, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i29 == 1);
    $i28 := $eq.ref(serial_chars_in_buffer, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i28 == 1);
    $i27 := $eq.ref(serial_write_room, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i27 == 1);
    $i26 := $eq.ref(serial_port_carrier_raised, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_device_remove, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_device_probe, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_serial_generic_resume, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume false;
    return;

  $bb2:
    assume $i23 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1225} $i2 := usb_serial_generic_resume($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i24 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1226} $i4 := usb_serial_device_probe($p3);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    $r := $i4;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i25 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1227} $i6 := usb_serial_device_remove($p5);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    $r := $i6;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1228} $i8 := serial_port_carrier_raised($p7);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    $r := $i8;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i27 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1229} $i10 := serial_write_room($p9);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    $r := $i10;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i28 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1230} $i12 := serial_chars_in_buffer($p11);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    $r := $i12;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i29 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1231} $i14 := serial_tiocmget($p13);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    $r := $i14;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i30 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1232} $i16 := usb_serial_resume($p15);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    $r := $i16;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i31 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1233} $i18 := usb_serial_reset_resume($p17);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    $r := $i18;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i32 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1234} $i20 := usb_serial_generic_write_room($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i33 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1235} $i22 := usb_serial_generic_chars_in_buffer($p21);
    $r := $i22;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 498871);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(serial_port_dtr_rts, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1236} serial_port_dtr_rts($p1, arg1);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 499903);

procedure devirtbounce.4(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed, $M.25;



implementation devirtbounce.4(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i29 := $eq.ref(usb_serial_generic_process_read_urb, $p0);
    assume true;
    goto $bb16, $bb31;

  $bb31:
    assume !($i29 == 1);
    $i28 := $eq.ref(usb_serial_generic_write_bulk_callback, $p0);
    assume true;
    goto $bb15, $bb30;

  $bb30:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_generic_read_bulk_callback, $p0);
    assume true;
    goto $bb14, $bb29;

  $bb29:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_generic_close, $p0);
    assume true;
    goto $bb13, $bb28;

  $bb28:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_port_release, $p0);
    assume true;
    goto $bb12, $bb27;

  $bb27:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb11, $bb26;

  $bb26:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb10, $bb25;

  $bb25:
    assume !($i23 == 1);
    $i22 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb9, $bb24;

  $bb24:
    assume !($i22 == 1);
    $i21 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb8, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb7, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb6, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(serial_cleanup, $p0);
    assume true;
    goto $bb5, $bb20;

  $bb20:
    assume !($i18 == 1);
    $i17 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb4, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume true;
    goto $bb3, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume true;
    goto $bb2, $bb17;

  $bb17:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1237} usb_serial_generic_throttle($p1);
    return;

  $bb3:
    assume $i16 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1238} usb_serial_generic_unthrottle($p2);
    return;

  $bb4:
    assume $i17 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1239} serial_port_shutdown($p3);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1240} serial_cleanup($p4);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1241} serial_throttle($p5);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i20 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1242} serial_unthrottle($p6);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1243} serial_hangup($p7);
    return;

  $bb9:
    assume $i22 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1244} destroy_serial($p8);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1245} usb_serial_disconnect($p9);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i24 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1246} usb_serial_port_work($p10);
    return;

  $bb12:
    assume $i25 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1247} usb_serial_port_release($p11);
    return;

  $bb13:
    assume $i26 == 1;
    call {:si_unique_call 1248} usb_serial_generic_close(arg);
    return;

  $bb14:
    assume $i27 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1249} usb_serial_generic_read_bulk_callback($p12);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i28 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1250} usb_serial_generic_write_bulk_callback($p13);
    return;

  $bb16:
    assume $i29 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1251} usb_serial_generic_process_read_urb($p14);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 500935);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.27, $M.28, $M.29, $M.30, $M.8, $M.25, $M.37, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i36 := $eq.ref(usb_serial_generic_open, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i36 == 1);
    $i35 := $eq.ref(usb_serial_probe, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i35 == 1);
    $i34 := $eq.ref(serial_proc_show, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i34 == 1);
    $i33 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial_proc_open, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i32 == 1);
    $i31 := $eq.ref(serial_get_icount, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i31 == 1);
    $i30 := $eq.ref(serial_open, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i30 == 1);
    $i29 := $eq.ref(serial_install, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i29 == 1);
    $i28 := $eq.ref(serial_port_activate, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_device_match, $p0);
    assume true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume false;
    return;

  $bb2:
    assume $i27 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1252} $i3 := usb_serial_device_match($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i28 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1253} $i6 := serial_port_activate($p4, $p5);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    $r := $i6;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i29 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1254} $i9 := serial_install($p7, $p8);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    $r := $i9;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i30 == 1;
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1255} $i11 := serial_open(arg, $p10);
    $r := $i11;
    return;

  $bb6:
    assume $i31 == 1;
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1256} $i13 := serial_get_icount(arg, $p12);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    $r := $i13;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i32 == 1;
    $p14 := $bitcast.ref.ref(arg);
    $p15 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1257} $i16 := serial_proc_open($p14, $p15);
    $r := $i16;
    return;

  $bb8:
    assume $i33 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1258} $i19 := single_release($p17, $p18);
    $r := $i19;
    return;

  $bb9:
    assume $i34 == 1;
    $p20 := $bitcast.ref.ref(arg);
    $p21 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1259} $i22 := serial_proc_show($p20, $p21);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    $r := $i22;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i35 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1260} $i25 := usb_serial_probe($p23, $p24);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    $r := $i25;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i36 == 1;
    call {:si_unique_call 1261} $i26 := usb_serial_generic_open(arg, arg1);
    $r := $i26;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 501967);

procedure devirtbounce.6(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed, $M.25;



implementation devirtbounce.6(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(usb_serial_generic_process_read_urb, $p0);
    assume true;
    goto $bb16, $bb31;

  $bb31:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_serial_generic_write_bulk_callback, $p0);
    assume true;
    goto $bb15, $bb30;

  $bb30:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_serial_generic_read_bulk_callback, $p0);
    assume true;
    goto $bb14, $bb29;

  $bb29:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_serial_generic_close, $p0);
    assume true;
    goto $bb13, $bb28;

  $bb28:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_serial_port_release, $p0);
    assume true;
    goto $bb12, $bb27;

  $bb27:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb11, $bb26;

  $bb26:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb10, $bb25;

  $bb25:
    assume !($i18 == 1);
    $i17 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb9, $bb24;

  $bb24:
    assume !($i17 == 1);
    $i16 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb8, $bb23;

  $bb23:
    assume !($i16 == 1);
    $i15 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb7, $bb22;

  $bb22:
    assume !($i15 == 1);
    $i14 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb6, $bb21;

  $bb21:
    assume !($i14 == 1);
    $i13 := $eq.ref(serial_cleanup, $p0);
    assume true;
    goto $bb5, $bb20;

  $bb20:
    assume !($i13 == 1);
    $i12 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb4, $bb19;

  $bb19:
    assume !($i12 == 1);
    $i11 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume true;
    goto $bb3, $bb18;

  $bb18:
    assume !($i11 == 1);
    $i10 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume true;
    goto $bb2, $bb17;

  $bb17:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    call {:si_unique_call 1262} usb_serial_generic_throttle(arg);
    return;

  $bb3:
    assume $i11 == 1;
    call {:si_unique_call 1263} usb_serial_generic_unthrottle(arg);
    return;

  $bb4:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1264} serial_port_shutdown($p1);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    call {:si_unique_call 1265} serial_cleanup(arg);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i14 == 1;
    call {:si_unique_call 1266} serial_throttle(arg);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i15 == 1;
    call {:si_unique_call 1267} serial_unthrottle(arg);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    call {:si_unique_call 1268} serial_hangup(arg);
    return;

  $bb9:
    assume $i17 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1269} destroy_serial($p2);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i18 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1270} usb_serial_disconnect($p3);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i19 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1271} usb_serial_port_work($p4);
    return;

  $bb12:
    assume $i20 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1272} usb_serial_port_release($p5);
    return;

  $bb13:
    assume $i21 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1273} usb_serial_generic_close($p6);
    return;

  $bb14:
    assume $i22 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1274} usb_serial_generic_read_bulk_callback($p7);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i23 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1275} usb_serial_generic_write_bulk_callback($p8);
    return;

  $bb16:
    assume $i24 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1276} usb_serial_generic_process_read_urb($p9);
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 502999);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(usb_serial_generic_write, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1277} $i1 := usb_serial_generic_write(arg, arg1, arg2, arg3);
    $r := $i1;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 504031);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i28 := $eq.ref(usb_serial_generic_chars_in_buffer, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_generic_write_room, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_reset_resume, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_resume, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i25 == 1);
    $i24 := $eq.ref(serial_tiocmget, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i24 == 1);
    $i23 := $eq.ref(serial_chars_in_buffer, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i23 == 1);
    $i22 := $eq.ref(serial_write_room, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i22 == 1);
    $i21 := $eq.ref(serial_port_carrier_raised, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_serial_device_remove, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_serial_device_probe, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_generic_resume, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume false;
    return;

  $bb2:
    assume $i18 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1278} $i2 := usb_serial_generic_resume($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i19 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1279} $i4 := usb_serial_device_probe($p3);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    $r := $i4;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i20 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1280} $i6 := usb_serial_device_remove($p5);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    $r := $i6;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1281} $i8 := serial_port_carrier_raised($p7);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    $r := $i8;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i22 == 1;
    call {:si_unique_call 1282} $i9 := serial_write_room(arg);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    $r := $i9;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    call {:si_unique_call 1283} $i10 := serial_chars_in_buffer(arg);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    $r := $i10;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i24 == 1;
    call {:si_unique_call 1284} $i11 := serial_tiocmget(arg);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    $r := $i11;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i25 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1285} $i13 := usb_serial_resume($p12);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    $r := $i13;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i26 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1286} $i15 := usb_serial_reset_resume($p14);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    $r := $i15;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i27 == 1;
    call {:si_unique_call 1287} $i16 := usb_serial_generic_write_room(arg);
    $r := $i16;
    return;

  $bb12:
    assume $i28 == 1;
    call {:si_unique_call 1288} $i17 := usb_serial_generic_chars_in_buffer(arg);
    $r := $i17;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 505063);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 506095);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(serial_ioctl, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1289} $i1 := serial_ioctl(arg, arg1, arg2);
    $r := $i1;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 507127);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 508159);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(serial_port_dtr_rts, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1290} serial_port_dtr_rts($p1, arg1);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    return;

  SeqInstr_517:
    assume !assertsPassed;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 509191);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(serial_tiocmset, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(serial_ioctl, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $i1 := $zext.i32.i64(arg2);
    call {:si_unique_call 1291} $i2 := serial_ioctl(arg, arg1, $i1);
    $r := $i2;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 1292} $i3 := serial_tiocmset(arg, arg1, arg2);
    $r := $i3;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 510223);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.27, $M.28, $M.29, $M.30, $M.8, $M.25, $M.37, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i36 := $eq.ref(usb_serial_generic_open, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i36 == 1);
    $i35 := $eq.ref(usb_serial_probe, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i35 == 1);
    $i34 := $eq.ref(serial_proc_show, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i34 == 1);
    $i33 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial_proc_open, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i32 == 1);
    $i31 := $eq.ref(serial_get_icount, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i31 == 1);
    $i30 := $eq.ref(serial_open, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i30 == 1);
    $i29 := $eq.ref(serial_install, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i29 == 1);
    $i28 := $eq.ref(serial_port_activate, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_device_match, $p0);
    assume true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume false;
    return;

  $bb2:
    assume $i27 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1293} $i3 := usb_serial_device_match($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i28 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1294} $i6 := serial_port_activate($p4, $p5);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    $r := $i6;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i29 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1295} $i9 := serial_install($p7, $p8);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    $r := $i9;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i30 == 1;
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1296} $i11 := serial_open(arg, $p10);
    $r := $i11;
    return;

  $bb6:
    assume $i31 == 1;
    call {:si_unique_call 1297} $i12 := serial_get_icount(arg, arg1);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    $r := $i12;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i32 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1298} $i15 := serial_proc_open($p13, $p14);
    $r := $i15;
    return;

  $bb8:
    assume $i33 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1299} $i18 := single_release($p16, $p17);
    $r := $i18;
    return;

  $bb9:
    assume $i34 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1300} $i21 := serial_proc_show($p19, $p20);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    $r := $i21;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i35 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1301} $i24 := usb_serial_probe($p22, $p23);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    $r := $i24;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i36 == 1;
    $p25 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1302} $i26 := usb_serial_generic_open(arg, $p25);
    $r := $i26;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 511255);

procedure devirtbounce.15(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed, $M.25;



implementation devirtbounce.15(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i30 := $eq.ref(usb_serial_generic_process_read_urb, $p0);
    assume true;
    goto $bb16, $bb31;

  $bb31:
    assume !($i30 == 1);
    $i29 := $eq.ref(usb_serial_generic_write_bulk_callback, $p0);
    assume true;
    goto $bb15, $bb30;

  $bb30:
    assume !($i29 == 1);
    $i28 := $eq.ref(usb_serial_generic_read_bulk_callback, $p0);
    assume true;
    goto $bb14, $bb29;

  $bb29:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_generic_close, $p0);
    assume true;
    goto $bb13, $bb28;

  $bb28:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_port_release, $p0);
    assume true;
    goto $bb12, $bb27;

  $bb27:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb11, $bb26;

  $bb26:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb10, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb9, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb8, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb7, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb6, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(serial_cleanup, $p0);
    assume true;
    goto $bb5, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb4, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume true;
    goto $bb3, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume true;
    goto $bb2, $bb17;

  $bb17:
    assume !($i16 == 1);
    assume false;
    return;

  $bb2:
    assume $i16 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1303} usb_serial_generic_throttle($p1);
    return;

  $bb3:
    assume $i17 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1304} usb_serial_generic_unthrottle($p2);
    return;

  $bb4:
    assume $i18 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1305} serial_port_shutdown($p3);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i19 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1306} serial_cleanup($p4);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i20 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1307} serial_throttle($p5);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i21 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1308} serial_unthrottle($p6);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1309} serial_hangup($p7);
    return;

  $bb9:
    assume $i23 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1310} destroy_serial($p8);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i24 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1311} usb_serial_disconnect($p9);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i25 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1312} usb_serial_port_work($p10);
    return;

  $bb12:
    assume $i26 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1313} usb_serial_port_release($p11);
    return;

  $bb13:
    assume $i27 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1314} usb_serial_generic_close($p12);
    return;

  $bb14:
    assume $i28 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1315} usb_serial_generic_read_bulk_callback($p13);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i29 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1316} usb_serial_generic_write_bulk_callback($p14);
    return;

  $bb16:
    assume $i30 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1317} usb_serial_generic_process_read_urb($p15);
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 512287);

procedure devirtbounce.16(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed, $M.25;



implementation devirtbounce.16(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i29 := $eq.ref(usb_serial_generic_process_read_urb, $p0);
    assume true;
    goto $bb16, $bb31;

  $bb31:
    assume !($i29 == 1);
    $i28 := $eq.ref(usb_serial_generic_write_bulk_callback, $p0);
    assume true;
    goto $bb15, $bb30;

  $bb30:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_generic_read_bulk_callback, $p0);
    assume true;
    goto $bb14, $bb29;

  $bb29:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_generic_close, $p0);
    assume true;
    goto $bb13, $bb28;

  $bb28:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_port_release, $p0);
    assume true;
    goto $bb12, $bb27;

  $bb27:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb11, $bb26;

  $bb26:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb10, $bb25;

  $bb25:
    assume !($i23 == 1);
    $i22 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb9, $bb24;

  $bb24:
    assume !($i22 == 1);
    $i21 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb8, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb7, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb6, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(serial_cleanup, $p0);
    assume true;
    goto $bb5, $bb20;

  $bb20:
    assume !($i18 == 1);
    $i17 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb4, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume true;
    goto $bb3, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume true;
    goto $bb2, $bb17;

  $bb17:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1318} usb_serial_generic_throttle($p1);
    return;

  $bb3:
    assume $i16 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1319} usb_serial_generic_unthrottle($p2);
    return;

  $bb4:
    assume $i17 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1320} serial_port_shutdown($p3);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1321} serial_cleanup($p4);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1322} serial_throttle($p5);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i20 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1323} serial_unthrottle($p6);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1324} serial_hangup($p7);
    return;

  $bb9:
    assume $i22 == 1;
    call {:si_unique_call 1325} destroy_serial(arg);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i23 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1326} usb_serial_disconnect($p8);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i24 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1327} usb_serial_port_work($p9);
    return;

  $bb12:
    assume $i25 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1328} usb_serial_port_release($p10);
    return;

  $bb13:
    assume $i26 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1329} usb_serial_generic_close($p11);
    return;

  $bb14:
    assume $i27 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1330} usb_serial_generic_read_bulk_callback($p12);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i28 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1331} usb_serial_generic_write_bulk_callback($p13);
    return;

  $bb16:
    assume $i29 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1332} usb_serial_generic_process_read_urb($p14);
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 513319);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 514351);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 515383);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.27, $M.28, $M.29, $M.30, $M.8, $M.25, $M.37, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i39 := $eq.ref(usb_serial_generic_open, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i39 == 1);
    $i38 := $eq.ref(usb_serial_probe, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i38 == 1);
    $i37 := $eq.ref(serial_proc_show, $p0);
    assume {:branchcond $i37} true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i37 == 1);
    $i36 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i36 == 1);
    $i35 := $eq.ref(serial_proc_open, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i35 == 1);
    $i34 := $eq.ref(serial_get_icount, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i34 == 1);
    $i33 := $eq.ref(serial_open, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial_install, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i32 == 1);
    $i31 := $eq.ref(serial_port_activate, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i31 == 1);
    $i30 := $eq.ref(usb_serial_device_match, $p0);
    assume true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume false;
    return;

  $bb2:
    assume $i30 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1333} $i3 := usb_serial_device_match($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i31 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1334} $i6 := serial_port_activate($p4, $p5);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    $r := $i6;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i32 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1335} $i9 := serial_install($p7, $p8);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    $r := $i9;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i33 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1336} $i12 := serial_open($p10, $p11);
    $r := $i12;
    return;

  $bb6:
    assume $i34 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1337} $i15 := serial_get_icount($p13, $p14);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    $r := $i15;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i35 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1338} $i18 := serial_proc_open($p16, $p17);
    $r := $i18;
    return;

  $bb8:
    assume $i36 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1339} $i21 := single_release($p19, $p20);
    $r := $i21;
    return;

  $bb9:
    assume $i37 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1340} $i24 := serial_proc_show($p22, $p23);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    $r := $i24;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i38 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1341} $i26 := usb_serial_probe($p25, arg1);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    $r := $i26;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i39 == 1;
    $p27 := $bitcast.ref.ref(arg);
    $p28 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1342} $i29 := usb_serial_generic_open($p27, $p28);
    $r := $i29;
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 516415);

procedure devirtbounce.20(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i32 := $eq.ref(usb_serial_generic_chars_in_buffer, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i32 == 1);
    $i31 := $eq.ref(usb_serial_generic_write_room, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i31 == 1);
    $i30 := $eq.ref(usb_serial_reset_resume, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i30 == 1);
    $i29 := $eq.ref(usb_serial_resume, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i29 == 1);
    $i28 := $eq.ref(serial_tiocmget, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i28 == 1);
    $i27 := $eq.ref(serial_chars_in_buffer, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i27 == 1);
    $i26 := $eq.ref(serial_write_room, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i26 == 1);
    $i25 := $eq.ref(serial_port_carrier_raised, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_device_remove, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_serial_device_probe, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_serial_generic_resume, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume false;
    return;

  $bb2:
    assume $i22 == 1;
    call {:si_unique_call 1343} $i1 := usb_serial_generic_resume(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i23 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1344} $i3 := usb_serial_device_probe($p2);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    $r := $i3;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i24 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1345} $i5 := usb_serial_device_remove($p4);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    $r := $i5;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i25 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1346} $i7 := serial_port_carrier_raised($p6);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    $r := $i7;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i26 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1347} $i9 := serial_write_room($p8);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    $r := $i9;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i27 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1348} $i11 := serial_chars_in_buffer($p10);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    $r := $i11;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i28 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1349} $i13 := serial_tiocmget($p12);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    $r := $i13;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i29 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1350} $i15 := usb_serial_resume($p14);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    $r := $i15;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i30 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1351} $i17 := usb_serial_reset_resume($p16);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    $r := $i17;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i31 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1352} $i19 := usb_serial_generic_write_room($p18);
    $r := $i19;
    return;

  $bb12:
    assume $i32 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1353} $i21 := usb_serial_generic_chars_in_buffer($p20);
    $r := $i21;
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 517447);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.39, $M.0, $CurrAddr, $M.8, assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(usb_serial_suspend, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(serial_break, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1354} $i2 := serial_break($p1, arg1);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    $r := $i2;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1355} $i4 := usb_serial_suspend($p3, arg1);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    $r := $i4;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 518479);

procedure devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(usb_serial_generic_prepare_write_buffer, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1356} $i1 := usb_serial_generic_prepare_write_buffer(arg, arg1, arg2);
    $r := $i1;
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 519511);

procedure devirtbounce.23(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 520543);

procedure devirtbounce.24(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 521575);

procedure devirtbounce.25(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.24, $M.49, $M.50, $CurrAddr, assertsPassed, $M.25;



implementation devirtbounce.25(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i27 := $eq.ref(usb_serial_generic_process_read_urb, $p0);
    assume true;
    goto $bb16, $bb31;

  $bb31:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_generic_write_bulk_callback, $p0);
    assume true;
    goto $bb15, $bb30;

  $bb30:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_generic_read_bulk_callback, $p0);
    assume true;
    goto $bb14, $bb29;

  $bb29:
    assume !($i25 == 1);
    $i24 := $eq.ref(usb_serial_generic_close, $p0);
    assume true;
    goto $bb13, $bb28;

  $bb28:
    assume !($i24 == 1);
    $i23 := $eq.ref(usb_serial_port_release, $p0);
    assume true;
    goto $bb12, $bb27;

  $bb27:
    assume !($i23 == 1);
    $i22 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb11, $bb26;

  $bb26:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb10, $bb25;

  $bb25:
    assume !($i21 == 1);
    $i20 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb9, $bb24;

  $bb24:
    assume !($i20 == 1);
    $i19 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb8, $bb23;

  $bb23:
    assume !($i19 == 1);
    $i18 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb7, $bb22;

  $bb22:
    assume !($i18 == 1);
    $i17 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb6, $bb21;

  $bb21:
    assume !($i17 == 1);
    $i16 := $eq.ref(serial_cleanup, $p0);
    assume true;
    goto $bb5, $bb20;

  $bb20:
    assume !($i16 == 1);
    $i15 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb4, $bb19;

  $bb19:
    assume !($i15 == 1);
    $i14 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume true;
    goto $bb3, $bb18;

  $bb18:
    assume !($i14 == 1);
    $i13 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume true;
    goto $bb2, $bb17;

  $bb17:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1357} usb_serial_generic_throttle($p1);
    return;

  $bb3:
    assume $i14 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1358} usb_serial_generic_unthrottle($p2);
    return;

  $bb4:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1359} serial_port_shutdown($p3);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1360} serial_cleanup($p4);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1361} serial_throttle($p5);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1362} serial_unthrottle($p6);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1363} serial_hangup($p7);
    return;

  $bb9:
    assume $i20 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1364} destroy_serial($p8);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1365} usb_serial_disconnect($p9);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1366} usb_serial_port_work($p10);
    return;

  $bb12:
    assume $i23 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1367} usb_serial_port_release($p11);
    return;

  $bb13:
    assume $i24 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1368} usb_serial_generic_close($p12);
    return;

  $bb14:
    assume $i25 == 1;
    call {:si_unique_call 1369} usb_serial_generic_read_bulk_callback(arg);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i26 == 1;
    call {:si_unique_call 1370} usb_serial_generic_write_bulk_callback(arg);
    return;

  $bb16:
    assume $i27 == 1;
    call {:si_unique_call 1371} usb_serial_generic_process_read_urb(arg);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u2: ref;

const $u3: i32;

const $u4: ref;

const $u5: ref;

const $u6: i64;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.0, $M.57, $M.41, $M.56, $M.55, $M.25, $M.54, $M.53, $M.8, $M.24, $M.7, $M.119, $M.120, $M.121, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1372} __SMACK_static_init();
    call {:si_unique_call 1373} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.27, $M.28, $M.29, $M.30, $M.39, $M.57, $M.41, $M.56, $M.55, $M.25, $M.54, $M.53, $M.8, $M.24, $M.7, $M.119, $M.120, $M.121, $CurrAddr, $M.37, $M.49, $M.50, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation usb_serial_generic_resume_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i16: i32, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i6: i32, in_$i7: i32, in_$i37: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i16: i32, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i6: i32, out_$i7: i32, out_$i37: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i33, out_$i34, out_$i35, out_$i36, out_$i6, out_$i7, out_$i37 := in_$i8, in_$p10, in_$p11, in_$p13, in_$i14, in_$i15, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i16, in_$i33, in_$i34, in_$i35, in_$i36, in_$i6, in_$i7, in_$i37;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9;

  $bb22:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i16, out_$i33;
    goto $bb22_dummy;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i16;
    assume true;
    goto $bb22;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i35, out_$i33);
    goto corral_source_split_24;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_23;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, in_$p1);
    goto corral_source_split_22;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i7, 1);
    call {:si_unique_call 2} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_21;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_20;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i32;
    goto $bb8;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i6;
    goto $bb8;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_18;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_16;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} out_$i14 := constant_test_bit(31, out_$p13);
    call {:si_unique_call 1} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_15;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 2632)), $mul.ref(8, 1)), $mul.ref(552, 1));
    goto corral_source_split_14;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_13;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_12;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_11;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_53;

  $bb17:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i24;
    goto $bb21;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i31;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  $bb19:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := out_$i24;
    goto $bb20;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i30;
    goto $bb20;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i24, 1);
    call {:si_unique_call 8} {:cexpr "c"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_49;

  $bb18:
    assume out_$i29 == 1;
    goto corral_source_split_48;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i28, 0);
    goto corral_source_split_46;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} out_$i28 := usb_serial_generic_write_start(out_$p11);
    call {:si_unique_call 7} {:cexpr "r"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_45;

  $bb16:
    assume out_$i27 == 1;
    goto corral_source_split_44;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_42;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_41;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p11, $mul.ref(0, 2632)), $mul.ref(1160, 1));
    goto corral_source_split_40;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i6;
    goto $bb15;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i23;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  $bb13:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := out_$i6;
    goto $bb14;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i22;
    goto $bb14;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i6, 1);
    call {:si_unique_call 5} {:cexpr "c"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_35;

  $bb12:
    assume out_$i21 == 1;
    goto corral_source_split_34;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, 0);
    goto corral_source_split_32;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} out_$i20 := usb_serial_generic_submit_read_urbs(out_$p11, 16);
    call {:si_unique_call 4} {:cexpr "r"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_31;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_30;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_28;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_27;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p11, $mul.ref(0, 2632)), $mul.ref(1088, 1));
    goto corral_source_split_26;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i33, out_$i34, out_$i35, out_$i36, out_$i6, out_$i7, out_$i37 := usb_serial_generic_resume_loop_$bb4(in_$p0, in_$p1, out_$i8, out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i33, out_$i34, out_$i35, out_$i36, out_$i6, out_$i7, out_$i37);
    return;

  exit:
    return;
}



procedure usb_serial_generic_resume_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i16: i32, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i6: i32, in_$i7: i32, in_$i37: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i16: i32, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i6: i32, out_$i7: i32, out_$i37: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_generic_submit_read_urbs_loop_$bb14(in_$p0: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i8: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i8: i32)
{

  entry:
    out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i8 := in_$i9, in_$p11, in_$p12, in_$i13, in_$i14, in_$i8;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;

  $bb16:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i13;
    goto $bb16_dummy;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    out_$i14 := $sge.i32(out_$i13, 0);
    goto corral_source_split_125;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$i13 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 24} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} usb_kill_urb(out_$p12);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_122;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(out_$i9, 8));
    goto corral_source_split_121;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i8 := usb_serial_generic_submit_read_urbs_loop_$bb14(in_$p0, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i8);
    return;

  exit:
    return;
}



procedure usb_serial_generic_submit_read_urbs_loop_$bb14(in_$p0: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i8: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i8: i32);



implementation destroy_serial_loop_$bb13(in_$p1: ref, in_$p22: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i26: i32) returns (out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i26: i32)
{

  entry:
    out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i26 := in_$i27, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i26;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1426;

  $bb18:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i35;
    goto $bb18_dummy;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$i38 := $sgt.i32(out_$i37, out_$i35);
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i32(out_$i36);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.0, in_$p22);
    goto corral_source_split_1441;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i26, 1);
    call {:si_unique_call 251} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1440;

  $bb16:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} put_device(out_$p34);
    goto corral_source_split_1438;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p30, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_1437;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p33, $0.ref);
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p30, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_1435;

  $bb15:
    assume out_$i32 == 1;
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(32, 1)), $mul.ref(out_$i27, 8));
    goto corral_source_split_1429;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i26 := destroy_serial_loop_$bb13(in_$p1, in_$p22, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i26);
    return;

  exit:
    return;
}



procedure destroy_serial_loop_$bb13(in_$p1: ref, in_$p22: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i26: i32) returns (out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i26: i32);
  modifies $M.0;



implementation return_serial_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$i7: i8, in_$i8: i32, in_$i9: i32, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$p6: ref, out_$i7: i8, out_$i8: i32, out_$i9: i32, out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := in_$p6, in_$i7, in_$i8, in_$i9, in_$i10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i12;
    goto $bb6_dummy;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    out_$i15 := $sgt.i32(out_$i14, out_$i12);
    goto corral_source_split_1512;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_1511;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, in_$p1);
    goto corral_source_split_1510;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i5, 1);
    call {:si_unique_call 271} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p11, $0.ref);
    goto corral_source_split_1508;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(out_$i10, 8));
    goto corral_source_split_1507;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i9);
    goto corral_source_split_1506;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    out_$i9 := $add.i32(out_$i8, out_$i5);
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i8.i32(out_$i7);
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i8($M.0, out_$p6);
    goto corral_source_split_1503;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1502;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := return_serial_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5);
    return;

  exit:
    return;
}



procedure return_serial_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$i7: i8, in_$i8: i32, in_$i9: i32, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$p6: ref, out_$i7: i8, out_$i8: i32, out_$i9: i32, out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32);
  modifies $M.24;



implementation serial_proc_show_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i16, in_$i44: i32, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p63: ref, in_$i8: i32, in_$i64: i32, in_$i65: i1, in_$i4: i32, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i32, in_vslice_dummy_var_35: i32, in_vslice_dummy_var_36: i32, in_vslice_dummy_var_37: i32, in_vslice_dummy_var_38: i32, in_vslice_dummy_var_39: i32, in_vslice_dummy_var_40: i32) returns (out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i16, out_$i44: i32, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p60: ref, out_$p63: ref, out_$i8: i32, out_$i64: i32, out_$i65: i1, out_$i4: i32, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i32, out_vslice_dummy_var_35: i32, out_vslice_dummy_var_36: i32, out_vslice_dummy_var_37: i32, out_vslice_dummy_var_38: i32, out_vslice_dummy_var_39: i32, out_vslice_dummy_var_40: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$p10, out_$p11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p60, out_$p63, out_$i8, out_$i64, out_$i65, out_$i4, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_38, out_vslice_dummy_var_39, out_vslice_dummy_var_40 := in_$p5, in_$i6, in_$i7, in_$p10, in_$p11, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p26, in_$p28, in_$p29, in_$p30, in_$p31, in_$p33, in_$p34, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$p42, in_$i43, in_$i44, in_$p46, in_$i47, in_$i48, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p56, in_$p57, in_$p58, in_$p60, in_$p63, in_$i8, in_$i64, in_$i65, in_$i4, in_vslice_dummy_var_32, in_vslice_dummy_var_33, in_vslice_dummy_var_34, in_vslice_dummy_var_35, in_vslice_dummy_var_36, in_vslice_dummy_var_37, in_vslice_dummy_var_38, in_vslice_dummy_var_39, in_vslice_dummy_var_40;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1667;

  $bb13:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i64;
    goto $bb13_dummy;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$i65 := $sle.i32(out_$i64, 253);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i8, 1);
    call {:si_unique_call 328} {:cexpr "i"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_1676;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i4;
    goto $bb5;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i4;
    goto $bb5;

  $bb3:
    assume out_$i7 == 1;
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i64(out_$i6, 0);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_1670;

  SeqInstr_183:
    goto corral_source_split_1669;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} out_$p5 := usb_serial_get_by_index(out_$i4);
    goto SeqInstr_182;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    goto $bb2;

  SeqInstr_189:
    goto corral_source_split_1739;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} ldv_mutex_unlock_23(out_$p63);
    goto SeqInstr_188;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p5, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_1738;

  SeqInstr_186:
    goto corral_source_split_1737;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} usb_serial_put(out_$p5);
    goto SeqInstr_185;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} out_vslice_dummy_var_40 := seq_putc(in_$p0, 10);
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} out_vslice_dummy_var_39 := seq_printf.ref.ref.ref(in_$p0, .str.90, out_$p60);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} out_vslice_dummy_var_38 := usb_make_path(out_$p57, out_$p58, 40);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p5, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_1730;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} out_vslice_dummy_var_37 := seq_printf.ref.ref.i32(in_$p0, .str.89, out_$i54);
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i53, 1);
    goto corral_source_split_1728;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(out_$i4, out_$i52);
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i8.i32(out_$i51);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i8($M.0, out_$p50);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p5, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} out_vslice_dummy_var_36 := seq_printf.ref.ref.i32(in_$p0, .str.88, out_$i48);
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i47);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.0, out_$p46);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p5, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} out_vslice_dummy_var_35 := seq_printf.ref.ref.i32.i32(in_$p0, .str.87, out_$i38, out_$i44);
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(out_$i43);
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i16($M.0, out_$p42);
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p40, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(10, 1));
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_1715;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p5, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_1714;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.0, out_$p36);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_1710;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p5, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} out_vslice_dummy_var_34 := seq_printf.ref.ref.ref(in_$p0, .str.86, out_$p31);
    goto corral_source_split_1708;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_1705;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1704;

  $bb8:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} out_vslice_dummy_var_33 := seq_printf.ref.ref.ref(in_$p0, .str.84, out_$p26);
    goto corral_source_split_1702;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$p26 := .str.85;
    goto $bb11;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p24;
    goto $bb11;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(0, 608)), $mul.ref(24, 1));
    goto corral_source_split_1696;

  $bb9:
    assume out_$i23 == 1;
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, 0);
    goto corral_source_split_1693;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_1692;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1688;

  $bb7:
    assume out_$i16 == 1;
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_1681;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1680;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} out_vslice_dummy_var_32 := seq_printf.ref.ref.i32(in_$p0, .str.83, out_$i4);
    goto corral_source_split_1679;

  $bb4:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10:
    assume !(out_$i23 == 1);
    goto corral_source_split_1699;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$p10, out_$p11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p60, out_$p63, out_$i8, out_$i64, out_$i65, out_$i4, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_38, out_vslice_dummy_var_39, out_vslice_dummy_var_40 := serial_proc_show_loop_$bb1(in_$p0, in_$p2, out_$p5, out_$i6, out_$i7, out_$p10, out_$p11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p60, out_$p63, out_$i8, out_$i64, out_$i65, out_$i4, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_38, out_vslice_dummy_var_39, out_vslice_dummy_var_40);
    return;

  exit:
    return;
}



procedure serial_proc_show_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i16, in_$i44: i32, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p63: ref, in_$i8: i32, in_$i64: i32, in_$i65: i1, in_$i4: i32, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i32, in_vslice_dummy_var_35: i32, in_vslice_dummy_var_36: i32, in_vslice_dummy_var_37: i32, in_vslice_dummy_var_38: i32, in_vslice_dummy_var_39: i32, in_vslice_dummy_var_40: i32) returns (out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i16, out_$i44: i32, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p60: ref, out_$p63: ref, out_$i8: i32, out_$i64: i32, out_$i65: i1, out_$i4: i32, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i32, out_vslice_dummy_var_35: i32, out_vslice_dummy_var_36: i32, out_vslice_dummy_var_37: i32, out_vslice_dummy_var_38: i32, out_vslice_dummy_var_39: i32, out_vslice_dummy_var_40: i32);
  modifies $M.25, $M.8, assertsPassed, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.49, $M.50, $CurrAddr;



implementation usb_serial_probe_loop_$bb256(in_$p20: ref, in_$p21: ref, in_$p53: ref, in_$i338: i32, in_$i731: i64, in_$p733: ref, in_$p734: ref, in_$p735: ref, in_$p736: ref, in_$i737: i8, in_$i738: i32, in_$p740: ref, in_$p741: ref, in_$p742: ref, in_$p743: ref, in_$p744: ref, in_$p745: ref, in_$i746: i24, in_$i747: i24, in_$i748: i24, in_$p749: ref, in_$p750: ref, in_$i751: i8, in_$i752: i64, in_$i753: i64, in_$i754: i64, in_$i755: i1, in_$p756: ref, in_$p757: ref, in_$p759: ref, in_$p760: ref, in_$i761: i32, in_$i762: i1, in_$i764: i32, in_$i765: i1, in_$i730: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32) returns (out_$i731: i64, out_$p733: ref, out_$p734: ref, out_$p735: ref, out_$p736: ref, out_$i737: i8, out_$i738: i32, out_$p740: ref, out_$p741: ref, out_$p742: ref, out_$p743: ref, out_$p744: ref, out_$p745: ref, out_$i746: i24, out_$i747: i24, out_$i748: i24, out_$p749: ref, out_$p750: ref, out_$i751: i8, out_$i752: i64, out_$i753: i64, out_$i754: i64, out_$i755: i1, out_$p756: ref, out_$p757: ref, out_$p759: ref, out_$p760: ref, out_$i761: i32, out_$i762: i1, out_$i764: i32, out_$i765: i1, out_$i730: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32)
{

  entry:
    out_$i731, out_$p733, out_$p734, out_$p735, out_$p736, out_$i737, out_$i738, out_$p740, out_$p741, out_$p742, out_$p743, out_$p744, out_$p745, out_$i746, out_$i747, out_$i748, out_$p749, out_$p750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$p756, out_$p757, out_$p759, out_$p760, out_$i761, out_$i762, out_$i764, out_$i765, out_$i730, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61 := in_$i731, in_$p733, in_$p734, in_$p735, in_$p736, in_$i737, in_$i738, in_$p740, in_$p741, in_$p742, in_$p743, in_$p744, in_$p745, in_$i746, in_$i747, in_$i748, in_$p749, in_$p750, in_$i751, in_$i752, in_$i753, in_$i754, in_$i755, in_$p756, in_$p757, in_$p759, in_$p760, in_$i761, in_$i762, in_$i764, in_$i765, in_$i730, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61;
    goto $bb256, exit;

  $bb256:
    assume {:verifier.code 0} true;
    goto corral_source_split_2804;

  $bb264:
    assume out_$i765 == 1;
    assume {:verifier.code 0} true;
    out_$i730 := out_$i764;
    goto $bb264_dummy;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    out_$i765 := $slt.i32(out_$i764, in_$i338);
    goto corral_source_split_2852;

  $bb263:
    assume {:verifier.code 0} true;
    out_$i764 := $add.i32(out_$i730, 1);
    call {:si_unique_call 524} {:cexpr "i"} boogie_si_record_i32(out_$i764);
    goto corral_source_split_2851;

  $bb262:
    assume !(out_$i762 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} out_vslice_dummy_var_61 := dev_err.ref.ref(in_$p21, .str.41);
    goto corral_source_split_2849;

  $bb261:
    assume out_$i762 == 1;
    goto corral_source_split_2848;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$i762 := $ne.i32(out_$i761, 0);
    goto corral_source_split_2846;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} out_$i761 := device_add(out_$p760);
    call {:si_unique_call 522} {:cexpr "retval"} boogie_si_record_i32(out_$i761);
    goto corral_source_split_2845;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    out_$p760 := $add.ref($add.ref(out_$p734, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2844;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} device_enable_async_suspend(out_$p759);
    goto corral_source_split_2843;

  $bb260:
    assume {:verifier.code 0} true;
    out_$p759 := $add.ref($add.ref(out_$p734, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2842;

  $bb259:
    assume !(out_$i755 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} out_vslice_dummy_var_60 := __dynamic_dev_dbg.ref.ref.ref.ref(in_$p20, in_$p21, .str.40, out_$p757);
    goto corral_source_split_2840;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} out_$p757 := dev_name(out_$p756);
    goto corral_source_split_2839;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    out_$p756 := $add.ref($add.ref(out_$p734, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2838;

  $bb258:
    assume out_$i755 == 1;
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$i755 := $ne.i64(out_$i754, 0);
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} out_$i754 := ldv__builtin_expect(out_$i753, 0);
    call {:si_unique_call 517} {:cexpr "tmp___31"} boogie_si_record_i64(out_$i754);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$i753 := $and.i64(out_$i752, 1);
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i752 := $zext.i8.i64(out_$i751);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$i751 := $load.i8($M.6, out_$p750);
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$p750 := $add.ref($add.ref(in_$p20, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p749, 0);
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$p749 := $add.ref($add.ref(in_$p20, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p745, out_$i748);
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$i748 := $or.i24(out_$i747, 1085);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$i747 := $and.i24(out_$i746, $sub.i24(0, 262144));
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$i746 := $load.i24($M.5, out_$p745);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$p745 := $bitcast.ref.ref(out_$p744);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$p744 := $add.ref($add.ref(in_$p20, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p743, .str.40);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$p743 := $add.ref($add.ref(in_$p20, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p742, .str.19);
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p742 := $add.ref($add.ref(in_$p20, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p741, .str.18);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$p741 := $add.ref($add.ref(in_$p20, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p740, .str);
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$p740 := $add.ref($add.ref(in_$p20, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} out_vslice_dummy_var_59 := dev_set_name.ref.ref.i32(out_$p735, .str.39, out_$i738);
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i738 := $zext.i8.i32(out_$i737);
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$i737 := $load.i8($M.0, out_$p736);
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$p736 := $add.ref($add.ref(out_$p734, $mul.ref(0, 2632)), $mul.ref(1016, 1));
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$p735 := $add.ref($add.ref(out_$p734, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$p734 := $load.ref($M.0, out_$p733);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$p733 := $add.ref($add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i731, 8));
    goto corral_source_split_2807;

  $bb257:
    assume {:verifier.code 0} true;
    out_$i731 := $sext.i32.i64(out_$i730);
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb264_dummy:
    call {:si_unique_call 1} out_$i731, out_$p733, out_$p734, out_$p735, out_$p736, out_$i737, out_$i738, out_$p740, out_$p741, out_$p742, out_$p743, out_$p744, out_$p745, out_$i746, out_$i747, out_$i748, out_$p749, out_$p750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$p756, out_$p757, out_$p759, out_$p760, out_$i761, out_$i762, out_$i764, out_$i765, out_$i730, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61 := usb_serial_probe_loop_$bb256(in_$p20, in_$p21, in_$p53, in_$i338, out_$i731, out_$p733, out_$p734, out_$p735, out_$p736, out_$i737, out_$i738, out_$p740, out_$p741, out_$p742, out_$p743, out_$p744, out_$p745, out_$i746, out_$i747, out_$i748, out_$p749, out_$p750, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$p756, out_$p757, out_$p759, out_$p760, out_$i761, out_$i762, out_$i764, out_$i765, out_$i730, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb256(in_$p20: ref, in_$p21: ref, in_$p53: ref, in_$i338: i32, in_$i731: i64, in_$p733: ref, in_$p734: ref, in_$p735: ref, in_$p736: ref, in_$i737: i8, in_$i738: i32, in_$p740: ref, in_$p741: ref, in_$p742: ref, in_$p743: ref, in_$p744: ref, in_$p745: ref, in_$i746: i24, in_$i747: i24, in_$i748: i24, in_$p749: ref, in_$p750: ref, in_$i751: i8, in_$i752: i64, in_$i753: i64, in_$i754: i64, in_$i755: i1, in_$p756: ref, in_$p757: ref, in_$p759: ref, in_$p760: ref, in_$i761: i32, in_$i762: i1, in_$i764: i32, in_$i765: i1, in_$i730: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32) returns (out_$i731: i64, out_$p733: ref, out_$p734: ref, out_$p735: ref, out_$p736: ref, out_$i737: i8, out_$i738: i32, out_$p740: ref, out_$p741: ref, out_$p742: ref, out_$p743: ref, out_$p744: ref, out_$p745: ref, out_$i746: i24, out_$i747: i24, out_$i748: i24, out_$p749: ref, out_$p750: ref, out_$i751: i8, out_$i752: i64, out_$i753: i64, out_$i754: i64, out_$i755: i1, out_$p756: ref, out_$p757: ref, out_$p759: ref, out_$p760: ref, out_$i761: i32, out_$i762: i1, out_$i764: i32, out_$i765: i1, out_$i730: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32);
  modifies $M.0, $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation usb_serial_probe_loop_$bb222(in_$p3: ref, in_$p22: ref, in_$p53: ref, in_$i95: i32, in_$i637: i64, in_$p638: ref, in_$p639: ref, in_$i640: i64, in_$p642: ref, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$p646: ref, in_$p647: ref, in_$i648: i64, in_$i649: i1, in_$i650: i32, in_$p651: ref, in_$p652: ref, in_$i653: i8, in_$p654: ref, in_$i655: i64, in_$p656: ref, in_$p657: ref, in_$p658: ref, in_$p659: ref, in_$i660: i64, in_$i661: i1, in_$p662: ref, in_$i663: i8, in_$i664: i32, in_$i665: i32, in_$p666: ref, in_$p667: ref, in_$i668: i32, in_$p669: ref, in_$p670: ref, in_$p671: ref, in_$p672: ref, in_$p673: ref, in_$p674: ref, in_$p675: ref, in_$p676: ref, in_$i677: i8, in_$i678: i32, in_$i679: i32, in_$i680: i1, in_$i636: i32) returns (out_$i637: i64, out_$p638: ref, out_$p639: ref, out_$i640: i64, out_$p642: ref, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$p646: ref, out_$p647: ref, out_$i648: i64, out_$i649: i1, out_$i650: i32, out_$p651: ref, out_$p652: ref, out_$i653: i8, out_$p654: ref, out_$i655: i64, out_$p656: ref, out_$p657: ref, out_$p658: ref, out_$p659: ref, out_$i660: i64, out_$i661: i1, out_$p662: ref, out_$i663: i8, out_$i664: i32, out_$i665: i32, out_$p666: ref, out_$p667: ref, out_$i668: i32, out_$p669: ref, out_$p670: ref, out_$p671: ref, out_$p672: ref, out_$p673: ref, out_$p674: ref, out_$p675: ref, out_$p676: ref, out_$i677: i8, out_$i678: i32, out_$i679: i32, out_$i680: i1, out_$i636: i32)
{

  entry:
    out_$i637, out_$p638, out_$p639, out_$i640, out_$p642, out_$p643, out_$p644, out_$p645, out_$p646, out_$p647, out_$i648, out_$i649, out_$i650, out_$p651, out_$p652, out_$i653, out_$p654, out_$i655, out_$p656, out_$p657, out_$p658, out_$p659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$i665, out_$p666, out_$p667, out_$i668, out_$p669, out_$p670, out_$p671, out_$p672, out_$p673, out_$p674, out_$p675, out_$p676, out_$i677, out_$i678, out_$i679, out_$i680, out_$i636 := in_$i637, in_$p638, in_$p639, in_$i640, in_$p642, in_$p643, in_$p644, in_$p645, in_$p646, in_$p647, in_$i648, in_$i649, in_$i650, in_$p651, in_$p652, in_$i653, in_$p654, in_$i655, in_$p656, in_$p657, in_$p658, in_$p659, in_$i660, in_$i661, in_$p662, in_$i663, in_$i664, in_$i665, in_$p666, in_$p667, in_$i668, in_$p669, in_$p670, in_$p671, in_$p672, in_$p673, in_$p674, in_$p675, in_$p676, in_$i677, in_$i678, in_$i679, in_$i680, in_$i636;
    goto $bb222, exit;

  $bb222:
    assume {:verifier.code 0} true;
    goto corral_source_split_2663;

  $bb230:
    assume out_$i680 == 1;
    assume {:verifier.code 0} true;
    out_$i636 := out_$i679;
    goto $bb230_dummy;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$i680 := $slt.i32(out_$i679, in_$i95);
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$i679 := $add.i32(out_$i636, 1);
    call {:si_unique_call 505} {:cexpr "i"} boogie_si_record_i32(out_$i679);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} usb_fill_int_urb(out_$p667, in_$p22, out_$i668, out_$p670, out_$i650, out_$p674, out_$p675, out_$i678);
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i678 := $zext.i8.i32(out_$i677);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$i677 := $load.i8($M.0, out_$p676);
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$p676 := $add.ref($add.ref(out_$p639, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$p675 := $bitcast.ref.ref(out_$p643);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$p674 := $load.ref($M.0, out_$p673);
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$p673 := $add.ref($add.ref(out_$p672, $mul.ref(0, 536)), $mul.ref(496, 1));
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$p672 := $load.ref($M.0, out_$p671);
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    out_$p671 := $add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2708;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$p670 := $load.ref($M.0, out_$p669);
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    out_$p669 := $add.ref($add.ref(out_$p643, $mul.ref(0, 2632)), $mul.ref(1048, 1));
    goto corral_source_split_2706;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$i668 := $or.i32(out_$i665, 1073741824);
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$p667 := $load.ref($M.0, out_$p666);
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$p666 := $add.ref($add.ref(out_$p643, $mul.ref(0, 2632)), $mul.ref(1064, 1));
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} out_$i665 := __create_pipe(in_$p22, out_$i664);
    call {:si_unique_call 503} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i665);
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$i664 := $zext.i8.i32(out_$i663);
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    out_$i663 := $load.i8($M.0, out_$p662);
    goto corral_source_split_2700;

  $bb229:
    assume {:verifier.code 0} true;
    out_$p662 := $add.ref($add.ref(out_$p639, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2699;

  $bb228:
    assume !(out_$i661 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    out_$i661 := $eq.i64(out_$i660, 0);
    goto corral_source_split_2695;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$i660 := $p2i.ref.i64(out_$p659);
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$p659 := $load.ref($M.0, out_$p658);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$p658 := $add.ref($add.ref(out_$p643, $mul.ref(0, 2632)), $mul.ref(1048, 1));
    goto corral_source_split_2692;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p657, out_$p656);
    goto corral_source_split_2691;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    out_$p657 := $add.ref($add.ref(out_$p643, $mul.ref(0, 2632)), $mul.ref(1048, 1));
    goto corral_source_split_2690;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} out_$p656 := kmalloc(out_$i655, 208);
    goto corral_source_split_2689;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    out_$i655 := $sext.i32.i64(out_$i650);
    goto corral_source_split_2688;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p654, out_$i653);
    goto corral_source_split_2687;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    out_$p654 := $add.ref($add.ref(out_$p643, $mul.ref(0, 2632)), $mul.ref(1072, 1));
    goto corral_source_split_2686;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$i653 := $load.i8($M.0, out_$p652);
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    out_$p652 := $add.ref($add.ref(out_$p639, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2684;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p651, out_$i650);
    goto corral_source_split_2683;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    out_$p651 := $add.ref($add.ref(out_$p643, $mul.ref(0, 2632)), $mul.ref(1056, 1));
    goto corral_source_split_2682;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} out_$i650 := usb_endpoint_maxp(out_$p639);
    call {:si_unique_call 500} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i650);
    goto corral_source_split_2681;

  $bb225:
    assume !(out_$i649 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    out_$i649 := $eq.i64(out_$i648, 0);
    goto corral_source_split_2677;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    out_$i648 := $p2i.ref.i64(out_$p647);
    goto corral_source_split_2676;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    out_$p647 := $load.ref($M.0, out_$p646);
    goto corral_source_split_2675;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    out_$p646 := $add.ref($add.ref(out_$p643, $mul.ref(0, 2632)), $mul.ref(1064, 1));
    goto corral_source_split_2674;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p645, out_$p644);
    goto corral_source_split_2673;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    out_$p645 := $add.ref($add.ref(out_$p643, $mul.ref(0, 2632)), $mul.ref(1064, 1));
    goto corral_source_split_2672;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} out_$p644 := usb_alloc_urb(0, 208);
    goto corral_source_split_2671;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    out_$p643 := $load.ref($M.0, out_$p642);
    goto corral_source_split_2670;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$p642 := $add.ref($add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i640, 8));
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$i640 := $sext.i32.i64(out_$i636);
    goto corral_source_split_2668;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$p639 := $load.ref($M.30, out_$p638);
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$p638 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(out_$i637, 8));
    goto corral_source_split_2666;

  $bb223:
    assume {:verifier.code 0} true;
    out_$i637 := $sext.i32.i64(out_$i636);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb230_dummy:
    call {:si_unique_call 1} out_$i637, out_$p638, out_$p639, out_$i640, out_$p642, out_$p643, out_$p644, out_$p645, out_$p646, out_$p647, out_$i648, out_$i649, out_$i650, out_$p651, out_$p652, out_$i653, out_$p654, out_$i655, out_$p656, out_$p657, out_$p658, out_$p659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$i665, out_$p666, out_$p667, out_$i668, out_$p669, out_$p670, out_$p671, out_$p672, out_$p673, out_$p674, out_$p675, out_$p676, out_$i677, out_$i678, out_$i679, out_$i680, out_$i636 := usb_serial_probe_loop_$bb222(in_$p3, in_$p22, in_$p53, in_$i95, out_$i637, out_$p638, out_$p639, out_$i640, out_$p642, out_$p643, out_$p644, out_$p645, out_$p646, out_$p647, out_$i648, out_$i649, out_$i650, out_$p651, out_$p652, out_$i653, out_$p654, out_$i655, out_$p656, out_$p657, out_$p658, out_$p659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$i665, out_$p666, out_$p667, out_$i668, out_$p669, out_$p670, out_$p671, out_$p672, out_$p673, out_$p674, out_$p675, out_$p676, out_$i677, out_$i678, out_$i679, out_$i680, out_$i636);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb222(in_$p3: ref, in_$p22: ref, in_$p53: ref, in_$i95: i32, in_$i637: i64, in_$p638: ref, in_$p639: ref, in_$i640: i64, in_$p642: ref, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$p646: ref, in_$p647: ref, in_$i648: i64, in_$i649: i1, in_$i650: i32, in_$p651: ref, in_$p652: ref, in_$i653: i8, in_$p654: ref, in_$i655: i64, in_$p656: ref, in_$p657: ref, in_$p658: ref, in_$p659: ref, in_$i660: i64, in_$i661: i1, in_$p662: ref, in_$i663: i8, in_$i664: i32, in_$i665: i32, in_$p666: ref, in_$p667: ref, in_$i668: i32, in_$p669: ref, in_$p670: ref, in_$p671: ref, in_$p672: ref, in_$p673: ref, in_$p674: ref, in_$p675: ref, in_$p676: ref, in_$i677: i8, in_$i678: i32, in_$i679: i32, in_$i680: i1, in_$i636: i32) returns (out_$i637: i64, out_$p638: ref, out_$p639: ref, out_$i640: i64, out_$p642: ref, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$p646: ref, out_$p647: ref, out_$i648: i64, out_$i649: i1, out_$i650: i32, out_$p651: ref, out_$p652: ref, out_$i653: i8, out_$p654: ref, out_$i655: i64, out_$p656: ref, out_$p657: ref, out_$p658: ref, out_$p659: ref, out_$i660: i64, out_$i661: i1, out_$p662: ref, out_$i663: i8, out_$i664: i32, out_$i665: i32, out_$p666: ref, out_$p667: ref, out_$i668: i32, out_$p669: ref, out_$p670: ref, out_$p671: ref, out_$p672: ref, out_$p673: ref, out_$p674: ref, out_$p675: ref, out_$p676: ref, out_$i677: i8, out_$i678: i32, out_$i679: i32, out_$i680: i1, out_$i636: i32);
  modifies $M.0, $CurrAddr;



implementation usb_serial_probe_loop_$bb199(in_$p2: ref, in_$p22: ref, in_$p53: ref, in_$i313: i32, in_$i568: i64, in_$p569: ref, in_$p570: ref, in_$i571: i64, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$p577: ref, in_$p578: ref, in_$i579: i64, in_$i580: i1, in_$i581: i32, in_$p582: ref, in_$i583: i8, in_$p584: ref, in_$i585: i64, in_$p586: ref, in_$p587: ref, in_$p588: ref, in_$p589: ref, in_$i590: i64, in_$i591: i1, in_$p592: ref, in_$i593: i8, in_$i594: i32, in_$i595: i32, in_$p596: ref, in_$p597: ref, in_$i598: i32, in_$p599: ref, in_$p600: ref, in_$p601: ref, in_$p602: ref, in_$p603: ref, in_$p604: ref, in_$p605: ref, in_$p606: ref, in_$i607: i8, in_$i608: i32, in_$i609: i32, in_$i610: i1, in_$i567: i32) returns (out_$i568: i64, out_$p569: ref, out_$p570: ref, out_$i571: i64, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$p577: ref, out_$p578: ref, out_$i579: i64, out_$i580: i1, out_$i581: i32, out_$p582: ref, out_$i583: i8, out_$p584: ref, out_$i585: i64, out_$p586: ref, out_$p587: ref, out_$p588: ref, out_$p589: ref, out_$i590: i64, out_$i591: i1, out_$p592: ref, out_$i593: i8, out_$i594: i32, out_$i595: i32, out_$p596: ref, out_$p597: ref, out_$i598: i32, out_$p599: ref, out_$p600: ref, out_$p601: ref, out_$p602: ref, out_$p603: ref, out_$p604: ref, out_$p605: ref, out_$p606: ref, out_$i607: i8, out_$i608: i32, out_$i609: i32, out_$i610: i1, out_$i567: i32)
{

  entry:
    out_$i568, out_$p569, out_$p570, out_$i571, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$i579, out_$i580, out_$i581, out_$p582, out_$i583, out_$p584, out_$i585, out_$p586, out_$p587, out_$p588, out_$p589, out_$i590, out_$i591, out_$p592, out_$i593, out_$i594, out_$i595, out_$p596, out_$p597, out_$i598, out_$p599, out_$p600, out_$p601, out_$p602, out_$p603, out_$p604, out_$p605, out_$p606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i567 := in_$i568, in_$p569, in_$p570, in_$i571, in_$p573, in_$p574, in_$p575, in_$p576, in_$p577, in_$p578, in_$i579, in_$i580, in_$i581, in_$p582, in_$i583, in_$p584, in_$i585, in_$p586, in_$p587, in_$p588, in_$p589, in_$i590, in_$i591, in_$p592, in_$i593, in_$i594, in_$i595, in_$p596, in_$p597, in_$i598, in_$p599, in_$p600, in_$p601, in_$p602, in_$p603, in_$p604, in_$p605, in_$p606, in_$i607, in_$i608, in_$i609, in_$i610, in_$i567;
    goto $bb199, exit;

  $bb199:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  $bb207:
    assume out_$i610 == 1;
    assume {:verifier.code 0} true;
    out_$i567 := out_$i609;
    goto $bb207_dummy;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$i610 := $slt.i32(out_$i609, in_$i313);
    goto corral_source_split_2617;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    out_$i609 := $add.i32(out_$i567, 1);
    call {:si_unique_call 494} {:cexpr "i"} boogie_si_record_i32(out_$i609);
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} usb_fill_int_urb(out_$p597, in_$p22, out_$i598, out_$p600, out_$i581, out_$p604, out_$p605, out_$i608);
    goto corral_source_split_2615;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_$i608 := $zext.i8.i32(out_$i607);
    goto corral_source_split_2614;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    out_$i607 := $load.i8($M.0, out_$p606);
    goto corral_source_split_2613;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    out_$p606 := $add.ref($add.ref(out_$p570, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_2612;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    out_$p605 := $bitcast.ref.ref(out_$p574);
    goto corral_source_split_2611;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_$p604 := $load.ref($M.0, out_$p603);
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    out_$p603 := $add.ref($add.ref(out_$p602, $mul.ref(0, 536)), $mul.ref(488, 1));
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$p602 := $load.ref($M.0, out_$p601);
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    out_$p601 := $add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$p600 := $load.ref($M.0, out_$p599);
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    out_$p599 := $add.ref($add.ref(out_$p574, $mul.ref(0, 2632)), $mul.ref(1024, 1));
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    out_$i598 := $or.i32(out_$i595, 1073741952);
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$p597 := $load.ref($M.0, out_$p596);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$p596 := $add.ref($add.ref(out_$p574, $mul.ref(0, 2632)), $mul.ref(1032, 1));
    goto corral_source_split_2602;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} out_$i595 := __create_pipe(in_$p22, out_$i594);
    call {:si_unique_call 492} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i595);
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$i594 := $zext.i8.i32(out_$i593);
    goto corral_source_split_2600;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    out_$i593 := $load.i8($M.0, out_$p592);
    goto corral_source_split_2599;

  $bb206:
    assume {:verifier.code 0} true;
    out_$p592 := $add.ref($add.ref(out_$p570, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2598;

  $bb205:
    assume !(out_$i591 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    out_$i591 := $eq.i64(out_$i590, 0);
    goto corral_source_split_2594;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    out_$i590 := $p2i.ref.i64(out_$p589);
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    out_$p589 := $load.ref($M.0, out_$p588);
    goto corral_source_split_2592;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    out_$p588 := $add.ref($add.ref(out_$p574, $mul.ref(0, 2632)), $mul.ref(1024, 1));
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p587, out_$p586);
    goto corral_source_split_2590;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    out_$p587 := $add.ref($add.ref(out_$p574, $mul.ref(0, 2632)), $mul.ref(1024, 1));
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} out_$p586 := kmalloc(out_$i585, 208);
    goto corral_source_split_2588;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    out_$i585 := $sext.i32.i64(out_$i581);
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p584, out_$i583);
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    out_$p584 := $add.ref($add.ref(out_$p574, $mul.ref(0, 2632)), $mul.ref(1040, 1));
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    out_$i583 := $load.i8($M.0, out_$p582);
    goto corral_source_split_2584;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    out_$p582 := $add.ref($add.ref(out_$p570, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2583;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} out_$i581 := usb_endpoint_maxp(out_$p570);
    call {:si_unique_call 489} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i581);
    goto corral_source_split_2582;

  $bb202:
    assume !(out_$i580 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    out_$i580 := $eq.i64(out_$i579, 0);
    goto corral_source_split_2578;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    out_$i579 := $p2i.ref.i64(out_$p578);
    goto corral_source_split_2577;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    out_$p578 := $load.ref($M.0, out_$p577);
    goto corral_source_split_2576;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    out_$p577 := $add.ref($add.ref(out_$p574, $mul.ref(0, 2632)), $mul.ref(1032, 1));
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p576, out_$p575);
    goto corral_source_split_2574;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$p576 := $add.ref($add.ref(out_$p574, $mul.ref(0, 2632)), $mul.ref(1032, 1));
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} out_$p575 := usb_alloc_urb(0, 208);
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    out_$p574 := $load.ref($M.0, out_$p573);
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    out_$p573 := $add.ref($add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i571, 8));
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    out_$i571 := $sext.i32.i64(out_$i567);
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    out_$p570 := $load.ref($M.29, out_$p569);
    goto corral_source_split_2568;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    out_$p569 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i568, 8));
    goto corral_source_split_2567;

  $bb200:
    assume {:verifier.code 0} true;
    out_$i568 := $sext.i32.i64(out_$i567);
    goto corral_source_split_2566;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb207_dummy:
    call {:si_unique_call 1} out_$i568, out_$p569, out_$p570, out_$i571, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$i579, out_$i580, out_$i581, out_$p582, out_$i583, out_$p584, out_$i585, out_$p586, out_$p587, out_$p588, out_$p589, out_$i590, out_$i591, out_$p592, out_$i593, out_$i594, out_$i595, out_$p596, out_$p597, out_$i598, out_$p599, out_$p600, out_$p601, out_$p602, out_$p603, out_$p604, out_$p605, out_$p606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i567 := usb_serial_probe_loop_$bb199(in_$p2, in_$p22, in_$p53, in_$i313, out_$i568, out_$p569, out_$p570, out_$i571, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$i579, out_$i580, out_$i581, out_$p582, out_$i583, out_$p584, out_$i585, out_$p586, out_$p587, out_$p588, out_$p589, out_$i590, out_$i591, out_$p592, out_$i593, out_$i594, out_$i595, out_$p596, out_$p597, out_$i598, out_$p599, out_$p600, out_$p601, out_$p602, out_$p603, out_$p604, out_$p605, out_$p606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i567);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb199(in_$p2: ref, in_$p22: ref, in_$p53: ref, in_$i313: i32, in_$i568: i64, in_$p569: ref, in_$p570: ref, in_$i571: i64, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$p577: ref, in_$p578: ref, in_$i579: i64, in_$i580: i1, in_$i581: i32, in_$p582: ref, in_$i583: i8, in_$p584: ref, in_$i585: i64, in_$p586: ref, in_$p587: ref, in_$p588: ref, in_$p589: ref, in_$i590: i64, in_$i591: i1, in_$p592: ref, in_$i593: i8, in_$i594: i32, in_$i595: i32, in_$p596: ref, in_$p597: ref, in_$i598: i32, in_$p599: ref, in_$p600: ref, in_$p601: ref, in_$p602: ref, in_$p603: ref, in_$p604: ref, in_$p605: ref, in_$p606: ref, in_$i607: i8, in_$i608: i32, in_$i609: i32, in_$i610: i1, in_$i567: i32) returns (out_$i568: i64, out_$p569: ref, out_$p570: ref, out_$i571: i64, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$p577: ref, out_$p578: ref, out_$i579: i64, out_$i580: i1, out_$i581: i32, out_$p582: ref, out_$i583: i8, out_$p584: ref, out_$i585: i64, out_$p586: ref, out_$p587: ref, out_$p588: ref, out_$p589: ref, out_$i590: i64, out_$i591: i1, out_$p592: ref, out_$i593: i8, out_$i594: i32, out_$i595: i32, out_$p596: ref, out_$p597: ref, out_$i598: i32, out_$p599: ref, out_$p600: ref, out_$p601: ref, out_$p602: ref, out_$p603: ref, out_$p604: ref, out_$p605: ref, out_$p606: ref, out_$i607: i8, out_$i608: i32, out_$i609: i32, out_$i610: i1, out_$i567: i32);
  modifies $M.0, $CurrAddr;



implementation usb_serial_probe_loop_$bb171(in_$p5: ref, in_$p22: ref, in_$p53: ref, in_$i98: i32, in_$i491: i64, in_$p492: ref, in_$p493: ref, in_$i494: i64, in_$p496: ref, in_$p497: ref, in_$p499: ref, in_$p500: ref, in_$i501: i32, in_$i502: i32, in_$i503: i1, in_$p504: ref, in_$p505: ref, in_$p506: ref, in_$i507: i64, in_$i508: i32, in_$i509: i1, in_$i510: i32, in_$i511: i32, in_$p512: ref, in_$p513: ref, in_$i514: i8, in_$p515: ref, in_$p516: ref, in_$p517: ref, in_$p519: ref, in_$p521: ref, in_$p522: ref, in_$i523: i64, in_$i524: i1, in_$i525: i64, in_$p526: ref, in_$p528: ref, in_$p530: ref, in_$p531: ref, in_$i532: i64, in_$i533: i1, in_$p534: ref, in_$i535: i8, in_$i536: i32, in_$i537: i32, in_$p539: ref, in_$p540: ref, in_$i541: i32, in_$p543: ref, in_$p544: ref, in_$p545: ref, in_$p546: ref, in_$p547: ref, in_$p548: ref, in_$p549: ref, in_$p551: ref, in_$p552: ref, in_$p553: ref, in_$p555: ref, in_$p556: ref, in_$p557: ref, in_$i558: i32, in_$i559: i1, in_$i490: i32, in_$p776: ref, in_$p777: ref, in_$p779: ref, in_$p781: ref, in_$p782: ref, in_$i783: i64, in_$i784: i1, in_$i785: i64, in_$p786: ref, in_$p788: ref, in_$p790: ref, in_$p791: ref, in_$i792: i64, in_$i793: i1, in_$p794: ref, in_$i795: i8, in_$i796: i32, in_$i797: i32, in_$p799: ref, in_$p800: ref, in_$i801: i32, in_$p803: ref, in_$p804: ref, in_$p805: ref, in_$p806: ref, in_$p807: ref, in_$p808: ref, in_$p809: ref) returns (out_$i491: i64, out_$p492: ref, out_$p493: ref, out_$i494: i64, out_$p496: ref, out_$p497: ref, out_$p499: ref, out_$p500: ref, out_$i501: i32, out_$i502: i32, out_$i503: i1, out_$p504: ref, out_$p505: ref, out_$p506: ref, out_$i507: i64, out_$i508: i32, out_$i509: i1, out_$i510: i32, out_$i511: i32, out_$p512: ref, out_$p513: ref, out_$i514: i8, out_$p515: ref, out_$p516: ref, out_$p517: ref, out_$p519: ref, out_$p521: ref, out_$p522: ref, out_$i523: i64, out_$i524: i1, out_$i525: i64, out_$p526: ref, out_$p528: ref, out_$p530: ref, out_$p531: ref, out_$i532: i64, out_$i533: i1, out_$p534: ref, out_$i535: i8, out_$i536: i32, out_$i537: i32, out_$p539: ref, out_$p540: ref, out_$i541: i32, out_$p543: ref, out_$p544: ref, out_$p545: ref, out_$p546: ref, out_$p547: ref, out_$p548: ref, out_$p549: ref, out_$p551: ref, out_$p552: ref, out_$p553: ref, out_$p555: ref, out_$p556: ref, out_$p557: ref, out_$i558: i32, out_$i559: i1, out_$i490: i32, out_$p776: ref, out_$p777: ref, out_$p779: ref, out_$p781: ref, out_$p782: ref, out_$i783: i64, out_$i784: i1, out_$i785: i64, out_$p786: ref, out_$p788: ref, out_$p790: ref, out_$p791: ref, out_$i792: i64, out_$i793: i1, out_$p794: ref, out_$i795: i8, out_$i796: i32, out_$i797: i32, out_$p799: ref, out_$p800: ref, out_$i801: i32, out_$p803: ref, out_$p804: ref, out_$p805: ref, out_$p806: ref, out_$p807: ref, out_$p808: ref, out_$p809: ref)
{

  entry:
    out_$i491, out_$p492, out_$p493, out_$i494, out_$p496, out_$p497, out_$p499, out_$p500, out_$i501, out_$i502, out_$i503, out_$p504, out_$p505, out_$p506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$p512, out_$p513, out_$i514, out_$p515, out_$p516, out_$p517, out_$p519, out_$p521, out_$p522, out_$i523, out_$i524, out_$i525, out_$p526, out_$p528, out_$p530, out_$p531, out_$i532, out_$i533, out_$p534, out_$i535, out_$i536, out_$i537, out_$p539, out_$p540, out_$i541, out_$p543, out_$p544, out_$p545, out_$p546, out_$p547, out_$p548, out_$p549, out_$p551, out_$p552, out_$p553, out_$p555, out_$p556, out_$p557, out_$i558, out_$i559, out_$i490, out_$p776, out_$p777, out_$p779, out_$p781, out_$p782, out_$i783, out_$i784, out_$i785, out_$p786, out_$p788, out_$p790, out_$p791, out_$i792, out_$i793, out_$p794, out_$i795, out_$i796, out_$i797, out_$p799, out_$p800, out_$i801, out_$p803, out_$p804, out_$p805, out_$p806, out_$p807, out_$p808, out_$p809 := in_$i491, in_$p492, in_$p493, in_$i494, in_$p496, in_$p497, in_$p499, in_$p500, in_$i501, in_$i502, in_$i503, in_$p504, in_$p505, in_$p506, in_$i507, in_$i508, in_$i509, in_$i510, in_$i511, in_$p512, in_$p513, in_$i514, in_$p515, in_$p516, in_$p517, in_$p519, in_$p521, in_$p522, in_$i523, in_$i524, in_$i525, in_$p526, in_$p528, in_$p530, in_$p531, in_$i532, in_$i533, in_$p534, in_$i535, in_$i536, in_$i537, in_$p539, in_$p540, in_$i541, in_$p543, in_$p544, in_$p545, in_$p546, in_$p547, in_$p548, in_$p549, in_$p551, in_$p552, in_$p553, in_$p555, in_$p556, in_$p557, in_$i558, in_$i559, in_$i490, in_$p776, in_$p777, in_$p779, in_$p781, in_$p782, in_$i783, in_$i784, in_$i785, in_$p786, in_$p788, in_$p790, in_$p791, in_$i792, in_$i793, in_$p794, in_$i795, in_$i796, in_$i797, in_$p799, in_$p800, in_$i801, in_$p803, in_$p804, in_$p805, in_$p806, in_$p807, in_$p808, in_$p809;
    goto $bb171, exit;

  $bb171:
    assume {:verifier.code 0} true;
    goto corral_source_split_2457;

  $bb191:
    assume out_$i559 == 1;
    assume {:verifier.code 0} true;
    out_$i490 := out_$i558;
    goto $bb191_dummy;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$i559 := $slt.i32(out_$i558, in_$i98);
    goto corral_source_split_2545;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    out_$i558 := $add.i32(out_$i490, 1);
    call {:si_unique_call 486} {:cexpr "i"} boogie_si_record_i32(out_$i558);
    goto corral_source_split_2544;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p557, out_$p556);
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    out_$p557 := $add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1152, 1));
    goto corral_source_split_2542;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    out_$p556 := $load.ref($M.0, out_$p555);
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    out_$p555 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(0, 8));
    goto corral_source_split_2540;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p553, out_$p552);
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    out_$p553 := $add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1168, 1));
    goto corral_source_split_2538;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    out_$p552 := $load.ref($M.0, out_$p551);
    goto corral_source_split_2537;

  $bb190:
    assume {:verifier.code 0} true;
    out_$p551 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_2536;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} usb_fill_bulk_urb(out_$p800, in_$p22, out_$i801, out_$p804, out_$i511, out_$p808, out_$p809);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    out_$p809 := $bitcast.ref.ref(out_$p497);
    goto corral_source_split_2885;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    out_$p808 := $load.ref($M.0, out_$p807);
    goto corral_source_split_2884;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    out_$p807 := $add.ref($add.ref(out_$p806, $mul.ref(0, 536)), $mul.ref(512, 1));
    goto corral_source_split_2883;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    out_$p806 := $load.ref($M.0, out_$p805);
    goto corral_source_split_2882;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$p805 := $add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2881;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    out_$p804 := $load.ref($M.0, out_$p803);
    goto corral_source_split_2880;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    out_$p803 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(1, 8));
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    out_$i801 := $or.i32(out_$i797, $sub.i32(0, 1073741824));
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$p800 := $load.ref($M.0, out_$p799);
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$p799 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_2876;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} out_$i797 := __create_pipe(in_$p22, out_$i796);
    goto corral_source_split_2875;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$i796 := $zext.i8.i32(out_$i795);
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    out_$i795 := $load.i8($M.0, out_$p794);
    goto corral_source_split_2873;

  $bb272:
    assume {:verifier.code 0} true;
    out_$p794 := $add.ref($add.ref(out_$p493, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2872;

  $bb271:
    assume !(out_$i793 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    out_$i793 := $eq.i64(out_$i792, 0);
    goto corral_source_split_2870;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    out_$i792 := $p2i.ref.i64(out_$p791);
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    out_$p791 := $load.ref($M.0, out_$p790);
    goto corral_source_split_2868;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    out_$p790 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(1, 8));
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p788, out_$p786);
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    out_$p788 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(1, 8));
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} out_$p786 := kmalloc(out_$i785, 208);
    goto corral_source_split_2864;

  $bb269:
    assume {:verifier.code 0} true;
    out_$i785 := $sext.i32.i64(out_$i511);
    goto corral_source_split_2863;

  $bb268:
    assume !(out_$i784 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    out_$i784 := $eq.i64(out_$i783, 0);
    goto corral_source_split_2534;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    out_$i783 := $p2i.ref.i64(out_$p782);
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    out_$p782 := $load.ref($M.0, out_$p781);
    goto corral_source_split_2532;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    out_$p781 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_2531;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p779, out_$p777);
    goto corral_source_split_2530;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    out_$p779 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(1, 8));
    goto corral_source_split_2529;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} out_$p777 := usb_alloc_urb(0, 208);
    goto corral_source_split_2528;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} set_bit(1, out_$p776);
    goto corral_source_split_2527;

  $bb189:
    assume {:verifier.code 0} true;
    out_$p776 := $add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1232, 1));
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} usb_fill_bulk_urb(out_$p540, in_$p22, out_$i541, out_$p544, out_$i511, out_$p548, out_$p549);
    goto corral_source_split_2524;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    out_$p549 := $bitcast.ref.ref(out_$p497);
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    out_$p548 := $load.ref($M.0, out_$p547);
    goto corral_source_split_2522;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    out_$p547 := $add.ref($add.ref(out_$p546, $mul.ref(0, 536)), $mul.ref(512, 1));
    goto corral_source_split_2521;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    out_$p546 := $load.ref($M.0, out_$p545);
    goto corral_source_split_2520;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    out_$p545 := $add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2519;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    out_$p544 := $load.ref($M.0, out_$p543);
    goto corral_source_split_2518;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    out_$p543 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(0, 8));
    goto corral_source_split_2517;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    out_$i541 := $or.i32(out_$i537, $sub.i32(0, 1073741824));
    goto corral_source_split_2516;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    out_$p540 := $load.ref($M.0, out_$p539);
    goto corral_source_split_2515;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    out_$p539 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_2514;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} out_$i537 := __create_pipe(in_$p22, out_$i536);
    call {:si_unique_call 482} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i537);
    goto corral_source_split_2513;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    out_$i536 := $zext.i8.i32(out_$i535);
    goto corral_source_split_2512;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$i535 := $load.i8($M.0, out_$p534);
    goto corral_source_split_2511;

  $bb188:
    assume {:verifier.code 0} true;
    out_$p534 := $add.ref($add.ref(out_$p493, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2510;

  $bb187:
    assume !(out_$i533 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    out_$i533 := $eq.i64(out_$i532, 0);
    goto corral_source_split_2508;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    out_$i532 := $p2i.ref.i64(out_$p531);
    goto corral_source_split_2507;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    out_$p531 := $load.ref($M.0, out_$p530);
    goto corral_source_split_2506;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    out_$p530 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(0, 8));
    goto corral_source_split_2505;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p528, out_$p526);
    goto corral_source_split_2504;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    out_$p528 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1200, 1)), $mul.ref(0, 8));
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} out_$p526 := kmalloc(out_$i525, 208);
    goto corral_source_split_2502;

  $bb184:
    assume {:verifier.code 0} true;
    out_$i525 := $sext.i32.i64(out_$i511);
    goto corral_source_split_2501;

  $bb183:
    assume !(out_$i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    out_$i524 := $eq.i64(out_$i523, 0);
    goto corral_source_split_2499;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    out_$i523 := $p2i.ref.i64(out_$p522);
    goto corral_source_split_2498;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    out_$p522 := $load.ref($M.0, out_$p521);
    goto corral_source_split_2497;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    out_$p521 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_2496;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p519, out_$p517);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    out_$p519 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(0, 8));
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} out_$p517 := usb_alloc_urb(0, 208);
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} set_bit(0, out_$p516);
    goto corral_source_split_2492;

  $bb180:
    assume {:verifier.code 0} true;
    out_$p516 := $add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1232, 1));
    goto corral_source_split_2491;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p515, out_$i514);
    goto corral_source_split_2489;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    out_$p515 := $add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1240, 1));
    goto corral_source_split_2488;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$i514 := $load.i8($M.0, out_$p513);
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$p513 := $add.ref($add.ref(out_$p493, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p512, out_$i511);
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$p512 := $add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1160, 1));
    goto corral_source_split_2484;

  $bb178:
    assume {:verifier.code 0} true;
    goto corral_source_split_2483;

  $bb177:
    assume !(out_$i509 == 1);
    assume {:verifier.code 0} true;
    out_$i511 := out_$i508;
    goto $bb178;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$i511 := out_$i510;
    goto $bb178;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} out_$i510 := usb_endpoint_maxp(out_$p493);
    call {:si_unique_call 477} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i510);
    goto corral_source_split_2481;

  $bb176:
    assume out_$i509 == 1;
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i509 := $eq.i32(out_$i508, 0);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$i508 := $trunc.i64.i32(out_$i507);
    call {:si_unique_call 475} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i508);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$i507 := $load.i64($M.0, out_$p506);
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$p506 := $add.ref($add.ref(out_$p505, $mul.ref(0, 536)), $mul.ref(264, 1));
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$p505 := $load.ref($M.0, out_$p504);
    goto corral_source_split_2474;

  $bb175:
    assume {:verifier.code 0} true;
    out_$p504 := $add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2473;

  $bb174:
    assume !(out_$i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    out_$i503 := $ne.i32(out_$i502, 0);
    goto corral_source_split_2469;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} out_$i502 := __kfifo_int_must_check_helper(out_$i501);
    call {:si_unique_call 474} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i502);
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} out_$i501 := __kfifo_alloc(out_$p500, 4096, 1, 208);
    call {:si_unique_call 472} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i501);
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$p500 := $bitcast.ref.ref(out_$p499);
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$p499 := $add.ref($add.ref($add.ref(out_$p497, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    out_$p497 := $load.ref($M.0, out_$p496);
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$p496 := $add.ref($add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i494, 8));
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i494 := $sext.i32.i64(out_$i490);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$p493 := $load.ref($M.28, out_$p492);
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$p492 := $add.ref($add.ref(in_$p5, $mul.ref(0, 64)), $mul.ref(out_$i491, 8));
    goto corral_source_split_2460;

  $bb172:
    assume {:verifier.code 0} true;
    out_$i491 := $sext.i32.i64(out_$i490);
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb191_dummy:
    call {:si_unique_call 1} out_$i491, out_$p492, out_$p493, out_$i494, out_$p496, out_$p497, out_$p499, out_$p500, out_$i501, out_$i502, out_$i503, out_$p504, out_$p505, out_$p506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$p512, out_$p513, out_$i514, out_$p515, out_$p516, out_$p517, out_$p519, out_$p521, out_$p522, out_$i523, out_$i524, out_$i525, out_$p526, out_$p528, out_$p530, out_$p531, out_$i532, out_$i533, out_$p534, out_$i535, out_$i536, out_$i537, out_$p539, out_$p540, out_$i541, out_$p543, out_$p544, out_$p545, out_$p546, out_$p547, out_$p548, out_$p549, out_$p551, out_$p552, out_$p553, out_$p555, out_$p556, out_$p557, out_$i558, out_$i559, out_$i490, out_$p776, out_$p777, out_$p779, out_$p781, out_$p782, out_$i783, out_$i784, out_$i785, out_$p786, out_$p788, out_$p790, out_$p791, out_$i792, out_$i793, out_$p794, out_$i795, out_$i796, out_$i797, out_$p799, out_$p800, out_$i801, out_$p803, out_$p804, out_$p805, out_$p806, out_$p807, out_$p808, out_$p809 := usb_serial_probe_loop_$bb171(in_$p5, in_$p22, in_$p53, in_$i98, out_$i491, out_$p492, out_$p493, out_$i494, out_$p496, out_$p497, out_$p499, out_$p500, out_$i501, out_$i502, out_$i503, out_$p504, out_$p505, out_$p506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$p512, out_$p513, out_$i514, out_$p515, out_$p516, out_$p517, out_$p519, out_$p521, out_$p522, out_$i523, out_$i524, out_$i525, out_$p526, out_$p528, out_$p530, out_$p531, out_$i532, out_$i533, out_$p534, out_$i535, out_$i536, out_$i537, out_$p539, out_$p540, out_$i541, out_$p543, out_$p544, out_$p545, out_$p546, out_$p547, out_$p548, out_$p549, out_$p551, out_$p552, out_$p553, out_$p555, out_$p556, out_$p557, out_$i558, out_$i559, out_$i490, out_$p776, out_$p777, out_$p779, out_$p781, out_$p782, out_$i783, out_$i784, out_$i785, out_$p786, out_$p788, out_$p790, out_$p791, out_$i792, out_$i793, out_$p794, out_$i795, out_$i796, out_$i797, out_$p799, out_$p800, out_$i801, out_$p803, out_$p804, out_$p805, out_$p806, out_$p807, out_$p808, out_$p809);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb171(in_$p5: ref, in_$p22: ref, in_$p53: ref, in_$i98: i32, in_$i491: i64, in_$p492: ref, in_$p493: ref, in_$i494: i64, in_$p496: ref, in_$p497: ref, in_$p499: ref, in_$p500: ref, in_$i501: i32, in_$i502: i32, in_$i503: i1, in_$p504: ref, in_$p505: ref, in_$p506: ref, in_$i507: i64, in_$i508: i32, in_$i509: i1, in_$i510: i32, in_$i511: i32, in_$p512: ref, in_$p513: ref, in_$i514: i8, in_$p515: ref, in_$p516: ref, in_$p517: ref, in_$p519: ref, in_$p521: ref, in_$p522: ref, in_$i523: i64, in_$i524: i1, in_$i525: i64, in_$p526: ref, in_$p528: ref, in_$p530: ref, in_$p531: ref, in_$i532: i64, in_$i533: i1, in_$p534: ref, in_$i535: i8, in_$i536: i32, in_$i537: i32, in_$p539: ref, in_$p540: ref, in_$i541: i32, in_$p543: ref, in_$p544: ref, in_$p545: ref, in_$p546: ref, in_$p547: ref, in_$p548: ref, in_$p549: ref, in_$p551: ref, in_$p552: ref, in_$p553: ref, in_$p555: ref, in_$p556: ref, in_$p557: ref, in_$i558: i32, in_$i559: i1, in_$i490: i32, in_$p776: ref, in_$p777: ref, in_$p779: ref, in_$p781: ref, in_$p782: ref, in_$i783: i64, in_$i784: i1, in_$i785: i64, in_$p786: ref, in_$p788: ref, in_$p790: ref, in_$p791: ref, in_$i792: i64, in_$i793: i1, in_$p794: ref, in_$i795: i8, in_$i796: i32, in_$i797: i32, in_$p799: ref, in_$p800: ref, in_$i801: i32, in_$p803: ref, in_$p804: ref, in_$p805: ref, in_$p806: ref, in_$p807: ref, in_$p808: ref, in_$p809: ref) returns (out_$i491: i64, out_$p492: ref, out_$p493: ref, out_$i494: i64, out_$p496: ref, out_$p497: ref, out_$p499: ref, out_$p500: ref, out_$i501: i32, out_$i502: i32, out_$i503: i1, out_$p504: ref, out_$p505: ref, out_$p506: ref, out_$i507: i64, out_$i508: i32, out_$i509: i1, out_$i510: i32, out_$i511: i32, out_$p512: ref, out_$p513: ref, out_$i514: i8, out_$p515: ref, out_$p516: ref, out_$p517: ref, out_$p519: ref, out_$p521: ref, out_$p522: ref, out_$i523: i64, out_$i524: i1, out_$i525: i64, out_$p526: ref, out_$p528: ref, out_$p530: ref, out_$p531: ref, out_$i532: i64, out_$i533: i1, out_$p534: ref, out_$i535: i8, out_$i536: i32, out_$i537: i32, out_$p539: ref, out_$p540: ref, out_$i541: i32, out_$p543: ref, out_$p544: ref, out_$p545: ref, out_$p546: ref, out_$p547: ref, out_$p548: ref, out_$p549: ref, out_$p551: ref, out_$p552: ref, out_$p553: ref, out_$p555: ref, out_$p556: ref, out_$p557: ref, out_$i558: i32, out_$i559: i1, out_$i490: i32, out_$p776: ref, out_$p777: ref, out_$p779: ref, out_$p781: ref, out_$p782: ref, out_$i783: i64, out_$i784: i1, out_$i785: i64, out_$p786: ref, out_$p788: ref, out_$p790: ref, out_$p791: ref, out_$i792: i64, out_$i793: i1, out_$p794: ref, out_$i795: i8, out_$i796: i32, out_$i797: i32, out_$p799: ref, out_$p800: ref, out_$i801: i32, out_$p803: ref, out_$p804: ref, out_$p805: ref, out_$p806: ref, out_$p807: ref, out_$p808: ref, out_$p809: ref);
  modifies $M.0, $CurrAddr;



implementation usb_serial_probe_loop_$bb148(in_$p4: ref, in_$p22: ref, in_$p53: ref, in_$i97: i32, in_$i426: i64, in_$p427: ref, in_$p428: ref, in_$i429: i64, in_$p431: ref, in_$p432: ref, in_$p433: ref, in_$p434: ref, in_$p435: ref, in_$i436: i64, in_$i437: i32, in_$i438: i32, in_$i439: i1, in_$i440: i32, in_$p441: ref, in_$p442: ref, in_$i443: i8, in_$p444: ref, in_$p445: ref, in_$p446: ref, in_$p448: ref, in_$p450: ref, in_$p451: ref, in_$i452: i64, in_$i453: i1, in_$i454: i64, in_$p455: ref, in_$p457: ref, in_$p459: ref, in_$p460: ref, in_$i461: i64, in_$i462: i1, in_$p463: ref, in_$i464: i8, in_$i465: i32, in_$i466: i32, in_$p468: ref, in_$p469: ref, in_$i470: i32, in_$p472: ref, in_$p473: ref, in_$p474: ref, in_$p475: ref, in_$p476: ref, in_$p477: ref, in_$p478: ref, in_$p480: ref, in_$p481: ref, in_$p482: ref, in_$p484: ref, in_$p485: ref, in_$p486: ref, in_$i487: i32, in_$i488: i1, in_$i425: i32, in_$p810: ref, in_$p811: ref, in_$p813: ref, in_$p815: ref, in_$p816: ref, in_$i817: i64, in_$i818: i1, in_$i819: i64, in_$p820: ref, in_$p822: ref, in_$p824: ref, in_$p825: ref, in_$i826: i64, in_$i827: i1, in_$p828: ref, in_$i829: i8, in_$i830: i32, in_$i831: i32, in_$p833: ref, in_$p834: ref, in_$i835: i32, in_$p837: ref, in_$p838: ref, in_$p839: ref, in_$p840: ref, in_$p841: ref, in_$p842: ref, in_$p843: ref) returns (out_$i426: i64, out_$p427: ref, out_$p428: ref, out_$i429: i64, out_$p431: ref, out_$p432: ref, out_$p433: ref, out_$p434: ref, out_$p435: ref, out_$i436: i64, out_$i437: i32, out_$i438: i32, out_$i439: i1, out_$i440: i32, out_$p441: ref, out_$p442: ref, out_$i443: i8, out_$p444: ref, out_$p445: ref, out_$p446: ref, out_$p448: ref, out_$p450: ref, out_$p451: ref, out_$i452: i64, out_$i453: i1, out_$i454: i64, out_$p455: ref, out_$p457: ref, out_$p459: ref, out_$p460: ref, out_$i461: i64, out_$i462: i1, out_$p463: ref, out_$i464: i8, out_$i465: i32, out_$i466: i32, out_$p468: ref, out_$p469: ref, out_$i470: i32, out_$p472: ref, out_$p473: ref, out_$p474: ref, out_$p475: ref, out_$p476: ref, out_$p477: ref, out_$p478: ref, out_$p480: ref, out_$p481: ref, out_$p482: ref, out_$p484: ref, out_$p485: ref, out_$p486: ref, out_$i487: i32, out_$i488: i1, out_$i425: i32, out_$p810: ref, out_$p811: ref, out_$p813: ref, out_$p815: ref, out_$p816: ref, out_$i817: i64, out_$i818: i1, out_$i819: i64, out_$p820: ref, out_$p822: ref, out_$p824: ref, out_$p825: ref, out_$i826: i64, out_$i827: i1, out_$p828: ref, out_$i829: i8, out_$i830: i32, out_$i831: i32, out_$p833: ref, out_$p834: ref, out_$i835: i32, out_$p837: ref, out_$p838: ref, out_$p839: ref, out_$p840: ref, out_$p841: ref, out_$p842: ref, out_$p843: ref)
{

  entry:
    out_$i426, out_$p427, out_$p428, out_$i429, out_$p431, out_$p432, out_$p433, out_$p434, out_$p435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$p441, out_$p442, out_$i443, out_$p444, out_$p445, out_$p446, out_$p448, out_$p450, out_$p451, out_$i452, out_$i453, out_$i454, out_$p455, out_$p457, out_$p459, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$p468, out_$p469, out_$i470, out_$p472, out_$p473, out_$p474, out_$p475, out_$p476, out_$p477, out_$p478, out_$p480, out_$p481, out_$p482, out_$p484, out_$p485, out_$p486, out_$i487, out_$i488, out_$i425, out_$p810, out_$p811, out_$p813, out_$p815, out_$p816, out_$i817, out_$i818, out_$i819, out_$p820, out_$p822, out_$p824, out_$p825, out_$i826, out_$i827, out_$p828, out_$i829, out_$i830, out_$i831, out_$p833, out_$p834, out_$i835, out_$p837, out_$p838, out_$p839, out_$p840, out_$p841, out_$p842, out_$p843 := in_$i426, in_$p427, in_$p428, in_$i429, in_$p431, in_$p432, in_$p433, in_$p434, in_$p435, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$p441, in_$p442, in_$i443, in_$p444, in_$p445, in_$p446, in_$p448, in_$p450, in_$p451, in_$i452, in_$i453, in_$i454, in_$p455, in_$p457, in_$p459, in_$p460, in_$i461, in_$i462, in_$p463, in_$i464, in_$i465, in_$i466, in_$p468, in_$p469, in_$i470, in_$p472, in_$p473, in_$p474, in_$p475, in_$p476, in_$p477, in_$p478, in_$p480, in_$p481, in_$p482, in_$p484, in_$p485, in_$p486, in_$i487, in_$i488, in_$i425, in_$p810, in_$p811, in_$p813, in_$p815, in_$p816, in_$i817, in_$i818, in_$i819, in_$p820, in_$p822, in_$p824, in_$p825, in_$i826, in_$i827, in_$p828, in_$i829, in_$i830, in_$i831, in_$p833, in_$p834, in_$i835, in_$p837, in_$p838, in_$p839, in_$p840, in_$p841, in_$p842, in_$p843;
    goto $bb148, exit;

  $bb148:
    assume {:verifier.code 0} true;
    goto corral_source_split_2367;

  $bb165:
    assume out_$i488 == 1;
    assume {:verifier.code 0} true;
    out_$i425 := out_$i487;
    goto $bb165_dummy;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    out_$i488 := $slt.i32(out_$i487, in_$i97);
    goto corral_source_split_2449;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    out_$i487 := $add.i32(out_$i425, 1);
    call {:si_unique_call 470} {:cexpr "i"} boogie_si_record_i32(out_$i487);
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p486, out_$p485);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$p486 := $add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1080, 1));
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$p485 := $load.ref($M.0, out_$p484);
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    out_$p484 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(0, 8));
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p482, out_$p481);
    goto corral_source_split_2443;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$p482 := $add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1096, 1));
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    out_$p481 := $load.ref($M.0, out_$p480);
    goto corral_source_split_2441;

  $bb164:
    assume {:verifier.code 0} true;
    out_$p480 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_2440;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} usb_fill_bulk_urb(out_$p834, in_$p22, out_$i835, out_$p838, out_$i440, out_$p842, out_$p843);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    out_$p843 := $bitcast.ref.ref(out_$p432);
    goto corral_source_split_2909;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    out_$p842 := $load.ref($M.0, out_$p841);
    goto corral_source_split_2908;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    out_$p841 := $add.ref($add.ref(out_$p840, $mul.ref(0, 536)), $mul.ref(504, 1));
    goto corral_source_split_2907;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    out_$p840 := $load.ref($M.0, out_$p839);
    goto corral_source_split_2906;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    out_$p839 := $add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2905;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    out_$p838 := $load.ref($M.0, out_$p837);
    goto corral_source_split_2904;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    out_$p837 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(1, 8));
    goto corral_source_split_2903;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    out_$i835 := $or.i32(out_$i831, $sub.i32(0, 1073741696));
    goto corral_source_split_2902;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    out_$p834 := $load.ref($M.0, out_$p833);
    goto corral_source_split_2901;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    out_$p833 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(1, 8));
    goto corral_source_split_2900;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} out_$i831 := __create_pipe(in_$p22, out_$i830);
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    out_$i830 := $zext.i8.i32(out_$i829);
    goto corral_source_split_2898;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$i829 := $load.i8($M.0, out_$p828);
    goto corral_source_split_2897;

  $bb278:
    assume {:verifier.code 0} true;
    out_$p828 := $add.ref($add.ref(out_$p428, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2896;

  $bb277:
    assume !(out_$i827 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$i827 := $eq.i64(out_$i826, 0);
    goto corral_source_split_2894;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$i826 := $p2i.ref.i64(out_$p825);
    goto corral_source_split_2893;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    out_$p825 := $load.ref($M.0, out_$p824);
    goto corral_source_split_2892;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    out_$p824 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(1, 8));
    goto corral_source_split_2891;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p822, out_$p820);
    goto corral_source_split_2890;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    out_$p822 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(1, 8));
    goto corral_source_split_2889;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} out_$p820 := kmalloc(out_$i819, 208);
    goto corral_source_split_2888;

  $bb275:
    assume {:verifier.code 0} true;
    out_$i819 := $sext.i32.i64(out_$i440);
    goto corral_source_split_2887;

  $bb274:
    assume !(out_$i818 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    out_$i818 := $eq.i64(out_$i817, 0);
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$i817 := $p2i.ref.i64(out_$p816);
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$p816 := $load.ref($M.0, out_$p815);
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$p815 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(1, 8));
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p813, out_$p811);
    goto corral_source_split_2434;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$p813 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(1, 8));
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} out_$p811 := usb_alloc_urb(0, 208);
    goto corral_source_split_2432;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} set_bit(1, out_$p810);
    goto corral_source_split_2431;

  $bb163:
    assume {:verifier.code 0} true;
    out_$p810 := $add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1144, 1));
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} usb_fill_bulk_urb(out_$p469, in_$p22, out_$i470, out_$p473, out_$i440, out_$p477, out_$p478);
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$p478 := $bitcast.ref.ref(out_$p432);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$p477 := $load.ref($M.0, out_$p476);
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$p476 := $add.ref($add.ref(out_$p475, $mul.ref(0, 536)), $mul.ref(504, 1));
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    out_$p475 := $load.ref($M.0, out_$p474);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$p474 := $add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$p473 := $load.ref($M.0, out_$p472);
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$p472 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(0, 8));
    goto corral_source_split_2421;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    out_$i470 := $or.i32(out_$i466, $sub.i32(0, 1073741696));
    goto corral_source_split_2420;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    out_$p469 := $load.ref($M.0, out_$p468);
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    out_$p468 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} out_$i466 := __create_pipe(in_$p22, out_$i465);
    call {:si_unique_call 466} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i466);
    goto corral_source_split_2417;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$i465 := $zext.i8.i32(out_$i464);
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$i464 := $load.i8($M.0, out_$p463);
    goto corral_source_split_2415;

  $bb162:
    assume {:verifier.code 0} true;
    out_$p463 := $add.ref($add.ref(out_$p428, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2414;

  $bb161:
    assume !(out_$i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$i462 := $eq.i64(out_$i461, 0);
    goto corral_source_split_2412;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    out_$i461 := $p2i.ref.i64(out_$p460);
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    out_$p460 := $load.ref($M.0, out_$p459);
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$p459 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(0, 8));
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p457, out_$p455);
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$p457 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1112, 1)), $mul.ref(0, 8));
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} out_$p455 := kmalloc(out_$i454, 208);
    goto corral_source_split_2406;

  $bb158:
    assume {:verifier.code 0} true;
    out_$i454 := $sext.i32.i64(out_$i440);
    goto corral_source_split_2405;

  $bb157:
    assume !(out_$i453 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    out_$i453 := $eq.i64(out_$i452, 0);
    goto corral_source_split_2403;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    out_$i452 := $p2i.ref.i64(out_$p451);
    goto corral_source_split_2402;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$p451 := $load.ref($M.0, out_$p450);
    goto corral_source_split_2401;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    out_$p450 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_2400;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p448, out_$p446);
    goto corral_source_split_2399;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    out_$p448 := $add.ref($add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1128, 1)), $mul.ref(0, 8));
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} out_$p446 := usb_alloc_urb(0, 208);
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} set_bit(0, out_$p445);
    goto corral_source_split_2396;

  $bb154:
    assume {:verifier.code 0} true;
    out_$p445 := $add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1144, 1));
    goto corral_source_split_2395;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p444, out_$i443);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$p444 := $add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1104, 1));
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i443 := $load.i8($M.0, out_$p442);
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$p442 := $add.ref($add.ref(out_$p428, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p441, out_$i440);
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$p441 := $add.ref($add.ref(out_$p432, $mul.ref(0, 2632)), $mul.ref(1088, 1));
    goto corral_source_split_2388;

  $bb152:
    assume {:verifier.code 0} true;
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i440 := out_$i438;
    goto $bb152;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$i440 := out_$i437;
    goto $bb152;

  $bb150:
    assume out_$i439 == 1;
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i439 := $sgt.i32(out_$i437, out_$i438);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} out_$i438 := usb_endpoint_maxp(out_$p428);
    call {:si_unique_call 461} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i438);
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$i437 := $trunc.i64.i32(out_$i436);
    call {:si_unique_call 459} {:cexpr "__max1"} boogie_si_record_i32(out_$i437);
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    out_$i436 := $load.i64($M.0, out_$p435);
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$p435 := $add.ref($add.ref(out_$p434, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$p434 := $load.ref($M.0, out_$p433);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$p433 := $add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$p432 := $load.ref($M.0, out_$p431);
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$p431 := $add.ref($add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i429, 8));
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$i429 := $sext.i32.i64(out_$i425);
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    out_$p428 := $load.ref($M.27, out_$p427);
    goto corral_source_split_2371;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    out_$p427 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(out_$i426, 8));
    goto corral_source_split_2370;

  $bb149:
    assume {:verifier.code 0} true;
    out_$i426 := $sext.i32.i64(out_$i425);
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb151:
    assume !(out_$i439 == 1);
    goto corral_source_split_2385;

  $bb165_dummy:
    call {:si_unique_call 1} out_$i426, out_$p427, out_$p428, out_$i429, out_$p431, out_$p432, out_$p433, out_$p434, out_$p435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$p441, out_$p442, out_$i443, out_$p444, out_$p445, out_$p446, out_$p448, out_$p450, out_$p451, out_$i452, out_$i453, out_$i454, out_$p455, out_$p457, out_$p459, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$p468, out_$p469, out_$i470, out_$p472, out_$p473, out_$p474, out_$p475, out_$p476, out_$p477, out_$p478, out_$p480, out_$p481, out_$p482, out_$p484, out_$p485, out_$p486, out_$i487, out_$i488, out_$i425, out_$p810, out_$p811, out_$p813, out_$p815, out_$p816, out_$i817, out_$i818, out_$i819, out_$p820, out_$p822, out_$p824, out_$p825, out_$i826, out_$i827, out_$p828, out_$i829, out_$i830, out_$i831, out_$p833, out_$p834, out_$i835, out_$p837, out_$p838, out_$p839, out_$p840, out_$p841, out_$p842, out_$p843 := usb_serial_probe_loop_$bb148(in_$p4, in_$p22, in_$p53, in_$i97, out_$i426, out_$p427, out_$p428, out_$i429, out_$p431, out_$p432, out_$p433, out_$p434, out_$p435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$p441, out_$p442, out_$i443, out_$p444, out_$p445, out_$p446, out_$p448, out_$p450, out_$p451, out_$i452, out_$i453, out_$i454, out_$p455, out_$p457, out_$p459, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$p468, out_$p469, out_$i470, out_$p472, out_$p473, out_$p474, out_$p475, out_$p476, out_$p477, out_$p478, out_$p480, out_$p481, out_$p482, out_$p484, out_$p485, out_$p486, out_$i487, out_$i488, out_$i425, out_$p810, out_$p811, out_$p813, out_$p815, out_$p816, out_$i817, out_$i818, out_$i819, out_$p820, out_$p822, out_$p824, out_$p825, out_$i826, out_$i827, out_$p828, out_$i829, out_$i830, out_$i831, out_$p833, out_$p834, out_$i835, out_$p837, out_$p838, out_$p839, out_$p840, out_$p841, out_$p842, out_$p843);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb148(in_$p4: ref, in_$p22: ref, in_$p53: ref, in_$i97: i32, in_$i426: i64, in_$p427: ref, in_$p428: ref, in_$i429: i64, in_$p431: ref, in_$p432: ref, in_$p433: ref, in_$p434: ref, in_$p435: ref, in_$i436: i64, in_$i437: i32, in_$i438: i32, in_$i439: i1, in_$i440: i32, in_$p441: ref, in_$p442: ref, in_$i443: i8, in_$p444: ref, in_$p445: ref, in_$p446: ref, in_$p448: ref, in_$p450: ref, in_$p451: ref, in_$i452: i64, in_$i453: i1, in_$i454: i64, in_$p455: ref, in_$p457: ref, in_$p459: ref, in_$p460: ref, in_$i461: i64, in_$i462: i1, in_$p463: ref, in_$i464: i8, in_$i465: i32, in_$i466: i32, in_$p468: ref, in_$p469: ref, in_$i470: i32, in_$p472: ref, in_$p473: ref, in_$p474: ref, in_$p475: ref, in_$p476: ref, in_$p477: ref, in_$p478: ref, in_$p480: ref, in_$p481: ref, in_$p482: ref, in_$p484: ref, in_$p485: ref, in_$p486: ref, in_$i487: i32, in_$i488: i1, in_$i425: i32, in_$p810: ref, in_$p811: ref, in_$p813: ref, in_$p815: ref, in_$p816: ref, in_$i817: i64, in_$i818: i1, in_$i819: i64, in_$p820: ref, in_$p822: ref, in_$p824: ref, in_$p825: ref, in_$i826: i64, in_$i827: i1, in_$p828: ref, in_$i829: i8, in_$i830: i32, in_$i831: i32, in_$p833: ref, in_$p834: ref, in_$i835: i32, in_$p837: ref, in_$p838: ref, in_$p839: ref, in_$p840: ref, in_$p841: ref, in_$p842: ref, in_$p843: ref) returns (out_$i426: i64, out_$p427: ref, out_$p428: ref, out_$i429: i64, out_$p431: ref, out_$p432: ref, out_$p433: ref, out_$p434: ref, out_$p435: ref, out_$i436: i64, out_$i437: i32, out_$i438: i32, out_$i439: i1, out_$i440: i32, out_$p441: ref, out_$p442: ref, out_$i443: i8, out_$p444: ref, out_$p445: ref, out_$p446: ref, out_$p448: ref, out_$p450: ref, out_$p451: ref, out_$i452: i64, out_$i453: i1, out_$i454: i64, out_$p455: ref, out_$p457: ref, out_$p459: ref, out_$p460: ref, out_$i461: i64, out_$i462: i1, out_$p463: ref, out_$i464: i8, out_$i465: i32, out_$i466: i32, out_$p468: ref, out_$p469: ref, out_$i470: i32, out_$p472: ref, out_$p473: ref, out_$p474: ref, out_$p475: ref, out_$p476: ref, out_$p477: ref, out_$p478: ref, out_$p480: ref, out_$p481: ref, out_$p482: ref, out_$p484: ref, out_$p485: ref, out_$p486: ref, out_$i487: i32, out_$i488: i1, out_$i425: i32, out_$p810: ref, out_$p811: ref, out_$p813: ref, out_$p815: ref, out_$p816: ref, out_$i817: i64, out_$i818: i1, out_$i819: i64, out_$p820: ref, out_$p822: ref, out_$p824: ref, out_$p825: ref, out_$i826: i64, out_$i827: i1, out_$p828: ref, out_$i829: i8, out_$i830: i32, out_$i831: i32, out_$p833: ref, out_$p834: ref, out_$i835: i32, out_$p837: ref, out_$p838: ref, out_$p839: ref, out_$p840: ref, out_$p841: ref, out_$p842: ref, out_$p843: ref);
  modifies $M.0, $CurrAddr;



implementation usb_serial_probe_loop_$bb136(in_$p0: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p53: ref, in_$i362: i32, in_$p384: ref, in_$p385: ref, in_$i386: i64, in_$i387: i1, in_$p388: ref, in_$p390: ref, in_$p391: ref, in_$p392: ref, in_$p395: ref, in_$p396: ref, in_$p397: ref, in_$p398: ref, in_$p400: ref, in_$p401: ref, in_$p402: ref, in_$p404: ref, in_$p406: ref, in_$p408: ref, in_$i409: i64, in_$p411: ref, in_$p412: ref, in_$p414: ref, in_$p416: ref, in_$p418: ref, in_$p420: ref, in_$p421: ref, in_$i422: i32, in_$i423: i1, in_$i383: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_55: ref) returns (out_$p384: ref, out_$p385: ref, out_$i386: i64, out_$i387: i1, out_$p388: ref, out_$p390: ref, out_$p391: ref, out_$p392: ref, out_$p395: ref, out_$p396: ref, out_$p397: ref, out_$p398: ref, out_$p400: ref, out_$p401: ref, out_$p402: ref, out_$p404: ref, out_$p406: ref, out_$p408: ref, out_$i409: i64, out_$p411: ref, out_$p412: ref, out_$p414: ref, out_$p416: ref, out_$p418: ref, out_$p420: ref, out_$p421: ref, out_$i422: i32, out_$i423: i1, out_$i383: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_55: ref)
{

  entry:
    out_$p384, out_$p385, out_$i386, out_$i387, out_$p388, out_$p390, out_$p391, out_$p392, out_$p395, out_$p396, out_$p397, out_$p398, out_$p400, out_$p401, out_$p402, out_$p404, out_$p406, out_$p408, out_$i409, out_$p411, out_$p412, out_$p414, out_$p416, out_$p418, out_$p420, out_$p421, out_$i422, out_$i423, out_$i383, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_55 := in_$p384, in_$p385, in_$i386, in_$i387, in_$p388, in_$p390, in_$p391, in_$p392, in_$p395, in_$p396, in_$p397, in_$p398, in_$p400, in_$p401, in_$p402, in_$p404, in_$p406, in_$p408, in_$i409, in_$p411, in_$p412, in_$p414, in_$p416, in_$p418, in_$p420, in_$p421, in_$i422, in_$i423, in_$i383, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_vslice_dummy_var_55;
    goto $bb136, exit;

  $bb136:
    assume {:verifier.code 0} true;
    goto corral_source_split_2305;

  $bb142:
    assume out_$i423 == 1;
    assume {:verifier.code 0} true;
    out_$i383 := out_$i422;
    goto $bb142_dummy;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i423 := $slt.i32(out_$i422, in_$i362);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$i422 := $add.i32(out_$i383, 1);
    call {:si_unique_call 458} {:cexpr "i"} boogie_si_record_i32(out_$i422);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} device_initialize(out_$p421);
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    out_$p421 := $add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p420, usb_serial_port_release);
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$p420 := $add.ref($add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(1488, 1)), $mul.ref(1128, 1));
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p418, usb_serial_bus_type);
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$p418 := $add.ref($add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(1488, 1)), $mul.ref(264, 1));
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p416, $0.ref);
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$p416 := $add.ref($add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(1488, 1)), $mul.ref(272, 1));
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p414, out_$p412);
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$p414 := $add.ref($add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(1488, 1)), $mul.ref(0, 1));
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$p412 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p411, out_$p384);
    goto corral_source_split_2346;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref($add.ref($add.ref(in_$p53, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i409, 8));
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    out_$i409 := $sext.i32.i64(out_$i383);
    goto corral_source_split_2344;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p408, usb_serial_port_work);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$p408 := $add.ref($add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(1392, 1)), $mul.ref(24, 1));
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} INIT_LIST_HEAD(out_$p406);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$p406 := $add.ref($add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(1392, 1)), $mul.ref(8, 1));
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} lockdep_init_map(out_$p404, .str.35, in_$p16, 0);
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$p404 := $add.ref($add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(1392, 1)), $mul.ref(32, 1));
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 454} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p401, out_$p402, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$p402 := $bitcast.ref.ref(in_$p17);
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$p401 := $bitcast.ref.ref(out_$p400);
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$p400 := $add.ref($add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(1392, 1)), $mul.ref(0, 1));
    goto corral_source_split_2334;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p398, 137438953408);
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$p398 := $add.ref($add.ref(in_$p17, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2332;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} __init_work(out_$p397, 0);
    goto corral_source_split_2331;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$p397 := $add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(1392, 1));
    goto corral_source_split_2330;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} __raw_spin_lock_init(out_$p396, .str.34, in_$p15);
    goto corral_source_split_2329;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    out_$p396 := $bitcast.ref.ref(out_$p395);
    goto corral_source_split_2328;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    out_$p395 := $add.ref($add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(944, 1)), $mul.ref(0, 1));
    goto corral_source_split_2327;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} out_vslice_dummy_var_55 := spinlock_check(out_$p392);
    goto corral_source_split_2326;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    out_$p392 := $add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_2325;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p391, in_$p53);
    goto corral_source_split_2324;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    out_$p391 := $add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_2323;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p390, serial_port_ops);
    goto corral_source_split_2322;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    out_$p390 := $add.ref($add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(8, 1)), $mul.ref(200, 1));
    goto corral_source_split_2321;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} tty_port_init(out_$p388);
    goto corral_source_split_2320;

  $bb141:
    assume {:verifier.code 0} true;
    out_$p388 := $add.ref($add.ref(out_$p385, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_2319;

  $bb139:
    assume !(out_$i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    out_$i387 := $eq.i64(out_$i386, 0);
    goto corral_source_split_2310;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    out_$i386 := $p2i.ref.i64(out_$p385);
    goto corral_source_split_2309;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    out_$p385 := $bitcast.ref.ref(out_$p384);
    goto corral_source_split_2308;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} out_$p384 := kzalloc(2624, 208);
    goto corral_source_split_2307;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb142_dummy:
    call {:si_unique_call 1} out_$p384, out_$p385, out_$i386, out_$i387, out_$p388, out_$p390, out_$p391, out_$p392, out_$p395, out_$p396, out_$p397, out_$p398, out_$p400, out_$p401, out_$p402, out_$p404, out_$p406, out_$p408, out_$i409, out_$p411, out_$p412, out_$p414, out_$p416, out_$p418, out_$p420, out_$p421, out_$i422, out_$i423, out_$i383, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_55 := usb_serial_probe_loop_$bb136(in_$p0, in_$p15, in_$p16, in_$p17, in_$p53, in_$i362, out_$p384, out_$p385, out_$i386, out_$i387, out_$p388, out_$p390, out_$p391, out_$p392, out_$p395, out_$p396, out_$p397, out_$p398, out_$p400, out_$p401, out_$p402, out_$p404, out_$p406, out_$p408, out_$i409, out_$p411, out_$p412, out_$p414, out_$p416, out_$p418, out_$p420, out_$p421, out_$i422, out_$i423, out_$i383, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_55);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb136(in_$p0: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p53: ref, in_$i362: i32, in_$p384: ref, in_$p385: ref, in_$i386: i64, in_$i387: i1, in_$p388: ref, in_$p390: ref, in_$p391: ref, in_$p392: ref, in_$p395: ref, in_$p396: ref, in_$p397: ref, in_$p398: ref, in_$p400: ref, in_$p401: ref, in_$p402: ref, in_$p404: ref, in_$p406: ref, in_$p408: ref, in_$i409: i64, in_$p411: ref, in_$p412: ref, in_$p414: ref, in_$p416: ref, in_$p418: ref, in_$p420: ref, in_$p421: ref, in_$i422: i32, in_$i423: i1, in_$i383: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_55: ref) returns (out_$p384: ref, out_$p385: ref, out_$i386: i64, out_$i387: i1, out_$p388: ref, out_$p390: ref, out_$p391: ref, out_$p392: ref, out_$p395: ref, out_$p396: ref, out_$p397: ref, out_$p398: ref, out_$p400: ref, out_$p401: ref, out_$p402: ref, out_$p404: ref, out_$p406: ref, out_$p408: ref, out_$i409: i64, out_$p411: ref, out_$p412: ref, out_$p414: ref, out_$p416: ref, out_$p418: ref, out_$p420: ref, out_$p421: ref, out_$i422: i32, out_$i423: i1, out_$i383: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_55: ref);
  modifies $M.0, $CurrAddr;



implementation usb_serial_probe_loop_$bb84(in_$p2: ref, in_$p13: ref, in_$p21: ref, in_$p264: ref, in_$p266: ref, in_$p273: ref, in_$p274: ref, in_$i275: i64, in_$p277: ref, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$i286: i24, in_$i287: i24, in_$i288: i24, in_$p289: ref, in_$p290: ref, in_$i291: i8, in_$i292: i64, in_$i293: i64, in_$i294: i64, in_$i295: i1, in_$i297: i64, in_$p298: ref, in_$i299: i32, in_$i300: i32, in_$i301: i32, in_$i302: i8, in_$i303: i32, in_$i304: i1, in_$i271: i32, in_$i272: i32, in_$i305: i32, in_vslice_dummy_var_48: i32) returns (out_$p273: ref, out_$p274: ref, out_$i275: i64, out_$p277: ref, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$i286: i24, out_$i287: i24, out_$i288: i24, out_$p289: ref, out_$p290: ref, out_$i291: i8, out_$i292: i64, out_$i293: i64, out_$i294: i64, out_$i295: i1, out_$i297: i64, out_$p298: ref, out_$i299: i32, out_$i300: i32, out_$i301: i32, out_$i302: i8, out_$i303: i32, out_$i304: i1, out_$i271: i32, out_$i272: i32, out_$i305: i32, out_vslice_dummy_var_48: i32)
{

  entry:
    out_$p273, out_$p274, out_$i275, out_$p277, out_$i278, out_$i279, out_$p280, out_$p281, out_$p282, out_$p283, out_$p284, out_$p285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i271, out_$i272, out_$i305, out_vslice_dummy_var_48 := in_$p273, in_$p274, in_$i275, in_$p277, in_$i278, in_$i279, in_$p280, in_$p281, in_$p282, in_$p283, in_$p284, in_$p285, in_$i286, in_$i287, in_$i288, in_$p289, in_$p290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i297, in_$p298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i271, in_$i272, in_$i305, in_vslice_dummy_var_48;
    goto $bb84, exit;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  $bb92:
    assume out_$i304 == 1;
    assume {:verifier.code 0} true;
    out_$i271, out_$i272 := out_$i301, out_$i300;
    goto $bb92_dummy;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$i305 := out_$i300;
    assume true;
    goto $bb92;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i304 := $sgt.i32(out_$i303, out_$i301);
    goto corral_source_split_2166;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    out_$i303 := $zext.i8.i32(out_$i302);
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    out_$i302 := $load.i8($M.33, in_$p266);
    goto corral_source_split_2164;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$i301 := $add.i32(out_$i271, 1);
    call {:si_unique_call 430} {:cexpr "i"} boogie_si_record_i32(out_$i301);
    goto corral_source_split_2163;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_2162;

  $bb87:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    out_$i300 := out_$i272;
    goto $bb91;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    out_$i300 := out_$i299;
    goto $bb91;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    out_$i299 := $add.i32(out_$i272, 1);
    call {:si_unique_call 429} {:cexpr "num_interrupt_in"} boogie_si_record_i32(out_$i299);
    goto corral_source_split_2160;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, out_$p298, out_$p277);
    goto corral_source_split_2159;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    out_$p298 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i297, 8));
    goto corral_source_split_2158;

  $bb90:
    assume {:verifier.code 0} true;
    out_$i297 := $sext.i32.i64(out_$i272);
    goto corral_source_split_2157;

  $bb89:
    assume !(out_$i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} out_vslice_dummy_var_48 := __dynamic_dev_dbg.ref.ref.ref(in_$p13, in_$p21, .str.27);
    goto corral_source_split_2155;

  $bb88:
    assume out_$i295 == 1;
    goto corral_source_split_2154;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    out_$i295 := $ne.i64(out_$i294, 0);
    goto corral_source_split_2152;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} out_$i294 := ldv__builtin_expect(out_$i293, 0);
    call {:si_unique_call 427} {:cexpr "tmp___12"} boogie_si_record_i64(out_$i294);
    goto corral_source_split_2151;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    out_$i293 := $and.i64(out_$i292, 1);
    goto corral_source_split_2150;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    out_$i292 := $zext.i8.i64(out_$i291);
    goto corral_source_split_2149;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    out_$i291 := $load.i8($M.6, out_$p290);
    goto corral_source_split_2148;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$p290 := $add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p289, 0);
    goto corral_source_split_2146;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    out_$p289 := $add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2145;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p285, out_$i288);
    goto corral_source_split_2144;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    out_$i288 := $or.i24(out_$i287, 858);
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    out_$i287 := $and.i24(out_$i286, $sub.i24(0, 262144));
    goto corral_source_split_2142;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    out_$i286 := $load.i24($M.5, out_$p285);
    goto corral_source_split_2141;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    out_$p285 := $bitcast.ref.ref(out_$p284);
    goto corral_source_split_2140;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    out_$p284 := $add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2139;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p283, .str.27);
    goto corral_source_split_2138;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2137;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p282, .str.19);
    goto corral_source_split_2136;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$p282 := $add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p281, .str.18);
    goto corral_source_split_2134;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p280, .str);
    goto corral_source_split_2132;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    out_$p280 := $add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2131;

  $bb86:
    assume out_$i279 == 1;
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$i279 := $ne.i32(out_$i278, 0);
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} out_$i278 := usb_endpoint_is_int_in(out_$p277);
    call {:si_unique_call 425} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i278);
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    out_$p277 := $add.ref($add.ref(out_$p274, $mul.ref(out_$i275, 64)), $mul.ref(0, 1));
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    out_$i275 := $sext.i32.i64(out_$i271);
    goto corral_source_split_2124;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    out_$p274 := $load.ref($M.34, out_$p273);
    goto corral_source_split_2123;

  $bb85:
    assume {:verifier.code 0} true;
    out_$p273 := $add.ref($add.ref(in_$p264, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2122;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb92_dummy:
    call {:si_unique_call 1} out_$p273, out_$p274, out_$i275, out_$p277, out_$i278, out_$i279, out_$p280, out_$p281, out_$p282, out_$p283, out_$p284, out_$p285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i271, out_$i272, out_$i305, out_vslice_dummy_var_48 := usb_serial_probe_loop_$bb84(in_$p2, in_$p13, in_$p21, in_$p264, in_$p266, out_$p273, out_$p274, out_$i275, out_$p277, out_$i278, out_$i279, out_$p280, out_$p281, out_$p282, out_$p283, out_$p284, out_$p285, out_$i286, out_$i287, out_$i288, out_$p289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i271, out_$i272, out_$i305, out_vslice_dummy_var_48);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb84(in_$p2: ref, in_$p13: ref, in_$p21: ref, in_$p264: ref, in_$p266: ref, in_$p273: ref, in_$p274: ref, in_$i275: i64, in_$p277: ref, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$i286: i24, in_$i287: i24, in_$i288: i24, in_$p289: ref, in_$p290: ref, in_$i291: i8, in_$i292: i64, in_$i293: i64, in_$i294: i64, in_$i295: i1, in_$i297: i64, in_$p298: ref, in_$i299: i32, in_$i300: i32, in_$i301: i32, in_$i302: i8, in_$i303: i32, in_$i304: i1, in_$i271: i32, in_$i272: i32, in_$i305: i32, in_vslice_dummy_var_48: i32) returns (out_$p273: ref, out_$p274: ref, out_$i275: i64, out_$p277: ref, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$i286: i24, out_$i287: i24, out_$i288: i24, out_$p289: ref, out_$p290: ref, out_$i291: i8, out_$i292: i64, out_$i293: i64, out_$i294: i64, out_$i295: i1, out_$i297: i64, out_$p298: ref, out_$i299: i32, out_$i300: i32, out_$i301: i32, out_$i302: i8, out_$i303: i32, out_$i304: i1, out_$i271: i32, out_$i272: i32, out_$i305: i32, out_vslice_dummy_var_48: i32);
  modifies $M.29, $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation usb_serial_probe_loop_$bb29(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p21: ref, in_$p89: ref, in_$p91: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i24, in_$i118: i24, in_$i119: i24, in_$p120: ref, in_$p121: ref, in_$i122: i8, in_$i123: i64, in_$i124: i64, in_$i125: i64, in_$i126: i1, in_$i128: i64, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i24, in_$i141: i24, in_$i142: i24, in_$p143: ref, in_$p144: ref, in_$i145: i8, in_$i146: i64, in_$i147: i64, in_$i148: i64, in_$i149: i1, in_$i151: i64, in_$p152: ref, in_$i153: i32, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$i163: i24, in_$i164: i24, in_$i165: i24, in_$p166: ref, in_$p167: ref, in_$i168: i8, in_$i169: i64, in_$i170: i64, in_$i171: i64, in_$i172: i1, in_$i174: i64, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$i186: i24, in_$i187: i24, in_$i188: i24, in_$p189: ref, in_$p190: ref, in_$i191: i8, in_$i192: i64, in_$i193: i64, in_$i194: i64, in_$i195: i1, in_$i197: i64, in_$p198: ref, in_$i199: i32, in_$i200: i32, in_$i201: i32, in_$i202: i8, in_$i203: i32, in_$i204: i1, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i32, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_$i208: i32, in_vslice_dummy_var_44: i32, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32) returns (out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i24, out_$i118: i24, out_$i119: i24, out_$p120: ref, out_$p121: ref, out_$i122: i8, out_$i123: i64, out_$i124: i64, out_$i125: i64, out_$i126: i1, out_$i128: i64, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i24, out_$i141: i24, out_$i142: i24, out_$p143: ref, out_$p144: ref, out_$i145: i8, out_$i146: i64, out_$i147: i64, out_$i148: i64, out_$i149: i1, out_$i151: i64, out_$p152: ref, out_$i153: i32, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$i163: i24, out_$i164: i24, out_$i165: i24, out_$p166: ref, out_$p167: ref, out_$i168: i8, out_$i169: i64, out_$i170: i64, out_$i171: i64, out_$i172: i1, out_$i174: i64, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$i186: i24, out_$i187: i24, out_$i188: i24, out_$p189: ref, out_$p190: ref, out_$i191: i8, out_$i192: i64, out_$i193: i64, out_$i194: i64, out_$i195: i1, out_$i197: i64, out_$p198: ref, out_$i199: i32, out_$i200: i32, out_$i201: i32, out_$i202: i8, out_$i203: i32, out_$i204: i1, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i32, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_$i208: i32, out_vslice_dummy_var_44: i32, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32)
{

  entry:
    out_$p104, out_$p105, out_$i106, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i205, out_$i206, out_$i207, out_$i208, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47 := in_$p104, in_$p105, in_$i106, in_$p108, in_$i109, in_$i110, in_$p111, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$i117, in_$i118, in_$i119, in_$p120, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i128, in_$p129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$p135, in_$p136, in_$p137, in_$p138, in_$p139, in_$i140, in_$i141, in_$i142, in_$p143, in_$p144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i151, in_$p152, in_$i153, in_$i154, in_$i155, in_$i156, in_$p157, in_$p158, in_$p159, in_$p160, in_$p161, in_$p162, in_$i163, in_$i164, in_$i165, in_$p166, in_$p167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i174, in_$p175, in_$i176, in_$i177, in_$i178, in_$i179, in_$p180, in_$p181, in_$p182, in_$p183, in_$p184, in_$p185, in_$i186, in_$i187, in_$i188, in_$p189, in_$p190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i197, in_$p198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i205, in_$i206, in_$i207, in_$i208, in_vslice_dummy_var_44, in_vslice_dummy_var_45, in_vslice_dummy_var_46, in_vslice_dummy_var_47;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1895;

  $bb55:
    assume out_$i204 == 1;
    assume {:verifier.code 0} true;
    out_$i99, out_$i100, out_$i101, out_$i102, out_$i103 := out_$i154, out_$i131, out_$i201, out_$i177, out_$i200;
    goto $bb55_dummy;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i205, out_$i206, out_$i207, out_$i208 := out_$i200, out_$i177, out_$i131, out_$i154;
    assume true;
    goto $bb55;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$i204 := $sgt.i32(out_$i203, out_$i201);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i203 := $zext.i8.i32(out_$i202);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i8($M.0, in_$p91);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i201 := $add.i32(out_$i101, 1);
    call {:si_unique_call 423} {:cexpr "i"} boogie_si_record_i32(out_$i201);
    goto corral_source_split_2046;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_2045;

  $bb50:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    out_$i200 := out_$i103;
    goto $bb54;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i200 := out_$i199;
    goto $bb54;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i199 := $add.i32(out_$i103, 1);
    call {:si_unique_call 422} {:cexpr "num_interrupt_out"} boogie_si_record_i32(out_$i199);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, out_$p198, out_$p108);
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(out_$i197, 8));
    goto corral_source_split_2041;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i197 := $sext.i32.i64(out_$i103);
    goto corral_source_split_2040;

  $bb52:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} out_vslice_dummy_var_47 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p12, in_$p21, .str.26, out_$i101);
    goto corral_source_split_2038;

  $bb51:
    assume out_$i195 == 1;
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$i195 := $ne.i64(out_$i194, 0);
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} out_$i194 := ldv__builtin_expect(out_$i193, 0);
    call {:si_unique_call 420} {:cexpr "tmp___10"} boogie_si_record_i64(out_$i194);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$i193 := $and.i64(out_$i192, 1);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$i192 := $zext.i8.i64(out_$i191);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    out_$i191 := $load.i8($M.6, out_$p190);
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p189, 0);
    goto corral_source_split_2029;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2028;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p185, out_$i188);
    goto corral_source_split_2027;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    out_$i188 := $or.i24(out_$i187, 834);
    goto corral_source_split_2026;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    out_$i187 := $and.i24(out_$i186, $sub.i24(0, 262144));
    goto corral_source_split_2025;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i24($M.5, out_$p185);
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$p185 := $bitcast.ref.ref(out_$p184);
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p183, .str.26);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p182, .str.19);
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p181, .str.18);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p180, .str);
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  $bb49:
    assume out_$i179 == 1;
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i179 := $ne.i32(out_$i178, 0);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} out_$i178 := usb_endpoint_is_int_out(out_$p108);
    call {:si_unique_call 418} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i178);
    goto corral_source_split_2010;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_2009;

  $bb44:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    out_$i177 := out_$i102;
    goto $bb48;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$i177 := out_$i176;
    goto $bb48;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$i176 := $add.i32(out_$i102, 1);
    call {:si_unique_call 416} {:cexpr "num_interrupt_in"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, out_$p175, out_$p108);
    goto corral_source_split_2006;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i174, 8));
    goto corral_source_split_2005;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i174 := $sext.i32.i64(out_$i102);
    goto corral_source_split_2004;

  $bb46:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} out_vslice_dummy_var_46 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p11, in_$p21, .str.25, out_$i101);
    goto corral_source_split_2002;

  $bb45:
    assume out_$i172 == 1;
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_$i172 := $ne.i64(out_$i171, 0);
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} out_$i171 := ldv__builtin_expect(out_$i170, 0);
    call {:si_unique_call 414} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i171);
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$i170 := $and.i64(out_$i169, 1);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$i169 := $zext.i8.i64(out_$i168);
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i8($M.6, out_$p167);
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p166, 0);
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p162, out_$i165);
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i165 := $or.i24(out_$i164, 827);
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$i164 := $and.i24(out_$i163, $sub.i24(0, 262144));
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i24($M.5, out_$p162);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$p162 := $bitcast.ref.ref(out_$p161);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p160, .str.25);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p159, .str.19);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p158, .str.18);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p157, .str);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1978;

  $bb43:
    assume out_$i156 == 1;
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$i156 := $ne.i32(out_$i155, 0);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} out_$i155 := usb_endpoint_is_int_in(out_$p108);
    call {:si_unique_call 412} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i155);
    goto corral_source_split_1974;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  $bb38:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    out_$i154 := out_$i99;
    goto $bb42;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$i154 := out_$i153;
    goto $bb42;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$i153 := $add.i32(out_$i99, 1);
    call {:si_unique_call 410} {:cexpr "num_bulk_out"} boogie_si_record_i32(out_$i153);
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, out_$p152, out_$p108);
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(in_$p5, $mul.ref(0, 64)), $mul.ref(out_$i151, 8));
    goto corral_source_split_1969;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i151 := $sext.i32.i64(out_$i99);
    goto corral_source_split_1968;

  $bb40:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} out_vslice_dummy_var_45 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p10, in_$p21, .str.24, out_$i101);
    goto corral_source_split_1966;

  $bb39:
    assume out_$i149 == 1;
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    out_$i149 := $ne.i64(out_$i148, 0);
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} out_$i148 := ldv__builtin_expect(out_$i147, 0);
    call {:si_unique_call 408} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i148);
    goto corral_source_split_1962;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$i147 := $and.i64(out_$i146, 1);
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    out_$i146 := $zext.i8.i64(out_$i145);
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i8($M.6, out_$p144);
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p143, 0);
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p139, out_$i142);
    goto corral_source_split_1955;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    out_$i142 := $or.i24(out_$i141, 820);
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i141 := $and.i24(out_$i140, $sub.i24(0, 262144));
    goto corral_source_split_1953;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i24($M.5, out_$p139);
    goto corral_source_split_1952;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$p139 := $bitcast.ref.ref(out_$p138);
    goto corral_source_split_1951;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p137, .str.24);
    goto corral_source_split_1949;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1948;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p136, .str.19);
    goto corral_source_split_1947;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1946;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p135, .str.18);
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p134, .str);
    goto corral_source_split_1943;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1942;

  $bb37:
    assume out_$i133 == 1;
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 0);
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} out_$i132 := usb_endpoint_is_bulk_out(out_$p108);
    call {:si_unique_call 406} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_1938;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1937;

  $bb32:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i131 := out_$i100;
    goto $bb36;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$i131 := out_$i130;
    goto $bb36;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$i130 := $add.i32(out_$i100, 1);
    call {:si_unique_call 404} {:cexpr "num_bulk_in"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, out_$p129, out_$p108);
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(out_$i128, 8));
    goto corral_source_split_1933;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i128 := $sext.i32.i64(out_$i100);
    goto corral_source_split_1932;

  $bb34:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} out_vslice_dummy_var_44 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p9, in_$p21, .str.23, out_$i101);
    goto corral_source_split_1930;

  $bb33:
    assume out_$i126 == 1;
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i64(out_$i125, 0);
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} out_$i125 := ldv__builtin_expect(out_$i124, 0);
    call {:si_unique_call 402} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i125);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i124 := $and.i64(out_$i123, 1);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i8.i64(out_$i122);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i8($M.6, out_$p121);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p120, 0);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p116, out_$i119);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i119 := $or.i24(out_$i118, 813);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$i118 := $and.i24(out_$i117, $sub.i24(0, 262144));
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i24($M.5, out_$p116);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p115);
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p114, .str.23);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p113, .str.19);
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p112, .str.18);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p111, .str);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1906;

  $bb31:
    assume out_$i110 == 1;
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} out_$i109 := usb_endpoint_is_bulk_in(out_$p108);
    call {:si_unique_call 400} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p105, $mul.ref(out_$i106, 64)), $mul.ref(0, 1));
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i101);
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_1898;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p89, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb55_dummy:
    call {:si_unique_call 1} out_$p104, out_$p105, out_$i106, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i205, out_$i206, out_$i207, out_$i208, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47 := usb_serial_probe_loop_$bb29(in_$p2, in_$p3, in_$p4, in_$p5, in_$p9, in_$p10, in_$p11, in_$p12, in_$p21, in_$p89, in_$p91, out_$p104, out_$p105, out_$i106, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i205, out_$i206, out_$i207, out_$i208, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb29(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p21: ref, in_$p89: ref, in_$p91: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i24, in_$i118: i24, in_$i119: i24, in_$p120: ref, in_$p121: ref, in_$i122: i8, in_$i123: i64, in_$i124: i64, in_$i125: i64, in_$i126: i1, in_$i128: i64, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i24, in_$i141: i24, in_$i142: i24, in_$p143: ref, in_$p144: ref, in_$i145: i8, in_$i146: i64, in_$i147: i64, in_$i148: i64, in_$i149: i1, in_$i151: i64, in_$p152: ref, in_$i153: i32, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$i163: i24, in_$i164: i24, in_$i165: i24, in_$p166: ref, in_$p167: ref, in_$i168: i8, in_$i169: i64, in_$i170: i64, in_$i171: i64, in_$i172: i1, in_$i174: i64, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$i186: i24, in_$i187: i24, in_$i188: i24, in_$p189: ref, in_$p190: ref, in_$i191: i8, in_$i192: i64, in_$i193: i64, in_$i194: i64, in_$i195: i1, in_$i197: i64, in_$p198: ref, in_$i199: i32, in_$i200: i32, in_$i201: i32, in_$i202: i8, in_$i203: i32, in_$i204: i1, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i32, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_$i208: i32, in_vslice_dummy_var_44: i32, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32) returns (out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i24, out_$i118: i24, out_$i119: i24, out_$p120: ref, out_$p121: ref, out_$i122: i8, out_$i123: i64, out_$i124: i64, out_$i125: i64, out_$i126: i1, out_$i128: i64, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i24, out_$i141: i24, out_$i142: i24, out_$p143: ref, out_$p144: ref, out_$i145: i8, out_$i146: i64, out_$i147: i64, out_$i148: i64, out_$i149: i1, out_$i151: i64, out_$p152: ref, out_$i153: i32, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$i163: i24, out_$i164: i24, out_$i165: i24, out_$p166: ref, out_$p167: ref, out_$i168: i8, out_$i169: i64, out_$i170: i64, out_$i171: i64, out_$i172: i1, out_$i174: i64, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$i186: i24, out_$i187: i24, out_$i188: i24, out_$p189: ref, out_$p190: ref, out_$i191: i8, out_$i192: i64, out_$i193: i64, out_$i194: i64, out_$i195: i1, out_$i197: i64, out_$p198: ref, out_$i199: i32, out_$i200: i32, out_$i201: i32, out_$i202: i8, out_$i203: i32, out_$i204: i1, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i32, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_$i208: i32, out_vslice_dummy_var_44: i32, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32);
  modifies $M.30, $M.6, $M.5, $M.4, $M.3, $M.2, $M.1, $M.29, $M.28, $M.27;



implementation usb_serial_disconnect_loop_$bb4(in_$p2: ref, in_$p10: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i14: i32, in_vslice_dummy_var_62: i1) returns (out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i14: i32, out_vslice_dummy_var_62: i1)
{

  entry:
    out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i14, out_vslice_dummy_var_62 := in_$i15, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p26, in_$p27, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i14, in_vslice_dummy_var_62;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2932;

  $bb15:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i33;
    goto $bb15_dummy;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i35, out_$i33);
    goto corral_source_split_2966;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_2965;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, in_$p10);
    goto corral_source_split_2964;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i14, 1);
    call {:si_unique_call 545} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2963;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} device_del(out_$p32);
    goto corral_source_split_2961;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p18, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2960;

  $bb11:
    assume out_$i31 == 1;
    goto corral_source_split_2959;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_2957;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} out_$i30 := device_is_registered(out_$p29);
    call {:si_unique_call 543} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_2956;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p18, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_2955;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} out_vslice_dummy_var_62 := cancel_work_sync(out_$p27);
    goto corral_source_split_2954;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref(0, 2632)), $mul.ref(1392, 1));
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} __wake_up(out_$p26, 1, 1, $0.ref);
    goto corral_source_split_2952;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 2632)), $mul.ref(8, 1)), $mul.ref(464, 1));
    goto corral_source_split_2951;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} usb_serial_port_poison_urbs(out_$p18);
    goto corral_source_split_2950;

  $bb9:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} tty_kref_put(out_$p22);
    goto corral_source_split_2948;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} tty_vhangup(out_$p22);
    goto corral_source_split_2947;

  $bb8:
    assume out_$i24 == 1;
    goto corral_source_split_2946;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_2944;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_2943;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} out_$p22 := tty_port_tty_get(out_$p21);
    goto corral_source_split_2942;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_2941;

  $bb6:
    assume out_$i20 == 1;
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_2938;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_2937;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2936;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i15, 8));
    goto corral_source_split_2935;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_2934;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i14, out_vslice_dummy_var_62 := usb_serial_disconnect_loop_$bb4(in_$p2, in_$p10, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i14, out_vslice_dummy_var_62);
    return;

  exit:
    return;
}



procedure usb_serial_disconnect_loop_$bb4(in_$p2: ref, in_$p10: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i14: i32, in_vslice_dummy_var_62: i1) returns (out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i14: i32, out_vslice_dummy_var_62: i1);



implementation usb_serial_suspend_loop_$bb11(in_$p5: ref, in_$p29: ref, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$i33: i32) returns (out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$i33: i32)
{

  entry:
    out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i33 := in_$i34, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i33;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3026;

  $bb16:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i40;
    goto $bb16_dummy;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    out_$i43 := $sgt.i32(out_$i42, out_$i40);
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    goto corral_source_split_3039;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, in_$p29);
    goto corral_source_split_3038;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i33, 1);
    call {:si_unique_call 554} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_3037;

  $bb14:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} usb_serial_port_poison_urbs(out_$p37);
    goto corral_source_split_3035;

  $bb13:
    assume out_$i39 == 1;
    goto corral_source_split_3034;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_3030;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i34, 8));
    goto corral_source_split_3029;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i33 := usb_serial_suspend_loop_$bb11(in_$p5, in_$p29, out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i33);
    return;

  exit:
    return;
}



procedure usb_serial_suspend_loop_$bb11(in_$p5: ref, in_$p29: ref, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$i33: i32) returns (out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$i33: i32);



implementation usb_serial_unpoison_port_urbs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := in_$i6, in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3081;

  $bb9:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i12;
    goto $bb9_dummy;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    out_$i15 := $sgt.i32(out_$i14, out_$i12);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, in_$p1);
    goto corral_source_split_3093;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i5, 1);
    call {:si_unique_call 563} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_3092;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} usb_serial_port_unpoison_urbs(out_$p9);
    goto corral_source_split_3090;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i64(out_$i10, 0);
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i6, 8));
    goto corral_source_split_3084;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_3083;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := usb_serial_unpoison_port_urbs_loop_$bb4(in_$p0, in_$p1, out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5);
    return;

  exit:
    return;
}



procedure usb_serial_unpoison_port_urbs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32);



implementation search_serial_device_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p12: ref, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p12: ref, out_$p13: ref)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p12, out_$p13 := in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p12, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3208;

  $bb13:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$p13 := out_$p29, out_$p20;
    goto $bb13_dummy;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, $p2i.ref.i64(usb_serial_driver_list));
    goto corral_source_split_3233;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_3232;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p28, $mul.ref($sub.ref(0, 24), 536)), $mul.ref(24, 1));
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p28, $mul.ref($sub.ref(0, 24), 536));
    goto corral_source_split_3230;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_3228;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 536)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3227;

  $bb10:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p12;
    assume true;
    goto $bb10;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_3220;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3219;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$p20 := out_$p13;
    goto $bb8;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p19;
    goto $bb8;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} out_$p19 := get_iface_id(out_$p12, in_$p0);
    goto corral_source_split_3217;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i64(out_$i16, out_$i17);
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_3211;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p12, $mul.ref(0, 536)), $mul.ref(160, 1));
    goto corral_source_split_3210;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p12, out_$p13 := search_serial_device_loop_$bb4(in_$p0, in_$p5, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p12, out_$p13);
    return;

  exit:
    return;
}



procedure search_serial_device_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p12: ref, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p12: ref, out_$p13: ref);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation get_free_serial_loop_$bb34(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i8, in_$i84: i64, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i78: i32, in_$i79: i32) returns (out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i8, out_$i84: i64, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i78: i32, out_$i79: i32)
{

  entry:
    out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i78, out_$i79 := in_$i80, in_$p81, in_$i82, in_$i83, in_$i84, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i78, in_$i79;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  $bb36:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$i78, out_$i79 := out_$i82, out_$i89;
    goto $bb36_dummy;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    out_$i94 := $and.i1(out_$i92, out_$i93);
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$i93 := $ule.i32(out_$i89, 253);
    goto corral_source_split_3714;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    out_$i92 := $ugt.i32(out_$i91, out_$i89);
    goto corral_source_split_3713;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i90, in_$i1);
    goto corral_source_split_3712;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.37, in_$p2);
    goto corral_source_split_3711;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i79, 1);
    call {:si_unique_call 686} {:cexpr "i"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_3710;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p88, out_$i83);
    goto corral_source_split_3709;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p87, $mul.ref(0, 2632)), $mul.ref(1016, 1));
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.0, out_$p86);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i84, 8));
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i32.i64(out_$i78);
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i32.i8(out_$i79);
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    out_$i82 := $add.i32(out_$i78, 1);
    call {:si_unique_call 685} {:cexpr "j"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p81, in_$p0);
    goto corral_source_split_3702;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(out_$i80, 8));
    goto corral_source_split_3701;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i32.i64(out_$i79);
    goto corral_source_split_3700;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i78, out_$i79 := get_free_serial_loop_$bb34(in_$p0, in_$i1, in_$p2, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i78, out_$i79);
    return;

  exit:
    return;
}



procedure get_free_serial_loop_$bb34(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i8, in_$i84: i64, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i78: i32, in_$i79: i32) returns (out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i8, out_$i84: i64, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i78: i32, out_$i79: i32);
  modifies $M.0, $M.24;



implementation get_free_serial_loop_$bb13(in_$i32: i32, in_$i35: i32, in_$i36: i1, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i37: i32, in_$i47: i32, in_$i48: i1, in_$i34: i32, in_$i25: i32) returns (out_$i35: i32, out_$i36: i1, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i37: i32, out_$i47: i32, out_$i48: i1, out_$i34: i32)
{

  entry:
    out_$i35, out_$i36, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i37, out_$i47, out_$i48, out_$i34 := in_$i35, in_$i36, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i37, in_$i47, in_$i48, in_$i34;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3632;

  $bb22:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i47;
    goto $bb22_dummy;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$i48 := $uge.i32(in_$i32, out_$i47);
    goto corral_source_split_3652;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i34, 1);
    call {:si_unique_call 680} {:cexpr "j"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_3651;

  $bb19:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i34;
    assume true;
    goto $bb19;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.24, out_$p40);
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(out_$i39, 8));
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i32.i64(out_$i38);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(in_$i25, out_$i34);
    goto corral_source_split_3641;

  $bb17:
    assume !(out_$i36 == 1);
    goto corral_source_split_3640;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i34;
    assume true;
    goto $bb17;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$i36 := $ugt.i32(out_$i35, 253);
    goto corral_source_split_3635;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(in_$i25, out_$i34);
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i35, out_$i36, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i37, out_$i47, out_$i48, out_$i34 := get_free_serial_loop_$bb13(in_$i32, out_$i35, out_$i36, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i37, out_$i47, out_$i48, out_$i34, in_$i25);
    return;

  exit:
    return;
}



procedure get_free_serial_loop_$bb13(in_$i32: i32, in_$i35: i32, in_$i36: i1, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i37: i32, in_$i47: i32, in_$i48: i1, in_$i34: i32, in_$i25: i32) returns (out_$i35: i32, out_$i36: i1, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i37: i32, out_$i47: i32, out_$i48: i1, out_$i34: i32);



implementation get_free_serial_loop_$bb4(in_$i1: i32, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$i32: i32, in_$i33: i1, in_$i35: i32, in_$i36: i1, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i37: i32, in_$i44: i32, in_$i47: i32, in_$i48: i1, in_$i34: i32, in_$i45: i32, in_$i46: i32, in_$i49: i1, in_$i50: i32, in_$i31: i32, in_$i96: i32, in_$i97: i1, in_$i25: i32) returns (out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$i32: i32, out_$i33: i1, out_$i35: i32, out_$i36: i1, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i37: i32, out_$i44: i32, out_$i47: i32, out_$i48: i1, out_$i34: i32, out_$i45: i32, out_$i46: i32, out_$i49: i1, out_$i50: i32, out_$i31: i32, out_$i96: i32, out_$i97: i1, out_$i25: i32)
{

  entry:
    out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i35, out_$i36, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i37, out_$i44, out_$i47, out_$i48, out_$i34, out_$i45, out_$i46, out_$i49, out_$i50, out_$i31, out_$i96, out_$i97, out_$i25 := in_$i26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i32, in_$i33, in_$i35, in_$i36, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i37, in_$i44, in_$i47, in_$i48, in_$i34, in_$i45, in_$i46, in_$i49, in_$i50, in_$i31, in_$i96, in_$i97, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3613;

  $bb40:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := out_$i96;
    goto $bb40_dummy;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    out_$i97 := $ule.i32(out_$i96, 253);
    goto corral_source_split_3625;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i31, 1);
    call {:si_unique_call 678} {:cexpr "i"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_3624;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3623;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i45;
    goto $bb8;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i25;
    goto $bb8;

  $bb6:
    assume out_$i30 == 1;
    goto corral_source_split_3621;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_3619;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.24, out_$p27);
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(out_$i26, 8));
    goto corral_source_split_3616;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i32.i64(out_$i25);
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb25:
    assume out_$i49 == 1;
    goto corral_source_split_3656;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i45;
    assume true;
    goto $bb25;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i46, 0);
    goto corral_source_split_3649;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3648;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i25, 1;
    goto $bb20;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i44, 0;
    goto $bb20;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i25, out_$i37);
    call {:si_unique_call 679} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_3638;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3637;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i43 == 1;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i36 == 1;
    goto $bb16;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i34;
    assume true;
    goto $bb15, $bb17;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$i36 := $ugt.i32(out_$i35, 253);
    goto corral_source_split_3635;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i25, out_$i34);
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    call out_$i35, out_$i36, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i37, out_$i47, out_$i48, out_$i34 := get_free_serial_loop_$bb13(out_$i32, out_$i35, out_$i36, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i37, out_$i47, out_$i48, out_$i34, out_$i25);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3632;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$i34 := 1;
    goto $bb13;

  $bb22:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i47;
    assume false;
    return;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$i48 := $uge.i32(out_$i32, out_$i47);
    goto corral_source_split_3652;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i34, 1);
    call {:si_unique_call 680} {:cexpr "j"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_3651;

  $bb19:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i34;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.24, out_$p40);
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(serial_table, $mul.ref(0, 2032)), $mul.ref(out_$i39, 8));
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i32.i64(out_$i38);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i25, out_$i34);
    goto corral_source_split_3641;

  $bb17:
    assume !(out_$i36 == 1);
    goto corral_source_split_3640;

  $bb10:
    assume out_$i33 == 1;
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    out_$i33 := $uge.i32(out_$i32, 1);
    goto corral_source_split_3628;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(in_$i1, $sub.i32(0, 1));
    goto corral_source_split_3627;

  $bb7:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb12;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb23:
    assume !(out_$i48 == 1);
    goto corral_source_split_3654;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i35, out_$i36, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i37, out_$i44, out_$i47, out_$i48, out_$i34, out_$i45, out_$i46, out_$i49, out_$i50, out_$i31, out_$i96, out_$i97, out_$i25 := get_free_serial_loop_$bb4(in_$i1, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i35, out_$i36, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i37, out_$i44, out_$i47, out_$i48, out_$i34, out_$i45, out_$i46, out_$i49, out_$i50, out_$i31, out_$i96, out_$i97, out_$i25);
    return;

  exit:
    return;
}



procedure get_free_serial_loop_$bb4(in_$i1: i32, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$i32: i32, in_$i33: i1, in_$i35: i32, in_$i36: i1, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i37: i32, in_$i44: i32, in_$i47: i32, in_$i48: i1, in_$i34: i32, in_$i45: i32, in_$i46: i32, in_$i49: i1, in_$i50: i32, in_$i31: i32, in_$i96: i32, in_$i97: i1, in_$i25: i32) returns (out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$i32: i32, out_$i33: i1, out_$i35: i32, out_$i36: i1, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i37: i32, out_$i44: i32, out_$i47: i32, out_$i48: i1, out_$i34: i32, out_$i45: i32, out_$i46: i32, out_$i49: i1, out_$i50: i32, out_$i31: i32, out_$i96: i32, out_$i97: i1, out_$i25: i32);



implementation match_dynamic_id_loop_$bb4(in_$p0: ref, in_$i13: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$i17, out_$i18, out_$p19, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p15 := in_$p16, in_$i17, in_$i18, in_$p19, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3860;

  $bb10:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p26;
    goto $bb10_dummy;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, in_$i13);
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_3874;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3873;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p15;
    assume true;
    goto $bb7;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_3864;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} out_$i17 := usb_match_one_id(in_$p0, out_$p16);
    call {:si_unique_call 716} {:cexpr "tmp"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3863;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p16, out_$i17, out_$i18, out_$p19, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p15 := match_dynamic_id_loop_$bb4(in_$p0, in_$i13, out_$p16, out_$i17, out_$i18, out_$p19, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p15);
    return;

  exit:
    return;
}



procedure match_dynamic_id_loop_$bb4(in_$p0: ref, in_$i13: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p15: ref);



implementation usb_serial_generic_write_start_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p8: ref, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$i12: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i64, in_$p34: ref, in_$i35: i64, in_$i36: i32, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i64, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i64, in_$i94: i64, in_$i95: i1) returns (out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$i12: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i64, out_$p34: ref, out_$i35: i64, out_$i36: i32, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i64, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i64, out_$i94: i64, out_$i95: i1)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95 := in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i12, in_$p21, in_$p22, in_$p23, in_$i24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3965;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i64(out_$i15, 0);
    goto corral_source_split_3980;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i64($M.0, in_$p8);
    goto corral_source_split_3979;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} out_$i14 := _raw_spin_lock_irqsave(out_$p13);
    call {:si_unique_call 742} {:cexpr "flags"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_3978;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} out_$p13 := spinlock_check(in_$p5);
    goto corral_source_split_3977;

  $bb9:
    assume out_$i95 == 1;
    goto corral_source_split_3976;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i64(out_$i94, 0);
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$i94 := $and.i64(out_$i93, 67043328);
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i92);
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.0, out_$p91);
    goto corral_source_split_4060;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p90, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_4059;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_$p90 := current_thread_info();
    goto corral_source_split_4058;

  $bb17:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    out_$i69, out_$i70, out_$i71 := out_$i36, out_$i53, out_$i67;
    assume true;
    goto $bb17;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_4028;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} out_$i67 := usb_submit_urb(out_$p41, 32);
    call {:si_unique_call 758} {:cexpr "result"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_4027;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} clear_bit(out_$i36, out_$p66);
    goto corral_source_split_4026;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(1232, 1));
    goto corral_source_split_4025;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} spin_unlock_irqrestore(out_$p65, out_$i60);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, out_$i63);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(1288, 1));
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, out_$i53);
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(1288, 1));
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} out_$i60 := _raw_spin_lock_irqsave(out_$p59);
    call {:si_unique_call 754} {:cexpr "flags"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_4017;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} out_$p59 := spinlock_check(out_$p58);
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} usb_serial_debug_data(out_$p55, .str.109, out_$i53, out_$p57);
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_4013;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p41, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(1488, 1));
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, out_$i53);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p41, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_4009;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i51);
    call {:si_unique_call 749} out_$i53 := devirtbounce.22(out_$p47, in_$p0, out_$p49, out_$i52);
    call {:si_unique_call 750} {:cexpr "count"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_4007;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(1160, 1));
    goto corral_source_split_4006;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_4005;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p41, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4004;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_4003;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 536)), $mul.ref(528, 1));
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_4001;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_3999;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(0, 1));
    goto corral_source_split_3998;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3997;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(1216, 1)), $mul.ref(out_$i38, 8));
    goto corral_source_split_3996;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i36);
    goto corral_source_split_3995;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} spin_unlock_irqrestore(out_$p37, out_$i12);
    goto corral_source_split_3994;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(944, 1));
    goto corral_source_split_3993;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i64.i32(out_$i35);
    call {:si_unique_call 747} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3992;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} out_$i35 := find_first_bit(out_$p34, 2);
    call {:si_unique_call 746} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_3991;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(1232, 1));
    goto corral_source_split_3990;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i12;
    assume true;
    goto $bb13;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i24, out_$i28);
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    out_$p25 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_3967;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2632)), $mul.ref(1176, 1)), $mul.ref(0, 1));
    goto corral_source_split_3966;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95 := usb_serial_generic_write_start_loop_$bb8(in_$p0, in_$p5, in_$p8, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95);
    return;

  exit:
    return;
}



procedure usb_serial_generic_write_start_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p8: ref, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$i12: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i64, in_$p34: ref, in_$i35: i64, in_$i36: i32, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i64, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i64, in_$i94: i64, in_$i95: i1) returns (out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$i12: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i64, out_$p34: ref, out_$i35: i64, out_$i36: i32, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i64, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i64, out_$i94: i64, out_$i95: i1);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_register_drivers_loop_$bb35(in_$i58: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p60: ref) returns (out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p60: ref)
{

  entry:
    out_$p61, out_$p62, out_$i63, out_$i64, out_$p60 := in_$p61, in_$p62, in_$i63, in_$i64, in_$p60;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_4227;

  $bb37:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$p60 := out_$p62;
    goto $bb37_dummy;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    out_$i64 := $ugt.i64(out_$i63, in_$i58);
    goto corral_source_split_4233;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_4232;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(out_$p60, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_4231;

  SeqInstr_288:
    goto corral_source_split_4230;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} usb_serial_deregister(out_$p61);
    goto SeqInstr_287;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.41, out_$p60);
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p61, out_$p62, out_$i63, out_$i64, out_$p60 := usb_serial_register_drivers_loop_$bb35(in_$i58, out_$p61, out_$p62, out_$i63, out_$i64, out_$p60);
    return;

  exit:
    return;
}



procedure usb_serial_register_drivers_loop_$bb35(in_$i58: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p60: ref) returns (out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p60: ref);
  modifies $M.25, assertsPassed;



implementation usb_serial_register_drivers_loop_$bb23(in_$p3: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p40: ref) returns (out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p40: ref)
{

  entry:
    out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p40 := in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p40;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4197;

  $bb29:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$p40 := out_$p48;
    goto $bb29_dummy;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, 0);
    goto corral_source_split_4216;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.41, out_$p48);
    goto corral_source_split_4214;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p40, $mul.ref(1, 8));
    goto corral_source_split_4213;

  $bb26:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$p46, out_$i47 := out_$p40, out_$i44;
    assume true;
    goto $bb26;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_4204;

  SeqInstr_285:
    call {:si_unique_call 801} {:cexpr "rc"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_4203;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} out_$i44 := usb_serial_register(out_$p43);
    goto SeqInstr_284;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.41, out_$p40);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p42, in_$p3);
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 536)), $mul.ref(160, 1));
    goto corral_source_split_4200;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.41, out_$p40);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p40 := usb_serial_register_drivers_loop_$bb23(in_$p3, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p40);
    return;

  exit:
    return;
}



procedure usb_serial_register_drivers_loop_$bb23(in_$p3: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p40: ref) returns (out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p40: ref);
  modifies $M.0, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.25, assertsPassed, $CurrAddr;



implementation usb_serial_register_drivers_loop_$bb8(in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p24: ref)
{

  entry:
    out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p24 := in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p31, in_$p32, in_$i33, in_$i34, in_$p24;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4167;

  $bb14:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p24 := out_$p31;
    goto $bb14_dummy;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.41, out_$p31);
    goto corral_source_split_4183;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p24, $mul.ref(1, 8));
    goto corral_source_split_4182;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 536)), $mul.ref(344, 1));
    goto corral_source_split_4170;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.41, out_$p24);
    goto corral_source_split_4169;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p24 := usb_serial_register_drivers_loop_$bb8(out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p24);
    return;

  exit:
    return;
}



procedure usb_serial_register_drivers_loop_$bb8(in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p24: ref);



implementation free_dynids_loop_$bb4(in_$i16: i64, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p18: ref, in_$p19: ref) returns (out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p18: ref, out_$p19: ref)
{

  entry:
    out_$p20, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p18, out_$p19 := in_$p20, in_$p21, in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p18, in_$p19;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4388;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$p19 := out_$p24, out_$p18;
    goto $bb6_dummy;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i16);
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_4398;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4397;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} kfree(out_$p21);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_4392;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} list_del(out_$p20);
    goto corral_source_split_4391;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4390;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p18, out_$p19 := free_dynids_loop_$bb4(in_$i16, out_$p20, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p18, out_$p19);
    return;

  exit:
    return;
}



procedure free_dynids_loop_$bb4(in_$i16: i64, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p18: ref, in_$p19: ref) returns (out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p18: ref, out_$p19: ref);



implementation usb_serial_generic_process_read_urb_loop_$bb14(in_$p3: ref, in_$p22: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i8, in_$i36: i32, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i25: i32, in_$p26: ref, in_vslice_dummy_var_95: i32) returns (out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i8, out_$i36: i32, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i25: i32, out_$p26: ref, out_vslice_dummy_var_95: i32)
{

  entry:
    out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i36, out_$p37, out_$i38, out_$i39, out_$i25, out_$p26, out_vslice_dummy_var_95 := in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i36, in_$p37, in_$i38, in_$i39, in_$i25, in_$p26, in_vslice_dummy_var_95;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5233;

  $bb19:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i25, out_$p26 := out_$i36, out_$p37;
    goto $bb19_dummy;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$i39 := $ult.i32(out_$i36, out_$i38);
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, in_$p22);
    goto corral_source_split_5249;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p26, $mul.ref(1, 1));
    goto corral_source_split_5248;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i25, 1);
    call {:si_unique_call 990} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_5247;

  $bb17:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} out_vslice_dummy_var_95 := tty_insert_flip_char(out_$p31, out_$i34, 0);
    goto corral_source_split_5245;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i32.i8(out_$i33);
    goto corral_source_split_5244;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i8.i32(out_$i32);
    goto corral_source_split_5243;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i8($M.0, out_$p26);
    goto corral_source_split_5242;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2632)), $mul.ref(8, 1));
    goto corral_source_split_5241;

  $bb16:
    assume out_$i30 == 1;
    goto corral_source_split_5240;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_5238;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} out_$i29 := usb_serial_handle_sysrq_char(in_$p3, out_$i28);
    call {:si_unique_call 988} {:cexpr "tmp"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_5237;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i8.i32(out_$i27);
    goto corral_source_split_5236;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.0, out_$p26);
    goto corral_source_split_5235;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i36, out_$p37, out_$i38, out_$i39, out_$i25, out_$p26, out_vslice_dummy_var_95 := usb_serial_generic_process_read_urb_loop_$bb14(in_$p3, in_$p22, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i36, out_$p37, out_$i38, out_$i39, out_$i25, out_$p26, out_vslice_dummy_var_95);
    return;

  exit:
    return;
}



procedure usb_serial_generic_process_read_urb_loop_$bb14(in_$p3: ref, in_$p22: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i8, in_$i36: i32, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i25: i32, in_$p26: ref, in_vslice_dummy_var_95: i32) returns (out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i8, out_$i36: i32, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i25: i32, out_$p26: ref, out_vslice_dummy_var_95: i32);
  modifies $M.49, $M.50, $M.0, $CurrAddr;



implementation usb_serial_deregister_drivers_loop_$bb4(in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p7 := in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5387;

  $bb6:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p9;
    goto $bb6_dummy;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_5394;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_5393;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.41, out_$p9);
    goto corral_source_split_5392;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p7, $mul.ref(1, 8));
    goto corral_source_split_5391;

  SeqInstr_321:
    goto corral_source_split_5390;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} usb_serial_deregister(out_$p8);
    goto SeqInstr_320;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.41, out_$p7);
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p7 := usb_serial_deregister_drivers_loop_$bb4(out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p7);
    return;

  exit:
    return;
}



procedure usb_serial_deregister_drivers_loop_$bb4(in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p7: ref);
  modifies $M.25, assertsPassed;



implementation main_loop_$bb5(in_$p0: ref, in_$i6: i32, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i3: i32, in_$i4: i32, in_$i5: i32, in_$i75: i32, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i3: i32, out_$i4: i32, out_$i5: i32, out_$i75: i32, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i37, out_$i38, out_$i39, out_$i3, out_$i4, out_$i5, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108 := in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i67, in_$i68, in_$i69, in_$i71, in_$i72, in_$i73, in_$i74, in_$i37, in_$i38, in_$i39, in_$i3, in_$i4, in_$i5, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5414;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    out_$i3, out_$i4, out_$i5 := out_$i37, out_$i38, out_$i39;
    goto corral_source_split_5524_dummy;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5524;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i74;
    goto $bb68;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i72;
    goto $bb68;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i68;
    goto $bb68;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i62;
    goto $bb68;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i48, out_$i5;
    goto $bb68;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i46, out_$i5;
    goto $bb68;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i3, out_$i4, out_$i5;
    goto $bb68;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39 := out_$i36, out_$i4, out_$i5;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_5522;

  $bb62:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := out_$i3;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i36 := 0;
    goto $bb67;

  $bb64:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} ldv_check_return_value(out_$i34);
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} out_$i34 := serial_proc_open($u0, $u1);
    call {:si_unique_call 1098} {:cexpr "res_serial_proc_open_21"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_5513;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} ldv_handler_precall();
    goto corral_source_split_5512;

  $bb61:
    assume out_$i33 == 1;
    goto corral_source_split_5511;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i3, 0);
    goto corral_source_split_5509;

  $bb59:
    assume out_$i32 == 1;
    goto corral_source_split_5508;

  $bb55:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb49:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb37:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb8:
    assume out_$i7 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i6, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i6, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1057} out_$i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1058} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i6);
    call {:si_unique_call 1059} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i6);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb101:
    assume {:verifier.code 0} true;
    assume out_$i79 == 1;
    goto $bb95;

  $bb99:
    assume {:verifier.code 0} true;
    assume out_$i78 == 1;
    goto $bb95;

  $bb97:
    assume {:verifier.code 0} true;
    assume out_$i77 == 1;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    assume out_$i76 == 1;
    goto $bb95;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb96;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_5416;

  corral_source_split_5414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1054} out_$i75 := __VERIFIER_nondet_int();
    call {:si_unique_call 1055} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i75);
    call {:si_unique_call 1056} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_5415;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i3, 0);
    goto corral_source_split_5579;

  $bb96:
    assume !(out_$i76 == 1);
    goto corral_source_split_5578;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i4, 0);
    goto corral_source_split_5582;

  $bb98:
    assume !(out_$i77 == 1);
    goto corral_source_split_5581;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i5, 0);
    goto corral_source_split_5585;

  $bb100:
    assume !(out_$i78 == 1);
    goto corral_source_split_5584;

  SeqInstr_363:
    goto corral_source_split_5502;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} out_vslice_dummy_var_106 := serial_port_carrier_raised($u2);
    goto SeqInstr_362;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} ldv_handler_precall();
    goto corral_source_split_5501;

  $bb57:
    assume out_$i31 == 1;
    goto corral_source_split_5500;

  $bb56:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i6, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  SeqInstr_366:
    goto corral_source_split_5506;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} serial_port_dtr_rts($u2, $u3);
    goto SeqInstr_365;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} ldv_handler_precall();
    goto corral_source_split_5505;

  $bb58:
    assume !(out_$i31 == 1);
    goto corral_source_split_5504;

  SeqInstr_357:
    goto corral_source_split_5491;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} out_vslice_dummy_var_105 := serial_port_activate($u2, $u4);
    goto SeqInstr_356;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} ldv_handler_precall();
    goto corral_source_split_5490;

  $bb51:
    assume out_$i28 == 1;
    goto corral_source_split_5489;

  $bb50:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i6, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  SeqInstr_360:
    goto corral_source_split_5495;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} serial_port_shutdown($u2);
    goto SeqInstr_359;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} ldv_handler_precall();
    goto corral_source_split_5494;

  $bb53:
    assume out_$i29 == 1;
    goto corral_source_split_5493;

  $bb52:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i6, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_5536;

  $bb70:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := out_$i4;
    goto $bb74;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i45;
    goto $bb74;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1106} {:cexpr "ldv_s_serial_ops_tty_operations"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_5534;

  $bb72:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_5530;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} ldv_check_return_value(out_$i43);
    goto corral_source_split_5529;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} out_$i43 := serial_open($u4, $u1);
    call {:si_unique_call 1104} {:cexpr "res_serial_open_7"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_5528;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} ldv_handler_precall();
    goto corral_source_split_5527;

  $bb69:
    assume out_$i42 == 1;
    goto corral_source_split_5526;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i4, 0);
    goto corral_source_split_5498;

  $bb54:
    assume !(out_$i29 == 1);
    goto corral_source_split_5497;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_5542;

  $bb76:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := out_$i4;
    goto $bb77;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    out_$i48 := 0;
    goto $bb77;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} serial_close($u4, $u1);
    goto corral_source_split_5540;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} ldv_handler_precall();
    goto corral_source_split_5539;

  $bb75:
    assume out_$i47 == 1;
    goto corral_source_split_5538;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i4, 1);
    goto corral_source_split_5479;

  $bb45:
    assume out_$i25 == 1;
    goto corral_source_split_5478;

  $bb39:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i6, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb38:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i6, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} out_vslice_dummy_var_104 := serial_write($u4, $u5, $u3);
    goto corral_source_split_5483;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} ldv_handler_precall();
    goto corral_source_split_5482;

  $bb47:
    assume out_$i26 == 1;
    goto corral_source_split_5481;

  $bb46:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i6, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} serial_hangup($u4);
    goto corral_source_split_5487;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} ldv_handler_precall();
    goto corral_source_split_5486;

  $bb48:
    assume !(out_$i26 == 1);
    goto corral_source_split_5485;

  SeqInstr_354:
    goto corral_source_split_5468;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} out_vslice_dummy_var_102 := serial_write_room($u4);
    goto SeqInstr_353;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} ldv_handler_precall();
    goto corral_source_split_5467;

  $bb41:
    assume out_$i23 == 1;
    goto corral_source_split_5466;

  $bb40:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i6, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} out_vslice_dummy_var_103 := serial_ioctl($u4, $u3, $u6);
    goto corral_source_split_5472;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} ldv_handler_precall();
    goto corral_source_split_5471;

  $bb43:
    assume out_$i24 == 1;
    goto corral_source_split_5470;

  $bb42:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i6, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} serial_set_termios($u4, $u7);
    goto corral_source_split_5476;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} ldv_handler_precall();
    goto corral_source_split_5475;

  $bb44:
    assume !(out_$i24 == 1);
    goto corral_source_split_5474;

  SeqInstr_345:
    goto corral_source_split_5456;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} serial_throttle($u4);
    goto SeqInstr_344;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} ldv_handler_precall();
    goto corral_source_split_5455;

  $bb33:
    assume out_$i19 == 1;
    goto corral_source_split_5454;

  $bb27:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i6, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb10:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i6, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb9:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i6, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  SeqInstr_348:
    goto corral_source_split_5460;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} serial_unthrottle($u4);
    goto SeqInstr_347;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} ldv_handler_precall();
    goto corral_source_split_5459;

  $bb35:
    assume out_$i20 == 1;
    goto corral_source_split_5458;

  $bb34:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i6, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  SeqInstr_351:
    goto corral_source_split_5464;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} out_vslice_dummy_var_101 := serial_break($u4, $u3);
    goto SeqInstr_350;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} ldv_handler_precall();
    goto corral_source_split_5463;

  $bb36:
    assume !(out_$i20 == 1);
    goto corral_source_split_5462;

  SeqInstr_339:
    goto corral_source_split_5444;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} out_vslice_dummy_var_98 := serial_chars_in_buffer($u4);
    goto SeqInstr_338;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} ldv_handler_precall();
    goto corral_source_split_5443;

  $bb29:
    assume out_$i17 == 1;
    goto corral_source_split_5442;

  $bb28:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i6, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  SeqInstr_342:
    goto corral_source_split_5448;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} out_vslice_dummy_var_99 := serial_tiocmget($u4);
    goto SeqInstr_341;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_handler_precall();
    goto corral_source_split_5447;

  $bb31:
    assume out_$i18 == 1;
    goto corral_source_split_5446;

  $bb30:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i6, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} out_vslice_dummy_var_100 := serial_tiocmset($u4, $u3, $u3);
    goto corral_source_split_5452;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} ldv_handler_precall();
    goto corral_source_split_5451;

  $bb32:
    assume !(out_$i18 == 1);
    goto corral_source_split_5450;

  SeqInstr_330:
    goto corral_source_split_5432;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} out_vslice_dummy_var_96 := serial_get_icount($u4, $u8);
    goto SeqInstr_329;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} ldv_handler_precall();
    goto corral_source_split_5431;

  $bb23:
    assume out_$i14 == 1;
    goto corral_source_split_5430;

  $bb12:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i6, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb11:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i6, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  SeqInstr_333:
    goto corral_source_split_5436;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} serial_cleanup($u4);
    goto SeqInstr_332;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_handler_precall();
    goto corral_source_split_5435;

  $bb25:
    assume out_$i15 == 1;
    goto corral_source_split_5434;

  $bb24:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i6, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  SeqInstr_336:
    goto corral_source_split_5440;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} out_vslice_dummy_var_97 := serial_install($u9, $u4);
    goto SeqInstr_335;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} ldv_handler_precall();
    goto corral_source_split_5439;

  $bb26:
    assume !(out_$i15 == 1);
    goto corral_source_split_5438;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_5554;

  $bb79:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := out_$i5;
    goto $bb83;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i61;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1113} {:cexpr "ldv_s_usb_serial_driver_usb_driver"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_5552;

  $bb81:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_5548;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} ldv_check_return_value_probe(out_$i59);
    goto corral_source_split_5547;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} ldv_check_return_value(out_$i59);
    goto corral_source_split_5546;

  SeqInstr_372:
    call {:si_unique_call 1110} {:cexpr "res_usb_serial_probe_36"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_5545;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} out_$i59 := usb_serial_probe($u10, $u11);
    goto SeqInstr_371;

  $bb78:
    assume out_$i58 == 1;
    goto corral_source_split_5544;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i5, 0);
    goto corral_source_split_5425;

  $bb21:
    assume out_$i13 == 1;
    goto corral_source_split_5424;

  $bb14:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i6, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb13:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i6, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_5563;

  $bb85:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := out_$i5;
    goto $bb86;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i67;
    goto $bb86;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1116} {:cexpr "ldv_s_usb_serial_driver_usb_driver"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_5561;

  SeqInstr_375:
    goto corral_source_split_5560;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} out_vslice_dummy_var_107 := usb_serial_suspend($u10, out_$i65);
    goto SeqInstr_374;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.52, out_$p64);
    goto corral_source_split_5559;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5558;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv_handler_precall();
    goto corral_source_split_5557;

  $bb84:
    assume out_$i63 == 1;
    goto corral_source_split_5556;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i5, 1);
    goto corral_source_split_5428;

  $bb22:
    assume !(out_$i13 == 1);
    goto corral_source_split_5427;

  $bb89:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  $bb88:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := out_$i5;
    goto $bb89;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i71;
    goto $bb89;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1119} {:cexpr "ldv_s_usb_serial_driver_usb_driver"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_5568;

  SeqInstr_378:
    goto corral_source_split_5567;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} out_vslice_dummy_var_108 := usb_serial_resume($u10);
    goto SeqInstr_377;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_handler_precall();
    goto corral_source_split_5566;

  $bb87:
    assume out_$i69 == 1;
    goto corral_source_split_5565;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i5, 2);
    goto corral_source_split_5419;

  $bb16:
    assume out_$i11 == 1;
    goto corral_source_split_5418;

  $bb15:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i6, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_5576;

  $bb91:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := out_$i5;
    goto $bb92;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    out_$i74 := 0;
    goto $bb92;

  SeqInstr_381:
    goto corral_source_split_5574;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} usb_serial_disconnect($u10);
    goto SeqInstr_380;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_handler_precall();
    goto corral_source_split_5573;

  $bb90:
    assume out_$i73 == 1;
    goto corral_source_split_5572;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i5, 3);
    goto corral_source_split_5422;

  $bb18:
    assume out_$i12 == 1;
    goto corral_source_split_5421;

  $bb17:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i6, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i12 == 1);
    goto $bb20;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb20;

  corral_source_split_5524_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i37, out_$i38, out_$i39, out_$i3, out_$i4, out_$i5, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108 := main_loop_$bb5(in_$p0, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i37, out_$i38, out_$i39, out_$i3, out_$i4, out_$i5, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$p0: ref, in_$i6: i32, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i3: i32, in_$i4: i32, in_$i5: i32, in_$i75: i32, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i3: i32, out_$i4: i32, out_$i5: i32, out_$i75: i32, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed, $M.27, $M.28, $M.29, $M.30, $M.25, $M.37, $M.24, $M.49, $M.50, $M.39;


