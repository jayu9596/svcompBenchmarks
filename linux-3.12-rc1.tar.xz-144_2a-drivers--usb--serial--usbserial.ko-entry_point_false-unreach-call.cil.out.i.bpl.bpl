var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: ref;

var $M.8: i32;

var $M.9: ref;

var $M.10: i32;

var $M.11: ref;

var $M.12: ref;

var $M.13: i32;

var $M.14: i32;

var $M.15: ref;

var $M.16: [ref]i8;

var $M.17: [ref]ref;

var $M.18: [ref]ref;

var $M.19: [ref]ref;

var $M.20: [ref]ref;

var $M.23: [ref]i32;

var $M.24: ref;

var $M.25: ref;

var $M.26: i32;

var $M.27: [ref]i8;

var $M.28: ref;

var $M.29: ref;

var $M.30: ref;

var $M.31: ref;

var $M.32: ref;

var $M.33: [ref]i8;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: ref;

var $M.53: ref;

var $M.54: i32;

var $M.55: ref;

var $M.56: i32;

var $M.57: i32;

var $M.58: i16;

var $M.59: [ref]i8;

var $M.60: i16;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]ref;

var $M.126: [ref]i8;

var $M.127: [ref]i8;

var $M.128: [ref]i8;

var $M.129: [ref]i8;

var $M.130: [ref]i8;

var $M.131: [ref]i8;

var $M.132: [ref]i8;

var $M.133: [ref]i8;

var $M.134: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 546619);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const usb_serial_driver_group1: ref;

axiom usb_serial_driver_group1 == $sub.ref(0, 2060);

const serial_port_ops_group1: ref;

axiom serial_port_ops_group1 == $sub.ref(0, 3092);

const serial_proc_fops_group1: ref;

axiom serial_proc_fops_group1 == $sub.ref(0, 4124);

const serial_proc_fops_group2: ref;

axiom serial_proc_fops_group2 == $sub.ref(0, 5156);

const serial_ops_group0: ref;

axiom serial_ops_group0 == $sub.ref(0, 6188);

const serial_ops_group1: ref;

axiom serial_ops_group1 == $sub.ref(0, 7220);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 8248);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 9276);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 10304);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 11332);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 12360);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 13388);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 14416);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 15444);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 16472);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 17500);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 18528);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 19556);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 20584);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 21612);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 22640);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 23668);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 24696);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 25724);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 26752);

const usb_serial_generic_device: ref;

axiom usb_serial_generic_device == $sub.ref(0, 28328);

const {:count 2} generic_device_ids: ref;

axiom generic_device_ids == $sub.ref(0, 29416);

const {:count 8} .str.1: ref;

axiom .str.1 == $sub.ref(0, 30448);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const dev_attr_port_number: ref;

axiom dev_attr_port_number == $sub.ref(0, 31520);

const driver_attr_new_id: ref;

axiom driver_attr_new_id == $sub.ref(0, 32592);

const {:count 2} usb_serial_drv_attrs: ref;

axiom usb_serial_drv_attrs == $sub.ref(0, 33632);

const usb_serial_drv_group: ref;

axiom usb_serial_drv_group == $sub.ref(0, 34688);

const {:count 2} usb_serial_drv_groups: ref;

axiom usb_serial_drv_groups == $sub.ref(0, 35728);

const {:count 2} serial_drivers: ref;

axiom serial_drivers == $sub.ref(0, 36768);

const product: ref;

axiom product == $sub.ref(0, 37794);

const vendor: ref;

axiom vendor == $sub.ref(0, 38820);

const serial_proc_fops: ref;

axiom serial_proc_fops == $sub.ref(0, 40060);

const serial_ops: ref;

axiom serial_ops == $sub.ref(0, 41356);

const usb_serial_driver: ref;

axiom usb_serial_driver == $sub.ref(0, 42684);

const serial_port_ops: ref;

axiom serial_port_ops == $sub.ref(0, 43756);

const usb_serial_driver_list: ref;

axiom usb_serial_driver_list == $sub.ref(0, 44796);

const serial_minors: ref;

axiom serial_minors == $sub.ref(0, 45932);

const table_lock: ref;

axiom table_lock == $sub.ref(0, 47124);

const completeFnBulk: ref;

axiom completeFnBulk == $sub.ref(0, 48156);

const completeFnInt: ref;

axiom completeFnInt == $sub.ref(0, 49188);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 50216);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 51244);

const usb_serial_tty_driver: ref;

axiom usb_serial_tty_driver == $sub.ref(0, 52276);

const usb_serial_bus_type_group0: ref;

axiom usb_serial_bus_type_group0 == $sub.ref(0, 53308);

const usb_serial_generic_device_group0: ref;

axiom usb_serial_generic_device_group0 == $sub.ref(0, 54340);

const driver_attr_new_id_group0: ref;

axiom driver_attr_new_id_group0 == $sub.ref(0, 55372);

const completeFnBulkCounter: ref;

axiom completeFnBulkCounter == $sub.ref(0, 56400);

const completeFnIntCounter: ref;

axiom completeFnIntCounter == $sub.ref(0, 57428);

const dev_counter: ref;

axiom dev_counter == $sub.ref(0, 58456);

const usb_dev: ref;

axiom usb_dev == $sub.ref(0, 59488);

const usb_urb: ref;

axiom usb_urb == $sub.ref(0, 60520);

const usb_intfdata: ref;

axiom usb_intfdata == $sub.ref(0, 61552);

const SERIAL_STATE: ref;

axiom SERIAL_STATE == $sub.ref(0, 62580);

const INTERF_STATE: ref;

axiom INTERF_STATE == $sub.ref(0, 63608);

const usb_serial_bus_type: ref;

axiom usb_serial_bus_type == $sub.ref(0, 64808);

const .str: ref;

axiom .str == $sub.ref(0, 65842);

const {:count 35} .str.116: ref;

axiom .str.116 == $sub.ref(0, 66901);

const {:count 221} .str.4: ref;

axiom .str.4 == $sub.ref(0, 68146);

const {:count 13} .str.117: ref;

axiom .str.117 == $sub.ref(0, 69183);

const {:count 32} .str.118: ref;

axiom .str.118 == $sub.ref(0, 70239);

const {:count 11} .str.15: ref;

axiom .str.15 == $sub.ref(0, 71274);

const {:count 45} .str.125: ref;

axiom .str.125 == $sub.ref(0, 72343);

const {:count 39} .str.123: ref;

axiom .str.123 == $sub.ref(0, 73406);

const {:count 21} .str.17: ref;

axiom .str.17 == $sub.ref(0, 74451);

const {:count 11} .str.18: ref;

axiom .str.18 == $sub.ref(0, 75486);

const {:count 19} .str.19: ref;

axiom .str.19 == $sub.ref(0, 76529);

const {:count 21} .str.53: ref;

axiom .str.53 == $sub.ref(0, 77574);

const {:count 17} .str.21: ref;

axiom .str.21 == $sub.ref(0, 78615);

const {:count 224} .str.22: ref;

axiom .str.22 == $sub.ref(0, 79863);

const {:count 14} .str.23: ref;

axiom .str.23 == $sub.ref(0, 80901);

const {:count 28} .str.24: ref;

axiom .str.24 == $sub.ref(0, 81953);

const {:count 28} .str.25: ref;

axiom .str.25 == $sub.ref(0, 83005);

const {:count 30} .str.26: ref;

axiom .str.26 == $sub.ref(0, 84059);

const {:count 31} .str.27: ref;

axiom .str.27 == $sub.ref(0, 85114);

const {:count 35} .str.28: ref;

axiom .str.28 == $sub.ref(0, 86173);

const {:count 36} .str.29: ref;

axiom .str.29 == $sub.ref(0, 87233);

const {:count 62} .str.30: ref;

axiom .str.30 == $sub.ref(0, 88319);

const {:count 57} .str.31: ref;

axiom .str.31 == $sub.ref(0, 89400);

const {:count 47} .str.32: ref;

axiom .str.32 == $sub.ref(0, 90471);

const {:count 77} .str.33: ref;

axiom .str.33 == $sub.ref(0, 91572);

const {:count 71} .str.34: ref;

axiom .str.34 == $sub.ref(0, 92667);

const {:count 23} .str.35: ref;

axiom .str.35 == $sub.ref(0, 93714);

const {:count 46} .str.36: ref;

axiom .str.36 == $sub.ref(0, 94784);

const {:count 22} .str.37: ref;

axiom .str.37 == $sub.ref(0, 95830);

const {:count 14} .str.38: ref;

axiom .str.38 == $sub.ref(0, 96868);

const {:count 91} .str.39: ref;

axiom .str.39 == $sub.ref(0, 97983);

const {:count 93} .str.40: ref;

axiom .str.40 == $sub.ref(0, 99100);

const {:count 35} .str.41: ref;

axiom .str.41 == $sub.ref(0, 100159);

const {:count 9} .str.42: ref;

axiom .str.42 == $sub.ref(0, 101192);

const {:count 15} .str.43: ref;

axiom .str.43 == $sub.ref(0, 102231);

const {:count 43} .str.44: ref;

axiom .str.44 == $sub.ref(0, 103298);

const {:count 16} .str.51: ref;

axiom .str.51 == $sub.ref(0, 104338);

const {:count 7} .str.52: ref;

axiom .str.52 == $sub.ref(0, 105369);

const {:count 24} .str.49: ref;

axiom .str.49 == $sub.ref(0, 106417);

const {:count 4} .str.50: ref;

axiom .str.50 == $sub.ref(0, 107445);

const {:count 13} .str.46: ref;

axiom .str.46 == $sub.ref(0, 108482);

const {:count 27} .str.47: ref;

axiom .str.47 == $sub.ref(0, 109533);

const {:count 28} .str.48: ref;

axiom .str.48 == $sub.ref(0, 110585);

const {:count 20} .str.45: ref;

axiom .str.45 == $sub.ref(0, 111629);

const {:count 18} .str.80: ref;

axiom .str.80 == $sub.ref(0, 112671);

const {:count 16} .str.87: ref;

axiom .str.87 == $sub.ref(0, 113711);

const {:count 16} .str.95: ref;

axiom .str.95 == $sub.ref(0, 114751);

const {:count 23} .str.96: ref;

axiom .str.96 == $sub.ref(0, 115798);

const {:count 13} .str.93: ref;

axiom .str.93 == $sub.ref(0, 116835);

const {:count 14} .str.81: ref;

axiom .str.81 == $sub.ref(0, 117873);

const {:count 18} .str.82: ref;

axiom .str.82 == $sub.ref(0, 118915);

const {:count 16} .str.79: ref;

axiom .str.79 == $sub.ref(0, 119955);

const {:count 19} .str.84: ref;

axiom .str.84 == $sub.ref(0, 120998);

const {:count 13} .str.85: ref;

axiom .str.85 == $sub.ref(0, 122035);

const {:count 17} .str.86: ref;

axiom .str.86 == $sub.ref(0, 123076);

const {:count 23} .str.94: ref;

axiom .str.94 == $sub.ref(0, 124123);

const {:count 18} .str.92: ref;

axiom .str.92 == $sub.ref(0, 125165);

const {:count 13} .str.88: ref;

axiom .str.88 == $sub.ref(0, 126202);

const {:count 17} .str.89: ref;

axiom .str.89 == $sub.ref(0, 127243);

const {:count 15} .str.90: ref;

axiom .str.90 == $sub.ref(0, 128282);

const {:count 13} .str.91: ref;

axiom .str.91 == $sub.ref(0, 129319);

const {:count 12} .str.83: ref;

axiom .str.83 == $sub.ref(0, 130355);

const {:count 21} .str.20: ref;

axiom .str.20 == $sub.ref(0, 131400);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 27} .str.97: ref;

axiom .str.97 == $sub.ref(0, 132451);

const {:count 4} .str.98: ref;

axiom .str.98 == $sub.ref(0, 133479);

const {:count 7} .str.100: ref;

axiom .str.100 == $sub.ref(0, 134510);

const {:count 11} .str.99: ref;

axiom .str.99 == $sub.ref(0, 135545);

const {:count 11} .str.101: ref;

axiom .str.101 == $sub.ref(0, 136580);

const {:count 26} .str.102: ref;

axiom .str.102 == $sub.ref(0, 137630);

const {:count 14} .str.103: ref;

axiom .str.103 == $sub.ref(0, 138668);

const {:count 9} .str.104: ref;

axiom .str.104 == $sub.ref(0, 139701);

const {:count 9} .str.105: ref;

axiom .str.105 == $sub.ref(0, 140734);

const {:count 10} .str.106: ref;

axiom .str.106 == $sub.ref(0, 141768);

const {:count 7} .str.122: ref;

axiom .str.122 == $sub.ref(0, 142799);

const {:count 12} .str.124: ref;

axiom .str.124 == $sub.ref(0, 143835);

const {:count 4} .str.126: ref;

axiom .str.126 == $sub.ref(0, 144863);

const {:count 31} .str.114: ref;

axiom .str.114 == $sub.ref(0, 145918);

const {:count 31} .str.115: ref;

axiom .str.115 == $sub.ref(0, 146973);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 22} .str.119: ref;

axiom .str.119 == $sub.ref(0, 148019);

const {:count 27} .str.120: ref;

axiom .str.120 == $sub.ref(0, 149070);

const {:count 31} .str.121: ref;

axiom .str.121 == $sub.ref(0, 150125);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 48} .str.78: ref;

axiom .str.78 == $sub.ref(0, 151197);

const {:count 36} .str.54: ref;

axiom .str.54 == $sub.ref(0, 152257);

const {:count 51} .str.55: ref;

axiom .str.55 == $sub.ref(0, 153332);

const {:count 50} .str.56: ref;

axiom .str.56 == $sub.ref(0, 154406);

const {:count 31} .str.16: ref;

axiom .str.16 == $sub.ref(0, 155461);

const {:count 27} .str.57: ref;

axiom .str.57 == $sub.ref(0, 156512);

const {:count 24} .str.58: ref;

axiom .str.58 == $sub.ref(0, 157560);

const {:count 35} .str.59: ref;

axiom .str.59 == $sub.ref(0, 158619);

const {:count 25} .str.60: ref;

axiom .str.60 == $sub.ref(0, 159668);

const {:count 36} .str.61: ref;

axiom .str.61 == $sub.ref(0, 160728);

const {:count 25} .str.62: ref;

axiom .str.62 == $sub.ref(0, 161777);

const {:count 36} .str.63: ref;

axiom .str.63 == $sub.ref(0, 162837);

const {:count 30} .str.64: ref;

axiom .str.64 == $sub.ref(0, 163891);

const {:count 41} .str.65: ref;

axiom .str.65 == $sub.ref(0, 164956);

const {:count 35} .str.66: ref;

axiom .str.66 == $sub.ref(0, 166015);

const {:count 46} .str.67: ref;

axiom .str.67 == $sub.ref(0, 167085);

const {:count 35} .str.68: ref;

axiom .str.68 == $sub.ref(0, 168144);

const {:count 46} .str.69: ref;

axiom .str.69 == $sub.ref(0, 169214);

const {:count 38} .str.70: ref;

axiom .str.70 == $sub.ref(0, 170276);

const {:count 49} .str.71: ref;

axiom .str.71 == $sub.ref(0, 171349);

const {:count 39} .str.72: ref;

axiom .str.72 == $sub.ref(0, 172412);

const {:count 50} .str.73: ref;

axiom .str.73 == $sub.ref(0, 173486);

const {:count 36} .str.74: ref;

axiom .str.74 == $sub.ref(0, 174546);

const {:count 47} .str.75: ref;

axiom .str.75 == $sub.ref(0, 175617);

const {:count 40} .str.76: ref;

axiom .str.76 == $sub.ref(0, 176681);

const {:count 51} .str.77: ref;

axiom .str.77 == $sub.ref(0, 177756);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 39} .str.12: ref;

axiom .str.12 == $sub.ref(0, 178819);

const {:count 30} .str.11: ref;

axiom .str.11 == $sub.ref(0, 179873);

const {:count 38} .str.9: ref;

axiom .str.9 == $sub.ref(0, 180935);

const {:count 21} .str.10: ref;

axiom .str.10 == $sub.ref(0, 181980);

const {:count 35} .str.7: ref;

axiom .str.7 == $sub.ref(0, 183039);

const {:count 38} .str.8: ref;

axiom .str.8 == $sub.ref(0, 184101);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 35} .str.6: ref;

axiom .str.6 == $sub.ref(0, 185160);

const {:count 17} .str.5: ref;

axiom .str.5 == $sub.ref(0, 186201);

const {:count 30} .str.3: ref;

axiom .str.3 == $sub.ref(0, 187255);

const {:count 48} .str.107: ref;

axiom .str.107 == $sub.ref(0, 188327);

const {:count 16} .str.108: ref;

axiom .str.108 == $sub.ref(0, 189367);

const {:count 7} .str.109: ref;

axiom .str.109 == $sub.ref(0, 190398);

const tty_std_termios: ref;

axiom tty_std_termios == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 45} .str.110: ref;

axiom .str.110 == $sub.ref(0, 191467);

const {:count 38} .str.111: ref;

axiom .str.111 == $sub.ref(0, 192529);

const {:count 52} .str.112: ref;

axiom .str.112 == $sub.ref(0, 193605);

const {:count 42} .str.113: ref;

axiom .str.113 == $sub.ref(0, 194671);

const {:count 18} .str.2: ref;

axiom .str.2 == $sub.ref(0, 195713);

const {:count 29} .str.13: ref;

axiom .str.13 == $sub.ref(0, 196766);

const {:count 16} .str.14: ref;

axiom .str.14 == $sub.ref(0, 197806);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 198838);

const {:count 3} .str.1.268: ref;

axiom .str.1.268 == $sub.ref(0, 199865);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 200903);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 201931);

const usb_serial_generic_resume: ref;

axiom usb_serial_generic_resume == $sub.ref(0, 202963);

procedure usb_serial_generic_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.10, $CurrAddr, $M.14, $M.24, $M.26, $M.25, $M.7, assertsPassed;



implementation usb_serial_generic_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i16: i32;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i6: i32;
  var $i7: i32;
  var $i37: i32;
  var $i5: i32;
  var $i38: i1;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i5, 0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i39 := (if $i38 == 1 then $sub.i32(0, 5) else 0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $p11, $p13, $i14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i16, $i33, $i34, $i35, $i36, $i6, $i7, $i37 := usb_serial_generic_resume_loop_$bb4($p0, $p1, $i8, $p10, $p11, $p13, $i14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i16, $i33, $i34, $i35, $i36, $i6, $i7, $i37);
    goto $bb4_last;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i8, 8));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 2992)), $mul.ref(8, 1)), $mul.ref(680, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $i14 := constant_test_bit(31, $p13);
    call {:si_unique_call 1} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 2992)), $mul.ref(1208, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i6;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 2992)), $mul.ref(1280, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i24;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i16 := $i32;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i7, 1);
    call {:si_unique_call 2} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p1);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, $i33);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i37 := $i16;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i5 := $i37;
    goto $bb3;

  $bb22:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i16, $i33;
    goto $bb22_dummy;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i28 := usb_serial_generic_write_start($p11);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 7} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i24;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb21;

  $bb18:
    assume $i29 == 1;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i24, 1);
    call {:si_unique_call 8} {:cexpr "c"} boogie_si_record_i32($i30);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb20;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i20 := usb_serial_generic_submit_read_urbs($p11, 16);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 4} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i6;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb15;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i6, 1);
    call {:si_unique_call 5} {:cexpr "c"} boogie_si_record_i32($i22);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb14;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i16 := $i6;
    goto $bb8;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9;
}



const usb_serial_generic_throttle: ref;

axiom usb_serial_generic_throttle == $sub.ref(0, 203995);

procedure usb_serial_generic_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_serial_generic_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p5 := spinlock_check($p4);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 11} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2992)), $mul.ref(1593, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} spin_unlock_irqrestore($p8, $i6);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_unthrottle: ref;

axiom usb_serial_generic_unthrottle == $sub.ref(0, 205027);

procedure usb_serial_generic_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, $M.10, $M.14, $M.24, $M.26, $M.25, $M.7, assertsPassed;



implementation usb_serial_generic_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var vslice_dummy_var_10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} spin_lock_irq($p4);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 2992)), $mul.ref(1592, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    call {:si_unique_call 14} {:cexpr "was_throttled"} boogie_si_record_i32($i7);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2992)), $mul.ref(1593, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 2992)), $mul.ref(1592, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} spin_unlock_irq($p10);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i7, 0);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_10 := usb_serial_generic_submit_read_urbs($p3, 208);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 206059);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 207091);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} _raw_spin_lock_irq($p2);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 208123);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} _raw_spin_unlock_irq($p2);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_submit_read_urbs: ref;

axiom usb_serial_generic_submit_read_urbs == $sub.ref(0, 209155);

procedure usb_serial_generic_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, $M.10, $M.0, $M.14, $M.24, $M.26, $M.25, $M.7, assertsPassed;



implementation usb_serial_generic_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i7: i1;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i8: i32;
  var $i6: i32;
  var $i15: i32;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} {:cexpr "usb_serial_generic_submit_read_urbs:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i2 := usb_serial_generic_submit_read_urb($p0, 0, $i1);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 21} {:cexpr "res"} boogie_si_record_i32($i2);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i4, $i5 := 0, $i2;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i15 := usb_serial_generic_submit_read_urb($p0, 1, $i1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i4, $i5 := 1, $i15;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sge.i32($i4, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb10;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i8 := $i4;
    goto $bb14;

  $bb14:
    call $i9, $p11, $p12, $i13, $i14, $i8 := usb_serial_generic_submit_read_urbs_loop_$bb14($p0, $i9, $p11, $p12, $i13, $i14, $i8);
    goto $bb14_last;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref($i9, 8));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} usb_kill_urb($p12);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i8, 1);
    call {:si_unique_call 24} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i13, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i14 == 1);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb16_dummy;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;
}



const usb_serial_generic_submit_read_urb: ref;

axiom usb_serial_generic_submit_read_urb == $sub.ref(0, 210187);

procedure usb_serial_generic_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, $M.10, $M.0, $M.14, $M.24, $M.26, $M.25, $M.7, assertsPassed;



implementation usb_serial_generic_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $i36: i64;
  var $p37: ref;
  var $i8: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 26} {:cexpr "usb_serial_generic_submit_read_urb:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 27} {:cexpr "usb_serial_generic_submit_read_urb:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1264, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i6 := test_and_clear_bit($i4, $p5);
    call {:si_unique_call 29} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.116);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.4);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.117);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.5, $p14);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 353);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p14, $i17);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 0);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 31} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i1);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref($i27, 8));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i31 := ldv_usb_submit_urb_42($p30, $i2);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 34} {:cexpr "res"} boogie_si_record_i32($i31);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i31, $sub.i32(0, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i1);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1264, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} set_bit($i36, $p37);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i8 := $i31;
    goto $bb3;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_12 := dev_err.ref.ref.ref.i32($p34, .str.118, .str.116, $i31);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} vslice_dummy_var_11 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p25, .str.117, .str.116, $i1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 211219);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    return;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 212251);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 38} $i2 := devirtbounce(0, $p1, $i0, $p1);
    call {:si_unique_call 39} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 213283);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 41} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 214315);

procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 42} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 43} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 44} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 45} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 46} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 47} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 1} true;
    call {:si_unique_call 48} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 49} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 1} true;
    call {:si_unique_call 50} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 51} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_submit_urb_42: ref;

axiom ldv_usb_submit_urb_42 == $sub.ref(0, 215347);

procedure ldv_usb_submit_urb_42($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed;



implementation ldv_usb_submit_urb_42($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} {:cexpr "ldv_usb_submit_urb_42:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 54} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 216379);

procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 58} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 217411);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 60} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    return;
}



const ldv_submit_urb: ref;

axiom ldv_submit_urb == $sub.ref(0, 218443);

procedure ldv_submit_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed;



implementation ldv_submit_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i1 := ldv_undef_int();
    call {:si_unique_call 62} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} ldv_stop___2();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p4 := $M.7;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i5, $i6);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i8 := $M.8;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $M.10;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p14 := $M.11;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p15 := $M.7;
    call {:si_unique_call 66} devirtbounce.2($p14, $p15);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 67} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p10 := $M.9;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p11 := $M.7;
    call {:si_unique_call 64} devirtbounce.2($p10, $p11);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 65} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 219475);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 1} true;
    call {:si_unique_call 68} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 69} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 70} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop___2: ref;

axiom ldv_stop___2 == $sub.ref(0, 220507);

procedure ldv_stop___2();
  free requires assertsPassed;



implementation ldv_stop___2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop___2_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 221539);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 222571);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_device_match: ref;

axiom usb_serial_device_match == $sub.ref(0, 223603);

procedure usb_serial_device_match($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_device_match($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 40), 552));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(0, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p8);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const usb_serial_device_probe: ref;

axiom usb_serial_device_probe == $sub.ref(0, 224635);

procedure usb_serial_device_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.13, $M.15, $M.8, $M.10, $CurrAddr, assertsPassed, $M.24, $M.26, $M.25, $M.7;



implementation usb_serial_device_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i24: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i5: i32;
  var vslice_dummy_var_13: ref;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(0, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i10 := ldv_usb_autopm_get_interface_44($p9);
    call {:si_unique_call 72} {:cexpr "retval"} boogie_si_record_i32($i10);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(0, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 552)), $mul.ref(312, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i25 := device_create_file($p0, dev_attr_port_number);
    call {:si_unique_call 77} {:cexpr "retval"} boogie_si_record_i32($i25);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1136, 1));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    call {:si_unique_call 80} {:cexpr "minor"} boogie_si_record_i32($i36);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p37 := $M.12;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} vslice_dummy_var_13 := ldv_tty_register_device_45($p37, $i36, $p0);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(0, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p15, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} vslice_dummy_var_14 := _dev_info.ref.ref.ref.i32($p43, .str.123, $p45, $i36);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(0, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} ldv_usb_autopm_put_interface_46($p50);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i5 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref(0, 552)), $mul.ref(320, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i25;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i24 := $i34;
    goto $bb12;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p15, $mul.ref(0, 552)), $mul.ref(320, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    call {:si_unique_call 78} $i33 := devirtbounce.3($p32, $p2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 79} {:cexpr "retval"} boogie_si_record_i32($i33);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb19;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 552)), $mul.ref(312, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 73} $i22 := devirtbounce.3($p21, $p2);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 74} {:cexpr "retval"} boogie_si_record_i32($i22);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb12;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const usb_serial_device_remove: ref;

axiom usb_serial_device_remove == $sub.ref(0, 225667);

procedure usb_serial_device_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.8, $M.10, $M.15, $CurrAddr, assertsPassed, $M.24, $M.26, $M.25, $M.7;



implementation usb_serial_device_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i5: i32;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(0, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} vslice_dummy_var_15 := ldv_usb_autopm_get_interface_47($p9);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1136, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 84} {:cexpr "minor"} boogie_si_record_i32($i12);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p13 := $M.12;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} ldv_tty_unregister_device_48($p13, $i12);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1608, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} device_remove_file($p14, dev_attr_port_number);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(0, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 552)), $mul.ref(320, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} vslice_dummy_var_16 := _dev_info.ref.ref.ref.i32($p0, .str.125, $p28, $i12);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(0, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} ldv_usb_autopm_put_interface_49($p33);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i5 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p18, $mul.ref(0, 552)), $mul.ref(320, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 87} $i25 := devirtbounce.3($p24, $p2);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 88} {:cexpr "retval"} boogie_si_record_i32($i25);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb7;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const ldv_usb_autopm_get_interface_47: ref;

axiom ldv_usb_autopm_get_interface_47 == $sub.ref(0, 226699);

procedure ldv_usb_autopm_get_interface_47($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14;



implementation ldv_usb_autopm_get_interface_47($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 92} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_tty_unregister_device_48: ref;

axiom ldv_tty_unregister_device_48 == $sub.ref(0, 227731);

procedure ldv_tty_unregister_device_48($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.13;



implementation ldv_tty_unregister_device_48($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} {:cexpr "ldv_tty_unregister_device_48:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} tty_unregister_device($p0, $i1);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 95} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    return;
}



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 228763);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 229795);

procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 96} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 97} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 98} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 99} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 100} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 101} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_autopm_put_interface_49: ref;

axiom ldv_usb_autopm_put_interface_49 == $sub.ref(0, 230827);

procedure ldv_usb_autopm_put_interface_49($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_usb_autopm_put_interface_49($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} ldv_put_interface();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_put_interface: ref;

axiom ldv_put_interface == $sub.ref(0, 231859);

procedure ldv_put_interface();
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_put_interface()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i0 := $M.14;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.14;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.14 := $i3;
    call {:si_unique_call 104} {:cexpr "INTERF_STATE"} boogie_si_record_i32($i3);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 232891);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 105} __VERIFIER_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const tty_unregister_device: ref;

axiom tty_unregister_device == $sub.ref(0, 233923);

procedure tty_unregister_device($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation tty_unregister_device($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} {:cexpr "tty_unregister_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    return;
}



const ldv_get_interface: ref;

axiom ldv_get_interface == $sub.ref(0, 234955);

procedure ldv_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14;



implementation ldv_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i1 := ldv_undef_int();
    call {:si_unique_call 108} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} ldv_stop___2();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i4 := $M.14;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $M.14 := $i5;
    call {:si_unique_call 110} {:cexpr "INTERF_STATE"} boogie_si_record_i32($i5);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_autopm_get_interface_44: ref;

axiom ldv_usb_autopm_get_interface_44 == $sub.ref(0, 235987);

procedure ldv_usb_autopm_get_interface_44($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14;



implementation ldv_usb_autopm_get_interface_44($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 112} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 237019);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 113} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 114} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_tty_register_device_45: ref;

axiom ldv_tty_register_device_45 == $sub.ref(0, 238051);

procedure ldv_tty_register_device_45($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.0, $CurrAddr;



implementation ldv_tty_register_device_45($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} {:cexpr "ldv_tty_register_device_45:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p3 := tty_register_device($p0, $i1, $p2);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i5 := IS_ERR($p4);
    call {:si_unique_call 118} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 119} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} ldv_tty_port_operations_7();
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_autopm_put_interface_46: ref;

axiom ldv_usb_autopm_put_interface_46 == $sub.ref(0, 239083);

procedure ldv_usb_autopm_put_interface_46($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_usb_autopm_put_interface_46($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} ldv_put_interface();
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const tty_register_device: ref;

axiom tty_register_device == $sub.ref(0, 240115);

procedure tty_register_device($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_register_device($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} {:cexpr "tty_register_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p3 := external_alloc();
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 241147);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 125} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_tty_port_operations_7: ref;

axiom ldv_tty_port_operations_7 == $sub.ref(0, 242179);

procedure ldv_tty_port_operations_7();
  free requires assertsPassed;
  modifies $M.15, $M.0, $CurrAddr;



implementation ldv_tty_port_operations_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p0 := ldv_zalloc(1056);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 243211);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 1} true;
    call {:si_unique_call 128} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 129} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 130} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p4 := calloc(1, $i0);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 1} true;
    call {:si_unique_call 132} __VERIFIER_assume($i7);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 244243);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const serial_port_carrier_raised: ref;

axiom serial_port_carrier_raised == $sub.ref(0, 245275);

procedure serial_port_carrier_raised($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.13, $M.8, $M.10, $M.15, $CurrAddr, assertsPassed, $M.24, $M.26, $M.25, $M.7;



implementation serial_port_carrier_raised($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 2992));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 2992)), $mul.ref(0, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 552)), $mul.ref(488, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 552)), $mul.ref(488, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 135} $i13 := devirtbounce.3($p12, $p2);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 136} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const serial_port_dtr_rts: ref;

axiom serial_port_dtr_rts == $sub.ref(0, 246307);

procedure serial_port_dtr_rts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_port_dtr_rts($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} {:cexpr "serial_port_dtr_rts:arg:on"} boogie_si_record_i32($i1);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 8), 2992));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 2992)), $mul.ref(0, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 552)), $mul.ref(480, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 552)), $mul.ref(480, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 138} devirtbounce.4($p13, $p3, $i1);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_port_shutdown: ref;

axiom serial_port_shutdown == $sub.ref(0, 247339);

procedure serial_port_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed, $M.8, $M.10;



implementation serial_port_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 2992));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 2992)), $mul.ref(0, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 552)), $mul.ref(360, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 552)), $mul.ref(360, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 139} devirtbounce.5($p12, $p2);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const serial_port_activate: ref;

axiom serial_port_activate == $sub.ref(0, 248371);

procedure serial_port_activate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.17, $M.18, $M.19, $M.20, $M.0, $M.14, $CurrAddr, $M.13, $M.7, $M.11, $M.10, $M.9, $M.8, $M.24, $M.26, $M.25, $M.15, assertsPassed;



implementation serial_port_activate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i12: i32;
  var $p20: ref;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 8), 2992));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 2992)), $mul.ref(0, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} mutex_lock_nested($p6, 0);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(24, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 2992)), $mul.ref(0, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 552)), $mul.ref(352, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 141} $i19 := devirtbounce.6($p18, $p1, $p3);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 142} {:cexpr "retval"} boogie_si_record_i32($i19);
    assume {:verifier.code 0} true;
    $i12 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} mutex_unlock($p20);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i12, 0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i22 := usb_translate_errors($i12);
    call {:si_unique_call 145} {:cexpr "retval"} boogie_si_record_i32($i22);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb6;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 249403);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 250435);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    return;
}



const usb_translate_errors: ref;

axiom usb_translate_errors == $sub.ref(0, 251467);

procedure usb_translate_errors($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_translate_errors($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    call {:si_unique_call 147} {:cexpr "usb_translate_errors:arg:error_code"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, $sub.i32(0, 12));
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i8 := $i0;
    goto $bb20;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, $sub.i32(0, 12));
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb10;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb15;

  $bb12:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, $sub.i32(0, 95));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb18;
}



const usb_serial_probe: ref;

axiom usb_serial_probe == $sub.ref(0, 252499);

procedure usb_serial_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.17, $M.18, $M.19, $M.20, $M.0, $CurrAddr, $M.14, $M.13, $M.7, $M.11, $M.10, $M.9, $M.8, $M.24, $M.26, $M.25, $M.15, assertsPassed;



implementation usb_serial_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i1;
  var $i47: i8;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i24;
  var $i74: i24;
  var $i75: i24;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i24;
  var $i117: i24;
  var $i118: i24;
  var $p119: ref;
  var $p120: ref;
  var $i121: i8;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $i125: i1;
  var $i127: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i24;
  var $i140: i24;
  var $i141: i24;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i64;
  var $i146: i64;
  var $i147: i64;
  var $i148: i1;
  var $i150: i64;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i24;
  var $i163: i24;
  var $i164: i24;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i64;
  var $i169: i64;
  var $i170: i64;
  var $i171: i1;
  var $i173: i64;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i24;
  var $i186: i24;
  var $i187: i24;
  var $p188: ref;
  var $p189: ref;
  var $i190: i8;
  var $i191: i64;
  var $i192: i64;
  var $i193: i64;
  var $i194: i1;
  var $i196: i64;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i8;
  var $i202: i32;
  var $i203: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $i207: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $p209: ref;
  var $i210: i16;
  var $i211: i32;
  var $i212: i1;
  var $p214: ref;
  var $i215: i16;
  var $i216: i32;
  var $i217: i1;
  var $p220: ref;
  var $i221: i16;
  var $i222: i32;
  var $i223: i1;
  var $p225: ref;
  var $i226: i16;
  var $i227: i32;
  var $i228: i1;
  var $p230: ref;
  var $i231: i16;
  var $i232: i32;
  var $i233: i1;
  var $p235: ref;
  var $i236: i16;
  var $i237: i32;
  var $i238: i1;
  var $p240: ref;
  var $i241: i16;
  var $i242: i32;
  var $i243: i1;
  var $p245: ref;
  var $i246: i16;
  var $i247: i32;
  var $i248: i1;
  var $i218: i32;
  var $p249: ref;
  var $p250: ref;
  var $p252: ref;
  var $p253: ref;
  var $i254: i64;
  var $i255: i64;
  var $i256: i1;
  var $p257: ref;
  var $p258: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p265: ref;
  var $i266: i8;
  var $i267: i32;
  var $i268: i1;
  var $p272: ref;
  var $p273: ref;
  var $i274: i64;
  var $p276: ref;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i285: i24;
  var $i286: i24;
  var $i287: i24;
  var $p288: ref;
  var $p289: ref;
  var $i290: i8;
  var $i291: i64;
  var $i292: i64;
  var $i293: i64;
  var $i294: i1;
  var $i296: i64;
  var $p297: ref;
  var $i298: i32;
  var $i299: i32;
  var $i300: i32;
  var $i301: i8;
  var $i302: i32;
  var $i303: i1;
  var $i270: i32;
  var $i271: i32;
  var $i304: i32;
  var $i269: i32;
  var $i305: i32;
  var $i306: i1;
  var $i307: i1;
  var $p310: ref;
  var $p311: ref;
  var $i312: i32;
  var $i313: i64;
  var $i314: i1;
  var $i315: i1;
  var $p318: ref;
  var $p319: ref;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $p325: ref;
  var $i326: i64;
  var $i327: i1;
  var $p328: ref;
  var $p329: ref;
  var $i330: i32;
  var $i331: i32;
  var $i332: i1;
  var $p333: ref;
  var $i334: i8;
  var $i335: i32;
  var $i336: i32;
  var $i337: i32;
  var $i338: i8;
  var $p339: ref;
  var $i340: i8;
  var $p341: ref;
  var $i342: i8;
  var $p343: ref;
  var $i344: i8;
  var $p345: ref;
  var $i346: i8;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $i351: i1;
  var $i352: i32;
  var $i353: i1;
  var $i354: i32;
  var $i355: i1;
  var $i356: i32;
  var $p357: ref;
  var $i358: i8;
  var $i359: i32;
  var $i360: i1;
  var $i361: i32;
  var $i362: i8;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $i370: i24;
  var $i371: i24;
  var $i372: i24;
  var $p373: ref;
  var $p374: ref;
  var $i375: i8;
  var $i376: i64;
  var $i377: i64;
  var $i378: i64;
  var $i379: i1;
  var $i381: i1;
  var $p383: ref;
  var $p384: ref;
  var $i385: i64;
  var $i386: i1;
  var $p387: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var $p403: ref;
  var $p405: ref;
  var $p407: ref;
  var $i408: i64;
  var $p410: ref;
  var $p411: ref;
  var $p413: ref;
  var $p415: ref;
  var $p417: ref;
  var $p419: ref;
  var $p420: ref;
  var $i421: i32;
  var $i422: i1;
  var $i382: i32;
  var $i423: i1;
  var $i425: i64;
  var $p426: ref;
  var $p427: ref;
  var $i428: i64;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $i435: i64;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $i439: i32;
  var $p440: ref;
  var $p441: ref;
  var $i442: i8;
  var $p443: ref;
  var $i445: i64;
  var $p446: ref;
  var $p447: ref;
  var $i448: i64;
  var $p450: ref;
  var $i451: i64;
  var $p453: ref;
  var $p454: ref;
  var $i455: i64;
  var $i456: i1;
  var $i457: i64;
  var $p458: ref;
  var $i459: i64;
  var $p461: ref;
  var $i462: i64;
  var $p464: ref;
  var $p465: ref;
  var $i466: i64;
  var $i467: i1;
  var $p468: ref;
  var $i469: i8;
  var $i470: i32;
  var $i471: i32;
  var $i472: i64;
  var $p474: ref;
  var $p475: ref;
  var $i476: i32;
  var $i477: i64;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $p483: ref;
  var $p484: ref;
  var $p485: ref;
  var $i486: i32;
  var $i487: i1;
  var $i444: i32;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p493: ref;
  var $p494: ref;
  var $p495: ref;
  var $i496: i32;
  var $i497: i1;
  var $i424: i32;
  var $i498: i1;
  var $i500: i64;
  var $p501: ref;
  var $p502: ref;
  var $i503: i64;
  var $p505: ref;
  var $p506: ref;
  var $p508: ref;
  var $p509: ref;
  var $i510: i32;
  var $i511: i32;
  var $i512: i1;
  var $p513: ref;
  var $p514: ref;
  var $p515: ref;
  var $i516: i64;
  var $i517: i32;
  var $i518: i1;
  var $i519: i32;
  var $i520: i32;
  var $p521: ref;
  var $p522: ref;
  var $i523: i8;
  var $p524: ref;
  var $i526: i64;
  var $p527: ref;
  var $p528: ref;
  var $i529: i64;
  var $p531: ref;
  var $i532: i64;
  var $p534: ref;
  var $p535: ref;
  var $i536: i64;
  var $i537: i1;
  var $i538: i64;
  var $p539: ref;
  var $i540: i64;
  var $p542: ref;
  var $i543: i64;
  var $p545: ref;
  var $p546: ref;
  var $i547: i64;
  var $i548: i1;
  var $p549: ref;
  var $i550: i8;
  var $i551: i32;
  var $i552: i32;
  var $i553: i64;
  var $p555: ref;
  var $p556: ref;
  var $i557: i32;
  var $i558: i64;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $p566: ref;
  var $i567: i32;
  var $i568: i1;
  var $i525: i32;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $i577: i32;
  var $i578: i1;
  var $i499: i32;
  var $p579: ref;
  var $p580: ref;
  var $p581: ref;
  var $p582: ref;
  var $i583: i64;
  var $i584: i1;
  var $i585: i1;
  var $i587: i64;
  var $p588: ref;
  var $p589: ref;
  var $i590: i64;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $p597: ref;
  var $i598: i64;
  var $i599: i1;
  var $i600: i32;
  var $p601: ref;
  var $i602: i8;
  var $p603: ref;
  var $i604: i64;
  var $p605: ref;
  var $p606: ref;
  var $p607: ref;
  var $p608: ref;
  var $i609: i64;
  var $i610: i1;
  var $p611: ref;
  var $i612: i8;
  var $i613: i32;
  var $i614: i32;
  var $p615: ref;
  var $p616: ref;
  var $i617: i32;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $p621: ref;
  var $p622: ref;
  var $p623: ref;
  var $p624: ref;
  var $p625: ref;
  var $i626: i8;
  var $i627: i32;
  var $i628: i32;
  var $i629: i1;
  var $i586: i32;
  var $i630: i1;
  var $p631: ref;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $i637: i24;
  var $i638: i24;
  var $i639: i24;
  var $p640: ref;
  var $p641: ref;
  var $i642: i8;
  var $i643: i64;
  var $i644: i64;
  var $i645: i64;
  var $i646: i1;
  var $p648: ref;
  var $p649: ref;
  var $p650: ref;
  var $p651: ref;
  var $i652: i64;
  var $i653: i1;
  var $i654: i1;
  var $i656: i64;
  var $p657: ref;
  var $p658: ref;
  var $i659: i64;
  var $p661: ref;
  var $p662: ref;
  var $p663: ref;
  var $p664: ref;
  var $p665: ref;
  var $p666: ref;
  var $i667: i64;
  var $i668: i1;
  var $i669: i32;
  var $p670: ref;
  var $p671: ref;
  var $i672: i8;
  var $p673: ref;
  var $i674: i64;
  var $p675: ref;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $i679: i64;
  var $i680: i1;
  var $p681: ref;
  var $i682: i8;
  var $i683: i32;
  var $i684: i32;
  var $p685: ref;
  var $p686: ref;
  var $i687: i32;
  var $p688: ref;
  var $p689: ref;
  var $p690: ref;
  var $p691: ref;
  var $p692: ref;
  var $p693: ref;
  var $p694: ref;
  var $p695: ref;
  var $i696: i8;
  var $i697: i32;
  var $i698: i32;
  var $i699: i1;
  var $i655: i32;
  var $i700: i1;
  var $p701: ref;
  var $p702: ref;
  var $p703: ref;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $i707: i24;
  var $i708: i24;
  var $i709: i24;
  var $p710: ref;
  var $p711: ref;
  var $i712: i8;
  var $i713: i64;
  var $i714: i64;
  var $i715: i64;
  var $i716: i1;
  var $p718: ref;
  var $p719: ref;
  var $p720: ref;
  var $i721: i64;
  var $i722: i1;
  var $p723: ref;
  var $p724: ref;
  var $i725: i32;
  var $i726: i1;
  var $p727: ref;
  var $i728: i8;
  var $i729: i8;
  var $i730: i8;
  var $i731: i1;
  var $p732: ref;
  var $p733: ref;
  var $i734: i8;
  var $i735: i8;
  var $i736: i8;
  var $p737: ref;
  var $i738: i8;
  var $i739: i8;
  var $i740: i8;
  var $i741: i32;
  var $i742: i1;
  var $i744: i1;
  var $i746: i64;
  var $p748: ref;
  var $p749: ref;
  var $p750: ref;
  var $p751: ref;
  var $i752: i32;
  var $p754: ref;
  var $p755: ref;
  var $p756: ref;
  var $p757: ref;
  var $p758: ref;
  var $p759: ref;
  var $i760: i24;
  var $i761: i24;
  var $i762: i24;
  var $p763: ref;
  var $p764: ref;
  var $i765: i8;
  var $i766: i64;
  var $i767: i64;
  var $i768: i64;
  var $i769: i1;
  var $p770: ref;
  var $p771: ref;
  var $p773: ref;
  var $p774: ref;
  var $i775: i32;
  var $i776: i1;
  var $i778: i32;
  var $i779: i1;
  var $i745: i32;
  var $p780: ref;
  var $i781: i8;
  var $i782: i8;
  var $p784: ref;
  var $p785: ref;
  var $p786: ref;
  var $i787: i32;
  var $p789: ref;
  var $p790: ref;
  var $p792: ref;
  var $p793: ref;
  var $i42: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: ref;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $p4 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $p5 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p18 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p19 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p21 := interface_to_usbdev($p0);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} mutex_lock_nested(table_lock, 0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p22 := search_serial_device($p0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.16, $p44);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i46 := try_module_get($p45);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i8($i46);
    call {:si_unique_call 174} {:cexpr "tmp___1"} boogie_si_record_i8($i47);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i47);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} mutex_unlock(table_lock);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p52 := create_serial($p21, $p0, $p22);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(272, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.16, $p58);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i93 := $sgt.i32($i92, 0);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i94, $i95, $i96, $i97 := 0, 0, 0, 0;
    assume {:branchcond $i93} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(8, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i210 := $load.i16($M.0, $p209);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i211 := $zext.i16.i32($i210);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 1659);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(8, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i221 := $load.i16($M.0, $p220);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i222 := $zext.i16.i32($i221);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 1367);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(8, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i231 := $load.i16($M.0, $p230);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i232 := $zext.i16.i32($i231);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 1423);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i233 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(8, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i241 := $load.i16($M.0, $p240);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i242 := $zext.i16.i32($i241);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 4597);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i243 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i312 := $i95;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i313 := $p2i.ref.i64($p22);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i314 := $eq.i64($i313, $p2i.ref.i64(usb_serial_generic_device));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    $i322 := 0;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    $i337 := $i322;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i338 := $trunc.i32.i8($i337);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p339, $i338);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i340 := $trunc.i32.i8($i96);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(29, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p341, $i340);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i342 := $trunc.i32.i8($i97);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(30, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p343, $i342);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i344 := $trunc.i32.i8($i312);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(27, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p345, $i344);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i346 := $trunc.i32.i8($i94);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(28, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p347, $i346);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p349 := $load.ref($M.16, $p348);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} vslice_dummy_var_29 := _dev_info.ref.ref.ref($p20, .str.35, $p349);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i351 := $sgt.i32($i96, $i97);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i351 == 1);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i352 := $i97;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i353 := $sgt.i32($i352, $i312);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i353 == 1);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i354 := $i312;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i355 := $sgt.i32($i354, $i94);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i355 == 1);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i356 := $i94;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i358 := $load.i8($M.0, $p357);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i359 := $zext.i8.i32($i358);
    call {:si_unique_call 232} {:cexpr "_max2___2"} boogie_si_record_i32($i359);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i360 := $sgt.i32($i356, $i359);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i360} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i360 == 1);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i361 := $i359;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i362 := $trunc.i32.i8($i361);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p363, $i362);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p364, .str);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p365, .str.21);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p366, .str.22);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p367, .str.36);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p369 := $bitcast.ref.ref($p368);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i370 := $load.i24($M.5, $p369);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i371 := $and.i24($i370, $sub.i24(0, 262144));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i372 := $or.i24($i371, 930);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p369, $i372);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p373, 0);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i375 := $load.i8($M.6, $p374);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i376 := $zext.i8.i64($i375);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i377 := $and.i64($i376, 1);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i378 := ldv__builtin_expect($i377, 0);
    call {:si_unique_call 234} {:cexpr "tmp___14"} boogie_si_record_i64($i378);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i379 := $ne.i64($i378, 0);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i381 := $slt.i32(0, $i361);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i381 == 1);
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i423 := $slt.i32(0, $i96);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i423 == 1);
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i498 := $slt.i32(0, $i97);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i498} true;
    goto $bb167, $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume !($i498 == 1);
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p580 := $load.ref($M.0, $p579);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p580, $mul.ref(0, 552)), $mul.ref(504, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p582 := $load.ref($M.0, $p581);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i583 := $p2i.ref.i64($p582);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i584 := $ne.i64($i583, 0);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i584} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i584 == 1);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i630 := $ne.i32($i312, 0);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i630} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p649 := $load.ref($M.0, $p648);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($p649, $mul.ref(0, 552)), $mul.ref(512, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p651 := $load.ref($M.0, $p650);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i652 := $p2i.ref.i64($p651);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i653 := $ne.i64($i652, 0);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i653} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i653 == 1);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i700 := $ne.i32($i94, 0);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i700} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p718 := $bitcast.ref.ref($p52);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} ldv_usb_set_intfdata_21($p0, $p718);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(280, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p720 := $load.ref($M.16, $p719);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i721 := $p2i.ref.i64($p720);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i722 := $ne.i64($i721, 0);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i722} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i722 == 1);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i734 := $load.i8($M.0, $p733);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i735 := $and.i8($i734, $sub.i8(0, 5));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i736 := $or.i8($i735, 4);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p733, $i736);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i738 := $load.i8($M.0, $p737);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i739 := $and.i8($i738, $sub.i8(0, 2));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i740 := $or.i8($i739, 1);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p737, $i740);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i741 := allocate_minors($p52, $i337);
    call {:si_unique_call 301} {:cexpr "tmp___29"} boogie_si_record_i32($i741);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i742 := $ne.i32($i741, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i742} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i742 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i744 := $slt.i32(0, $i337);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i744} true;
    goto $bb251, $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    assume !($i744 == 1);
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i781 := $load.i8($M.0, $p780);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i782 := $and.i8($i781, $sub.i8(0, 2));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p780, $i782);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p784 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p785 := $load.ref($M.0, $p784);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($p785, $mul.ref(0, 2992)), $mul.ref(1136, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i787 := $load.i32($M.0, $p786);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} usb_serial_console_init($i787);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p790 := $load.ref($M.16, $p789);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} module_put($p790);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb251:
    assume $i744 == 1;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i745 := 0;
    goto $bb254;

  $bb254:
    call $i746, $p748, $p749, $p750, $p751, $i752, $p754, $p755, $p756, $p757, $p758, $p759, $i760, $i761, $i762, $p763, $p764, $i765, $i766, $i767, $i768, $i769, $p770, $p771, $p773, $p774, $i775, $i776, $i778, $i779, $i745, vslice_dummy_var_35, vslice_dummy_var_36, vslice_dummy_var_37 := usb_serial_probe_loop_$bb254($p19, $p20, $p52, $i337, $i746, $p748, $p749, $p750, $p751, $i752, $p754, $p755, $p756, $p757, $p758, $p759, $i760, $i761, $i762, $p763, $p764, $i765, $i766, $i767, $i768, $i769, $p770, $p771, $p773, $p774, $i775, $i776, $i778, $i779, $i745, vslice_dummy_var_35, vslice_dummy_var_36, vslice_dummy_var_37);
    goto $bb254_last;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $i746 := $sext.i32.i64($i745);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i746, 8));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p749 := $load.ref($M.0, $p748);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($p749, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($add.ref($p749, $mul.ref(0, 2992)), $mul.ref(1136, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i752 := $load.i32($M.0, $p751);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} vslice_dummy_var_35 := dev_set_name.ref.ref.i32($p750, .str.42, $i752);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p754 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p754, .str);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p755, .str.21);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p756, .str.22);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p757, .str.43);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p759 := $bitcast.ref.ref($p758);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i760 := $load.i24($M.5, $p759);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i761 := $and.i24($i760, $sub.i24(0, 262144));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i762 := $or.i24($i761, 1096);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p759, $i762);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p763, 0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i765 := $load.i8($M.6, $p764);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i766 := $zext.i8.i64($i765);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i767 := $and.i64($i766, 1);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i768 := ldv__builtin_expect($i767, 0);
    call {:si_unique_call 305} {:cexpr "tmp___31"} boogie_si_record_i64($i768);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i769 := $ne.i64($i768, 0);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i769 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p749, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} device_enable_async_suspend($p773);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($add.ref($p749, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i775 := device_add($p774);
    call {:si_unique_call 310} {:cexpr "retval"} boogie_si_record_i32($i775);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i776 := $ne.i32($i775, 0);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i776 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $i778 := $add.i32($i745, 1);
    call {:si_unique_call 312} {:cexpr "i"} boogie_si_record_i32($i778);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i779 := $slt.i32($i778, $i337);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i779 == 1);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb262:
    assume $i779 == 1;
    assume {:verifier.code 0} true;
    $i745 := $i778;
    goto $bb262_dummy;

  $bb259:
    assume $i776 == 1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} vslice_dummy_var_37 := dev_err.ref.ref($p20, .str.44);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb256:
    assume $i769 == 1;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($p749, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p771 := dev_name($p770);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_36 := __dynamic_dev_dbg.ref.ref.ref.ref($p19, $p20, .str.43, $p771);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb248:
    assume $i742 == 1;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} vslice_dummy_var_34 := dev_err.ref.ref($p20, .str.41);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} usb_serial_put($p52);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p793 := $load.ref($M.16, $p792);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} module_put($p793);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 5);
    goto $bb6;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb238:
    assume $i722 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(280, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p724 := $load.ref($M.16, $p723);
    call {:si_unique_call 297} $i725 := devirtbounce.8($p724, $p52);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 298} {:cexpr "retval"} boogie_si_record_i32($i725);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i726 := $slt.i32($i725, 0);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i726} true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i726 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i728 := $load.i8($M.0, $p727);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i729 := $and.i8($i728, $sub.i8(0, 5));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i730 := $or.i8($i729, 4);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p727, $i730);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i731 := $sgt.i32($i725, 0);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i731} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i731 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb243:
    assume $i731 == 1;
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p732, 0);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb240:
    assume $i726 == 1;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    goto $bb140;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb232:
    assume $i700 == 1;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p701, .str);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p702, .str.21);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p703, .str.22);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p704, .str.40);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p706 := $bitcast.ref.ref($p705);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i707 := $load.i24($M.5, $p706);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i708 := $and.i24($i707, $sub.i24(0, 262144));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i709 := $or.i24($i708, 1060);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p706, $i709);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p710, 0);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i712 := $load.i8($M.6, $p711);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i713 := $zext.i8.i64($i712);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i714 := $and.i64($i713, 1);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i715 := ldv__builtin_expect($i714, 0);
    call {:si_unique_call 295} {:cexpr "tmp___28"} boogie_si_record_i64($i715);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i716 := $ne.i64($i715, 0);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i716} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i716 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb234:
    assume $i716 == 1;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} vslice_dummy_var_33 := __dynamic_dev_dbg.ref.ref.ref($p18, $p20, .str.40);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb215:
    assume $i653 == 1;
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i654 := $slt.i32(0, $i94);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i654} true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !($i654 == 1);
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb217:
    assume $i654 == 1;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i655 := 0;
    goto $bb220;

  $bb220:
    call $i656, $p657, $p658, $i659, $p661, $p662, $p663, $p664, $p665, $p666, $i667, $i668, $i669, $p670, $p671, $i672, $p673, $i674, $p675, $p676, $p677, $p678, $i679, $i680, $p681, $i682, $i683, $i684, $p685, $p686, $i687, $p688, $p689, $p690, $p691, $p692, $p693, $p694, $p695, $i696, $i697, $i698, $i699, $i655 := usb_serial_probe_loop_$bb220($p3, $p21, $p52, $i94, $i656, $p657, $p658, $i659, $p661, $p662, $p663, $p664, $p665, $p666, $i667, $i668, $i669, $p670, $p671, $i672, $p673, $i674, $p675, $p676, $p677, $p678, $i679, $i680, $p681, $i682, $i683, $i684, $p685, $p686, $i687, $p688, $p689, $p690, $p691, $p692, $p693, $p694, $p695, $i696, $i697, $i698, $i699, $i655);
    goto $bb220_last;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i656 := $sext.i32.i64($i655);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref($i656, 8));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p658 := $load.ref($M.20, $p657);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i659 := $sext.i32.i64($i655);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i659, 8));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p662 := $load.ref($M.0, $p661);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p663 := ldv_usb_alloc_urb_19(0, 208);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($p662, $mul.ref(0, 2992)), $mul.ref(1184, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p664, $p663);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p662, $mul.ref(0, 2992)), $mul.ref(1184, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p666 := $load.ref($M.0, $p665);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i667 := $p2i.ref.i64($p666);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i668 := $eq.i64($i667, 0);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i668 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i669 := usb_endpoint_maxp($p658);
    call {:si_unique_call 287} {:cexpr "buffer_size"} boogie_si_record_i32($i669);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($p662, $mul.ref(0, 2992)), $mul.ref(1176, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p670, $i669);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p658, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i672 := $load.i8($M.0, $p671);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p662, $mul.ref(0, 2992)), $mul.ref(1192, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p673, $i672);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i674 := $sext.i32.i64($i669);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $p675 := kmalloc($i674, 208);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p662, $mul.ref(0, 2992)), $mul.ref(1168, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p676, $p675);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p662, $mul.ref(0, 2992)), $mul.ref(1168, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p678 := $load.ref($M.0, $p677);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i679 := $p2i.ref.i64($p678);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i680 := $eq.i64($i679, 0);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p658, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i682 := $load.i8($M.0, $p681);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i683 := $zext.i8.i32($i682);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i684 := __create_pipe($p21, $i683);
    call {:si_unique_call 290} {:cexpr "tmp___27"} boogie_si_record_i32($i684);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($p662, $mul.ref(0, 2992)), $mul.ref(1184, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p686 := $load.ref($M.0, $p685);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i687 := $or.i32($i684, 1073741824);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($p662, $mul.ref(0, 2992)), $mul.ref(1168, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p689 := $load.ref($M.0, $p688);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p691 := $load.ref($M.0, $p690);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($p691, $mul.ref(0, 552)), $mul.ref(512, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p693 := $load.ref($M.0, $p692);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p694 := $bitcast.ref.ref($p662);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($p658, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i696 := $load.i8($M.0, $p695);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i697 := $zext.i8.i32($i696);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} ldv_usb_fill_int_urb_18($p686, $p21, $i687, $p689, $i669, $p693, $p694, $i697);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i698 := $add.i32($i655, 1);
    call {:si_unique_call 292} {:cexpr "i"} boogie_si_record_i32($i698);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i699 := $slt.i32($i698, $i94);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i699 == 1);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb228:
    assume $i699 == 1;
    assume {:verifier.code 0} true;
    $i655 := $i698;
    goto $bb228_dummy;

  $bb225:
    assume $i680 == 1;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb222:
    assume $i668 == 1;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb209:
    assume $i630 == 1;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p631, .str);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p632, .str.21);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p633, .str.22);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p634, .str.39);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p636 := $bitcast.ref.ref($p635);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i637 := $load.i24($M.5, $p636);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i638 := $and.i24($i637, $sub.i24(0, 262144));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i639 := $or.i24($i638, 1034);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p636, $i639);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p640, 0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i642 := $load.i8($M.6, $p641);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i643 := $zext.i8.i64($i642);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i644 := $and.i64($i643, 1);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i645 := ldv__builtin_expect($i644, 0);
    call {:si_unique_call 283} {:cexpr "tmp___25"} boogie_si_record_i64($i645);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i646 := $ne.i64($i645, 0);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i646} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i646 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb211:
    assume $i646 == 1;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} vslice_dummy_var_32 := __dynamic_dev_dbg.ref.ref.ref($p17, $p20, .str.39);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb192:
    assume $i584 == 1;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i585 := $slt.i32(0, $i312);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i585} true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i585 == 1);
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb194:
    assume $i585 == 1;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i586 := 0;
    goto $bb197;

  $bb197:
    call $i587, $p588, $p589, $i590, $p592, $p593, $p594, $p595, $p596, $p597, $i598, $i599, $i600, $p601, $i602, $p603, $i604, $p605, $p606, $p607, $p608, $i609, $i610, $p611, $i612, $i613, $i614, $p615, $p616, $i617, $p618, $p619, $p620, $p621, $p622, $p623, $p624, $p625, $i626, $i627, $i628, $i629, $i586 := usb_serial_probe_loop_$bb197($p2, $p21, $p52, $i312, $i587, $p588, $p589, $i590, $p592, $p593, $p594, $p595, $p596, $p597, $i598, $i599, $i600, $p601, $i602, $p603, $i604, $p605, $p606, $p607, $p608, $i609, $i610, $p611, $i612, $i613, $i614, $p615, $p616, $i617, $p618, $p619, $p620, $p621, $p622, $p623, $p624, $p625, $i626, $i627, $i628, $i629, $i586);
    goto $bb197_last;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $i587 := $sext.i32.i64($i586);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i587, 8));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p589 := $load.ref($M.19, $p588);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i590 := $sext.i32.i64($i586);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i590, 8));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p593 := $load.ref($M.0, $p592);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p594 := ldv_usb_alloc_urb_17(0, 208);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p593, $mul.ref(0, 2992)), $mul.ref(1152, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p595, $p594);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p593, $mul.ref(0, 2992)), $mul.ref(1152, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p597 := $load.ref($M.0, $p596);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i598 := $p2i.ref.i64($p597);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i599 := $eq.i64($i598, 0);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i599 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i600 := usb_endpoint_maxp($p589);
    call {:si_unique_call 276} {:cexpr "buffer_size"} boogie_si_record_i32($i600);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($p589, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i602 := $load.i8($M.0, $p601);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p593, $mul.ref(0, 2992)), $mul.ref(1160, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p603, $i602);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i604 := $sext.i32.i64($i600);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $p605 := kmalloc($i604, 208);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($p593, $mul.ref(0, 2992)), $mul.ref(1144, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p606, $p605);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p593, $mul.ref(0, 2992)), $mul.ref(1144, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p608 := $load.ref($M.0, $p607);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i609 := $p2i.ref.i64($p608);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i610 := $eq.i64($i609, 0);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p589, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i612 := $load.i8($M.0, $p611);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i613 := $zext.i8.i32($i612);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i614 := __create_pipe($p21, $i613);
    call {:si_unique_call 279} {:cexpr "tmp___24"} boogie_si_record_i32($i614);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($p593, $mul.ref(0, 2992)), $mul.ref(1152, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p616 := $load.ref($M.0, $p615);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i617 := $or.i32($i614, 1073741952);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p593, $mul.ref(0, 2992)), $mul.ref(1144, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p619 := $load.ref($M.0, $p618);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p621 := $load.ref($M.0, $p620);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p621, $mul.ref(0, 552)), $mul.ref(504, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p623 := $load.ref($M.0, $p622);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p624 := $bitcast.ref.ref($p593);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($p589, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i626 := $load.i8($M.0, $p625);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i627 := $zext.i8.i32($i626);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} ldv_usb_fill_int_urb_18($p616, $p21, $i617, $p619, $i600, $p623, $p624, $i627);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i628 := $add.i32($i586, 1);
    call {:si_unique_call 281} {:cexpr "i"} boogie_si_record_i32($i628);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i629 := $slt.i32($i628, $i312);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i629 == 1);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb205:
    assume $i629 == 1;
    assume {:verifier.code 0} true;
    $i586 := $i628;
    goto $bb205_dummy;

  $bb202:
    assume $i610 == 1;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb199:
    assume $i599 == 1;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb167:
    assume $i498 == 1;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i499 := 0;
    goto $bb170;

  $bb170:
    call $i500, $p501, $p502, $i503, $p505, $p506, $p508, $p509, $i510, $i511, $i512, $p513, $p514, $p515, $i516, $i517, $i518, $i519, $i520, $p521, $p522, $i523, $p524, $i526, $p527, $p528, $i529, $p531, $i532, $p534, $p535, $i536, $i537, $i538, $p539, $i540, $p542, $i543, $p545, $p546, $i547, $i548, $p549, $i550, $i551, $i552, $i553, $p555, $p556, $i557, $i558, $p560, $p561, $p562, $p563, $p564, $p565, $p566, $i567, $i568, $i525, $p570, $p571, $p572, $p574, $p575, $p576, $i577, $i578, $i499 := usb_serial_probe_loop_$bb170($p5, $p21, $p52, $i97, $i500, $p501, $p502, $i503, $p505, $p506, $p508, $p509, $i510, $i511, $i512, $p513, $p514, $p515, $i516, $i517, $i518, $i519, $i520, $p521, $p522, $i523, $p524, $i526, $p527, $p528, $i529, $p531, $i532, $p534, $p535, $i536, $i537, $i538, $p539, $i540, $p542, $i543, $p545, $p546, $i547, $i548, $p549, $i550, $i551, $i552, $i553, $p555, $p556, $i557, $i558, $p560, $p561, $p562, $p563, $p564, $p565, $p566, $i567, $i568, $i525, $p570, $p571, $p572, $p574, $p575, $p576, $i577, $i578, $i499);
    goto $bb170_last;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i500 := $sext.i32.i64($i499);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref($i500, 8));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p502 := $load.ref($M.18, $p501);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i503 := $sext.i32.i64($i499);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i503, 8));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p506 := $load.ref($M.0, $p505);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p508);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i510 := __kfifo_alloc($p509, 4096, 1, 208);
    call {:si_unique_call 260} {:cexpr "tmp___19"} boogie_si_record_i32($i510);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i511 := __kfifo_int_must_check_helper($i510);
    call {:si_unique_call 262} {:cexpr "tmp___20"} boogie_si_record_i32($i511);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i512 := $ne.i32($i511, 0);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p514 := $load.ref($M.0, $p513);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p514, $mul.ref(0, 552)), $mul.ref(264, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i516 := $load.i64($M.0, $p515);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i517 := $trunc.i64.i32($i516);
    call {:si_unique_call 263} {:cexpr "buffer_size"} boogie_si_record_i32($i517);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i518 := $eq.i32($i517, 0);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i518 == 1);
    assume {:verifier.code 0} true;
    $i520 := $i517;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1280, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p521, $i520);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p502, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i523 := $load.i8($M.0, $p522);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1360, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p524, $i523);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i525 := 0;
    goto $bb178;

  $bb178:
    call $i526, $p527, $p528, $i529, $p531, $i532, $p534, $p535, $i536, $i537, $i538, $p539, $i540, $p542, $i543, $p545, $p546, $i547, $i548, $p549, $i550, $i551, $i552, $i553, $p555, $p556, $i557, $i558, $p560, $p561, $p562, $p563, $p564, $p565, $p566, $i567, $i568, $i525 := usb_serial_probe_loop_$bb178($p21, $p52, $p502, $p506, $i520, $i526, $p527, $p528, $i529, $p531, $i532, $p534, $p535, $i536, $i537, $i538, $p539, $i540, $p542, $i543, $p545, $p546, $i547, $i548, $p549, $i550, $i551, $i552, $i553, $p555, $p556, $i557, $i558, $p560, $p561, $p562, $p563, $p564, $p565, $p566, $i567, $i568, $i525);
    goto $bb178_last;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i526 := $sext.i32.i64($i525);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1352, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} set_bit($i526, $p527);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p528 := ldv_usb_alloc_urb_15(0, 208);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i529 := $sext.i32.i64($i525);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref($i529, 8));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p531, $p528);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i532 := $sext.i32.i64($i525);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref($i532, 8));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p535 := $load.ref($M.0, $p534);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i536 := $p2i.ref.i64($p535);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i537 := $eq.i64($i536, 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $i538 := $sext.i32.i64($i520);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p539 := kmalloc($i538, 208);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i540 := $sext.i32.i64($i525);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1320, 1)), $mul.ref($i540, 8));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p542, $p539);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i543 := $sext.i32.i64($i525);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1320, 1)), $mul.ref($i543, 8));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p546 := $load.ref($M.0, $p545);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i547 := $p2i.ref.i64($p546);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i548 := $eq.i64($i547, 0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i548 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p502, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i550 := $load.i8($M.0, $p549);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i551 := $zext.i8.i32($i550);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i552 := __create_pipe($p21, $i551);
    call {:si_unique_call 270} {:cexpr "tmp___22"} boogie_si_record_i32($i552);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i553 := $sext.i32.i64($i525);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref($i553, 8));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p556 := $load.ref($M.0, $p555);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i557 := $or.i32($i552, $sub.i32(0, 1073741824));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i558 := $sext.i32.i64($i525);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1320, 1)), $mul.ref($i558, 8));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p561 := $load.ref($M.0, $p560);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.0, $p562);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p563, $mul.ref(0, 552)), $mul.ref(528, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p565 := $load.ref($M.0, $p564);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p566 := $bitcast.ref.ref($p506);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} ldv_usb_fill_bulk_urb_14($p556, $p21, $i557, $p561, $i520, $p565, $p566);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i567 := $add.i32($i525, 1);
    call {:si_unique_call 272} {:cexpr "j"} boogie_si_record_i32($i567);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i568 := $ule.i32($i567, 1);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(0, 8));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p571 := $load.ref($M.0, $p570);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1288, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p572, $p571);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p575 := $load.ref($M.0, $p574);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p506, $mul.ref(0, 2992)), $mul.ref(1272, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p576, $p575);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i577 := $add.i32($i499, 1);
    call {:si_unique_call 273} {:cexpr "i"} boogie_si_record_i32($i577);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i578 := $slt.i32($i577, $i97);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i578 == 1);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb189:
    assume $i578 == 1;
    assume {:verifier.code 0} true;
    $i499 := $i577;
    goto $bb189_dummy;

  $bb186:
    assume $i568 == 1;
    assume {:verifier.code 0} true;
    $i525 := $i567;
    goto $bb186_dummy;

  $bb183:
    assume $i548 == 1;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb180:
    assume $i537 == 1;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb175:
    assume $i518 == 1;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i519 := usb_endpoint_maxp($p502);
    call {:si_unique_call 265} {:cexpr "buffer_size"} boogie_si_record_i32($i519);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i520 := $i519;
    goto $bb177;

  $bb172:
    assume $i512 == 1;
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb145:
    assume $i423 == 1;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i424 := 0;
    goto $bb148;

  $bb148:
    call $i425, $p426, $p427, $i428, $p430, $p431, $p432, $p433, $p434, $i435, $i436, $i437, $i438, $i439, $p440, $p441, $i442, $p443, $i445, $p446, $p447, $i448, $p450, $i451, $p453, $p454, $i455, $i456, $i457, $p458, $i459, $p461, $i462, $p464, $p465, $i466, $i467, $p468, $i469, $i470, $i471, $i472, $p474, $p475, $i476, $i477, $p479, $p480, $p481, $p482, $p483, $p484, $p485, $i486, $i487, $i444, $p489, $p490, $p491, $p493, $p494, $p495, $i496, $i497, $i424 := usb_serial_probe_loop_$bb148($p4, $p21, $p52, $i96, $i425, $p426, $p427, $i428, $p430, $p431, $p432, $p433, $p434, $i435, $i436, $i437, $i438, $i439, $p440, $p441, $i442, $p443, $i445, $p446, $p447, $i448, $p450, $i451, $p453, $p454, $i455, $i456, $i457, $p458, $i459, $p461, $i462, $p464, $p465, $i466, $i467, $p468, $i469, $i470, $i471, $i472, $p474, $p475, $i476, $i477, $p479, $p480, $p481, $p482, $p483, $p484, $p485, $i486, $i487, $i444, $p489, $p490, $p491, $p493, $p494, $p495, $i496, $i497, $i424);
    goto $bb148_last;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i425 := $sext.i32.i64($i424);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref($i425, 8));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.17, $p426);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i428 := $sext.i32.i64($i424);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i428, 8));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p431 := $load.ref($M.0, $p430);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p433 := $load.ref($M.0, $p432);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p433, $mul.ref(0, 552)), $mul.ref(256, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i435 := $load.i64($M.0, $p434);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i436 := $trunc.i64.i32($i435);
    call {:si_unique_call 248} {:cexpr "__max1"} boogie_si_record_i32($i436);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i437 := usb_endpoint_maxp($p427);
    call {:si_unique_call 250} {:cexpr "tmp___16"} boogie_si_record_i32($i437);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i438 := $sgt.i32($i436, $i437);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i438 == 1);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i439 := $i437;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1208, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p440, $i439);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p427, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i442 := $load.i8($M.0, $p441);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1224, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p443, $i442);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i444 := 0;
    goto $bb153;

  $bb153:
    call $i445, $p446, $p447, $i448, $p450, $i451, $p453, $p454, $i455, $i456, $i457, $p458, $i459, $p461, $i462, $p464, $p465, $i466, $i467, $p468, $i469, $i470, $i471, $i472, $p474, $p475, $i476, $i477, $p479, $p480, $p481, $p482, $p483, $p484, $p485, $i486, $i487, $i444 := usb_serial_probe_loop_$bb153($p21, $p52, $p427, $p431, $i439, $i445, $p446, $p447, $i448, $p450, $i451, $p453, $p454, $i455, $i456, $i457, $p458, $i459, $p461, $i462, $p464, $p465, $i466, $i467, $p468, $i469, $i470, $i471, $i472, $p474, $p475, $i476, $i477, $p479, $p480, $p481, $p482, $p483, $p484, $p485, $i486, $i487, $i444);
    goto $bb153_last;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i445 := $sext.i32.i64($i444);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1264, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} set_bit($i445, $p446);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p447 := ldv_usb_alloc_urb_13(0, 208);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i448 := $sext.i32.i64($i444);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref($i448, 8));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p450, $p447);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i451 := $sext.i32.i64($i444);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref($i451, 8));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p454 := $load.ref($M.0, $p453);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i455 := $p2i.ref.i64($p454);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i456 := $eq.i64($i455, 0);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i457 := $sext.i32.i64($i439);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p458 := kmalloc($i457, 208);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i459 := $sext.i32.i64($i444);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1232, 1)), $mul.ref($i459, 8));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p461, $p458);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i462 := $sext.i32.i64($i444);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1232, 1)), $mul.ref($i462, 8));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p465 := $load.ref($M.0, $p464);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i466 := $p2i.ref.i64($p465);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i467 := $eq.i64($i466, 0);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p427, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i469 := $load.i8($M.0, $p468);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i470 := $zext.i8.i32($i469);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i471 := __create_pipe($p21, $i470);
    call {:si_unique_call 255} {:cexpr "tmp___18"} boogie_si_record_i32($i471);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i472 := $sext.i32.i64($i444);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref($i472, 8));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p475 := $load.ref($M.0, $p474);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i476 := $or.i32($i471, $sub.i32(0, 1073741696));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i477 := $sext.i32.i64($i444);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1232, 1)), $mul.ref($i477, 8));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p480 := $load.ref($M.0, $p479);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p482 := $load.ref($M.0, $p481);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($p482, $mul.ref(0, 552)), $mul.ref(520, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p484 := $load.ref($M.0, $p483);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p485 := $bitcast.ref.ref($p431);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} ldv_usb_fill_bulk_urb_14($p475, $p21, $i476, $p480, $i439, $p484, $p485);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i486 := $add.i32($i444, 1);
    call {:si_unique_call 257} {:cexpr "j"} boogie_si_record_i32($i486);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i487 := $ule.i32($i486, 1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(0, 8));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p490 := $load.ref($M.0, $p489);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1216, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p491, $p490);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p494 := $load.ref($M.0, $p493);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p431, $mul.ref(0, 2992)), $mul.ref(1200, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p495, $p494);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i496 := $add.i32($i424, 1);
    call {:si_unique_call 258} {:cexpr "i"} boogie_si_record_i32($i496);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i497 := $slt.i32($i496, $i96);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i497 == 1);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb164:
    assume $i497 == 1;
    assume {:verifier.code 0} true;
    $i424 := $i496;
    goto $bb164_dummy;

  $bb161:
    assume $i487 == 1;
    assume {:verifier.code 0} true;
    $i444 := $i486;
    goto $bb161_dummy;

  $bb158:
    assume $i467 == 1;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb155:
    assume $i456 == 1;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb150:
    assume $i438 == 1;
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i439 := $i436;
    goto $bb152;

  $bb133:
    assume $i381 == 1;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i382 := 0;
    goto $bb136;

  $bb136:
    call $p383, $p384, $i385, $i386, $p387, $p389, $p390, $p391, $p394, $p395, $p396, $p397, $p399, $p400, $p401, $p403, $p405, $p407, $i408, $p410, $p411, $p413, $p415, $p417, $p419, $p420, $i421, $i422, $i382, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_31 := usb_serial_probe_loop_$bb136($p0, $p14, $p15, $p16, $p52, $i361, $p383, $p384, $i385, $i386, $p387, $p389, $p390, $p391, $p394, $p395, $p396, $p397, $p399, $p400, $p401, $p403, $p405, $p407, $i408, $p410, $p411, $p413, $p415, $p417, $p419, $p420, $i421, $i422, $i382, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_31);
    goto $bb136_last;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p383 := kzalloc(2984, 208);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p384 := $bitcast.ref.ref($p383);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i385 := $p2i.ref.i64($p384);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i386 := $eq.i64($i385, 0);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(8, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} tty_port_init($p387);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(8, 1)), $mul.ref(328, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p389, serial_port_ops);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p390, $p52);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_31 := spinlock_check($p391);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1064, 1)), $mul.ref(0, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p395 := $bitcast.ref.ref($p394);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} __raw_spin_lock_init($p395, .str.37, $p14);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1512, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} __init_work($p396, 0);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p16, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p397, 137438953408);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1512, 1)), $mul.ref(0, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p400 := $bitcast.ref.ref($p399);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p401 := $bitcast.ref.ref($p16);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 243} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p400, $p401, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1512, 1)), $mul.ref(32, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} lockdep_init_map($p403, .str.38, $p15, 0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1512, 1)), $mul.ref(8, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} INIT_LIST_HEAD($p405);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1512, 1)), $mul.ref(24, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p407, usb_serial_port_work);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i408 := $sext.i32.i64($i382);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i408, 8));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p410, $p383);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1608, 1)), $mul.ref(0, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p413, $p411);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1608, 1)), $mul.ref(504, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p415, $0.ref);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1608, 1)), $mul.ref(496, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p417, usb_serial_bus_type);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1608, 1)), $mul.ref(1360, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p419, usb_serial_port_release);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p384, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} device_initialize($p420);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i421 := $add.i32($i382, 1);
    call {:si_unique_call 247} {:cexpr "i"} boogie_si_record_i32($i421);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i422 := $slt.i32($i421, $i361);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i422 == 1);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb142:
    assume $i422 == 1;
    assume {:verifier.code 0} true;
    $i382 := $i421;
    goto $bb142_dummy;

  $bb138:
    assume $i386 == 1;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb130:
    assume $i379 == 1;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} vslice_dummy_var_30 := __dynamic_dev_dbg.ref.ref.ref.i32($p13, $p20, .str.36, $i361);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume $i360 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i361 := $i356;
    goto $bb129;

  $bb124:
    assume $i355 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i356 := $i354;
    goto $bb126;

  $bb121:
    assume $i353 == 1;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i354 := $i352;
    goto $bb123;

  $bb118:
    assume $i351 == 1;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i352 := $i96;
    goto $bb120;

  $bb109:
    assume $i323 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(288, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.16, $p324);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i326 := $p2i.ref.i64($p325);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i327 := $ne.i64($i326, 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    $i331 := $i322;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 0);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    $i336 := $i331;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i337 := $i336;
    goto $bb117;

  $bb114:
    assume $i332 == 1;
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i334 := $load.i8($M.16, $p333);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i335 := $sext.i8.i32($i334);
    call {:si_unique_call 230} {:cexpr "num_ports"} boogie_si_record_i32($i335);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i336 := $i335;
    goto $bb116;

  $bb111:
    assume $i327 == 1;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(288, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p329 := $load.ref($M.16, $p328);
    call {:si_unique_call 228} $i330 := devirtbounce.8($p329, $p52);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 229} {:cexpr "num_ports"} boogie_si_record_i32($i330);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i331 := $i330;
    goto $bb113;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i314 == 1;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i97, 0);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_27 := _dev_info.ref.ref($p20, .str.33);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} vslice_dummy_var_28 := _dev_info.ref.ref($p20, .str.34);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i322 := $i97;
    goto $bb108;

  $bb105:
    assume $i315 == 1;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} vslice_dummy_var_26 := dev_err.ref.ref($p20, .str.32);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} usb_serial_put($p52);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.16, $p318);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} module_put($p319);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 5);
    goto $bb6;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb74:
    assume $i243 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(10, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i246 := $load.i16($M.0, $p245);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i247 := $zext.i16.i32($i246);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 5);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i218 := $i95;
    assume {:branchcond $i248} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i248 == 1);
    goto $bb76;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p21, $mul.ref(0, 1992)), $mul.ref(1560, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p250, $mul.ref(0, 680)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i254 := $p2i.ref.i64($p253);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i255 := $p2i.ref.i64($p0);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i256 := $ne.i64($i254, $i255);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    $i305 := $i218;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i96, 0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i306} true;
    goto $bb96, $bb98;

  $bb98:
    assume !($i306 == 1);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i97, 0);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i312 := $i305;
    goto $bb102;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i307 == 1;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} vslice_dummy_var_25 := _dev_info.ref.ref($p20, .str.31);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} usb_serial_put($p52);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.16, $p310);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} module_put($p311);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 19);
    goto $bb6;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i306 == 1;
    goto $bb97;

  $bb79:
    assume $i256 == 1;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p21, $mul.ref(0, 1992)), $mul.ref(1560, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.0, $p257);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p258, $mul.ref(0, 680)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.0, $p260);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p261, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p263, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i266 := $load.i8($M.0, $p265);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i267 := $zext.i8.i32($i266);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i268 := $sgt.i32($i267, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i269 := $i218;
    assume {:branchcond $i268} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i305 := $i269;
    goto $bb95;

  $bb81:
    assume $i268 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i270, $i271 := 0, $i218;
    goto $bb84;

  $bb84:
    call $p272, $p273, $i274, $p276, $i277, $i278, $p279, $p280, $p281, $p282, $p283, $p284, $i285, $i286, $i287, $p288, $p289, $i290, $i291, $i292, $i293, $i294, $i296, $p297, $i298, $i299, $i300, $i301, $i302, $i303, $i270, $i271, $i304, vslice_dummy_var_24 := usb_serial_probe_loop_$bb84($p2, $p12, $p20, $p263, $p265, $p272, $p273, $i274, $p276, $i277, $i278, $p279, $p280, $p281, $p282, $p283, $p284, $i285, $i286, $i287, $p288, $p289, $i290, $i291, $i292, $i293, $i294, $i296, $p297, $i298, $i299, $i300, $i301, $i302, $i303, $i270, $i271, $i304, vslice_dummy_var_24);
    goto $bb84_last;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p263, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p273 := $load.ref($M.0, $p272);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i274 := $sext.i32.i64($i270);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p273, $mul.ref($i274, 64)), $mul.ref(0, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i277 := usb_endpoint_is_int_in($p276);
    call {:si_unique_call 214} {:cexpr "tmp___13"} boogie_si_record_i32($i277);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 0);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    $i299 := $i271;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i300 := $add.i32($i270, 1);
    call {:si_unique_call 219} {:cexpr "i"} boogie_si_record_i32($i300);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i301 := $load.i8($M.0, $p265);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i302 := $zext.i8.i32($i301);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i303 := $sgt.i32($i302, $i300);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i304 := $i299;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i269 := $i304;
    goto $bb83;

  $bb92:
    assume $i303 == 1;
    assume {:verifier.code 0} true;
    $i270, $i271 := $i300, $i299;
    goto $bb92_dummy;

  $bb86:
    assume $i278 == 1;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p279, .str);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p280, .str.21);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p281, .str.22);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p282, .str.30);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p283);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i285 := $load.i24($M.5, $p284);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i286 := $and.i24($i285, $sub.i24(0, 262144));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i287 := $or.i24($i286, 870);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p284, $i287);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p288, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i290 := $load.i8($M.6, $p289);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i291 := $zext.i8.i64($i290);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i292 := $and.i64($i291, 1);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i293 := ldv__builtin_expect($i292, 0);
    call {:si_unique_call 216} {:cexpr "tmp___12"} boogie_si_record_i64($i293);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i294 := $ne.i64($i293, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i296 := $sext.i32.i64($i271);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i296, 8));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p297, $p276);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i298 := $add.i32($i271, 1);
    call {:si_unique_call 218} {:cexpr "num_interrupt_in"} boogie_si_record_i32($i298);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i299 := $i298;
    goto $bb91;

  $bb88:
    assume $i294 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} vslice_dummy_var_24 := __dynamic_dev_dbg.ref.ref.ref($p12, $p20, .str.30);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb69:
    assume $i233 == 1;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(10, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i236 := $load.i16($M.0, $p235);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i237 := $zext.i16.i32($i236);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 38688);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i218 := $i95;
    assume {:branchcond $i238} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i238 == 1);
    goto $bb71;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb62;

  $bb64:
    assume $i223 == 1;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(10, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i226 := $load.i16($M.0, $p225);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i227 := $zext.i16.i32($i226);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 8200);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i218 := $i95;
    assume {:branchcond $i228} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb66;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i228 == 1;
    goto $bb62;

  $bb58:
    assume $i212 == 1;
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(10, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i215 := $load.i16($M.0, $p214);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i216 := $zext.i16.i32($i215);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 8963);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i218 := $i95;
    assume true;
    goto $bb61, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i217 == 1);
    goto $bb60;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i217 == 1;
    goto $bb62;

  $bb26:
    assume $i93 == 1;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i98, $i99, $i100, $i101, $i102 := 0, 0, 0, 0, 0;
    goto $bb29;

  $bb29:
    call $p103, $p104, $i105, $p107, $i108, $i109, $p110, $p111, $p112, $p113, $p114, $p115, $i116, $i117, $i118, $p119, $p120, $i121, $i122, $i123, $i124, $i125, $i127, $p128, $i129, $i130, $i131, $i132, $p133, $p134, $p135, $p136, $p137, $p138, $i139, $i140, $i141, $p142, $p143, $i144, $i145, $i146, $i147, $i148, $i150, $p151, $i152, $i153, $i154, $i155, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $i163, $i164, $p165, $p166, $i167, $i168, $i169, $i170, $i171, $i173, $p174, $i175, $i176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $p184, $i185, $i186, $i187, $p188, $p189, $i190, $i191, $i192, $i193, $i194, $i196, $p197, $i198, $i199, $i200, $i201, $i202, $i203, $i98, $i99, $i100, $i101, $i102, $i204, $i205, $i206, $i207, vslice_dummy_var_20, vslice_dummy_var_21, vslice_dummy_var_22, vslice_dummy_var_23 := usb_serial_probe_loop_$bb29($p2, $p3, $p4, $p5, $p8, $p9, $p10, $p11, $p20, $p88, $p90, $p103, $p104, $i105, $p107, $i108, $i109, $p110, $p111, $p112, $p113, $p114, $p115, $i116, $i117, $i118, $p119, $p120, $i121, $i122, $i123, $i124, $i125, $i127, $p128, $i129, $i130, $i131, $i132, $p133, $p134, $p135, $p136, $p137, $p138, $i139, $i140, $i141, $p142, $p143, $i144, $i145, $i146, $i147, $i148, $i150, $p151, $i152, $i153, $i154, $i155, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $i163, $i164, $p165, $p166, $i167, $i168, $i169, $i170, $i171, $i173, $p174, $i175, $i176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $p184, $i185, $i186, $i187, $p188, $p189, $i190, $i191, $i192, $i193, $i194, $i196, $p197, $i198, $i199, $i200, $i201, $i202, $i203, $i98, $i99, $i100, $i101, $i102, $i204, $i205, $i206, $i207, vslice_dummy_var_20, vslice_dummy_var_21, vslice_dummy_var_22, vslice_dummy_var_23);
    goto $bb29_last;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p88, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i100);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p104, $mul.ref($i105, 64)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i108 := usb_endpoint_is_bulk_in($p107);
    call {:si_unique_call 189} {:cexpr "tmp___5"} boogie_si_record_i32($i108);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i130 := $i99;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i131 := usb_endpoint_is_bulk_out($p107);
    call {:si_unique_call 195} {:cexpr "tmp___7"} boogie_si_record_i32($i131);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i153 := $i98;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i154 := usb_endpoint_is_int_in($p107);
    call {:si_unique_call 201} {:cexpr "tmp___9"} boogie_si_record_i32($i154);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $i176 := $i101;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i177 := usb_endpoint_is_int_out($p107);
    call {:si_unique_call 207} {:cexpr "tmp___11"} boogie_si_record_i32($i177);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    $i199 := $i102;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i200 := $add.i32($i100, 1);
    call {:si_unique_call 212} {:cexpr "i"} boogie_si_record_i32($i200);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.0, $p90);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i203 := $sgt.i32($i202, $i200);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i204, $i205, $i206, $i207 := $i199, $i176, $i130, $i153;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i94, $i95, $i96, $i97 := $i204, $i205, $i206, $i207;
    goto $bb28;

  $bb55:
    assume $i203 == 1;
    assume {:verifier.code 0} true;
    $i98, $i99, $i100, $i101, $i102 := $i153, $i130, $i200, $i176, $i199;
    goto $bb55_dummy;

  $bb49:
    assume $i178 == 1;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p179, .str);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p180, .str.21);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p181, .str.22);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p182, .str.29);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i185 := $load.i24($M.5, $p184);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i186 := $and.i24($i185, $sub.i24(0, 262144));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i187 := $or.i24($i186, 846);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p184, $i187);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p188, 0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.6, $p189);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i64($i190);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i192 := $and.i64($i191, 1);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i193 := ldv__builtin_expect($i192, 0);
    call {:si_unique_call 209} {:cexpr "tmp___10"} boogie_si_record_i64($i193);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i194 := $ne.i64($i193, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i102);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref($i196, 8));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p197, $p107);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i102, 1);
    call {:si_unique_call 211} {:cexpr "num_interrupt_out"} boogie_si_record_i32($i198);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i199 := $i198;
    goto $bb54;

  $bb51:
    assume $i194 == 1;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} vslice_dummy_var_23 := __dynamic_dev_dbg.ref.ref.ref.i32($p11, $p20, .str.29, $i100);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb43:
    assume $i155 == 1;
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p156, .str);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p157, .str.21);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p158, .str.22);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p159, .str.28);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i162 := $load.i24($M.5, $p161);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i163 := $and.i24($i162, $sub.i24(0, 262144));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i164 := $or.i24($i163, 839);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p161, $i164);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p165, 0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.6, $p166);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i64($i167);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i169 := $and.i64($i168, 1);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i170 := ldv__builtin_expect($i169, 0);
    call {:si_unique_call 203} {:cexpr "tmp___8"} boogie_si_record_i64($i170);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i173 := $sext.i32.i64($i101);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i173, 8));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p174, $p107);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i175 := $add.i32($i101, 1);
    call {:si_unique_call 205} {:cexpr "num_interrupt_in"} boogie_si_record_i32($i175);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i176 := $i175;
    goto $bb48;

  $bb45:
    assume $i171 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_22 := __dynamic_dev_dbg.ref.ref.ref.i32($p10, $p20, .str.28, $i100);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb37:
    assume $i132 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p133, .str);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p134, .str.21);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p135, .str.22);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p136, .str.27);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i139 := $load.i24($M.5, $p138);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i140 := $and.i24($i139, $sub.i24(0, 262144));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i141 := $or.i24($i140, 832);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p138, $i141);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p142, 0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.6, $p143);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i64($i144);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i146 := $and.i64($i145, 1);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $i147 := ldv__builtin_expect($i146, 0);
    call {:si_unique_call 197} {:cexpr "tmp___6"} boogie_si_record_i64($i147);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i98);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref($i150, 8));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p151, $p107);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i98, 1);
    call {:si_unique_call 199} {:cexpr "num_bulk_out"} boogie_si_record_i32($i152);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i153 := $i152;
    goto $bb42;

  $bb39:
    assume $i148 == 1;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_21 := __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p20, .str.27, $i100);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb31:
    assume $i109 == 1;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p110, .str);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p111, .str.21);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p112, .str.22);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p113, .str.26);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i116 := $load.i24($M.5, $p115);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i117 := $and.i24($i116, $sub.i24(0, 262144));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i118 := $or.i24($i117, 825);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p115, $i118);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p119, 0);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.6, $p120);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i64($i121);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i123 := $and.i64($i122, 1);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i124 := ldv__builtin_expect($i123, 0);
    call {:si_unique_call 191} {:cexpr "tmp___4"} boogie_si_record_i64($i124);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i99);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref($i127, 8));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, $p128, $p107);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i129 := $add.i32($i99, 1);
    call {:si_unique_call 193} {:cexpr "num_bulk_in"} boogie_si_record_i32($i129);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i130 := $i129;
    goto $bb36;

  $bb33:
    assume $i125 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} vslice_dummy_var_20 := __dynamic_dev_dbg.ref.ref.ref.i32($p8, $p20, .str.26, $i100);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb17:
    assume $i61 == 1;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p62 := get_iface_id($p22, $p0);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(272, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.16, $p63);
    call {:si_unique_call 181} $i65 := devirtbounce.7($p64, $p52, $p62);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 182} {:cexpr "retval"} boogie_si_record_i32($i65);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i66 == 1;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p67, .str);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p68, .str.21);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p69, .str.22);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p70, .str.25);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i73 := $load.i24($M.5, $p72);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i74 := $and.i24($i73, $sub.i24(0, 262144));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i75 := $or.i24($i74, 810);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p72, $i75);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p76, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.6, $p77);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i64($i78);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i80 := $and.i64($i79, 1);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i81 := ldv__builtin_expect($i80, 0);
    call {:si_unique_call 184} {:cexpr "tmp___3"} boogie_si_record_i64($i81);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} usb_serial_put($p52);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.16, $p85);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} module_put($p86);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i42 := $i65;
    goto $bb6;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i82 == 1;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} vslice_dummy_var_19 := __dynamic_dev_dbg.ref.ref.ref($p7, $p20, .str.25);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.16, $p56);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} module_put($p57);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 12);
    goto $bb6;

  $bb11:
    assume $i50 == 1;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} mutex_unlock(table_lock);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} vslice_dummy_var_18 := dev_err.ref.ref($p20, .str.24);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 5);
    goto $bb6;

  $bb8:
    assume $i48 == 1;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb10;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} mutex_unlock(table_lock);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, .str);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p26, .str.21);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p27, .str.22);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p28, .str.23);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.5, $p30);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 785);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p30, $i33);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p34, 0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.6, $p35);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 171} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 19);
    goto $bb6;

  $bb3:
    assume $i40 == 1;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_17 := __dynamic_dev_dbg.ref.ref.ref($p6, $p20, .str.23);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb262_dummy:
    assume false;
    return;

  $bb254_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1619;

  $bb228_dummy:
    assume false;
    return;

  $bb220_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  $bb205_dummy:
    assume false;
    return;

  $bb197_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  $bb186_dummy:
    assume false;
    return;

  $bb178_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  $bb189_dummy:
    assume false;
    return;

  $bb170_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1272;

  $bb161_dummy:
    assume false;
    return;

  $bb153_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1205;

  $bb164_dummy:
    assume false;
    return;

  $bb148_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1177;

  $bb142_dummy:
    assume false;
    return;

  $bb136_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1115;

  $bb92_dummy:
    assume false;
    return;

  $bb84_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_930;

  $bb55_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_705;
}



const usb_serial_disconnect: ref;

axiom usb_serial_disconnect == $sub.ref(0, 253531);

procedure usb_serial_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed, $M.8, $M.10;



implementation usb_serial_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i14: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_38: i1;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $p1 := ldv_usb_get_intfdata_22($p0);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} usb_serial_console_disconnect($p2);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} mutex_lock_nested($p4, 0);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 2));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i8 := $or.i8($i7, 1);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i8);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} mutex_unlock($p9);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 0);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 552)), $mul.ref(296, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} usb_serial_put($p2);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_39 := _dev_info.ref.ref($p3, .str.53);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 552)), $mul.ref(296, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    call {:si_unique_call 328} devirtbounce.9($p46, $p2);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb4;

  $bb4:
    call $i15, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $p26, $p27, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i14, vslice_dummy_var_38 := usb_serial_disconnect_loop_$bb4($p2, $p10, $i15, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $p26, $p27, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i14, vslice_dummy_var_38);
    goto $bb4_last;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i15, 8));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i14, 1);
    call {:si_unique_call 327} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p10);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, $i33);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i33;
    goto $bb15_dummy;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 2992)), $mul.ref(8, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p22 := tty_port_tty_get($p21);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} usb_serial_port_poison_urbs($p18);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2992)), $mul.ref(8, 1)), $mul.ref(592, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} __wake_up($p26, 1, 1, $0.ref);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 2992)), $mul.ref(1512, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_38 := cancel_work_sync($p27);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p18, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i30 := device_is_registered($p29);
    call {:si_unique_call 325} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p18, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} device_del($p32);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} tty_vhangup($p22);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} tty_kref_put($p22);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;
}



const usb_serial_suspend: ref;

axiom usb_serial_suspend == $sub.ref(0, 254563);

procedure usb_serial_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i8;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i8;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i34: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i33: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p3, $i1);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p4 := ldv_usb_get_intfdata_22($p0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, $sub.i8(0, 3));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i9 := $or.i8($i8, 2);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i9);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 552)), $mul.ref(328, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 0);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb11;

  $bb11:
    call $i34, $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i33 := usb_serial_suspend_loop_$bb11($p5, $p29, $i34, $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i33);
    goto $bb11_last;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i34, 8));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i33, 1);
    call {:si_unique_call 336} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p29);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, $i40);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i40;
    goto $bb16_dummy;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} usb_serial_port_poison_urbs($p37);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 552)), $mul.ref(328, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.23, $p20);
    call {:si_unique_call 333} $i22 := devirtbounce.10($p19, $p5, $i21);
    call {:si_unique_call 334} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i28 := $i22;
    goto $bb7;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i26 := $and.i8($i25, $sub.i8(0, 3));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i26);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i27 := $i22;
    goto $bb5;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1795;
}



const usb_serial_resume: ref;

axiom usb_serial_resume == $sub.ref(0, 255595);

procedure usb_serial_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.13, $M.8, $M.10, $M.15, $CurrAddr, assertsPassed, $M.24, $M.26, $M.25, $M.7;



implementation usb_serial_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i18: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $p1 := ldv_usb_get_intfdata_22($p0);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} usb_serial_unpoison_port_urbs($p2);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, $sub.i8(0, 3));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $i5);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 552)), $mul.ref(336, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i18 := usb_serial_generic_resume($p2);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 342} {:cexpr "rv"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    $i17 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 552)), $mul.ref(336, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 339} $i16 := devirtbounce.8($p15, $p2);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 340} {:cexpr "rv"} boogie_si_record_i32($i16);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const ldv_usb_get_intfdata_22: ref;

axiom ldv_usb_get_intfdata_22 == $sub.ref(0, 256627);

procedure ldv_usb_get_intfdata_22($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata_22($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p1 := ldv_usb_get_intfdata();
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const usb_serial_unpoison_port_urbs: ref;

axiom usb_serial_unpoison_port_urbs == $sub.ref(0, 257659);

procedure usb_serial_unpoison_port_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_serial_unpoison_port_urbs($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i5 := usb_serial_unpoison_port_urbs_loop_$bb4($p0, $p1, $i6, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i5);
    goto $bb4_last;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i6, 8));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i5, 1);
    call {:si_unique_call 345} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, $i12);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb9_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} usb_serial_port_unpoison_urbs($p9);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;
}



const usb_serial_port_unpoison_urbs: ref;

axiom usb_serial_port_unpoison_urbs == $sub.ref(0, 258691);

procedure usb_serial_port_unpoison_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_serial_port_unpoison_urbs($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(0, 8));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} usb_unpoison_urb($p3);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(1, 8));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} usb_unpoison_urb($p16);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(0, 8));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} usb_unpoison_urb($p6);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(1, 8));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} usb_unpoison_urb($p13);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1152, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} usb_unpoison_urb($p8);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1184, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} usb_unpoison_urb($p10);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    return;
}



const usb_unpoison_urb: ref;

axiom usb_unpoison_urb == $sub.ref(0, 259723);

procedure usb_unpoison_urb($p0: ref);
  free requires assertsPassed;



implementation usb_unpoison_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_get_intfdata: ref;

axiom ldv_usb_get_intfdata == $sub.ref(0, 260755);

procedure ldv_usb_get_intfdata() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p0 := $M.24;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const usb_serial_port_poison_urbs: ref;

axiom usb_serial_port_poison_urbs == $sub.ref(0, 261787);

procedure usb_serial_port_poison_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_serial_port_poison_urbs($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(0, 8));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} usb_poison_urb($p3);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(1, 8));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} usb_poison_urb($p16);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(0, 8));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} usb_poison_urb($p6);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(1, 8));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} usb_poison_urb($p13);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1152, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} usb_poison_urb($p8);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1184, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} usb_poison_urb($p10);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    return;
}



const usb_poison_urb: ref;

axiom usb_poison_urb == $sub.ref(0, 262819);

procedure usb_poison_urb($p0: ref);
  free requires assertsPassed;



implementation usb_poison_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_console_disconnect: ref;

axiom usb_serial_console_disconnect == $sub.ref(0, 263851);

procedure usb_serial_console_disconnect($p0: ref);
  free requires assertsPassed;



implementation usb_serial_console_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_tty_get: ref;

axiom tty_port_tty_get == $sub.ref(0, 264883);

procedure tty_port_tty_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_tty_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p1 := external_alloc();
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_vhangup: ref;

axiom tty_vhangup == $sub.ref(0, 265915);

procedure tty_vhangup($p0: ref);
  free requires assertsPassed;



implementation tty_vhangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    return;
}



const tty_kref_put: ref;

axiom tty_kref_put == $sub.ref(0, 266947);

procedure tty_kref_put($p0: ref);
  free requires assertsPassed;



implementation tty_kref_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 267979);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 360} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 269011);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 1} true;
    call {:si_unique_call 361} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 362} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_is_registered: ref;

axiom device_is_registered == $sub.ref(0, 270043);

procedure device_is_registered($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_is_registered($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(16, 1)), $mul.ref(288, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i8($i3, 1);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, 1);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const device_del: ref;

axiom device_del == $sub.ref(0, 271075);

procedure device_del($p0: ref);
  free requires assertsPassed;



implementation device_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_put: ref;

axiom usb_serial_put == $sub.ref(0, 272107);

procedure usb_serial_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed, $M.8, $M.10;



implementation usb_serial_put($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vslice_dummy_var_40 := ldv_kref_put_4($p1, destroy_serial);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const destroy_serial: ref;

axiom destroy_serial == $sub.ref(0, 273139);

procedure destroy_serial($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed, $M.8, $M.10;



implementation destroy_serial($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i27: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 96), 280));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(24, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(24, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(26, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(16, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} ldv_usb_put_intf_2($p41);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(0, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} ldv_usb_put_dev_3($p43);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p2);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} kfree($p44);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb13;

  $bb13:
    call $i28, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i27 := destroy_serial_loop_$bb13($p1, $p23, $i28, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i27);
    goto $bb13_last;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(32, 1)), $mul.ref($i28, 8));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i27, 1);
    call {:si_unique_call 367} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p23);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, $i36);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb18:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i36;
    goto $bb18_dummy;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p31, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} put_device($p35);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(8, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 552)), $mul.ref(304, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(8, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 552)), $mul.ref(304, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    call {:si_unique_call 365} devirtbounce.9($p22, $p2);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} release_minors($p2);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;
}



const ldv_kref_put_4: ref;

axiom ldv_kref_put_4 == $sub.ref(0, 274171);

procedure ldv_kref_put_4($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed, $M.8, $M.10;



implementation ldv_kref_put_4($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} destroy_serial($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const release_minors: ref;

axiom release_minors == $sub.ref(0, 275203);

procedure release_minors($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation release_minors($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} mutex_lock_nested(table_lock, 0);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} mutex_unlock(table_lock);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 9));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i18);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p8, $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i5 := release_minors_loop_$bb4($p0, $p1, $i6, $p8, $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i5);
    goto $bb4_last;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i6, 8));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2992)), $mul.ref(1136, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} idr_remove(serial_minors, $i11);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i5, 1);
    call {:si_unique_call 374} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p1);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, $i12);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2029;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 276235);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_put_intf_2: ref;

axiom ldv_usb_put_intf_2 == $sub.ref(0, 277267);

procedure ldv_usb_put_intf_2($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_usb_put_intf_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} ldv_usb_put_intf();
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_put_dev_3: ref;

axiom ldv_usb_put_dev_3 == $sub.ref(0, 278299);

procedure ldv_usb_put_dev_3($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.25;



implementation ldv_usb_put_dev_3($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} ldv_put_dev($p0);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 279331);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} free_($p0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 280363);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 379} $free($p0);
    return;
}



const ldv_put_dev: ref;

axiom ldv_put_dev == $sub.ref(0, 281395);

procedure ldv_put_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.25;



implementation ldv_put_dev($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p1 := $M.25;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i7 := $M.26;
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, 1);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.26 := $i8;
    call {:si_unique_call 380} {:cexpr "dev_counter"} boogie_si_record_i32($i8);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i9 := $M.26;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.25 := $0.ref;
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv_usb_put_intf: ref;

axiom ldv_usb_put_intf == $sub.ref(0, 282427);

procedure ldv_usb_put_intf();
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_usb_put_intf()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $M.24 := $0.ref;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    return;
}



const idr_remove: ref;

axiom idr_remove == $sub.ref(0, 283459);

procedure idr_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation idr_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} {:cexpr "idr_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 284491);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p1 := ldv_interface_to_usbdev();
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const search_serial_device: ref;

axiom search_serial_device == $sub.ref(0, 285523);

procedure search_serial_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation search_serial_device($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p12: ref;
  var $p13: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1)), $mul.ref(504, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 168), 304));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.16, usb_serial_driver_list);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 24), 552));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 552)), $mul.ref(24, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, $p2i.ref.i64(usb_serial_driver_list));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $r := $p24;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p12, $p13 := $p8, $0.ref;
    goto $bb4;

  $bb4:
    call $p14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p12, $p13 := search_serial_device_loop_$bb4($p0, $p5, $p14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p12, $p13);
    goto $bb4_last;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref(0, 552)), $mul.ref(160, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.16, $p14);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p5);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i16, $i17);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $p20 := $p13;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p23 := $p12;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.16, $p26);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref($sub.ref(0, 24), 552));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p28, $mul.ref($sub.ref(0, 24), 552)), $mul.ref(24, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $p2i.ref.i64(usb_serial_driver_list));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p12, $p13 := $p29, $p20;
    goto $bb13_dummy;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p24 := $p23;
    goto $bb11;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p19 := get_iface_id($p12, $p0);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 286555);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 1} true;
    call {:si_unique_call 384} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 385} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const create_serial: ref;

axiom create_serial == $sub.ref(0, 287587);

procedure create_serial($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.26, $M.25;



implementation create_serial($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p4 := kzalloc(280, 208);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $p9 := ldv_usb_get_dev_12($p0);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p2);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $p12 := usb_get_intf($p1);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} kref_init($p14);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} __mutex_init($p15, .str.45, $p3);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 9));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i18);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 288619);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    return;
}



const get_iface_id: ref;

axiom get_iface_id == $sub.ref(0, 289651);

procedure get_iface_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation get_iface_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p27: ref;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(8, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.16, $p4);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p6 := usb_match_id($p1, $p5);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p28 := match_dynamic_id($p1, $p0);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $p28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $r := $p27;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, .str);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p32, .str.46);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p33, .str.22);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p34, .str.48);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.5, $p36);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 705);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p36, $i39);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p40, 0);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.6, $p41);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 400} {:cexpr "tmp___0"} boogie_si_record_i64($i45);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} vslice_dummy_var_42 := __dynamic_dev_dbg.ref.ref.ref($p3, $p47, .str.48);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.46);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.22);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.47);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.5, $p14);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 700);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p14, $i17);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 396} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p27 := $p6;
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} vslice_dummy_var_41 := __dynamic_dev_dbg.ref.ref.ref($p2, $p25, .str.47);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 290683);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 403} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 405} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_bulk_out: ref;

axiom usb_endpoint_is_bulk_out == $sub.ref(0, 291715);

procedure usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 407} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 409} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_int_in: ref;

axiom usb_endpoint_is_int_in == $sub.ref(0, 292747);

procedure usb_endpoint_is_int_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_int_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i1 := usb_endpoint_xfer_int($p0);
    call {:si_unique_call 411} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 413} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_int_out: ref;

axiom usb_endpoint_is_int_out == $sub.ref(0, 293779);

procedure usb_endpoint_is_int_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_int_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i1 := usb_endpoint_xfer_int($p0);
    call {:si_unique_call 415} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 417} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 294811);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 419} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const tty_port_init: ref;

axiom tty_port_init == $sub.ref(0, 295843);

procedure tty_port_init($p0: ref);
  free requires assertsPassed;



implementation tty_port_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 296875);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 297907);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 298939);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 299971);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 301003);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 302035);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_port_work: ref;

axiom usb_serial_port_work == $sub.ref(0, 303067);

procedure usb_serial_port_work($p0: ref);
  free requires assertsPassed;



implementation usb_serial_port_work($p0: ref)
{
  var $p1: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1512), 2992)), $mul.ref(8, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} tty_port_tty_wakeup($p3);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_port_release: ref;

axiom usb_serial_port_release == $sub.ref(0, 304099);

procedure usb_serial_port_release($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.7;



implementation usb_serial_port_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i25: i32;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i36: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.49);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.22);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.50);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 639);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 426} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1152, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} ldv_usb_free_urb_8($p22);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1184, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} ldv_usb_free_urb_9($p24);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb4;

  $bb4:
    call $i26, $p28, $p29, $i30, $p32, $p33, $i34, $i35, $i25 := usb_serial_port_release_loop_$bb4($p2, $i26, $p28, $p29, $i30, $p32, $p33, $i34, $i35, $i25);
    goto $bb4_last;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1248, 1)), $mul.ref($i26, 8));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} ldv_usb_free_urb_10($p29);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i25);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1232, 1)), $mul.ref($i30, 8));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} kfree($p33);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i25, 1);
    call {:si_unique_call 432} {:cexpr "i"} boogie_si_record_i32($i34);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i35 := $ule.i32($i34, 1);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb9;

  $bb9:
    call $i37, $p39, $p40, $i41, $p43, $p44, $i45, $i46, $i36 := usb_serial_port_release_loop_$bb9($p2, $i37, $p39, $p40, $i41, $p43, $p44, $i45, $i46, $i36);
    goto $bb9_last;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1336, 1)), $mul.ref($i37, 8));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} ldv_usb_free_urb_11($p40);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i36);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1320, 1)), $mul.ref($i41, 8));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} kfree($p44);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i36, 1);
    call {:si_unique_call 435} {:cexpr "i"} boogie_si_record_i32($i45);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i46 := $ule.i32($i45, 1);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} __kfifo_free($p49);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1144, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} kfree($p51);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1168, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} kfree($p53);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(8, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} tty_port_destroy($p54);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p3);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} kfree($p55);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i36 := $i45;
    goto $bb11_dummy;

  $bb6:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i25 := $i34;
    goto $bb6_dummy;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} vslice_dummy_var_43 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p0, .str.50, .str.49);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2366;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;
}



const device_initialize: ref;

axiom device_initialize == $sub.ref(0, 305131);

procedure device_initialize($p0: ref);
  free requires assertsPassed;



implementation device_initialize($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 306163);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_alloc_urb_13: ref;

axiom ldv_usb_alloc_urb_13 == $sub.ref(0, 307195);

procedure ldv_usb_alloc_urb_13($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_usb_alloc_urb_13($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} {:cexpr "ldv_usb_alloc_urb_13:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 442} {:cexpr "ldv_usb_alloc_urb_13:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $p2 := ldv_alloc_urb();
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 308227);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 445} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 309259);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(0, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_usb_fill_bulk_urb_14: ref;

axiom ldv_usb_fill_bulk_urb_14 == $sub.ref(0, 310291);

procedure ldv_usb_fill_bulk_urb_14($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.11, $M.10;



implementation ldv_usb_fill_bulk_urb_14($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} {:cexpr "ldv_usb_fill_bulk_urb_14:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 449} {:cexpr "ldv_usb_fill_bulk_urb_14:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} ldv_fill_bulk_urb($p0, $p5);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    return;
}



const __kfifo_alloc: ref;

axiom __kfifo_alloc == $sub.ref(0, 311323);

procedure __kfifo_alloc($p0: ref, $i1: i32, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_alloc($p0: ref, $i1: i32, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 451} {:cexpr "__kfifo_alloc:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 452} {:cexpr "__kfifo_alloc:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 453} {:cexpr "__kfifo_alloc:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 454} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 455} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kfifo_int_must_check_helper: ref;

axiom __kfifo_int_must_check_helper == $sub.ref(0, 312355);

procedure __kfifo_int_must_check_helper($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_int_must_check_helper($i0: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} {:cexpr "__kfifo_int_must_check_helper:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_usb_alloc_urb_15: ref;

axiom ldv_usb_alloc_urb_15 == $sub.ref(0, 313387);

procedure ldv_usb_alloc_urb_15($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_usb_alloc_urb_15($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} {:cexpr "ldv_usb_alloc_urb_15:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 458} {:cexpr "ldv_usb_alloc_urb_15:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p2 := ldv_alloc_urb();
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_usb_alloc_urb_17: ref;

axiom ldv_usb_alloc_urb_17 == $sub.ref(0, 314419);

procedure ldv_usb_alloc_urb_17($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_usb_alloc_urb_17($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} {:cexpr "ldv_usb_alloc_urb_17:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 461} {:cexpr "ldv_usb_alloc_urb_17:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p2 := ldv_alloc_urb();
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_usb_fill_int_urb_18: ref;

axiom ldv_usb_fill_int_urb_18 == $sub.ref(0, 315451);

procedure ldv_usb_fill_int_urb_18($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.9, $M.8;



implementation ldv_usb_fill_int_urb_18($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} {:cexpr "ldv_usb_fill_int_urb_18:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 464} {:cexpr "ldv_usb_fill_int_urb_18:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 465} {:cexpr "ldv_usb_fill_int_urb_18:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} ldv_fill_int_urb($p0, $p5);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_19: ref;

axiom ldv_usb_alloc_urb_19 == $sub.ref(0, 316483);

procedure ldv_usb_alloc_urb_19($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_usb_alloc_urb_19($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} {:cexpr "ldv_usb_alloc_urb_19:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 468} {:cexpr "ldv_usb_alloc_urb_19:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $p2 := ldv_alloc_urb();
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_usb_set_intfdata_21: ref;

axiom ldv_usb_set_intfdata_21 == $sub.ref(0, 317515);

procedure ldv_usb_set_intfdata_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_usb_set_intfdata_21($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} ldv_usb_set_intfdata($p1);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    return;
}



const allocate_minors: ref;

axiom allocate_minors == $sub.ref(0, 318547);

procedure allocate_minors($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation allocate_minors($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i23: i1;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i8;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i24: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i8;
  var $i42: i8;
  var $i44: i1;
  var $i46: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i45: i32;
  var $i43: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 472} {:cexpr "allocate_minors:arg:num_ports"} boogie_si_record_i32($i1);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.51);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.22);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.52);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.5, $p8);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 153);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p8, $i11);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 0);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 474} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} mutex_lock_nested(table_lock, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i1, 0);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(24, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i41 := $and.i8($i40, $sub.i8(0, 9));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i42 := $or.i8($i41, 8);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i42);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} mutex_unlock(table_lock);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb7;

  $bb7:
    call $i25, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $p36, $i37, $i38, $i24 := allocate_minors_loop_$bb7($p0, $i1, $i25, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $p36, $i37, $i38, $i24);
    goto $bb7_last;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i25, 8));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i30 := idr_alloc(serial_minors, $p29, 0, 0, 208);
    call {:si_unique_call 478} {:cexpr "minor"} boogie_si_record_i32($i30);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i24, $i30;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p28, $mul.ref(0, 2992)), $mul.ref(1136, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i30);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i24);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p28, $mul.ref(0, 2992)), $mul.ref(1140, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i24, 1);
    call {:si_unique_call 479} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i32($i1, $i37);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i37;
    goto $bb13_dummy;

  $bb9:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i44 := $ult.i32(0, $i32);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} mutex_unlock(table_lock);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i43 := $i33;
    goto $bb16;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb20;

  $bb20:
    call $i46, $p48, $p49, $p50, $i51, $i52, $i53, $i45 := allocate_minors_loop_$bb20($p0, $i32, $i46, $p48, $p49, $p50, $i51, $i52, $i53, $i45);
    goto $bb20_last;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i46, 8));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 2992)), $mul.ref(1136, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} idr_remove(serial_minors, $i51);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i45, 1);
    call {:si_unique_call 482} {:cexpr "j"} boogie_si_record_i32($i52);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i53 := $ult.i32($i52, $i32);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i53 == 1);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i45 := $i52;
    goto $bb22_dummy;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_44 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p21, .str.52, .str.51, $i1);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2505;

  $bb13_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2471;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 319579);

procedure dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 484} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 485} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 320611);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(312, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(16, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p9 := kobject_name($p8);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(312, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const device_enable_async_suspend: ref;

axiom device_enable_async_suspend == $sub.ref(0, 321643);

procedure device_enable_async_suspend($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation device_enable_async_suspend($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i8;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(520, 1)), $mul.ref(5, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(520, 1)), $mul.ref(4, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, $sub.i8(0, 3));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i9 := $or.i8($i8, 2);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i9);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const device_add: ref;

axiom device_add == $sub.ref(0, 322675);

procedure device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 487} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 488} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_serial_console_init: ref;

axiom usb_serial_console_init == $sub.ref(0, 323707);

procedure usb_serial_console_init($i0: i32);
  free requires assertsPassed;



implementation usb_serial_console_init($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} {:cexpr "usb_serial_console_init:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    return;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 324739);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const idr_alloc: ref;

axiom idr_alloc == $sub.ref(0, 325771);

procedure idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 490} {:cexpr "idr_alloc:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 491} {:cexpr "idr_alloc:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 492} {:cexpr "idr_alloc:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 1} true;
    call {:si_unique_call 493} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 494} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_usb_set_intfdata: ref;

axiom ldv_usb_set_intfdata == $sub.ref(0, 326803);

procedure ldv_usb_set_intfdata($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_usb_set_intfdata($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $M.24 := $p0;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    return;
}



const ldv_alloc_urb: ref;

axiom ldv_alloc_urb == $sub.ref(0, 327835);

procedure ldv_alloc_urb() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_alloc_urb() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p0 := ldv_undef_ptr();
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i2 := ldv_undef_int();
    call {:si_unique_call 497} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $M.7;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $M.7 := $p0;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 328867);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 1} true;
    call {:si_unique_call 498} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 499} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_fill_int_urb: ref;

axiom ldv_fill_int_urb == $sub.ref(0, 329899);

procedure ldv_fill_int_urb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.9, $M.8;



implementation ldv_fill_int_urb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p2 := $M.7;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $M.9 := $p1;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i6 := $M.8;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.8 := $i7;
    call {:si_unique_call 500} {:cexpr "completeFnIntCounter"} boogie_si_record_i32($i7);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_fill_bulk_urb: ref;

axiom ldv_fill_bulk_urb == $sub.ref(0, 330931);

procedure ldv_fill_bulk_urb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.10;



implementation ldv_fill_bulk_urb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p2 := $M.7;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.11 := $p1;
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i6 := $M.10;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.10 := $i7;
    call {:si_unique_call 501} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32($i7);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 331963);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 503} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $p2 := ldv_malloc($i0);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 332995);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 505} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 1} true;
    call {:si_unique_call 506} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 507} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 508} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $p4 := malloc($i0);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 1} true;
    call {:si_unique_call 510} __VERIFIER_assume($i7);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 334027);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 511} $r := $malloc($i0);
    return;
}



const ldv_usb_free_urb_8: ref;

axiom ldv_usb_free_urb_8 == $sub.ref(0, 335059);

procedure ldv_usb_free_urb_8($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_usb_free_urb_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} ldv_free_urb($p0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_9: ref;

axiom ldv_usb_free_urb_9 == $sub.ref(0, 336091);

procedure ldv_usb_free_urb_9($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_usb_free_urb_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} ldv_free_urb($p0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_10: ref;

axiom ldv_usb_free_urb_10 == $sub.ref(0, 337123);

procedure ldv_usb_free_urb_10($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_usb_free_urb_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} ldv_free_urb($p0);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_11: ref;

axiom ldv_usb_free_urb_11 == $sub.ref(0, 338155);

procedure ldv_usb_free_urb_11($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_usb_free_urb_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} ldv_free_urb($p0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    return;
}



const __kfifo_free: ref;

axiom __kfifo_free == $sub.ref(0, 339187);

procedure __kfifo_free($p0: ref);
  free requires assertsPassed;



implementation __kfifo_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_destroy: ref;

axiom tty_port_destroy == $sub.ref(0, 340219);

procedure tty_port_destroy($p0: ref);
  free requires assertsPassed;



implementation tty_port_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_urb: ref;

axiom ldv_free_urb == $sub.ref(0, 341251);

procedure ldv_free_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_free_urb($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p1 := $M.7;
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p5 := $M.7;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $M.7 := $0.ref;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const tty_port_tty_wakeup: ref;

axiom tty_port_tty_wakeup == $sub.ref(0, 342283);

procedure tty_port_tty_wakeup($p0: ref);
  free requires assertsPassed;



implementation tty_port_tty_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 343315);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 344347);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 345379);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 346411);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_match_id: ref;

axiom usb_match_id == $sub.ref(0, 347443);

procedure usb_match_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_match_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $p2 := external_alloc();
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const match_dynamic_id: ref;

axiom match_dynamic_id == $sub.ref(0, 348475);

procedure match_dynamic_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation match_dynamic_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p15: ref;
  var $p32: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} spin_lock($p3);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.16, $p6);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i10, $i13);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} spin_unlock($p32);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p23 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p15 := $p7;
    goto $bb4;

  $bb4:
    call $p16, $i17, $i18, $p19, $p25, $p26, $p27, $p28, $i29, $i30, $p15 := match_dynamic_id_loop_$bb4($p0, $i13, $p16, $i17, $i18, $p19, $p25, $p26, $p27, $p28, $i29, $i30, $p15);
    goto $bb4_last;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i17 := usb_match_one_id($p0, $p16);
    call {:si_unique_call 519} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p19 := $p15;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, $i13);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p26;
    goto $bb10_dummy;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} spin_unlock($p21);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2705;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 349507);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} _raw_spin_lock($p2);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    return;
}



const usb_match_one_id: ref;

axiom usb_match_one_id == $sub.ref(0, 350539);

procedure usb_match_one_id($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_match_one_id($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 1} true;
    call {:si_unique_call 523} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 351571);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} _raw_spin_unlock($p2);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 352603);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 353635);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_get_dev_12: ref;

axiom ldv_usb_get_dev_12 == $sub.ref(0, 354667);

procedure ldv_usb_get_dev_12($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.26, $M.25;



implementation ldv_usb_get_dev_12($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $p1 := ldv_get_dev($p0);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 355699);

procedure usb_get_intf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p1 := external_alloc();
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 356731);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} atomic_set($p1, 1);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 357763);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 358795);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    return;
}



const ldv_get_dev: ref;

axiom ldv_get_dev == $sub.ref(0, 359827);

procedure ldv_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.26, $M.25;



implementation ldv_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p1 := $M.25;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p8 := $M.25;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $M.25;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i12 := $M.26;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $M.26 := $i13;
    call {:si_unique_call 533} {:cexpr "dev_counter"} boogie_si_record_i32($i13);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i4 := ldv_undef_int();
    call {:si_unique_call 531} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i6 := $M.26;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $M.26 := $i7;
    call {:si_unique_call 532} {:cexpr "dev_counter"} boogie_si_record_i32($i7);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.25 := $p0;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_interface_to_usbdev: ref;

axiom ldv_interface_to_usbdev == $sub.ref(0, 360859);

procedure ldv_interface_to_usbdev() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_interface_to_usbdev() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p0 := ldv_undef_ptr();
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} ldv_stop___2();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_install: ref;

axiom serial_install == $sub.ref(0, 361891);

procedure serial_install($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.26, $M.25, assertsPassed, $CurrAddr, $M.7, $M.8, $M.10;



implementation serial_install($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i25: i32;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $i20: i32;
  var $p49: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1736)), $mul.ref(32, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 536} {:cexpr "idx"} boogie_si_record_i32($i3);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p4 := usb_serial_port_get_by_minor($i3);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i15 := try_module_get($p14);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 539} {:cexpr "tmp"} boogie_si_record_i8($i16);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i23 := ldv_usb_autopm_get_interface_5($p22);
    call {:si_unique_call 543} {:cexpr "retval"} boogie_si_record_i32($i23);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(8, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i27 := tty_port_install($p26, $p0, $p1);
    call {:si_unique_call 546} {:cexpr "retval"} boogie_si_record_i32($i27);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} mutex_unlock($p29);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 552)), $mul.ref(496, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p4);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 552)), $mul.ref(496, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 549} devirtbounce.11($p39, $p1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} ldv_usb_autopm_put_interface_6($p43);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i25 := $i27;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} module_put($p48);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} usb_serial_put($p9);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} mutex_unlock($p49);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb14;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 19);
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const serial_open: ref;

axiom serial_open == $sub.ref(0, 362923);

procedure serial_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.83);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.22);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.50);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 305);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 552} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(8, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i26 := tty_port_open($p25, $p0, $p1);
    call {:si_unique_call 555} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_45 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.50, .str.83);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_close: ref;

axiom serial_close == $sub.ref(0, 363955);

procedure serial_close($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_close($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.91);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.22);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.50);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 343);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 558} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(8, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} tty_port_close($p25, $p0, $p1);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} vslice_dummy_var_46 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.50, .str.91);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_cleanup: ref;

axiom serial_cleanup == $sub.ref(0, 364987);

procedure serial_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.14, $CurrAddr, assertsPassed, $M.24, $M.26, $M.25, $M.7, $M.8, $M.10;



implementation serial_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.90);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.22);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.50);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 363);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 563} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(696, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p31, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} mutex_lock_nested($p37, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p31);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(24, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p31, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} mutex_unlock($p45);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} usb_serial_put($p31);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} module_put($p36);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p31, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} ldv_usb_autopm_put_interface_7($p44);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} vslice_dummy_var_47 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.50, .str.90);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_write: ref;

axiom serial_write == $sub.ref(0, 366019);

procedure serial_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i14: i32;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 571} {:cexpr "serial_write:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1992)), $mul.ref(24, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, .str.88);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.22);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str.89);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.5, $p20);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 394);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p20, $i23);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p24, 0);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 573} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 552)), $mul.ref(368, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 575} $i40 := devirtbounce.12($p39, $p0, $p6, $p1, $i2);
    call {:si_unique_call 576} {:cexpr "retval"} boogie_si_record_i32($i40);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i40;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i14 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i42 := usb_translate_errors($i40);
    call {:si_unique_call 578} {:cexpr "retval"} boogie_si_record_i32($i42);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb10;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_48 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p32, .str.89, .str.88, $i2);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;
}



const serial_write_room: ref;

axiom serial_write_room == $sub.ref(0, 367051);

procedure serial_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.14, $M.13, $M.8, $M.10, $M.15, assertsPassed, $M.24, $M.26, $M.25, $M.7;



implementation serial_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.92);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.22);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.50);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 407);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 581} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 552)), $mul.ref(376, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 583} $i30 := devirtbounce.13($p29, $p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 584} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_49 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.50, .str.92);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_chars_in_buffer: ref;

axiom serial_chars_in_buffer == $sub.ref(0, 368083);

procedure serial_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.14, $M.13, $M.8, $M.10, $M.15, assertsPassed, $M.24, $M.26, $M.25, $M.7;



implementation serial_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i31: i32;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.94);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str.22);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.50);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.5, $p12);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 417);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p12, $i15);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 587} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p6);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(24, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 552)), $mul.ref(408, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    call {:si_unique_call 589} $i36 := devirtbounce.13($p35, $p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 590} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i31 := $i36;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} vslice_dummy_var_50 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p24, .str.50, .str.94);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_ioctl: ref;

axiom serial_ioctl == $sub.ref(0, 369115);

procedure serial_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i43: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 592} {:cexpr "serial_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 593} {:cexpr "serial_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.85);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str.22);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.86);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.5, $p12);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 467);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p12, $i15);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 595} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, 21596);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 552)), $mul.ref(384, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 515);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i43 := $i59;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb12:
    assume $i51 == 1;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 552)), $mul.ref(384, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    call {:si_unique_call 599} $i58 := devirtbounce.15($p57, $p0, $i1, $i2);
    call {:si_unique_call 600} {:cexpr "retval"} boogie_si_record_i32($i58);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb14;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 552)), $mul.ref(464, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 515);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb10;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 552)), $mul.ref(464, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    call {:si_unique_call 597} $i41 := devirtbounce.14($p40, $p0, $i2);
    call {:si_unique_call 598} {:cexpr "retval"} boogie_si_record_i32($i41);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb9;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} vslice_dummy_var_51 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p24, .str.86, .str.85, $i1);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_set_termios: ref;

axiom serial_set_termios == $sub.ref(0, 370147);

procedure serial_set_termios($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_set_termios($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.84);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.22);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.50);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 486);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 603} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 552)), $mul.ref(392, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1104, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} tty_termios_copy_hw($p39, $p1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 552)), $mul.ref(392, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 605} devirtbounce.16($p38, $p0, $p5, $p1);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} vslice_dummy_var_52 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.50, .str.84);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_throttle: ref;

axiom serial_throttle == $sub.ref(0, 371179);

procedure serial_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.14, $M.24, $M.26, $M.25, $M.7, assertsPassed, $M.8, $M.10;



implementation serial_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.79);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.22);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.50);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 445);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 609} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 552)), $mul.ref(432, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 552)), $mul.ref(432, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 611} devirtbounce.11($p37, $p0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} vslice_dummy_var_53 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.50, .str.79);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_unthrottle: ref;

axiom serial_unthrottle == $sub.ref(0, 372211);

procedure serial_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.14, $M.24, $M.26, $M.25, $M.7, assertsPassed, $M.8, $M.10;



implementation serial_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.82);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.22);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.50);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 455);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 614} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 552)), $mul.ref(440, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 552)), $mul.ref(440, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 616} devirtbounce.11($p37, $p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} vslice_dummy_var_54 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.50, .str.82);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_hangup: ref;

axiom serial_hangup == $sub.ref(0, 373243);

procedure serial_hangup($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_hangup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.81);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.22);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.50);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 334);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 619} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(8, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} tty_port_hangup($p24);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} vslice_dummy_var_55 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.50, .str.81);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_break: ref;

axiom serial_break == $sub.ref(0, 374275);

procedure serial_break($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_break($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 623} {:cexpr "serial_break:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.93);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.22);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.50);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 498);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 625} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 552)), $mul.ref(400, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 552)), $mul.ref(400, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 627} devirtbounce.17($p38, $p0, $i1);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} vslice_dummy_var_56 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.50, .str.93);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_wait_until_sent: ref;

axiom serial_wait_until_sent == $sub.ref(0, 375307);

procedure serial_wait_until_sent($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_wait_until_sent($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 629} {:cexpr "serial_wait_until_sent:arg:timeout"} boogie_si_record_i32($i1);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.96);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.22);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.50);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.5, $p13);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 430);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p13, $i16);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 0);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 631} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 552)), $mul.ref(416, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} mutex_lock_nested($p35, 0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p7);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(24, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} mutex_unlock($p48);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 552)), $mul.ref(416, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i1);
    call {:si_unique_call 634} devirtbounce.18($p46, $p0, $i47);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vslice_dummy_var_57 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p25, .str.50, .str.96);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_tiocmget: ref;

axiom serial_tiocmget == $sub.ref(0, 376339);

procedure serial_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.14, $M.13, $M.8, $M.10, $M.15, assertsPassed, $M.24, $M.26, $M.25, $M.7;



implementation serial_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.95);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.22);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.50);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 558);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 638} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 552)), $mul.ref(448, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 552)), $mul.ref(448, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 640} $i38 := devirtbounce.13($p37, $p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 641} {:cexpr "tmp___0"} boogie_si_record_i32($i38);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb6;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_58 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.50, .str.95);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_tiocmset: ref;

axiom serial_tiocmset == $sub.ref(0, 377371);

procedure serial_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation serial_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 643} {:cexpr "serial_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 644} {:cexpr "serial_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.87);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str.22);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.50);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.5, $p12);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 570);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p12, $i15);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 646} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 552)), $mul.ref(456, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 552)), $mul.ref(456, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 648} $i40 := devirtbounce.19($p39, $p0, $i1, $i2);
    call {:si_unique_call 649} {:cexpr "tmp___0"} boogie_si_record_i32($i40);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} vslice_dummy_var_59 := __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p24, .str.50, .str.87);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const serial_get_icount: ref;

axiom serial_get_icount == $sub.ref(0, 378403);

procedure serial_get_icount($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.17, $M.18, $M.19, $M.20, $M.0, $CurrAddr, $M.14, $M.13, $M.7, $M.11, $M.10, $M.9, $M.8, $M.24, $M.26, $M.25, $M.15, assertsPassed;



implementation serial_get_icount($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.80);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.22);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.50);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 582);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 652} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 552)), $mul.ref(472, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 552)), $mul.ref(472, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 654} $i39 := devirtbounce.20($p38, $p0, $p1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 655} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb6;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_60 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.50, .str.80);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_port_hangup: ref;

axiom tty_port_hangup == $sub.ref(0, 379435);

procedure tty_port_hangup($p0: ref);
  free requires assertsPassed;



implementation tty_port_hangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    return;
}



const tty_termios_copy_hw: ref;

axiom tty_termios_copy_hw == $sub.ref(0, 380467);

procedure tty_termios_copy_hw($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_termios_copy_hw($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_autopm_put_interface_7: ref;

axiom ldv_usb_autopm_put_interface_7 == $sub.ref(0, 381499);

procedure ldv_usb_autopm_put_interface_7($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_usb_autopm_put_interface_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} ldv_put_interface();
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const tty_port_close: ref;

axiom tty_port_close == $sub.ref(0, 382531);

procedure tty_port_close($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation tty_port_close($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_open: ref;

axiom tty_port_open == $sub.ref(0, 383563);

procedure tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 1} true;
    call {:si_unique_call 657} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 658} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_port_get_by_minor: ref;

axiom usb_serial_port_get_by_minor == $sub.ref(0, 384595);

procedure usb_serial_port_get_by_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_serial_port_get_by_minor($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p16: ref;
  var $p15: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} {:cexpr "usb_serial_port_get_by_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} mutex_lock_nested(table_lock, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p1 := idr_find(serial_minors, $i0);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} mutex_lock_nested($p8, 0);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p7);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(24, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} kref_get($p16);
    assume {:verifier.code 0} true;
    $p15 := $p1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p5 := $p15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} mutex_unlock(table_lock);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} mutex_unlock($p14);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;
}



const ldv_usb_autopm_get_interface_5: ref;

axiom ldv_usb_autopm_get_interface_5 == $sub.ref(0, 385627);

procedure ldv_usb_autopm_get_interface_5($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14;



implementation ldv_usb_autopm_get_interface_5($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 667} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_port_install: ref;

axiom tty_port_install == $sub.ref(0, 386659);

procedure tty_port_install($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_install($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 668} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 669} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_autopm_put_interface_6: ref;

axiom ldv_usb_autopm_put_interface_6 == $sub.ref(0, 387691);

procedure ldv_usb_autopm_put_interface_6($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_usb_autopm_put_interface_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} ldv_put_interface();
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const idr_find: ref;

axiom idr_find == $sub.ref(0, 388723);

procedure idr_find($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_find($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $p26: ref;
  var $p25: ref;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "idr_find:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.27, $p2);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i4 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 673} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p3);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p26 := idr_find_slowpath($p0, $i1);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p25 := $p26;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i1, $sub.i32(0, 256));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2112)), $mul.ref(0, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, $i12);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 2112)), $mul.ref(40, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i1);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 255);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p15, $mul.ref($i17, 8));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i20 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 676} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p25 := $p19;
    goto $bb18;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($u0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_62 := rcu_read_lock_held();
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb14;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($u0);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vslice_dummy_var_61 := rcu_read_lock_held();
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb3;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 389755);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_63: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 680} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 681} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 683} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_63 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 684} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 686} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 689} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} warn_slowpath_null(.str.20, 47);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 390787);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 692} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 693} $i3 := devirtbounce.21(0, $p2, $i0, $p2);
    call {:si_unique_call 694} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 391819);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    return;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 392851);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 1} true;
    call {:si_unique_call 696} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 697} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_read_lock_held: ref;

axiom rcu_read_lock_held == $sub.ref(0, 393883);

procedure rcu_read_lock_held() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_read_lock_held() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 699} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i3 := rcu_is_cpu_idle();
    call {:si_unique_call 701} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i5 := rcu_lockdep_current_cpu_online();
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 703} {:cexpr "tmp___1"} boogie_si_record_i8($i6);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i10 := lock_is_held(rcu_lock_map);
    call {:si_unique_call 705} {:cexpr "tmp___3"} boogie_si_record_i32($i10);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i2 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb10;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i2 := 1;
    goto $bb3;
}



const idr_find_slowpath: ref;

axiom idr_find_slowpath == $sub.ref(0, 394915);

procedure idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} {:cexpr "idr_find_slowpath:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p2 := external_alloc();
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rcu_is_cpu_idle: ref;

axiom rcu_is_cpu_idle == $sub.ref(0, 395947);

procedure rcu_is_cpu_idle() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_is_cpu_idle() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 1} true;
    call {:si_unique_call 708} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 709} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_lockdep_current_cpu_online: ref;

axiom rcu_lockdep_current_cpu_online == $sub.ref(0, 396979);

procedure rcu_lockdep_current_cpu_online() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_lockdep_current_cpu_online() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 711} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lock_is_held: ref;

axiom lock_is_held == $sub.ref(0, 398011);

procedure lock_is_held($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lock_is_held($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 1} true;
    call {:si_unique_call 712} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 399043);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 714} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 715} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 1} true;
    call {:si_unique_call 716} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 717} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 400075);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 718} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 719} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 720} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const serial_proc_open: ref;

axiom serial_proc_open == $sub.ref(0, 401107);

procedure serial_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation serial_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i2 := single_open($p1, serial_proc_show, $0.ref);
    call {:si_unique_call 722} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 402139);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 1} true;
    call {:si_unique_call 723} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const serial_proc_show: ref;

axiom serial_proc_show == $sub.ref(0, 403171);

procedure serial_proc_show($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $M.7, assertsPassed, $M.8, $M.10;



implementation serial_proc_show($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i4: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} vslice_dummy_var_64 := seq_puts($p0, .str.97);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb1;

  $bb1:
    call $p5, $i6, $i7, $p8, $p9, $p11, $p12, $p14, $p15, $i16, $i17, $p18, $p19, $p21, $p22, $i23, $i24, $p25, $p27, $p29, $p30, $p31, $p32, $p34, $p35, $p37, $i38, $i39, $p40, $p41, $p43, $i44, $i45, $p47, $i48, $i49, $p51, $i52, $i53, $p55, $p56, $p57, $p59, $p62, $i63, $i64, $i4, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73 := serial_proc_show_loop_$bb1($p0, $p2, $p5, $i6, $i7, $p8, $p9, $p11, $p12, $p14, $p15, $i16, $i17, $p18, $p19, $p21, $p22, $i23, $i24, $p25, $p27, $p29, $p30, $p31, $p32, $p34, $p35, $p37, $i38, $i39, $p40, $p41, $p43, $i44, $i45, $p47, $i48, $i49, $p51, $i52, $i53, $p55, $p56, $p57, $p59, $p62, $i63, $i64, $i4, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73);
    goto $bb1_last;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p5 := usb_serial_port_get_by_minor($i4);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_65 := seq_printf.ref.ref.i32($p0, .str.98, $i4);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vslice_dummy_var_67 := seq_printf.ref.ref.ref($p0, .str.101, $p32);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(8, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(10, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} vslice_dummy_var_68 := seq_printf.ref.ref.i32.i32($p0, .str.102, $i39, $i45);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vslice_dummy_var_69 := seq_printf.ref.ref.i32($p0, .str.103, $i49);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 2992)), $mul.ref(1140, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} vslice_dummy_var_70 := seq_printf.ref.ref.i32($p0, .str.104, $i53);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p2);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_71 := usb_make_path($p56, $p57, 40);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p2);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} vslice_dummy_var_72 := seq_printf.ref.ref.ref($p0, .str.105, $p59);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} vslice_dummy_var_73 := seq_putc($p0, 10);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} usb_serial_put($p9);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} mutex_unlock($p62);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i4, 1);
    call {:si_unique_call 728} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i64 := $sle.i32($i63, 511);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i63;
    goto $bb13_dummy;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p27 := .str.100;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} vslice_dummy_var_66 := seq_printf.ref.ref.ref($p0, .str.99, $p27);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref(0, 848)), $mul.ref(24, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p27 := $p25;
    goto $bb11;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3880;
}



const single_open: ref;

axiom single_open == $sub.ref(0, 404203);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 1} true;
    call {:si_unique_call 740} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 741} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 405235);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_puts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 742} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 743} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 406267);

procedure seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 1} true;
    call {:si_unique_call 744} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 745} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 746} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 747} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 1} true;
    call {:si_unique_call 748} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 749} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 407299);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(64, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(4, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.106, $p6, $p8);
    call {:si_unique_call 752} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const seq_putc: ref;

axiom seq_putc == $sub.ref(0, 408331);

procedure seq_putc($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation seq_putc($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 753} {:cexpr "seq_putc:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 754} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 755} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 409363);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const new_id_show: ref;

axiom new_id_show == $sub.ref(0, 410395);

procedure new_id_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation new_id_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(168, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i5 := usb_show_dynids($p4, $p1);
    call {:si_unique_call 757} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const new_id_store: ref;

axiom new_id_store == $sub.ref(0, 411427);

procedure new_id_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation new_id_store($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} {:cexpr "new_id_store:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(168, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i6 := usb_store_new_id($p5, $p0, $p1, $i2);
    call {:si_unique_call 760} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i7 := $sge.i64($i6, 0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(160, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(160, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 304)), $mul.ref(80, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 40), 552)), $mul.ref(160, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i19 := usb_store_new_id($p14, $p18, $p1, $i2);
    call {:si_unique_call 762} {:cexpr "retval"} boogie_si_record_i64($i19);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb6;
}



const usb_store_new_id: ref;

axiom usb_store_new_id == $sub.ref(0, 412459);

procedure usb_store_new_id($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation usb_store_new_id($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 763} {:cexpr "usb_store_new_id:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 764} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 765} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usb_show_dynids: ref;

axiom usb_show_dynids == $sub.ref(0, 413491);

procedure usb_show_dynids($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation usb_show_dynids($p0: ref, $p1: ref) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 766} $i2 := __VERIFIER_nondet_long();
    call {:si_unique_call 767} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i2);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const port_number_show: ref;

axiom port_number_show == $sub.ref(0, 414523);

procedure port_number_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation port_number_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1140, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i8 := sprintf.ref.ref.i32($p2, .str.126, $i7);
    call {:si_unique_call 769} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 415555);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 416587);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 1} true;
    call {:si_unique_call 770} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 771} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 417619);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 418651);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 419683);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const usb_serial_generic_write_start: ref;

axiom usb_serial_generic_write_start == $sub.ref(0, 420715);

procedure usb_serial_generic_write_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.10, $CurrAddr, $M.14, $M.24, $M.26, $M.25, $M.7, assertsPassed;



implementation usb_serial_generic_write_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $i11: i64;
  var $p18: ref;
  var $p19: ref;
  var $i12: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $i78: i1;
  var $p79: ref;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $i4: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1416, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $i2 := test_and_set_bit_lock(0, $p1);
    call {:si_unique_call 777} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $p6 := spinlock_check($p5);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 780} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1352, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    assume {:branchcond $i10} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i12 := $i7;
    goto $bb8;

  $bb8:
    call $p13, $i14, $i15, $i16, $i17, $i12, $p21, $p22, $p23, $i24, $p25, $p26, $p27, $i28, $i29, $i30, $i31, $p34, $i35, $i36, $p37, $i38, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $p61, $i62, $i63, $p64, $p65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $p92, $p93, $i94, $i95, $i96, $i97 := usb_serial_generic_write_start_loop_$bb8($p0, $p5, $p8, $p13, $i14, $i15, $i16, $i17, $i12, $p21, $p22, $p23, $i24, $p25, $p26, $p27, $i28, $i29, $i30, $i31, $p34, $i35, $i36, $p37, $i38, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $p61, $i62, $i63, $p64, $p65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $p92, $p93, $i94, $i95, $i96, $i97);
    goto $bb8_last;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i24, $i28);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i31 := $i12;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1352, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i35 := find_first_bit($p34, 2);
    call {:si_unique_call 789} {:cexpr "tmp___1"} boogie_si_record_i64($i35);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    call {:si_unique_call 790} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} spin_unlock_irqrestore($p37, $i12);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i36);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref($i38, 8));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 552)), $mul.ref(544, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1280, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    call {:si_unique_call 792} $i53 := devirtbounce.22($p47, $p0, $p49, $i52);
    call {:si_unique_call 793} {:cexpr "count"} boogie_si_record_i32($i53);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} usb_serial_debug_data($p55, .str.114, $i53, $p57);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $p59 := spinlock_check($p58);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i60 := _raw_spin_lock_irqsave($p59);
    call {:si_unique_call 797} {:cexpr "flags"} boogie_si_record_i64($i60);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1408, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, $i53);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1408, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} spin_unlock_irqrestore($p65, $i60);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i36);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1352, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} clear_bit($i66, $p67);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i68 := ldv_usb_submit_urb_41($p41, 32);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 801} {:cexpr "result"} boogie_si_record_i32($i68);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i70, $i71, $i72 := $i36, $i53, $i68;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p92 := current_thread_info();
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i94);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i96 := $and.i64($i95, 67043328);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb25;

  $bb25:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1416, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} clear_bit_unlock(0, $p98);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb9:
    assume $i97 == 1;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p13 := spinlock_check($p5);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 785} {:cexpr "flags"} boogie_si_record_i64($i14);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p8);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i17 := $i14;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb11_dummy;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1416, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} clear_bit_unlock(0, $p18);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} spin_unlock_irqrestore($p19, $i11);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb16:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(696, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i77 == 1);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1(1);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} vslice_dummy_var_74 := dev_err.ref.ref.ref.i32($p79, .str.115, .str.114, $i72);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i70);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1352, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} set_bit($i81, $p82);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p84 := spinlock_check($p83);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i85 := _raw_spin_lock_irqsave($p84);
    call {:si_unique_call 806} {:cexpr "flags"} boogie_si_record_i64($i85);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1408, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32($i87, $i71);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1408, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i88);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} spin_unlock_irqrestore($p90, $i85);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1416, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} clear_bit_unlock(0, $p91);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i4 := $i72;
    goto $bb3;

  $bb21:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb19;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1416, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} clear_bit_unlock(0, $p32);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} spin_unlock_irqrestore($p33, $i31);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4078;
}



const test_and_set_bit_lock: ref;

axiom test_and_set_bit_lock == $sub.ref(0, 421747);

procedure test_and_set_bit_lock($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_set_bit_lock($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} {:cexpr "test_and_set_bit_lock:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i2 := test_and_set_bit($i0, $p1);
    call {:si_unique_call 813} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const clear_bit_unlock: ref;

axiom clear_bit_unlock == $sub.ref(0, 422779);

procedure clear_bit_unlock($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit_unlock($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} {:cexpr "clear_bit_unlock:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 815} devirtbounce.23(0);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} clear_bit($i0, $p1);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    return;
}



const find_first_bit: ref;

axiom find_first_bit == $sub.ref(0, 423811);

procedure find_first_bit($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_first_bit($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 817} {:cexpr "find_first_bit:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 818} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 819} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_serial_debug_data: ref;

axiom usb_serial_debug_data == $sub.ref(0, 424843);

procedure usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 821} {:cexpr "usb_serial_debug_data:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.119);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.120);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.121);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 366);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 823} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vslice_dummy_var_75 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p4, $p0, .str.121, $p1, $i2, $i2, $p3);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 425875);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 826} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_41: ref;

axiom ldv_usb_submit_urb_41 == $sub.ref(0, 426907);

procedure ldv_usb_submit_urb_41($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed;



implementation ldv_usb_submit_urb_41($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} {:cexpr "ldv_usb_submit_urb_41:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 829} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 427939);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $i0 := devirtbounce.24(0, kernel_stack);
    call {:si_unique_call 831} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 8152);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 428971);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 833} $i2 := devirtbounce(0, $p1, $i0, $p1);
    call {:si_unique_call 834} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 430003);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 431035);

procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 835} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 836} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 837} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 838} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 432067);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 839} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 840} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_driver_5: ref;

axiom ldv_usb_driver_5 == $sub.ref(0, 433099);

procedure ldv_usb_driver_5();
  free requires assertsPassed;
  modifies $M.28, $M.0, $CurrAddr;



implementation ldv_usb_driver_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p0 := ldv_zalloc(1520);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_8: ref;

axiom ldv_file_operations_8 == $sub.ref(0, 434131);

procedure ldv_file_operations_8();
  free requires assertsPassed;
  modifies $M.29, $M.30, $M.0, $CurrAddr;



implementation ldv_file_operations_8()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p0 := ldv_zalloc(1032);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $M.29 := $p0;
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p2 := ldv_zalloc(360);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.30 := $p2;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_tty_operations_6: ref;

axiom ldv_initialize_tty_operations_6 == $sub.ref(0, 435163);

procedure ldv_initialize_tty_operations_6();
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.0, $CurrAddr;



implementation ldv_initialize_tty_operations_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p0 := ldv_zalloc(360);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $M.31 := $p0;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p2 := ldv_zalloc(1736);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.32 := $p2;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 436195);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.35, $M.13, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.43, $M.0, $M.44, $M.45, $M.46, $M.31, $M.32, $M.29, $M.30, $M.17, $M.18, $M.19, $M.20, $M.47, $M.23, $M.48, $M.49, $M.51, $M.28, $M.15, $M.50, $M.62, $M.59, $M.63, $M.64, $M.60, $M.58, $M.126, $M.16, $M.27, $M.11, $M.9, $M.54, $M.56, $M.12, $M.53, $M.55, $M.52, $M.10, $M.8, $M.26, $M.25, $M.7, $M.24, $M.57, $M.14, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $CurrAddr, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $i184: i1;
  var $i185: i1;
  var $i186: i1;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i32;
  var $i214: i1;
  var $p215: ref;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $i219: i32;
  var $i220: i32;
  var $i221: i32;
  var $i222: i1;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i1;
  var $i230: i1;
  var $i231: i1;
  var $i232: i1;
  var $i233: i1;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $p237: ref;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $p252: ref;
  var $i253: i32;
  var $i254: i32;
  var $i255: i1;
  var $i256: i32;
  var $i257: i32;
  var $i258: i32;
  var $i259: i1;
  var $i260: i32;
  var $i261: i1;
  var $i262: i32;
  var $i263: i1;
  var $i264: i32;
  var $i265: i1;
  var $i266: i1;
  var $i267: i1;
  var $i268: i32;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $i272: i32;
  var $i273: i1;
  var $i274: i32;
  var $i275: i32;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $i279: i32;
  var $i280: i1;
  var $i281: i32;
  var $i282: i1;
  var $i283: i1;
  var $i284: i1;
  var $i285: i1;
  var $i286: i1;
  var $i287: i1;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $i291: i32;
  var $i292: i32;
  var $i293: i1;
  var $i294: i32;
  var $i295: i32;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $p299: ref;
  var $i300: i32;
  var $i301: i32;
  var $i302: i32;
  var $i303: i1;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $i307: i32;
  var $i308: i32;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $i315: i32;
  var $i316: i32;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $p321: ref;
  var $i322: i32;
  var $i323: i32;
  var $i324: i32;
  var $i325: i1;
  var $i326: i32;
  var $i327: i32;
  var $i328: i1;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i64;
  var vslice_dummy_var_99: i64;

  $bb0:
    call {:si_unique_call 846} $initialize();
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 847} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 849} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 850} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    call {:si_unique_call 851} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p2 := ldv_zalloc(1);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 854} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 855} {:cexpr "tmp___1"} boogie_si_record_i32($i3);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 1} true;
    call {:si_unique_call 856} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 857} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    call {:si_unique_call 858} {:cexpr "tmp___2"} boogie_si_record_i32($i4);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $p5 := ldv_zalloc(184);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 1} true;
    call {:si_unique_call 860} $i7 := __VERIFIER_nondet_uint();
    call {:si_unique_call 861} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i7);
    call {:si_unique_call 862} {:cexpr "tmp___4"} boogie_si_record_i32($i7);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 863} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 864} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 865} {:cexpr "tmp___5"} boogie_si_record_i32($i8);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 866} $i9 := __VERIFIER_nondet_uint();
    call {:si_unique_call 867} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i9);
    call {:si_unique_call 868} {:cexpr "tmp___6"} boogie_si_record_i32($i9);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p10 := ldv_zalloc(80);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p12 := ldv_zalloc(44);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 1} true;
    call {:si_unique_call 871} $i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 872} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
    call {:si_unique_call 873} {:cexpr "tmp___9"} boogie_si_record_i32($i14);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 874} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 875} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 876} {:cexpr "tmp___10"} boogie_si_record_i32($i15);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p16 := ldv_zalloc(1736);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p18 := ldv_zalloc(8);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 1} true;
    call {:si_unique_call 879} $i20 := __VERIFIER_nondet_loff_t();
    call {:si_unique_call 880} {:cexpr "smack:ext:__VERIFIER_nondet_loff_t"} boogie_si_record_i64($i20);
    call {:si_unique_call 881} {:cexpr "tmp___13"} boogie_si_record_i64($i20);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p21 := ldv_zalloc(1);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 1} true;
    call {:si_unique_call 883} $i22 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 884} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i22);
    call {:si_unique_call 885} {:cexpr "tmp___15"} boogie_si_record_i64($i22);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 1} true;
    call {:si_unique_call 886} $i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 887} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i23);
    call {:si_unique_call 888} {:cexpr "tmp___16"} boogie_si_record_i32($i23);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $p24 := ldv_zalloc(32);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_initialize();
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p0);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.33;
    call {:si_unique_call 891} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p26, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.33 := cmdloc_dummy_var_4;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 892} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 894} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 896} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 898} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 899} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 900} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $p64, $i65, $i66, $p67, $i69, $i70, $p71, $i73, $i74, $p75, $i76, $i77, $p78, $i79, $i80, $p81, $i82, $i83, $p84, $i85, $i86, $p87, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $i97, $i98, $p99, $i100, $i101, $p102, $i104, $i105, $p106, $i108, $i109, $p110, $i112, $i113, $p114, $i116, $i117, $p118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $p136, $p137, $i138, $i139, $p140, $i142, $i143, $p144, $i146, $i147, $p148, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $p168, $i170, $i171, $p172, $i173, $i174, $p175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $p189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $p197, $i199, $i200, $p201, $i203, $i204, $p205, $i207, $i208, $p209, $i210, $i211, $p212, $i213, $i214, $p215, $i216, $i217, $p218, $i219, $i220, $i221, $i222, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $p236, $p237, $i239, $i240, $i241, $i242, $p243, $i245, $i246, $p247, $i249, $i250, $p251, $p252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $p290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $p299, $i300, $i301, $i302, $i303, $i304, $i305, $p306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $p314, $i315, $i316, $i317, $i318, $i319, $i320, $p321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99 := main_loop_$bb1($p0, $i1, $p2, $i3, $i4, $p6, $i7, $i8, $i9, $p11, $p13, $i14, $i15, $p17, $p19, $i20, $p21, $i22, $i23, $p25, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $p64, $i65, $i66, $p67, $i69, $i70, $p71, $i73, $i74, $p75, $i76, $i77, $p78, $i79, $i80, $p81, $i82, $i83, $p84, $i85, $i86, $p87, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $i97, $i98, $p99, $i100, $i101, $p102, $i104, $i105, $p106, $i108, $i109, $p110, $i112, $i113, $p114, $i116, $i117, $p118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $p136, $p137, $i138, $i139, $p140, $i142, $i143, $p144, $i146, $i147, $p148, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $p168, $i170, $i171, $p172, $i173, $i174, $p175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $p189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $p197, $i199, $i200, $p201, $i203, $i204, $p205, $i207, $i208, $p209, $i210, $i211, $p212, $i213, $i214, $p215, $i216, $i217, $p218, $i219, $i220, $i221, $i222, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $p236, $p237, $i239, $i240, $i241, $i242, $p243, $i245, $i246, $p247, $i249, $i250, $p251, $p252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $p290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $p299, $i300, $i301, $i302, $i303, $i304, $i305, $p306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $p314, $i315, $i316, $i317, $i318, $i319, $i320, $p321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i27, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i27, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i27, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_stop();
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb164_dummy;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i279 := $M.42;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i280 := $ne.i32($i279, 0);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb290:
    assume $i280 == 1;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1039} $i281 := __VERIFIER_nondet_int();
    call {:si_unique_call 1040} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i281);
    call {:si_unique_call 1041} {:cexpr "tmp___23"} boogie_si_record_i32($i281);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $i282 := $slt.i32($i281, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    $i283 := $slt.i32($i281, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    $i284 := $slt.i32($i281, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i281, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} ldv_stop();
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb299:
    assume $i285 == 1;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i324 := $M.42;
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i324, 3);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb337:
    assume $i325 == 1;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i326 := ldv_reset_resume_5();
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $M.51 := $i326;
    call {:si_unique_call 1059} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i326);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i327 := $M.51;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i327, 0);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb339:
    assume $i328 == 1;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1060} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb297:
    assume $i284 == 1;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i310 := $M.42;
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 3);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    assume !($i311 == 1);
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $i317 := $M.42;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 2);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    assume !($i318 == 1);
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb331:
    assume $i318 == 1;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i319 := $M.50;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, 0);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    assume !($i320 == 1);
    goto $bb333;

  $bb334:
    assume $i320 == 1;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p321 := $M.28;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} usb_serial_disconnect($p321);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1056} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i322 := $M.40;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i323 := $sub.i32($i322, 1);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $M.40 := $i323;
    call {:si_unique_call 1057} {:cexpr "ref_cnt"} boogie_si_record_i32($i323);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    goto $bb336;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb325:
    assume $i311 == 1;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i312 := $M.50;
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 0);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    assume !($i313 == 1);
    goto $bb327;

  $bb328:
    assume $i313 == 1;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p314 := $M.28;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} usb_serial_disconnect($p314);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1053} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i315 := $M.40;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i316 := $sub.i32($i315, 1);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $M.40 := $i316;
    call {:si_unique_call 1054} {:cexpr "ref_cnt"} boogie_si_record_i32($i316);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    goto $bb330;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb295:
    assume $i283 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i304 := $M.42;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 3);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb319:
    assume $i305 == 1;
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p306 := $M.28;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i307 := usb_serial_resume($p306);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $M.49 := $i307;
    call {:si_unique_call 1050} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i307);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i308 := $M.49;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 0);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb321:
    assume $i309 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1051} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto $bb323;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb293:
    assume $i282 == 1;
    assume {:verifier.code 0} true;
    $i286 := $slt.i32($i281, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i286 == 1);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i296 := $M.42;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 2);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb313:
    assume $i297 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p298 := $M.28;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.33, $p299);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i301 := usb_serial_suspend($p298, $i300);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $M.48 := $i301;
    call {:si_unique_call 1047} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i301);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i302 := $M.48;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i302, 0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb315:
    assume $i303 == 1;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1048} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb302:
    assume $i286 == 1;
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i281, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb301;

  $bb304:
    assume $i287 == 1;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i288 := $M.42;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 1);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb306:
    assume $i289 == 1;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p290 := $M.28;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i291 := usb_serial_probe($p290, $p25);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $M.47 := $i291;
    call {:si_unique_call 1043} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i291);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i292 := $M.47;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 0);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb308:
    assume $i293 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1044} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i294 := $M.40;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i295 := $add.i32($i294, 1);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.40 := $i295;
    call {:si_unique_call 1045} {:cexpr "ref_cnt"} boogie_si_record_i32($i295);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    goto $bb310;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i262 := $M.41;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb260:
    assume $i263 == 1;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1017} $i264 := __VERIFIER_nondet_int();
    call {:si_unique_call 1018} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i264);
    call {:si_unique_call 1019} {:cexpr "tmp___22"} boogie_si_record_i32($i264);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $i265 := $slt.i32($i264, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i264, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} ldv_stop();
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb265:
    assume $i266 == 1;
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i272 := $M.41;
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i272, 1);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb278:
    assume $i273 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i274 := usb_serial_init();
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $M.46 := $i274;
    call {:si_unique_call 1024} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i274);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i275 := $M.46;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $i277 := $M.46;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 0);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb283:
    assume $i278 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1027} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_initialize_driver_attribute_2();
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1029} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} ldv_initialize_bus_type_1();
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} ldv_initialize_usb_serial_driver_4();
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1034} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_initialize_tty_operations_6();
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1036} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} ldv_file_operations_8();
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb280:
    assume $i276 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1025} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} ldv_check_final_state();
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb263:
    assume $i265 == 1;
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i264, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    assume !($i267 == 1);
    goto $bb267;

  $bb268:
    assume $i267 == 1;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i268 := $M.41;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 2);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb270:
    assume $i269 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i270 := $M.40;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 0);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    assume !($i271 == 1);
    goto $bb272;

  $bb273:
    assume $i271 == 1;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} usb_serial_exit();
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1021} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    goto $bb275;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i260 := $M.39;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i260, 0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb257:
    assume $i261 == 1;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} ldv_main_exported_4();
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb259;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i27, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i258 := $M.38;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i259 := $ne.i32($i258, 0);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb254:
    assume $i259 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} ldv_main_exported_1();
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto $bb256;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i226 := $M.37;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i226, 0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb221:
    assume $i227 == 1;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1000} $i228 := __VERIFIER_nondet_int();
    call {:si_unique_call 1001} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i228);
    call {:si_unique_call 1002} {:cexpr "tmp___21"} boogie_si_record_i32($i228);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i229 := $slt.i32($i228, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    $i230 := $slt.i32($i228, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i228, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    assume !($i231 == 1);
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ldv_stop();
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb228:
    assume $i231 == 1;
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i249 := $M.37;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 1);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb245:
    assume $i250 == 1;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p251 := $M.29;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p252 := $M.30;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i253 := serial_proc_open($p251, $p252);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $M.45 := $i253;
    call {:si_unique_call 1011} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i253);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i254 := $M.45;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 0);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb247:
    assume $i255 == 1;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i256 := $M.40;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i257 := $add.i32($i256, 1);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.40 := $i257;
    call {:si_unique_call 1013} {:cexpr "ref_cnt"} boogie_si_record_i32($i257);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb226:
    assume $i230 == 1;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i245 := $M.37;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 2);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb242:
    assume $i246 == 1;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p247 := $M.30;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} vslice_dummy_var_99 := seq_lseek($p247, $i20, $i23);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1009} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb224:
    assume $i229 == 1;
    assume {:verifier.code 0} true;
    $i232 := $slt.i32($i228, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i232 == 1);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i241 := $M.37;
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 2);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb239:
    assume $i242 == 1;
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p243 := $M.30;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_98 := seq_read($p243, $p21, $i22, $p19);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb231:
    assume $i232 == 1;
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i228, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    assume !($i233 == 1);
    goto $bb230;

  $bb233:
    assume $i233 == 1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i234 := $M.37;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 2);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb235:
    assume $i235 == 1;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p236 := $M.29;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p237 := $M.30;
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} vslice_dummy_var_97 := single_release($p236, $p237);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i239 := $M.40;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i240 := $sub.i32($i239, 1);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.40 := $i240;
    call {:si_unique_call 1005} {:cexpr "ref_cnt"} boogie_si_record_i32($i240);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb3:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i27, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i27, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i224 := $M.36;
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb218:
    assume $i225 == 1;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} ldv_main_exported_2();
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i178 := $M.13;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb168:
    assume $i179 == 1;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 1} true;
    call {:si_unique_call 974} $i180 := __VERIFIER_nondet_int();
    call {:si_unique_call 975} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i180);
    call {:si_unique_call 976} {:cexpr "tmp___20"} boogie_si_record_i32($i180);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i180, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i180, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    $i183 := $slt.i32($i180, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i180, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} ldv_stop();
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb177:
    assume $i184 == 1;
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i221 := $M.13;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 1);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb212:
    assume $i222 == 1;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_96 := ldv_destruct_7();
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $M.13 := 3;
    call {:si_unique_call 997} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb175:
    assume $i183 == 1;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i216 := $M.13;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 2);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb209:
    assume $i217 == 1;
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p218 := $M.15;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} serial_port_shutdown($p218);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i219 := $M.40;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i220 := $sub.i32($i219, 1);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.40 := $i220;
    call {:si_unique_call 995} {:cexpr "ref_cnt"} boogie_si_record_i32($i220);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb211;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb173:
    assume $i182 == 1;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i207 := $M.13;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 1);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $i210 := $M.13;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 3);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i213 := $M.13;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 2);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb206:
    assume $i214 == 1;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p215 := $M.15;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} serial_port_dtr_rts($p215, $i15);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 992} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb203:
    assume $i211 == 1;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p212 := $M.15;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} serial_port_dtr_rts($p212, $i15);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $M.13 := 3;
    call {:si_unique_call 990} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb200:
    assume $i208 == 1;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p209 := $M.15;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} serial_port_dtr_rts($p209, $i15);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb171:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    $i185 := $slt.i32($i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i185 == 1);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i195 := $M.13;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 1);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i199 := $M.13;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 3);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $i203 := $M.13;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 2);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb197:
    assume $i204 == 1;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p205 := $M.15;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} vslice_dummy_var_95 := serial_port_carrier_raised($p205);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 986} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    goto $bb199;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb194:
    assume $i200 == 1;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p201 := $M.15;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} vslice_dummy_var_94 := serial_port_carrier_raised($p201);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.13 := 3;
    call {:si_unique_call 984} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb196;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb191:
    assume $i196 == 1;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p197 := $M.15;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_93 := serial_port_carrier_raised($p197);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    goto $bb193;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb180:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i180, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    assume !($i186 == 1);
    goto $bb179;

  $bb182:
    assume $i186 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i187 := $M.13;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 1);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb184:
    assume $i188 == 1;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p189 := $M.15;
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i190 := serial_port_activate($p189, $p17);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $M.44 := $i190;
    call {:si_unique_call 978} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i190);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i191 := $M.44;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 0);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb186:
    assume $i192 == 1;
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i193 := $M.40;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i193, 1);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.40 := $i194;
    call {:si_unique_call 980} {:cexpr "ref_cnt"} boogie_si_record_i32($i194);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb188;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i27, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i176 := $M.35;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb165:
    assume $i177 == 1;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} ldv_main_exported_3();
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb20:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i27, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb13;

  $bb22:
    assume $i37 == 1;
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i38 := $M.34;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb24:
    assume $i39 == 1;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 905} $i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 906} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i40);
    call {:si_unique_call 907} {:cexpr "tmp___19"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i40, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i40, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i40, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i40, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} ldv_stop();
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb37:
    assume $i46 == 1;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i170 := $M.34;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 1);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i173 := $M.34;
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 2);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb158:
    assume $i174 == 1;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p175 := $M.32;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} serial_wait_until_sent($p175, $i3);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb155:
    assume $i171 == 1;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p172 := $M.32;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} serial_wait_until_sent($p172, $i3);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb35:
    assume $i45 == 1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i162 := $M.34;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 1);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i166 := $M.34;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 2);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb152:
    assume $i167 == 1;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p168 := $M.32;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} vslice_dummy_var_92 := serial_tiocmget($p168);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb154;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb149:
    assume $i163 == 1;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p164 := $M.32;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_91 := serial_tiocmget($p164);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb151;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i44 == 1;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i154 := $M.34;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 1);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i158 := $M.34;
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 2);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb146:
    assume $i159 == 1;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p160 := $M.32;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_90 := serial_chars_in_buffer($p160);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    goto $bb148;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb143:
    assume $i155 == 1;
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p156 := $M.32;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_89 := serial_chars_in_buffer($p156);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    goto $bb145;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i40, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i47 == 1);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i146 := $M.34;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 1);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i150 := $M.34;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 2);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb140:
    assume $i151 == 1;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p152 := $M.32;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_88 := serial_break($p152, $i8);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb137:
    assume $i147 == 1;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p148 := $M.32;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_87 := serial_break($p148, $i8);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb40:
    assume $i47 == 1;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i138 := $M.34;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 1);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i142 := $M.34;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 2);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb134:
    assume $i143 == 1;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p144 := $M.32;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_86 := serial_write_room($p144);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    goto $bb136;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb131:
    assume $i139 == 1;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p140 := $M.32;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_85 := serial_write_room($p140);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb133;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i40, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i40, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i49 == 1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i134 := $M.34;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 2);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb128:
    assume $i135 == 1;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p136 := $M.32;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p137 := $M.31;
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} serial_close($p136, $p137);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb44:
    assume $i49 == 1;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i128 := $M.34;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 1);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i131 := $M.34;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 2);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb125:
    assume $i132 == 1;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p133 := $M.32;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} serial_cleanup($p133);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb127;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb122:
    assume $i129 == 1;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p130 := $M.32;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} serial_cleanup($p130);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb124;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i40, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i50 == 1);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i124 := $M.34;
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 2);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb119:
    assume $i125 == 1;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p126 := $M.32;
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vslice_dummy_var_84 := serial_write($p126, $p2, $i14);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb46:
    assume $i50 == 1;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i116 := $M.34;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 1);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i120 := $M.34;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 2);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb116:
    assume $i121 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p122 := $M.32;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_83 := serial_tiocmset($p122, $i4, $i9);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb113:
    assume $i117 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p118 := $M.32;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} vslice_dummy_var_82 := serial_tiocmset($p118, $i4, $i9);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb27:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i40, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i40, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i40, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i53 == 1);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i108 := $M.34;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 1);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i112 := $M.34;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 2);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb110:
    assume $i113 == 1;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p114 := $M.32;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_81 := serial_install($p6, $p114);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb107:
    assume $i109 == 1;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p110 := $M.32;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_80 := serial_install($p6, $p110);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    goto $bb109;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i53 == 1;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i100 := $M.34;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 1);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i104 := $M.34;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 2);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb104:
    assume $i105 == 1;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p106 := $M.32;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vslice_dummy_var_79 := serial_ioctl($p106, $i7, $i1);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb101:
    assume $i101 == 1;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p102 := $M.32;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} vslice_dummy_var_78 := serial_ioctl($p102, $i7, $i1);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb50:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i40, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i54 == 1);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i94 := $M.34;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i97 := $M.34;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 2);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb98:
    assume $i98 == 1;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p99 := $M.32;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} serial_set_termios($p99, $p13);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume $i95 == 1;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p96 := $M.32;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} serial_set_termios($p96, $p13);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb54:
    assume $i54 == 1;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i85 := $M.34;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 1);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb89:
    assume $i86 == 1;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p87 := $M.32;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p88 := $M.31;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i89 := serial_open($p87, $p88);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $M.43 := $i89;
    call {:si_unique_call 925} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i89);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i90 := $M.43;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 0);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb91:
    assume $i91 == 1;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 926} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i92 := $M.40;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i92, 1);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $M.40 := $i93;
    call {:si_unique_call 927} {:cexpr "ref_cnt"} boogie_si_record_i32($i93);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb48:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i56 == 1);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i79 := $M.34;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 1);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i82 := $M.34;
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 2);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb86:
    assume $i83 == 1;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p84 := $M.32;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} serial_unthrottle($p84);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb88;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb83:
    assume $i80 == 1;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p81 := $M.32;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} serial_unthrottle($p81);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    goto $bb85;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i56 == 1;
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i73 := $M.34;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i76 := $M.34;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb80:
    assume $i77 == 1;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p78 := $M.32;
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} serial_hangup($p78);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume $i74 == 1;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p75 := $M.32;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} serial_hangup($p75);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb56:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i57 == 1);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i65 := $M.34;
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i69 := $M.34;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 2);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb74:
    assume $i70 == 1;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p71 := $M.32;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} vslice_dummy_var_77 := serial_get_icount($p71, $p11);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    goto $bb76;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i66 == 1;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p67 := $M.32;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vslice_dummy_var_76 := serial_get_icount($p67, $p11);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb73;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb39;

  $bb62:
    assume $i58 == 1;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i59 := $M.34;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 1);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i62 := $M.34;
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 2);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb67:
    assume $i63 == 1;
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p64 := $M.32;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} serial_throttle($p64);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i60 == 1;
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p61 := $M.32;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} serial_throttle($p61);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb164_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 902} $i27 := __VERIFIER_nondet_int();
    call {:si_unique_call 903} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i27);
    call {:si_unique_call 904} {:cexpr "tmp___18"} boogie_si_record_i32($i27);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_loff_t: ref;

axiom __VERIFIER_nondet_loff_t == $sub.ref(0, 437227);

procedure __VERIFIER_nondet_loff_t() returns ($r: i64);



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 438259);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 439291);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 440323);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 441355);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 442387);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.35, $M.0, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_100: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $p0 := ldv_zalloc(1);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $p1 := ldv_zalloc(48);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $p3 := ldv_zalloc(1376);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1066} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1067} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1068} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} ldv_stop();
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i7 := $M.35;
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_100 := port_number_show($p4, $p2, $p0);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1070} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_destruct_7: ref;

axiom ldv_destruct_7 == $sub.ref(0, 443419);

procedure ldv_destruct_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_destruct_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1073} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 444451);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.36, $M.0, $CurrAddr;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $i1: i64;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var vslice_dummy_var_101: i64;
  var vslice_dummy_var_102: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p0 := ldv_zalloc(1);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1075} $i1 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1076} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i1);
    call {:si_unique_call 1077} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $p2 := ldv_zalloc(1);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1079} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1080} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1081} {:cexpr "tmp___2"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} ldv_stop();
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i11 := $M.36;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p13 := $M.52;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} vslice_dummy_var_102 := new_id_show($p13, $p0);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1085} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i7 := $M.36;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p9 := $M.52;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} vslice_dummy_var_101 := new_id_store($p9, $p2, $i1);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1083} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 445483);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.54, $M.38, $M.40, $M.0, $M.14, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.13, $M.15, $CurrAddr, $M.8, $M.10, assertsPassed, $M.24, $M.26, $M.25, $M.7;



implementation ldv_main_exported_1()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i27: i32;
  var $i28: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $p0 := ldv_zalloc(120);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1088} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1089} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1090} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} ldv_stop();
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i23 := $M.38;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume $i24 == 1;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p25 := $M.53;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} vslice_dummy_var_105 := usb_serial_device_remove($p25);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1100} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i27 := $M.40;
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, 1);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $M.40 := $i28;
    call {:si_unique_call 1101} {:cexpr "ref_cnt"} boogie_si_record_i32($i28);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i15 := $M.38;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i19 := $M.38;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21:
    assume $i20 == 1;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p21 := $M.53;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} vslice_dummy_var_104 := usb_serial_device_match($p21, $p1);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1098} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i16 == 1;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p17 := $M.53;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_103 := usb_serial_device_match($p17, $p1);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1096} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i7 := $M.38;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p9 := $M.53;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $i10 := usb_serial_device_probe($p9);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $M.54 := $i10;
    call {:si_unique_call 1092} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i10);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i11 := $M.54;
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1093} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i13 := $M.40;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.40 := $i14;
    call {:si_unique_call 1094} {:cexpr "ref_cnt"} boogie_si_record_i32($i14);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 446515);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.0, $M.39, $M.56, $M.40, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.10, $CurrAddr, $M.14, $M.24, $M.26, $M.25, $M.7, assertsPassed;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i36: i32;
  var $i37: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i49: i32;
  var $i50: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $p0 := ldv_zalloc(280);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1104} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1106} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} ldv_stop();
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i46 := $M.39;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb51:
    assume $i47 == 1;
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_109 := ldv_probe_4();
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1131} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i49 := $M.40;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $M.40 := $i50;
    call {:si_unique_call 1132} {:cexpr "ref_cnt"} boogie_si_record_i32($i50);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i36 := $M.39;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 3);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i41 := $M.39;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 2);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb48:
    assume $i42 == 1;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} vslice_dummy_var_108 := ldv_release_4();
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1128} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i44 := $M.40;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i44, 1);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $M.40 := $i45;
    call {:si_unique_call 1129} {:cexpr "ref_cnt"} boogie_si_record_i32($i45);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i37 == 1;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} vslice_dummy_var_107 := ldv_release_4();
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1125} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i39 := $M.40;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, 1);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $M.40 := $i40;
    call {:si_unique_call 1126} {:cexpr "ref_cnt"} boogie_si_record_i32($i40);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i33 := $M.39;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 2);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb42:
    assume $i34 == 1;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} vslice_dummy_var_106 := ldv_suspend_4();
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 1123} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i28 := $M.39;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 3);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb36:
    assume $i29 == 1;
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i30 := usb_serial_generic_resume($p1);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $M.56 := $i30;
    call {:si_unique_call 1120} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i30);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i31 := $M.56;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i32 == 1;
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1121} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i19 := $M.39;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i22 := $M.39;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 3);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i25 := $M.39;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33:
    assume $i26 == 1;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p27 := $M.55;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} usb_serial_generic_unthrottle($p27);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1118} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i23 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p24 := $M.55;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} usb_serial_generic_unthrottle($p24);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 1116} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i20 == 1;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p21 := $M.55;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} usb_serial_generic_unthrottle($p21);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1114} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i10 := $M.39;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i13 := $M.39;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i16 := $M.39;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p18 := $M.55;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} usb_serial_generic_throttle($p18);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1112} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i14 == 1;
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p15 := $M.55;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} usb_serial_generic_throttle($p15);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 1110} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p12 := $M.55;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} usb_serial_generic_throttle($p12);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1108} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const usb_serial_exit: ref;

axiom usb_serial_exit == $sub.ref(0, 447547);

procedure usb_serial_exit();
  free requires assertsPassed;
  modifies $M.42, $M.57, assertsPassed;



implementation usb_serial_exit()
{
  var $p0: ref;
  var $p2: ref;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} usb_serial_console_exit();
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} usb_serial_generic_deregister();
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} ldv_usb_deregister_28(usb_serial_driver);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p0 := $M.12;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} vslice_dummy_var_110 := tty_unregister_driver($p0);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p2 := $M.12;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} put_tty_driver($p2);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} bus_unregister(usb_serial_bus_type);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const usb_serial_init: ref;

axiom usb_serial_init == $sub.ref(0, 448579);

procedure usb_serial_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.0, $M.42, $M.50, $M.28, $M.59, $M.57, $CurrAddr;



implementation usb_serial_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i41: i32;
  var $i42: i1;
  var $i45: i32;
  var $i46: i1;
  var $i44: i32;
  var $p48: ref;
  var $i40: i32;
  var $i8: i32;
  var $p51: ref;
  var $i4: i32;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $p0 := alloc_tty_driver(512);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $M.12 := $p0;
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p1 := $M.12;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i5 := bus_register(usb_serial_bus_type);
    call {:si_unique_call 1142} {:cexpr "result"} boogie_si_record_i32($i5);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p9 := $M.12;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, .str);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p11 := $M.12;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, .str.109);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $p13 := $M.12;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 184)), $mul.ref(44, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 188);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p15 := $M.12;
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p17 := $M.12;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 3);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p19 := $M.12;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 184)), $mul.ref(58, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, 1);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p21 := $M.12;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, 12);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p23 := $M.12;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 184)), $mul.ref(60, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 1146} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p25, tty_std_termios, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p26 := $M.12;
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(8, 1));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 3261);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p29 := $M.12;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(36, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 9600);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p32 := $M.12;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(40, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 9600);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p35 := $M.12;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} tty_set_operations($p35, serial_ops);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p36 := $M.12;
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i37 := tty_register_driver($p36);
    call {:si_unique_call 1149} {:cexpr "result"} boogie_si_record_i32($i37);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i41 := ldv_usb_register_driver_26(usb_serial_driver, __this_module, .str);
    call {:si_unique_call 1153} {:cexpr "result"} boogie_si_record_i32($i41);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i45 := usb_serial_generic_register();
    call {:si_unique_call 1157} {:cexpr "result"} boogie_si_record_i32($i45);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i4 := $i45;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} vslice_dummy_var_116 := printk.ref.ref(.str.112, .str.108);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} ldv_usb_deregister_27(usb_serial_driver);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i44 := $i45;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p48 := $M.12;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} vslice_dummy_var_115 := tty_unregister_driver($p48);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i40 := $i44;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} bus_unregister(usb_serial_bus_type);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i8 := $i40;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} vslice_dummy_var_112 := printk.ref.ref.i32(.str.113, .str.108, $i8);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p51 := $M.12;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} put_tty_driver($p51);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i4 := $i8;
    goto $bb3;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} vslice_dummy_var_114 := printk.ref.ref(.str.111, .str.108);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i44 := $i41;
    goto $bb15;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} vslice_dummy_var_113 := printk.ref.ref(.str.110, .str.108);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i40 := $i37;
    goto $bb11;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} vslice_dummy_var_111 := printk.ref.ref(.str.107, .str.108);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_initialize_driver_attribute_2: ref;

axiom ldv_initialize_driver_attribute_2 == $sub.ref(0, 449611);

procedure ldv_initialize_driver_attribute_2();
  free requires assertsPassed;
  modifies $M.52, $M.0, $CurrAddr;



implementation ldv_initialize_driver_attribute_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $p0 := ldv_zalloc(120);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $M.52 := $p0;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_bus_type_1: ref;

axiom ldv_initialize_bus_type_1 == $sub.ref(0, 450643);

procedure ldv_initialize_bus_type_1();
  free requires assertsPassed;
  modifies $M.53, $M.0, $CurrAddr;



implementation ldv_initialize_bus_type_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $p0 := ldv_zalloc(1376);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $M.53 := $p0;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_serial_driver_4: ref;

axiom ldv_initialize_usb_serial_driver_4 == $sub.ref(0, 451675);

procedure ldv_initialize_usb_serial_driver_4();
  free requires assertsPassed;
  modifies $M.55, $M.0, $CurrAddr;



implementation ldv_initialize_usb_serial_driver_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $p0 := ldv_zalloc(1736);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $M.55 := $p0;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    return;
}



const ldv_reset_resume_5: ref;

axiom ldv_reset_resume_5 == $sub.ref(0, 452707);

procedure ldv_reset_resume_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_reset_resume_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1163} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1164} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 453739);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p0 := $M.7;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_error();
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.25;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} ldv_error();
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $M.26;
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} ldv_error();
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $M.14;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} ldv_error();
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $M.57;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} ldv_error();
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const alloc_tty_driver: ref;

axiom alloc_tty_driver == $sub.ref(0, 454771);

procedure alloc_tty_driver($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_tty_driver($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} {:cexpr "alloc_tty_driver:arg:lines"} boogie_si_record_i32($i0);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $p1 := __tty_alloc_driver($i0, __this_module, 0);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i3 := IS_ERR($p2);
    call {:si_unique_call 1173} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const bus_register: ref;

axiom bus_register == $sub.ref(0, 455803);

procedure bus_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bus_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1174} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1175} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_set_operations: ref;

axiom tty_set_operations == $sub.ref(0, 456835);

procedure tty_set_operations($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_set_operations($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    return;
}



const tty_register_driver: ref;

axiom tty_register_driver == $sub.ref(0, 457867);

procedure tty_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1176} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1177} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_register_driver_26: ref;

axiom ldv_usb_register_driver_26 == $sub.ref(0, 458899);

procedure ldv_usb_register_driver_26($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.50, $M.28, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_26($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1179} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1180} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1181} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} ldv_usb_driver_5();
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_generic_register: ref;

axiom usb_serial_generic_register == $sub.ref(0, 459931);

procedure usb_serial_generic_register() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.59, $M.57;



implementation usb_serial_generic_register() returns ($r: i32)
{
  var $i0: i16;
  var $i1: i16;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i0 := $M.58;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), $i0);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i1 := $M.60;
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), $i1);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $M.59 := $store.i16($M.59, generic_device_ids, 3);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $i2 := ldv_usb_serial_register_drivers_39(serial_drivers, .str.2, generic_device_ids);
    call {:si_unique_call 1184} {:cexpr "retval"} boogie_si_record_i32($i2);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_deregister_27: ref;

axiom ldv_usb_deregister_27 == $sub.ref(0, 460963);

procedure ldv_usb_deregister_27($p0: ref);
  free requires assertsPassed;
  modifies $M.42;



implementation ldv_usb_deregister_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} usb_deregister($p0);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1186} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    return;
}



const tty_unregister_driver: ref;

axiom tty_unregister_driver == $sub.ref(0, 461995);

procedure tty_unregister_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_unregister_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1187} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1188} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const bus_unregister: ref;

axiom bus_unregister == $sub.ref(0, 463027);

procedure bus_unregister($p0: ref);
  free requires assertsPassed;



implementation bus_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    return;
}



const put_tty_driver: ref;

axiom put_tty_driver == $sub.ref(0, 464059);

procedure put_tty_driver($p0: ref);
  free requires assertsPassed;



implementation put_tty_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_serial_register_drivers_39: ref;

axiom ldv_usb_serial_register_drivers_39 == $sub.ref(0, 465091);

procedure ldv_usb_serial_register_drivers_39($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.57;



implementation ldv_usb_serial_register_drivers_39($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i3 := ldv_serial_register();
    call {:si_unique_call 1190} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_serial_register: ref;

axiom ldv_serial_register == $sub.ref(0, 466123);

procedure ldv_serial_register() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.57;



implementation ldv_serial_register() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $i0 := ldv_undef_int();
    call {:si_unique_call 1192} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} ldv_stop___2();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i0, 0);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i3 := $M.57;
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.57 := $i4;
    call {:si_unique_call 1194} {:cexpr "SERIAL_STATE"} boogie_si_record_i32($i4);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __tty_alloc_driver: ref;

axiom __tty_alloc_driver == $sub.ref(0, 467155);

procedure __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} {:cexpr "__tty_alloc_driver:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1196} {:cexpr "__tty_alloc_driver:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $p3 := external_alloc();
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const usb_serial_console_exit: ref;

axiom usb_serial_console_exit == $sub.ref(0, 468187);

procedure usb_serial_console_exit();
  free requires assertsPassed;



implementation usb_serial_console_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_generic_deregister: ref;

axiom usb_serial_generic_deregister == $sub.ref(0, 469219);

procedure usb_serial_generic_deregister();
  free requires assertsPassed;
  modifies $M.57, assertsPassed;



implementation usb_serial_generic_deregister()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} ldv_usb_serial_deregister_drivers_40(serial_drivers);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const ldv_usb_deregister_28: ref;

axiom ldv_usb_deregister_28 == $sub.ref(0, 470251);

procedure ldv_usb_deregister_28($p0: ref);
  free requires assertsPassed;
  modifies $M.42;



implementation ldv_usb_deregister_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} usb_deregister($p0);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1200} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_serial_deregister_drivers_40: ref;

axiom ldv_usb_serial_deregister_drivers_40 == $sub.ref(0, 471283);

procedure ldv_usb_serial_deregister_drivers_40($p0: ref);
  free requires assertsPassed;
  modifies $M.57, assertsPassed;



implementation ldv_usb_serial_deregister_drivers_40($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} ldv_serial_deregister();
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const ldv_serial_deregister: ref;

axiom ldv_serial_deregister == $sub.ref(0, 472315);

procedure ldv_serial_deregister();
  free requires assertsPassed;
  modifies $M.57, assertsPassed;



implementation ldv_serial_deregister()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i0 := $M.57;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} ldv_error();
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.57;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.57 := $i3;
    call {:si_unique_call 1203} {:cexpr "SERIAL_STATE"} boogie_si_record_i32($i3);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_suspend_4: ref;

axiom ldv_suspend_4 == $sub.ref(0, 473347);

procedure ldv_suspend_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1204} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1205} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_4: ref;

axiom ldv_release_4 == $sub.ref(0, 474379);

procedure ldv_release_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1206} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1207} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_4: ref;

axiom ldv_probe_4 == $sub.ref(0, 475411);

procedure ldv_probe_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1208} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1209} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 476443);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1210} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 1} true;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 477475);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 478507);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 479539);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 480571);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 481603);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 482635);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 483667);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 484699);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 485731);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 486763);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 487795);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 488827);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 489859);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1211} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1212} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1213} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1214} __VERIFIER_assume($i4);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 490891);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 491923);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 492955);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 493987);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1215} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1216} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1217} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1218} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1219} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1220} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1221} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1222} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1223} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1224} __VERIFIER_assume($i7);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1225} __VERIFIER_assume($i11);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 495019);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 496051);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1226} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1227} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1228} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1229} __VERIFIER_assume($i4);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 497083);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 498115);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 499147);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 500179);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 501211);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1230} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1231} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1232} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1233} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1234} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1235} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1236} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1237} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1238} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1239} __VERIFIER_assume($i7);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1240} __VERIFIER_assume($i11);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 502243);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 503275);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 504307);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 505339);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 506371);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 507403);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 508435);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 509467);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 510499);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1241} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1242} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1243} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1244} __VERIFIER_assume($i10);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 511531);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1245} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1246} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1247} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 512563);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1248} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1249} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1250} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 513595);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1251} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1252} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 514627);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 515659);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1253} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1254} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 516691);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 517723);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 518755);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1255} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1256} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1257} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1258} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $p6 := malloc($i5);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 1260} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 519787);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 520819);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.28, $M.15, $M.29, $M.30, $M.31, $M.32, $M.34, $M.35, $M.13, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.62, $M.59, $M.63, $M.0, $M.64, $M.60, $M.58, $M.126, $M.16, $M.27, $M.11, $M.9, $M.54, $M.56, $M.12, $M.53, $M.55, $M.52, $M.10, $M.8, $M.26, $M.25, $M.7, $M.24, $M.57, $M.14, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1261} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.28 := $0.ref;
    $M.15 := $0.ref;
    $M.29 := $0.ref;
    $M.30 := $0.ref;
    $M.31 := $0.ref;
    $M.32 := $0.ref;
    $M.34 := 0;
    call {:si_unique_call 1262} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1263} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.13 := 0;
    call {:si_unique_call 1264} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 1265} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1266} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1267} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1268} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1269} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1270} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1271} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1272} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1273} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1274} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1275} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1276} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1277} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1278} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1279} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1280} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.62 := $store.ref($M.62, usb_serial_generic_device, $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(8, 1)), generic_device_ids);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(16, 1)), 1);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.1);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(160, 1)), $0.ref);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.62 := $store.i64($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(256, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(264, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(272, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(280, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(288, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(296, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(304, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(312, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(320, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(328, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(336, 1)), usb_serial_generic_resume);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(344, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(352, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(360, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(368, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(376, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(384, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(392, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(400, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(408, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(416, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(424, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(432, 1)), usb_serial_generic_throttle);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(440, 1)), usb_serial_generic_unthrottle);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(448, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(456, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(464, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(472, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(480, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(488, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(496, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(504, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(512, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(520, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(528, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(536, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(usb_serial_generic_device, $mul.ref(0, 552)), $mul.ref(544, 1)), $0.ref);
    $M.59 := $store.i16($M.59, generic_device_ids, 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(generic_device_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.63 := $store.ref($M.63, dev_attr_port_number, .str.124);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(32, 1)), port_number_show);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(dev_attr_port_number, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, driver_attr_new_id, .str.122);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(32, 1)), new_id_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(driver_attr_new_id, $mul.ref(0, 48)), $mul.ref(40, 1)), new_id_store);
    $M.0 := $store.ref($M.0, usb_serial_drv_attrs, driver_attr_new_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_drv_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, usb_serial_drv_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_drv_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_drv_group, $mul.ref(0, 32)), $mul.ref(16, 1)), usb_serial_drv_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_drv_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, usb_serial_drv_groups, usb_serial_drv_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_drv_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.64 := $store.ref($M.64, serial_drivers, usb_serial_generic_device);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(serial_drivers, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.60 := $sub.i16(0, 1);
    call {:si_unique_call 1281} {:cexpr "product"} boogie_si_record_i16($sub.i16(0, 1));
    $M.58 := 1529;
    call {:si_unique_call 1282} {:cexpr "vendor"} boogie_si_record_i16(1529);
    $M.126 := $store.ref($M.126, usb_serial_driver, .str);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), usb_serial_probe);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), usb_serial_disconnect);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), usb_serial_suspend);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), usb_serial_resume);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), $0.ref);
    $M.126 := $store.i32($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i32($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.126 := $store.i32($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.126 := $store.i32($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.126 := $store.i64($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.126 := $store.i32($M.126, $add.ref($add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(usb_serial_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 3);
    $M.0 := $store.ref($M.0, serial_port_ops, serial_port_carrier_raised);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 48)), $mul.ref(8, 1)), serial_port_dtr_rts);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 48)), $mul.ref(16, 1)), serial_port_shutdown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 48)), $mul.ref(32, 1)), serial_port_activate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(serial_port_ops, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.16 := $store.ref($M.16, usb_serial_driver_list, usb_serial_driver_list);
    $M.16 := $store.ref($M.16, $add.ref($add.ref(usb_serial_driver_list, $mul.ref(0, 16)), $mul.ref(8, 1)), usb_serial_driver_list);
    $M.27 := $store.ref($M.27, serial_minors, $0.ref);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(16, 1)), $0.ref);
    $M.27 := $store.i32($M.27, $add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), 0);
    $M.27 := $store.i32($M.27, $add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(28, 1)), 0);
    $M.27 := $store.i32($M.27, $add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(32, 1)), 0);
    $M.27 := $store.i32($M.27, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.27 := $store.i32($M.27, $add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.27 := $store.i32($M.27, $add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.27 := $store.ref($M.27, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.19);
    $M.27 := $store.i32($M.27, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.27 := $store.i64($M.27, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(serial_minors, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, table_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.17);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(112, 1)), table_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.18);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.11 := $0.ref;
    $M.9 := $0.ref;
    $M.54 := 0;
    call {:si_unique_call 1283} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1284} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.12 := $0.ref;
    $M.53 := $0.ref;
    $M.55 := $0.ref;
    $M.52 := $0.ref;
    $M.10 := 0;
    call {:si_unique_call 1285} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 1286} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 1287} {:cexpr "dev_counter"} boogie_si_record_i32(0);
    $M.25 := $0.ref;
    $M.7 := $0.ref;
    $M.24 := $0.ref;
    $M.57 := 0;
    call {:si_unique_call 1288} {:cexpr "SERIAL_STATE"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 1289} {:cexpr "INTERF_STATE"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, usb_serial_bus_type, .str.15);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(64, 1)), usb_serial_drv_groups);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(72, 1)), usb_serial_device_match);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(88, 1)), usb_serial_device_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(96, 1)), usb_serial_device_remove);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_serial_bus_type, $mul.ref(0, 176)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, .str, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.63 := $store.i8($M.63, .str.116, 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(2, 1)), 98);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(4, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(6, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(7, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(9, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(10, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(11, 1)), 103);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(12, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(13, 1)), 110);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(14, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(15, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(17, 1)), 99);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(18, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(19, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(20, 1)), 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(21, 1)), 98);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(22, 1)), 109);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(23, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(24, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(25, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(26, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(27, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(28, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(29, 1)), 100);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(30, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(31, 1)), 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(32, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(33, 1)), 98);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.116, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 11)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 11)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 11)), $mul.ref(3, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 11)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 11)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 11)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 11)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.17, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(10, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(11, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(19, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.18, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.63 := $store.i8($M.63, .str.21, 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(2, 1)), 98);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(4, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(6, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(7, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(9, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(11, 1)), 112);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(12, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(13, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(14, 1)), 98);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.63 := $store.i8($M.63, .str.51, 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(1, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(2, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(3, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(4, 1)), 99);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(5, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(6, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(7, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(10, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(11, 1)), 110);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(13, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(14, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.51, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.63 := $store.i8($M.63, .str.49, 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(2, 1)), 98);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(4, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(6, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(7, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(8, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(9, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(11, 1)), 112);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(12, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(13, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(14, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(16, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(17, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(18, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(19, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(20, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(21, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(22, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.49, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.63 := $store.i8($M.63, .str.46, 103);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(2, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(4, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(5, 1)), 102);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(6, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(7, 1)), 99);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(8, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(9, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(11, 1)), 100);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, .str.80, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(7, 1)), 103);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(8, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(11, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(12, 1)), 99);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(13, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(14, 1)), 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(15, 1)), 110);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(16, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.80, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.63 := $store.i8($M.63, .str.87, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(8, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(9, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(10, 1)), 99);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(11, 1)), 109);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(12, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.87, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.63 := $store.i8($M.63, .str.95, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(8, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(9, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(10, 1)), 99);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(11, 1)), 109);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(12, 1)), 103);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.95, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.63 := $store.i8($M.63, .str.96, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(7, 1)), 119);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(8, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(9, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(10, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(12, 1)), 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(13, 1)), 110);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(15, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(16, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(18, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(20, 1)), 110);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.96, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.63 := $store.i8($M.63, .str.93, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(7, 1)), 98);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(10, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(11, 1)), 107);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.93, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, .str.81, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(7, 1)), 104);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(8, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(9, 1)), 110);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(10, 1)), 103);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(11, 1)), 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(12, 1)), 112);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.81, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.63 := $store.i8($M.63, .str.82, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(7, 1)), 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(8, 1)), 110);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(10, 1)), 104);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(11, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(12, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(13, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(14, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(15, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.82, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.63 := $store.i8($M.63, .str.79, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(8, 1)), 104);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(9, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(10, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(13, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.79, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.63 := $store.i8($M.63, .str.84, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(7, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(11, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(13, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(14, 1)), 109);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(16, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(17, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.84, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.63 := $store.i8($M.63, .str.85, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(7, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(8, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(9, 1)), 99);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(11, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.85, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, .str.94, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(7, 1)), 99);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(8, 1)), 104);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(10, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(11, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(12, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(16, 1)), 98);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(17, 1)), 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(18, 1)), 102);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(19, 1)), 102);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.63 := $store.i8($M.63, .str.92, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(7, 1)), 119);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(8, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(9, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(13, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(15, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(16, 1)), 109);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.92, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.63 := $store.i8($M.63, .str.88, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(7, 1)), 119);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(9, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, .str.90, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(7, 1)), 99);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(8, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(10, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(11, 1)), 110);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(12, 1)), 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(13, 1)), 112);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, .str.91, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(7, 1)), 99);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(10, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, .str.83, 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(2, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(3, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(4, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(5, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(7, 1)), 111);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(8, 1)), 112);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(10, 1)), 110);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.100, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.127 := $store.i8($M.127, .str.106, 117);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.122, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 7)), $mul.ref(2, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 7)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.128 := $store.i8($M.128, .str.126, 37);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.126, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.126, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.126, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.114, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(25, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(27, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(28, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.63 := $store.i8($M.63, .str.119, 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(2, 1)), 98);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(6, 1)), 114);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(7, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(8, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(9, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(11, 1)), 100);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(13, 1)), 98);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(14, 1)), 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(15, 1)), 103);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(17, 1)), 100);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(19, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(20, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.119, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.129 := $store.i8($M.129, .str.12, 117);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(1, 1)), 115);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(2, 1)), 98);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(3, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(4, 1)), 115);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(5, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(6, 1)), 114);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(7, 1)), 105);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(8, 1)), 97);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(9, 1)), 108);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(10, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(11, 1)), 103);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(12, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(13, 1)), 110);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(14, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(15, 1)), 114);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(16, 1)), 105);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(17, 1)), 99);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(18, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(19, 1)), 119);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(20, 1)), 114);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(21, 1)), 105);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(22, 1)), 116);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(23, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(24, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(25, 1)), 98);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(26, 1)), 117);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(27, 1)), 108);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(28, 1)), 107);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(29, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(30, 1)), 99);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(31, 1)), 97);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(32, 1)), 108);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(33, 1)), 108);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(34, 1)), 98);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(35, 1)), 97);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(36, 1)), 99);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(37, 1)), 107);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.12, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.130 := $store.i8($M.130, .str.9, 117);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(1, 1)), 115);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(2, 1)), 98);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(3, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(4, 1)), 115);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(5, 1)), 101);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(6, 1)), 114);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(7, 1)), 105);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(8, 1)), 97);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(9, 1)), 108);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(10, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(11, 1)), 103);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(12, 1)), 101);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(13, 1)), 110);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(14, 1)), 101);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(15, 1)), 114);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(16, 1)), 105);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(17, 1)), 99);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(18, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(19, 1)), 114);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(20, 1)), 101);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(21, 1)), 97);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(22, 1)), 100);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(23, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(24, 1)), 98);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(25, 1)), 117);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(26, 1)), 108);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(27, 1)), 107);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(28, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(29, 1)), 99);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(30, 1)), 97);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(31, 1)), 108);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(32, 1)), 108);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(33, 1)), 98);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(34, 1)), 97);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(35, 1)), 99);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(36, 1)), 107);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.131 := $store.i8($M.131, .str.7, 117);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(2, 1)), 98);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(4, 1)), 115);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(6, 1)), 114);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(7, 1)), 105);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(9, 1)), 108);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(10, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(11, 1)), 103);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(12, 1)), 101);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(13, 1)), 110);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(14, 1)), 101);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(15, 1)), 114);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(17, 1)), 99);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(18, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(19, 1)), 119);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(20, 1)), 97);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(21, 1)), 105);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(22, 1)), 116);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(23, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(24, 1)), 117);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(25, 1)), 110);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(26, 1)), 116);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(27, 1)), 105);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(28, 1)), 108);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(29, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(30, 1)), 115);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(31, 1)), 101);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(32, 1)), 110);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(33, 1)), 116);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(.str.7, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.132 := $store.i8($M.132, .str.6, 117);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(2, 1)), 98);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(4, 1)), 115);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(6, 1)), 114);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(7, 1)), 105);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(9, 1)), 108);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(10, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(11, 1)), 103);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(12, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(13, 1)), 110);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(14, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(15, 1)), 114);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(17, 1)), 99);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(18, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(19, 1)), 99);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(20, 1)), 104);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(21, 1)), 97);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(22, 1)), 114);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(23, 1)), 115);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(24, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(25, 1)), 105);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(26, 1)), 110);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(27, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(28, 1)), 98);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(29, 1)), 117);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(30, 1)), 102);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(31, 1)), 102);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(32, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(33, 1)), 114);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(.str.6, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.133 := $store.i8($M.133, .str.3, 117);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(1, 1)), 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(2, 1)), 98);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(3, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(4, 1)), 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(5, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(6, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(7, 1)), 105);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(8, 1)), 97);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(9, 1)), 108);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(10, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(11, 1)), 103);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(12, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(13, 1)), 110);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(14, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(15, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(16, 1)), 105);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(17, 1)), 99);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(18, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(19, 1)), 119);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(20, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(21, 1)), 105);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(22, 1)), 116);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(23, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(24, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(25, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(26, 1)), 111);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(27, 1)), 111);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(28, 1)), 109);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.3, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.109, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(2, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(5, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.134 := $store.i8($M.134, .str.13, 117);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(1, 1)), 115);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(2, 1)), 98);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(4, 1)), 115);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(5, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(6, 1)), 114);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(7, 1)), 105);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(8, 1)), 97);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(9, 1)), 108);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(10, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(11, 1)), 104);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(12, 1)), 97);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(13, 1)), 110);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(14, 1)), 100);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(15, 1)), 108);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(16, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(17, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(18, 1)), 100);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(19, 1)), 99);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(20, 1)), 100);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(21, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(22, 1)), 99);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(23, 1)), 104);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(24, 1)), 97);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(25, 1)), 110);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(26, 1)), 103);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(27, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.13, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    call {:si_unique_call 1290} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 521851);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 522883);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 523915);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed, $M.8, $M.10;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i22 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(serial_cleanup, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_port_release, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume {:branchcond $i13} true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume {:branchcond $i12} true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1291} usb_serial_generic_throttle($p1);
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1292} usb_serial_generic_unthrottle($p2);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1293} serial_port_shutdown($p3);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1294} usb_serial_disconnect($p4);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1295} destroy_serial($p5);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1296} usb_serial_port_work($p6);
    return;

  $bb8:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1297} usb_serial_port_release($p7);
    return;

  $bb9:
    assume $i19 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1298} serial_cleanup($p8);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i20 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1299} serial_throttle($p9);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i21 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1300} serial_unthrottle($p10);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1301} serial_hangup($p11);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 524947);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.13, $M.8, $M.10, $M.15, $CurrAddr, assertsPassed, $M.24, $M.26, $M.25, $M.7;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(serial_tiocmget, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i24 == 1);
    $i23 := $eq.ref(serial_chars_in_buffer, $p0);
    assume {:branchcond $i23} true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i23 == 1);
    $i22 := $eq.ref(serial_write_room, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(usb_serial_resume, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(serial_port_carrier_raised, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(usb_serial_device_remove, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_device_probe, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_serial_generic_resume, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1302} $i2 := usb_serial_generic_resume($p1);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    $r := $i2;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i18 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1303} $i4 := usb_serial_device_probe($p3);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    $r := $i4;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1304} $i6 := usb_serial_device_remove($p5);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    $r := $i6;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1305} $i8 := serial_port_carrier_raised($p7);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    $r := $i8;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1306} $i10 := usb_serial_resume($p9);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    $r := $i10;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1307} $i12 := serial_write_room($p11);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    $r := $i12;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1308} $i14 := serial_chars_in_buffer($p13);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    $r := $i14;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1309} $i16 := serial_tiocmget($p15);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    $r := $i16;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 525979);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(serial_wait_until_sent, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(serial_port_dtr_rts, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1310} serial_port_dtr_rts($p1, arg1);
    return;

  $bb3:
    assume $i4 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1311} serial_wait_until_sent($p2, arg1);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 527011);

procedure devirtbounce.5(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed, $M.8, $M.10;



implementation devirtbounce.5(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i22 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(serial_cleanup, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_port_release, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume {:branchcond $i13} true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume {:branchcond $i12} true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1312} usb_serial_generic_throttle($p1);
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1313} usb_serial_generic_unthrottle($p2);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1314} serial_port_shutdown($p3);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1315} usb_serial_disconnect($p4);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1316} destroy_serial($p5);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1317} usb_serial_port_work($p6);
    return;

  $bb8:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1318} usb_serial_port_release($p7);
    return;

  $bb9:
    assume $i19 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1319} serial_cleanup($p8);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i20 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1320} serial_throttle($p9);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i21 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1321} serial_unthrottle($p10);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1322} serial_hangup($p11);
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 528043);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.17, $M.18, $M.19, $M.20, $M.0, $M.14, $CurrAddr, $M.13, $M.7, $M.11, $M.10, $M.9, $M.8, $M.24, $M.26, $M.25, $M.15, assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i34 := $eq.ref(serial_proc_show, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i34 == 1);
    $i33 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial_proc_open, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i32 == 1);
    $i31 := $eq.ref(serial_get_icount, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i31 == 1);
    $i30 := $eq.ref(serial_open, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i30 == 1);
    $i29 := $eq.ref(serial_install, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i29 == 1);
    $i28 := $eq.ref(usb_serial_probe, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i28 == 1);
    $i27 := $eq.ref(serial_port_activate, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i27 == 1);
    $i26 := $eq.ref(usb_serial_device_match, $p0);
    assume {:branchcond $i26} true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume false;
    return;

  $bb2:
    assume $i26 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1323} $i3 := usb_serial_device_match($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i27 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1324} $i6 := serial_port_activate($p4, $p5);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    $r := $i6;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i28 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1325} $i9 := usb_serial_probe($p7, $p8);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    $r := $i9;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i29 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1326} $i12 := serial_install($p10, $p11);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    $r := $i12;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i30 == 1;
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1327} $i14 := serial_open(arg, $p13);
    $r := $i14;
    return;

  $bb7:
    assume $i31 == 1;
    $p15 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1328} $i16 := serial_get_icount(arg, $p15);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    $r := $i16;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i32 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1329} $i19 := serial_proc_open($p17, $p18);
    $r := $i19;
    return;

  $bb9:
    assume $i33 == 1;
    $p20 := $bitcast.ref.ref(arg);
    $p21 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1330} $i22 := single_release($p20, $p21);
    $r := $i22;
    return;

  $bb10:
    assume $i34 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1331} $i25 := serial_proc_show($p23, $p24);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    $r := $i25;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 529075);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.17, $M.18, $M.19, $M.20, $M.0, $M.14, $CurrAddr, $M.13, $M.7, $M.11, $M.10, $M.9, $M.8, $M.24, $M.26, $M.25, $M.15, assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i35 := $eq.ref(serial_proc_show, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i35 == 1);
    $i34 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i34 == 1);
    $i33 := $eq.ref(serial_proc_open, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i33 == 1);
    $i32 := $eq.ref(serial_get_icount, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i32 == 1);
    $i31 := $eq.ref(serial_open, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i31 == 1);
    $i30 := $eq.ref(serial_install, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i30 == 1);
    $i29 := $eq.ref(usb_serial_probe, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i29 == 1);
    $i28 := $eq.ref(serial_port_activate, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_device_match, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume false;
    return;

  $bb2:
    assume $i27 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1332} $i3 := usb_serial_device_match($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i28 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1333} $i6 := serial_port_activate($p4, $p5);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    $r := $i6;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i29 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1334} $i8 := usb_serial_probe($p7, arg1);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    $r := $i8;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i30 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1335} $i11 := serial_install($p9, $p10);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    $r := $i11;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i31 == 1;
    $p12 := $bitcast.ref.ref(arg);
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1336} $i14 := serial_open($p12, $p13);
    $r := $i14;
    return;

  $bb7:
    assume $i32 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1337} $i17 := serial_get_icount($p15, $p16);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    $r := $i17;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i33 == 1;
    $p18 := $bitcast.ref.ref(arg);
    $p19 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1338} $i20 := serial_proc_open($p18, $p19);
    $r := $i20;
    return;

  $bb9:
    assume $i34 == 1;
    $p21 := $bitcast.ref.ref(arg);
    $p22 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1339} $i23 := single_release($p21, $p22);
    $r := $i23;
    return;

  $bb10:
    assume $i35 == 1;
    $p24 := $bitcast.ref.ref(arg);
    $p25 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1340} $i26 := serial_proc_show($p24, $p25);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    $r := $i26;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 530107);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.13, $M.8, $M.10, $M.15, $CurrAddr, assertsPassed, $M.24, $M.26, $M.25, $M.7;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i23 := $eq.ref(serial_tiocmget, $p0);
    assume {:branchcond $i23} true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i23 == 1);
    $i22 := $eq.ref(serial_chars_in_buffer, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i22 == 1);
    $i21 := $eq.ref(serial_write_room, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i21 == 1);
    $i20 := $eq.ref(usb_serial_resume, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i20 == 1);
    $i19 := $eq.ref(serial_port_carrier_raised, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_device_remove, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_serial_device_probe, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i17 == 1);
    $i16 := $eq.ref(usb_serial_generic_resume, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume false;
    return;

  $bb2:
    assume $i16 == 1;
    call {:si_unique_call 1341} $i1 := usb_serial_generic_resume(arg);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    $r := $i1;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i17 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1342} $i3 := usb_serial_device_probe($p2);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    $r := $i3;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1343} $i5 := usb_serial_device_remove($p4);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    $r := $i5;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i19 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1344} $i7 := serial_port_carrier_raised($p6);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    $r := $i7;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i20 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1345} $i9 := usb_serial_resume($p8);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    $r := $i9;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i21 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1346} $i11 := serial_write_room($p10);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    $r := $i11;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1347} $i13 := serial_chars_in_buffer($p12);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    $r := $i13;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i23 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1348} $i15 := serial_tiocmget($p14);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    $r := $i15;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 531139);

procedure devirtbounce.9(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed, $M.8, $M.10;



implementation devirtbounce.9(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i22 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(serial_cleanup, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_port_release, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(destroy_serial, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(usb_serial_disconnect, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(serial_port_shutdown, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume {:branchcond $i13} true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume {:branchcond $i12} true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1349} usb_serial_generic_throttle($p1);
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1350} usb_serial_generic_unthrottle($p2);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1351} serial_port_shutdown($p3);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1352} usb_serial_disconnect($p4);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1353} destroy_serial($p5);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1354} usb_serial_port_work($p6);
    return;

  $bb8:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1355} usb_serial_port_release($p7);
    return;

  $bb9:
    assume $i19 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1356} serial_cleanup($p8);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i20 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1357} serial_throttle($p9);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i21 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1358} serial_unthrottle($p10);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1359} serial_hangup($p11);
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 532171);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(serial_break, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(usb_serial_suspend, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1360} $i2 := usb_serial_suspend($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1361} $i4 := serial_break($p3, arg1);
    $r := $i4;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 533203);

procedure devirtbounce.11(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed, $M.8, $M.10;



implementation devirtbounce.11(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(serial_hangup, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i16 == 1);
    $i15 := $eq.ref(serial_unthrottle, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i15 == 1);
    $i14 := $eq.ref(serial_throttle, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i14 == 1);
    $i13 := $eq.ref(serial_cleanup, $p0);
    assume {:branchcond $i13} true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i13 == 1);
    $i12 := $eq.ref(usb_serial_port_release, $p0);
    assume {:branchcond $i12} true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i12 == 1);
    $i11 := $eq.ref(usb_serial_port_work, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i11 == 1);
    $i10 := $eq.ref(destroy_serial, $p0);
    assume {:branchcond $i10} true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i10 == 1);
    $i9 := $eq.ref(usb_serial_disconnect, $p0);
    assume {:branchcond $i9} true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i9 == 1);
    $i8 := $eq.ref(serial_port_shutdown, $p0);
    assume {:branchcond $i8} true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i8 == 1);
    $i7 := $eq.ref(usb_serial_generic_unthrottle, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i7 == 1);
    $i6 := $eq.ref(usb_serial_generic_throttle, $p0);
    assume {:branchcond $i6} true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    call {:si_unique_call 1362} usb_serial_generic_throttle(arg);
    return;

  $bb3:
    assume $i7 == 1;
    call {:si_unique_call 1363} usb_serial_generic_unthrottle(arg);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1364} serial_port_shutdown($p1);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1365} usb_serial_disconnect($p2);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1366} destroy_serial($p3);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i11 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1367} usb_serial_port_work($p4);
    return;

  $bb8:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1368} usb_serial_port_release($p5);
    return;

  $bb9:
    assume $i13 == 1;
    call {:si_unique_call 1369} serial_cleanup(arg);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i14 == 1;
    call {:si_unique_call 1370} serial_throttle(arg);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i15 == 1;
    call {:si_unique_call 1371} serial_unthrottle(arg);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i16 == 1;
    call {:si_unique_call 1372} serial_hangup(arg);
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 534235);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 535267);

procedure devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.13, $M.8, $M.10, $M.15, $CurrAddr, assertsPassed, $M.24, $M.26, $M.25, $M.7;



implementation devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i21 := $eq.ref(serial_tiocmget, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i21 == 1);
    $i20 := $eq.ref(serial_chars_in_buffer, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i20 == 1);
    $i19 := $eq.ref(serial_write_room, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i19 == 1);
    $i18 := $eq.ref(usb_serial_resume, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i18 == 1);
    $i17 := $eq.ref(serial_port_carrier_raised, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i17 == 1);
    $i16 := $eq.ref(usb_serial_device_remove, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i16 == 1);
    $i15 := $eq.ref(usb_serial_device_probe, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(usb_serial_generic_resume, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume false;
    return;

  $bb2:
    assume $i14 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1373} $i2 := usb_serial_generic_resume($p1);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    $r := $i2;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1374} $i4 := usb_serial_device_probe($p3);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    $r := $i4;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1375} $i6 := usb_serial_device_remove($p5);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    $r := $i6;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1376} $i8 := serial_port_carrier_raised($p7);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    $r := $i8;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i18 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1377} $i10 := usb_serial_resume($p9);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    $r := $i10;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i19 == 1;
    call {:si_unique_call 1378} $i11 := serial_write_room(arg);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    $r := $i11;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    call {:si_unique_call 1379} $i12 := serial_chars_in_buffer(arg);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    $r := $i12;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i21 == 1;
    call {:si_unique_call 1380} $i13 := serial_tiocmget(arg);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    $r := $i13;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 536299);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 537331);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(serial_ioctl, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1381} $i1 := serial_ioctl(arg, arg1, arg2);
    $r := $i1;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 538363);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 539395);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(serial_wait_until_sent, $p0);
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    $i2 := $eq.ref(serial_port_dtr_rts, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1382} serial_port_dtr_rts($p1, arg1);
    return;

  $bb3:
    assume $i3 == 1;
    call {:si_unique_call 1383} serial_wait_until_sent(arg, arg1);
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 540427);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: i64);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 541459);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(serial_tiocmset, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(serial_ioctl, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $i1 := $zext.i32.i64(arg2);
    call {:si_unique_call 1384} $i2 := serial_ioctl(arg, arg1, $i1);
    $r := $i2;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 1385} $i3 := serial_tiocmset(arg, arg1, arg2);
    $r := $i3;
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 542491);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.17, $M.18, $M.19, $M.20, $M.0, $M.14, $CurrAddr, $M.13, $M.7, $M.11, $M.10, $M.9, $M.8, $M.24, $M.26, $M.25, $M.15, assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i33 := $eq.ref(serial_proc_show, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i33 == 1);
    $i32 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i32 == 1);
    $i31 := $eq.ref(serial_proc_open, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i31 == 1);
    $i30 := $eq.ref(serial_get_icount, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i30 == 1);
    $i29 := $eq.ref(serial_open, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i29 == 1);
    $i28 := $eq.ref(serial_install, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i28 == 1);
    $i27 := $eq.ref(usb_serial_probe, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i27 == 1);
    $i26 := $eq.ref(serial_port_activate, $p0);
    assume {:branchcond $i26} true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i26 == 1);
    $i25 := $eq.ref(usb_serial_device_match, $p0);
    assume {:branchcond $i25} true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume false;
    return;

  $bb2:
    assume $i25 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1386} $i3 := usb_serial_device_match($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i26 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1387} $i6 := serial_port_activate($p4, $p5);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    $r := $i6;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i27 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1388} $i9 := usb_serial_probe($p7, $p8);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    $r := $i9;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i28 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1389} $i12 := serial_install($p10, $p11);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    $r := $i12;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i29 == 1;
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1390} $i14 := serial_open(arg, $p13);
    $r := $i14;
    return;

  $bb7:
    assume $i30 == 1;
    call {:si_unique_call 1391} $i15 := serial_get_icount(arg, arg1);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    $r := $i15;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i31 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1392} $i18 := serial_proc_open($p16, $p17);
    $r := $i18;
    return;

  $bb9:
    assume $i32 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1393} $i21 := single_release($p19, $p20);
    $r := $i21;
    return;

  $bb10:
    assume $i33 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1394} $i24 := serial_proc_show($p22, $p23);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    $r := $i24;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 543523);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 544555);

procedure devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 545587);

procedure devirtbounce.23(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 546619);

procedure devirtbounce.24(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i8;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.28, $M.15, $M.29, $M.30, $M.31, $M.32, $M.34, $M.35, $M.13, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.62, $M.59, $M.63, $M.0, $M.64, $M.60, $M.58, $M.126, $M.16, $M.27, $M.11, $M.9, $M.54, $M.56, $M.12, $M.53, $M.55, $M.52, $M.10, $M.8, $M.26, $M.25, $M.7, $M.24, $M.57, $M.14, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1395} __SMACK_static_init();
    call {:si_unique_call 1396} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.33, $M.34, $M.35, $M.13, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.43, $M.0, $M.44, $M.45, $M.46, $M.31, $M.32, $M.29, $M.30, $M.17, $M.18, $M.19, $M.20, $M.47, $M.23, $M.48, $M.49, $M.51, $M.28, $M.15, $M.50, $M.62, $M.59, $M.63, $M.64, $M.60, $M.58, $M.126, $M.16, $M.27, $M.11, $M.9, $M.54, $M.56, $M.12, $M.53, $M.55, $M.52, $M.10, $M.8, $M.26, $M.25, $M.7, $M.24, $M.57, $M.14, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $CurrAddr;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation usb_serial_generic_resume_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i16: i32, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i6: i32, in_$i7: i32, in_$i37: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i16: i32, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i6: i32, out_$i7: i32, out_$i37: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i33, out_$i34, out_$i35, out_$i36, out_$i6, out_$i7, out_$i37 := in_$i8, in_$p10, in_$p11, in_$p13, in_$i14, in_$i15, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i16, in_$i33, in_$i34, in_$i35, in_$i36, in_$i6, in_$i7, in_$i37;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9;

  $bb22:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i16, out_$i33;
    goto $bb22_dummy;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i16;
    assume true;
    goto $bb22;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i35, out_$i33);
    goto corral_source_split_24;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_23;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, in_$p1);
    goto corral_source_split_22;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i7, 1);
    call {:si_unique_call 2} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_21;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_20;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i32;
    goto $bb8;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i6;
    goto $bb8;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_18;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_16;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} out_$i14 := constant_test_bit(31, out_$p13);
    call {:si_unique_call 1} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_15;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 2992)), $mul.ref(8, 1)), $mul.ref(680, 1));
    goto corral_source_split_14;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_13;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_12;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_11;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_53;

  $bb17:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i24;
    goto $bb21;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i31;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  $bb19:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := out_$i24;
    goto $bb20;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i30;
    goto $bb20;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i24, 1);
    call {:si_unique_call 8} {:cexpr "c"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_49;

  $bb18:
    assume out_$i29 == 1;
    goto corral_source_split_48;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i28, 0);
    goto corral_source_split_46;

  SeqInstr_6:
    call {:si_unique_call 7} {:cexpr "r"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_45;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} out_$i28 := usb_serial_generic_write_start(out_$p11);
    goto SeqInstr_5;

  $bb16:
    assume out_$i27 == 1;
    goto corral_source_split_44;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_42;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_41;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p11, $mul.ref(0, 2992)), $mul.ref(1280, 1));
    goto corral_source_split_40;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i6;
    goto $bb15;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i23;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  $bb13:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := out_$i6;
    goto $bb14;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i22;
    goto $bb14;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i6, 1);
    call {:si_unique_call 5} {:cexpr "c"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_35;

  $bb12:
    assume out_$i21 == 1;
    goto corral_source_split_34;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, 0);
    goto corral_source_split_32;

  SeqInstr_3:
    call {:si_unique_call 4} {:cexpr "r"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_31;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} out_$i20 := usb_serial_generic_submit_read_urbs(out_$p11, 16);
    goto SeqInstr_2;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_30;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_28;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_27;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p11, $mul.ref(0, 2992)), $mul.ref(1208, 1));
    goto corral_source_split_26;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i33, out_$i34, out_$i35, out_$i36, out_$i6, out_$i7, out_$i37 := usb_serial_generic_resume_loop_$bb4(in_$p0, in_$p1, out_$i8, out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i16, out_$i33, out_$i34, out_$i35, out_$i36, out_$i6, out_$i7, out_$i37);
    return;

  exit:
    return;
}



procedure usb_serial_generic_resume_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i16: i32, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i6: i32, in_$i7: i32, in_$i37: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i16: i32, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i6: i32, out_$i7: i32, out_$i37: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.10, $CurrAddr, $M.14, $M.24, $M.26, $M.25, $M.7, assertsPassed;



implementation usb_serial_generic_submit_read_urbs_loop_$bb14(in_$p0: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i8: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i8: i32)
{

  entry:
    out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i8 := in_$i9, in_$p11, in_$p12, in_$i13, in_$i14, in_$i8;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;

  $bb16:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i13;
    goto $bb16_dummy;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    out_$i14 := $sge.i32(out_$i13, 0);
    goto corral_source_split_125;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$i13 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 24} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} usb_kill_urb(out_$p12);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_122;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(out_$i9, 8));
    goto corral_source_split_121;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i8 := usb_serial_generic_submit_read_urbs_loop_$bb14(in_$p0, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i8);
    return;

  exit:
    return;
}



procedure usb_serial_generic_submit_read_urbs_loop_$bb14(in_$p0: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i8: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i8: i32);



implementation ldv_stop___2_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop___2_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop___2_loop_$bb1();



implementation usb_serial_probe_loop_$bb254(in_$p19: ref, in_$p20: ref, in_$p52: ref, in_$i337: i32, in_$i746: i64, in_$p748: ref, in_$p749: ref, in_$p750: ref, in_$p751: ref, in_$i752: i32, in_$p754: ref, in_$p755: ref, in_$p756: ref, in_$p757: ref, in_$p758: ref, in_$p759: ref, in_$i760: i24, in_$i761: i24, in_$i762: i24, in_$p763: ref, in_$p764: ref, in_$i765: i8, in_$i766: i64, in_$i767: i64, in_$i768: i64, in_$i769: i1, in_$p770: ref, in_$p771: ref, in_$p773: ref, in_$p774: ref, in_$i775: i32, in_$i776: i1, in_$i778: i32, in_$i779: i1, in_$i745: i32, in_vslice_dummy_var_35: i32, in_vslice_dummy_var_36: i32, in_vslice_dummy_var_37: i32) returns (out_$i746: i64, out_$p748: ref, out_$p749: ref, out_$p750: ref, out_$p751: ref, out_$i752: i32, out_$p754: ref, out_$p755: ref, out_$p756: ref, out_$p757: ref, out_$p758: ref, out_$p759: ref, out_$i760: i24, out_$i761: i24, out_$i762: i24, out_$p763: ref, out_$p764: ref, out_$i765: i8, out_$i766: i64, out_$i767: i64, out_$i768: i64, out_$i769: i1, out_$p770: ref, out_$p771: ref, out_$p773: ref, out_$p774: ref, out_$i775: i32, out_$i776: i1, out_$i778: i32, out_$i779: i1, out_$i745: i32, out_vslice_dummy_var_35: i32, out_vslice_dummy_var_36: i32, out_vslice_dummy_var_37: i32)
{

  entry:
    out_$i746, out_$p748, out_$p749, out_$p750, out_$p751, out_$i752, out_$p754, out_$p755, out_$p756, out_$p757, out_$p758, out_$p759, out_$i760, out_$i761, out_$i762, out_$p763, out_$p764, out_$i765, out_$i766, out_$i767, out_$i768, out_$i769, out_$p770, out_$p771, out_$p773, out_$p774, out_$i775, out_$i776, out_$i778, out_$i779, out_$i745, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37 := in_$i746, in_$p748, in_$p749, in_$p750, in_$p751, in_$i752, in_$p754, in_$p755, in_$p756, in_$p757, in_$p758, in_$p759, in_$i760, in_$i761, in_$i762, in_$p763, in_$p764, in_$i765, in_$i766, in_$i767, in_$i768, in_$i769, in_$p770, in_$p771, in_$p773, in_$p774, in_$i775, in_$i776, in_$i778, in_$i779, in_$i745, in_vslice_dummy_var_35, in_vslice_dummy_var_36, in_vslice_dummy_var_37;
    goto $bb254, exit;

  $bb254:
    assume {:verifier.code 0} true;
    goto corral_source_split_1619;

  $bb262:
    assume out_$i779 == 1;
    assume {:verifier.code 0} true;
    out_$i745 := out_$i778;
    goto $bb262_dummy;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    out_$i779 := $slt.i32(out_$i778, in_$i337);
    goto corral_source_split_1666;

  $bb261:
    assume {:verifier.code 0} true;
    out_$i778 := $add.i32(out_$i745, 1);
    call {:si_unique_call 312} {:cexpr "i"} boogie_si_record_i32(out_$i778);
    goto corral_source_split_1665;

  $bb260:
    assume !(out_$i776 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} out_vslice_dummy_var_37 := dev_err.ref.ref(in_$p20, .str.44);
    goto corral_source_split_1663;

  $bb259:
    assume out_$i776 == 1;
    goto corral_source_split_1662;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    out_$i776 := $ne.i32(out_$i775, 0);
    goto corral_source_split_1660;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} out_$i775 := device_add(out_$p774);
    call {:si_unique_call 310} {:cexpr "retval"} boogie_si_record_i32(out_$i775);
    goto corral_source_split_1659;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    out_$p774 := $add.ref($add.ref(out_$p749, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1658;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} device_enable_async_suspend(out_$p773);
    goto corral_source_split_1657;

  $bb258:
    assume {:verifier.code 0} true;
    out_$p773 := $add.ref($add.ref(out_$p749, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1656;

  $bb257:
    assume !(out_$i769 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} out_vslice_dummy_var_36 := __dynamic_dev_dbg.ref.ref.ref.ref(in_$p19, in_$p20, .str.43, out_$p771);
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} out_$p771 := dev_name(out_$p770);
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    out_$p770 := $add.ref($add.ref(out_$p749, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1652;

  $bb256:
    assume out_$i769 == 1;
    goto corral_source_split_1651;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    out_$i769 := $ne.i64(out_$i768, 0);
    goto corral_source_split_1649;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} out_$i768 := ldv__builtin_expect(out_$i767, 0);
    call {:si_unique_call 305} {:cexpr "tmp___31"} boogie_si_record_i64(out_$i768);
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$i767 := $and.i64(out_$i766, 1);
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    out_$i766 := $zext.i8.i64(out_$i765);
    goto corral_source_split_1646;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    out_$i765 := $load.i8($M.6, out_$p764);
    goto corral_source_split_1645;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    out_$p764 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1644;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p763, 0);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$p763 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1642;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p759, out_$i762);
    goto corral_source_split_1641;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    out_$i762 := $or.i24(out_$i761, 1096);
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$i761 := $and.i24(out_$i760, $sub.i24(0, 262144));
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$i760 := $load.i24($M.5, out_$p759);
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$p759 := $bitcast.ref.ref(out_$p758);
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$p758 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p757, .str.43);
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$p757 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p756, .str.22);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$p756 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p755, .str.21);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$p755 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p754, .str);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    out_$p754 := $add.ref($add.ref(in_$p19, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} out_vslice_dummy_var_35 := dev_set_name.ref.ref.i32(out_$p750, .str.42, out_$i752);
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i752 := $load.i32($M.0, out_$p751);
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$p751 := $add.ref($add.ref(out_$p749, $mul.ref(0, 2992)), $mul.ref(1136, 1));
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$p750 := $add.ref($add.ref(out_$p749, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$p749 := $load.ref($M.0, out_$p748);
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$p748 := $add.ref($add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i746, 8));
    goto corral_source_split_1622;

  $bb255:
    assume {:verifier.code 0} true;
    out_$i746 := $sext.i32.i64(out_$i745);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb262_dummy:
    call {:si_unique_call 1} out_$i746, out_$p748, out_$p749, out_$p750, out_$p751, out_$i752, out_$p754, out_$p755, out_$p756, out_$p757, out_$p758, out_$p759, out_$i760, out_$i761, out_$i762, out_$p763, out_$p764, out_$i765, out_$i766, out_$i767, out_$i768, out_$i769, out_$p770, out_$p771, out_$p773, out_$p774, out_$i775, out_$i776, out_$i778, out_$i779, out_$i745, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37 := usb_serial_probe_loop_$bb254(in_$p19, in_$p20, in_$p52, in_$i337, out_$i746, out_$p748, out_$p749, out_$p750, out_$p751, out_$i752, out_$p754, out_$p755, out_$p756, out_$p757, out_$p758, out_$p759, out_$i760, out_$i761, out_$i762, out_$p763, out_$p764, out_$i765, out_$i766, out_$i767, out_$i768, out_$i769, out_$p770, out_$p771, out_$p773, out_$p774, out_$i775, out_$i776, out_$i778, out_$i779, out_$i745, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb254(in_$p19: ref, in_$p20: ref, in_$p52: ref, in_$i337: i32, in_$i746: i64, in_$p748: ref, in_$p749: ref, in_$p750: ref, in_$p751: ref, in_$i752: i32, in_$p754: ref, in_$p755: ref, in_$p756: ref, in_$p757: ref, in_$p758: ref, in_$p759: ref, in_$i760: i24, in_$i761: i24, in_$i762: i24, in_$p763: ref, in_$p764: ref, in_$i765: i8, in_$i766: i64, in_$i767: i64, in_$i768: i64, in_$i769: i1, in_$p770: ref, in_$p771: ref, in_$p773: ref, in_$p774: ref, in_$i775: i32, in_$i776: i1, in_$i778: i32, in_$i779: i1, in_$i745: i32, in_vslice_dummy_var_35: i32, in_vslice_dummy_var_36: i32, in_vslice_dummy_var_37: i32) returns (out_$i746: i64, out_$p748: ref, out_$p749: ref, out_$p750: ref, out_$p751: ref, out_$i752: i32, out_$p754: ref, out_$p755: ref, out_$p756: ref, out_$p757: ref, out_$p758: ref, out_$p759: ref, out_$i760: i24, out_$i761: i24, out_$i762: i24, out_$p763: ref, out_$p764: ref, out_$i765: i8, out_$i766: i64, out_$i767: i64, out_$i768: i64, out_$i769: i1, out_$p770: ref, out_$p771: ref, out_$p773: ref, out_$p774: ref, out_$i775: i32, out_$i776: i1, out_$i778: i32, out_$i779: i1, out_$i745: i32, out_vslice_dummy_var_35: i32, out_vslice_dummy_var_36: i32, out_vslice_dummy_var_37: i32);
  modifies $M.0, $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation usb_serial_probe_loop_$bb220(in_$p3: ref, in_$p21: ref, in_$p52: ref, in_$i94: i32, in_$i656: i64, in_$p657: ref, in_$p658: ref, in_$i659: i64, in_$p661: ref, in_$p662: ref, in_$p663: ref, in_$p664: ref, in_$p665: ref, in_$p666: ref, in_$i667: i64, in_$i668: i1, in_$i669: i32, in_$p670: ref, in_$p671: ref, in_$i672: i8, in_$p673: ref, in_$i674: i64, in_$p675: ref, in_$p676: ref, in_$p677: ref, in_$p678: ref, in_$i679: i64, in_$i680: i1, in_$p681: ref, in_$i682: i8, in_$i683: i32, in_$i684: i32, in_$p685: ref, in_$p686: ref, in_$i687: i32, in_$p688: ref, in_$p689: ref, in_$p690: ref, in_$p691: ref, in_$p692: ref, in_$p693: ref, in_$p694: ref, in_$p695: ref, in_$i696: i8, in_$i697: i32, in_$i698: i32, in_$i699: i1, in_$i655: i32) returns (out_$i656: i64, out_$p657: ref, out_$p658: ref, out_$i659: i64, out_$p661: ref, out_$p662: ref, out_$p663: ref, out_$p664: ref, out_$p665: ref, out_$p666: ref, out_$i667: i64, out_$i668: i1, out_$i669: i32, out_$p670: ref, out_$p671: ref, out_$i672: i8, out_$p673: ref, out_$i674: i64, out_$p675: ref, out_$p676: ref, out_$p677: ref, out_$p678: ref, out_$i679: i64, out_$i680: i1, out_$p681: ref, out_$i682: i8, out_$i683: i32, out_$i684: i32, out_$p685: ref, out_$p686: ref, out_$i687: i32, out_$p688: ref, out_$p689: ref, out_$p690: ref, out_$p691: ref, out_$p692: ref, out_$p693: ref, out_$p694: ref, out_$p695: ref, out_$i696: i8, out_$i697: i32, out_$i698: i32, out_$i699: i1, out_$i655: i32)
{

  entry:
    out_$i656, out_$p657, out_$p658, out_$i659, out_$p661, out_$p662, out_$p663, out_$p664, out_$p665, out_$p666, out_$i667, out_$i668, out_$i669, out_$p670, out_$p671, out_$i672, out_$p673, out_$i674, out_$p675, out_$p676, out_$p677, out_$p678, out_$i679, out_$i680, out_$p681, out_$i682, out_$i683, out_$i684, out_$p685, out_$p686, out_$i687, out_$p688, out_$p689, out_$p690, out_$p691, out_$p692, out_$p693, out_$p694, out_$p695, out_$i696, out_$i697, out_$i698, out_$i699, out_$i655 := in_$i656, in_$p657, in_$p658, in_$i659, in_$p661, in_$p662, in_$p663, in_$p664, in_$p665, in_$p666, in_$i667, in_$i668, in_$i669, in_$p670, in_$p671, in_$i672, in_$p673, in_$i674, in_$p675, in_$p676, in_$p677, in_$p678, in_$i679, in_$i680, in_$p681, in_$i682, in_$i683, in_$i684, in_$p685, in_$p686, in_$i687, in_$p688, in_$p689, in_$p690, in_$p691, in_$p692, in_$p693, in_$p694, in_$p695, in_$i696, in_$i697, in_$i698, in_$i699, in_$i655;
    goto $bb220, exit;

  $bb220:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  $bb228:
    assume out_$i699 == 1;
    assume {:verifier.code 0} true;
    out_$i655 := out_$i698;
    goto $bb228_dummy;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$i699 := $slt.i32(out_$i698, in_$i94);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$i698 := $add.i32(out_$i655, 1);
    call {:si_unique_call 292} {:cexpr "i"} boogie_si_record_i32(out_$i698);
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} ldv_usb_fill_int_urb_18(out_$p686, in_$p21, out_$i687, out_$p689, out_$i669, out_$p693, out_$p694, out_$i697);
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    out_$i697 := $zext.i8.i32(out_$i696);
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$i696 := $load.i8($M.0, out_$p695);
    goto corral_source_split_1534;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    out_$p695 := $add.ref($add.ref(out_$p658, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    out_$p694 := $bitcast.ref.ref(out_$p662);
    goto corral_source_split_1532;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$p693 := $load.ref($M.0, out_$p692);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$p692 := $add.ref($add.ref(out_$p691, $mul.ref(0, 552)), $mul.ref(512, 1));
    goto corral_source_split_1530;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    out_$p691 := $load.ref($M.0, out_$p690);
    goto corral_source_split_1529;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$p690 := $add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1528;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$p689 := $load.ref($M.0, out_$p688);
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    out_$p688 := $add.ref($add.ref(out_$p662, $mul.ref(0, 2992)), $mul.ref(1168, 1));
    goto corral_source_split_1526;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    out_$i687 := $or.i32(out_$i684, 1073741824);
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    out_$p686 := $load.ref($M.0, out_$p685);
    goto corral_source_split_1524;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$p685 := $add.ref($add.ref(out_$p662, $mul.ref(0, 2992)), $mul.ref(1184, 1));
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} out_$i684 := __create_pipe(in_$p21, out_$i683);
    call {:si_unique_call 290} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i684);
    goto corral_source_split_1522;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    out_$i683 := $zext.i8.i32(out_$i682);
    goto corral_source_split_1521;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    out_$i682 := $load.i8($M.0, out_$p681);
    goto corral_source_split_1520;

  $bb227:
    assume {:verifier.code 0} true;
    out_$p681 := $add.ref($add.ref(out_$p658, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1519;

  $bb226:
    assume !(out_$i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    out_$i680 := $eq.i64(out_$i679, 0);
    goto corral_source_split_1515;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    out_$i679 := $p2i.ref.i64(out_$p678);
    goto corral_source_split_1514;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    out_$p678 := $load.ref($M.0, out_$p677);
    goto corral_source_split_1513;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    out_$p677 := $add.ref($add.ref(out_$p662, $mul.ref(0, 2992)), $mul.ref(1168, 1));
    goto corral_source_split_1512;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p676, out_$p675);
    goto corral_source_split_1511;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    out_$p676 := $add.ref($add.ref(out_$p662, $mul.ref(0, 2992)), $mul.ref(1168, 1));
    goto corral_source_split_1510;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} out_$p675 := kmalloc(out_$i674, 208);
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    out_$i674 := $sext.i32.i64(out_$i669);
    goto corral_source_split_1508;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p673, out_$i672);
    goto corral_source_split_1507;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    out_$p673 := $add.ref($add.ref(out_$p662, $mul.ref(0, 2992)), $mul.ref(1192, 1));
    goto corral_source_split_1506;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    out_$i672 := $load.i8($M.0, out_$p671);
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    out_$p671 := $add.ref($add.ref(out_$p658, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p670, out_$i669);
    goto corral_source_split_1503;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    out_$p670 := $add.ref($add.ref(out_$p662, $mul.ref(0, 2992)), $mul.ref(1176, 1));
    goto corral_source_split_1502;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} out_$i669 := usb_endpoint_maxp(out_$p658);
    call {:si_unique_call 287} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i669);
    goto corral_source_split_1501;

  $bb223:
    assume !(out_$i668 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$i668 := $eq.i64(out_$i667, 0);
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    out_$i667 := $p2i.ref.i64(out_$p666);
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    out_$p666 := $load.ref($M.0, out_$p665);
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    out_$p665 := $add.ref($add.ref(out_$p662, $mul.ref(0, 2992)), $mul.ref(1184, 1));
    goto corral_source_split_1494;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p664, out_$p663);
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    out_$p664 := $add.ref($add.ref(out_$p662, $mul.ref(0, 2992)), $mul.ref(1184, 1));
    goto corral_source_split_1492;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} out_$p663 := ldv_usb_alloc_urb_19(0, 208);
    goto corral_source_split_1491;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    out_$p662 := $load.ref($M.0, out_$p661);
    goto corral_source_split_1490;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    out_$p661 := $add.ref($add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i659, 8));
    goto corral_source_split_1489;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    out_$i659 := $sext.i32.i64(out_$i655);
    goto corral_source_split_1488;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$p658 := $load.ref($M.20, out_$p657);
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    out_$p657 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(out_$i656, 8));
    goto corral_source_split_1486;

  $bb221:
    assume {:verifier.code 0} true;
    out_$i656 := $sext.i32.i64(out_$i655);
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb228_dummy:
    call {:si_unique_call 1} out_$i656, out_$p657, out_$p658, out_$i659, out_$p661, out_$p662, out_$p663, out_$p664, out_$p665, out_$p666, out_$i667, out_$i668, out_$i669, out_$p670, out_$p671, out_$i672, out_$p673, out_$i674, out_$p675, out_$p676, out_$p677, out_$p678, out_$i679, out_$i680, out_$p681, out_$i682, out_$i683, out_$i684, out_$p685, out_$p686, out_$i687, out_$p688, out_$p689, out_$p690, out_$p691, out_$p692, out_$p693, out_$p694, out_$p695, out_$i696, out_$i697, out_$i698, out_$i699, out_$i655 := usb_serial_probe_loop_$bb220(in_$p3, in_$p21, in_$p52, in_$i94, out_$i656, out_$p657, out_$p658, out_$i659, out_$p661, out_$p662, out_$p663, out_$p664, out_$p665, out_$p666, out_$i667, out_$i668, out_$i669, out_$p670, out_$p671, out_$i672, out_$p673, out_$i674, out_$p675, out_$p676, out_$p677, out_$p678, out_$i679, out_$i680, out_$p681, out_$i682, out_$i683, out_$i684, out_$p685, out_$p686, out_$i687, out_$p688, out_$p689, out_$p690, out_$p691, out_$p692, out_$p693, out_$p694, out_$p695, out_$i696, out_$i697, out_$i698, out_$i699, out_$i655);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb220(in_$p3: ref, in_$p21: ref, in_$p52: ref, in_$i94: i32, in_$i656: i64, in_$p657: ref, in_$p658: ref, in_$i659: i64, in_$p661: ref, in_$p662: ref, in_$p663: ref, in_$p664: ref, in_$p665: ref, in_$p666: ref, in_$i667: i64, in_$i668: i1, in_$i669: i32, in_$p670: ref, in_$p671: ref, in_$i672: i8, in_$p673: ref, in_$i674: i64, in_$p675: ref, in_$p676: ref, in_$p677: ref, in_$p678: ref, in_$i679: i64, in_$i680: i1, in_$p681: ref, in_$i682: i8, in_$i683: i32, in_$i684: i32, in_$p685: ref, in_$p686: ref, in_$i687: i32, in_$p688: ref, in_$p689: ref, in_$p690: ref, in_$p691: ref, in_$p692: ref, in_$p693: ref, in_$p694: ref, in_$p695: ref, in_$i696: i8, in_$i697: i32, in_$i698: i32, in_$i699: i1, in_$i655: i32) returns (out_$i656: i64, out_$p657: ref, out_$p658: ref, out_$i659: i64, out_$p661: ref, out_$p662: ref, out_$p663: ref, out_$p664: ref, out_$p665: ref, out_$p666: ref, out_$i667: i64, out_$i668: i1, out_$i669: i32, out_$p670: ref, out_$p671: ref, out_$i672: i8, out_$p673: ref, out_$i674: i64, out_$p675: ref, out_$p676: ref, out_$p677: ref, out_$p678: ref, out_$i679: i64, out_$i680: i1, out_$p681: ref, out_$i682: i8, out_$i683: i32, out_$i684: i32, out_$p685: ref, out_$p686: ref, out_$i687: i32, out_$p688: ref, out_$p689: ref, out_$p690: ref, out_$p691: ref, out_$p692: ref, out_$p693: ref, out_$p694: ref, out_$p695: ref, out_$i696: i8, out_$i697: i32, out_$i698: i32, out_$i699: i1, out_$i655: i32);
  modifies $M.9, $M.8, $M.0, $CurrAddr, $M.7;



implementation usb_serial_probe_loop_$bb197(in_$p2: ref, in_$p21: ref, in_$p52: ref, in_$i312: i32, in_$i587: i64, in_$p588: ref, in_$p589: ref, in_$i590: i64, in_$p592: ref, in_$p593: ref, in_$p594: ref, in_$p595: ref, in_$p596: ref, in_$p597: ref, in_$i598: i64, in_$i599: i1, in_$i600: i32, in_$p601: ref, in_$i602: i8, in_$p603: ref, in_$i604: i64, in_$p605: ref, in_$p606: ref, in_$p607: ref, in_$p608: ref, in_$i609: i64, in_$i610: i1, in_$p611: ref, in_$i612: i8, in_$i613: i32, in_$i614: i32, in_$p615: ref, in_$p616: ref, in_$i617: i32, in_$p618: ref, in_$p619: ref, in_$p620: ref, in_$p621: ref, in_$p622: ref, in_$p623: ref, in_$p624: ref, in_$p625: ref, in_$i626: i8, in_$i627: i32, in_$i628: i32, in_$i629: i1, in_$i586: i32) returns (out_$i587: i64, out_$p588: ref, out_$p589: ref, out_$i590: i64, out_$p592: ref, out_$p593: ref, out_$p594: ref, out_$p595: ref, out_$p596: ref, out_$p597: ref, out_$i598: i64, out_$i599: i1, out_$i600: i32, out_$p601: ref, out_$i602: i8, out_$p603: ref, out_$i604: i64, out_$p605: ref, out_$p606: ref, out_$p607: ref, out_$p608: ref, out_$i609: i64, out_$i610: i1, out_$p611: ref, out_$i612: i8, out_$i613: i32, out_$i614: i32, out_$p615: ref, out_$p616: ref, out_$i617: i32, out_$p618: ref, out_$p619: ref, out_$p620: ref, out_$p621: ref, out_$p622: ref, out_$p623: ref, out_$p624: ref, out_$p625: ref, out_$i626: i8, out_$i627: i32, out_$i628: i32, out_$i629: i1, out_$i586: i32)
{

  entry:
    out_$i587, out_$p588, out_$p589, out_$i590, out_$p592, out_$p593, out_$p594, out_$p595, out_$p596, out_$p597, out_$i598, out_$i599, out_$i600, out_$p601, out_$i602, out_$p603, out_$i604, out_$p605, out_$p606, out_$p607, out_$p608, out_$i609, out_$i610, out_$p611, out_$i612, out_$i613, out_$i614, out_$p615, out_$p616, out_$i617, out_$p618, out_$p619, out_$p620, out_$p621, out_$p622, out_$p623, out_$p624, out_$p625, out_$i626, out_$i627, out_$i628, out_$i629, out_$i586 := in_$i587, in_$p588, in_$p589, in_$i590, in_$p592, in_$p593, in_$p594, in_$p595, in_$p596, in_$p597, in_$i598, in_$i599, in_$i600, in_$p601, in_$i602, in_$p603, in_$i604, in_$p605, in_$p606, in_$p607, in_$p608, in_$i609, in_$i610, in_$p611, in_$i612, in_$i613, in_$i614, in_$p615, in_$p616, in_$i617, in_$p618, in_$p619, in_$p620, in_$p621, in_$p622, in_$p623, in_$p624, in_$p625, in_$i626, in_$i627, in_$i628, in_$i629, in_$i586;
    goto $bb197, exit;

  $bb197:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  $bb205:
    assume out_$i629 == 1;
    assume {:verifier.code 0} true;
    out_$i586 := out_$i628;
    goto $bb205_dummy;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    out_$i629 := $slt.i32(out_$i628, in_$i312);
    goto corral_source_split_1437;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i628 := $add.i32(out_$i586, 1);
    call {:si_unique_call 281} {:cexpr "i"} boogie_si_record_i32(out_$i628);
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} ldv_usb_fill_int_urb_18(out_$p616, in_$p21, out_$i617, out_$p619, out_$i600, out_$p623, out_$p624, out_$i627);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i627 := $zext.i8.i32(out_$i626);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$i626 := $load.i8($M.0, out_$p625);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$p625 := $add.ref($add.ref(out_$p589, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$p624 := $bitcast.ref.ref(out_$p593);
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    out_$p623 := $load.ref($M.0, out_$p622);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    out_$p622 := $add.ref($add.ref(out_$p621, $mul.ref(0, 552)), $mul.ref(504, 1));
    goto corral_source_split_1429;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    out_$p621 := $load.ref($M.0, out_$p620);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$p620 := $add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    out_$p619 := $load.ref($M.0, out_$p618);
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$p618 := $add.ref($add.ref(out_$p593, $mul.ref(0, 2992)), $mul.ref(1144, 1));
    goto corral_source_split_1425;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    out_$i617 := $or.i32(out_$i614, 1073741952);
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$p616 := $load.ref($M.0, out_$p615);
    goto corral_source_split_1423;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$p615 := $add.ref($add.ref(out_$p593, $mul.ref(0, 2992)), $mul.ref(1152, 1));
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} out_$i614 := __create_pipe(in_$p21, out_$i613);
    call {:si_unique_call 279} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i614);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$i613 := $zext.i8.i32(out_$i612);
    goto corral_source_split_1420;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    out_$i612 := $load.i8($M.0, out_$p611);
    goto corral_source_split_1419;

  $bb204:
    assume {:verifier.code 0} true;
    out_$p611 := $add.ref($add.ref(out_$p589, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1418;

  $bb203:
    assume !(out_$i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    out_$i610 := $eq.i64(out_$i609, 0);
    goto corral_source_split_1414;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$i609 := $p2i.ref.i64(out_$p608);
    goto corral_source_split_1413;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    out_$p608 := $load.ref($M.0, out_$p607);
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    out_$p607 := $add.ref($add.ref(out_$p593, $mul.ref(0, 2992)), $mul.ref(1144, 1));
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p606, out_$p605);
    goto corral_source_split_1410;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$p606 := $add.ref($add.ref(out_$p593, $mul.ref(0, 2992)), $mul.ref(1144, 1));
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} out_$p605 := kmalloc(out_$i604, 208);
    goto corral_source_split_1408;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$i604 := $sext.i32.i64(out_$i600);
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p603, out_$i602);
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$p603 := $add.ref($add.ref(out_$p593, $mul.ref(0, 2992)), $mul.ref(1160, 1));
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$i602 := $load.i8($M.0, out_$p601);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$p601 := $add.ref($add.ref(out_$p589, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1403;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} out_$i600 := usb_endpoint_maxp(out_$p589);
    call {:si_unique_call 276} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i600);
    goto corral_source_split_1402;

  $bb200:
    assume !(out_$i599 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    out_$i599 := $eq.i64(out_$i598, 0);
    goto corral_source_split_1398;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    out_$i598 := $p2i.ref.i64(out_$p597);
    goto corral_source_split_1397;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    out_$p597 := $load.ref($M.0, out_$p596);
    goto corral_source_split_1396;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    out_$p596 := $add.ref($add.ref(out_$p593, $mul.ref(0, 2992)), $mul.ref(1152, 1));
    goto corral_source_split_1395;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p595, out_$p594);
    goto corral_source_split_1394;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$p595 := $add.ref($add.ref(out_$p593, $mul.ref(0, 2992)), $mul.ref(1152, 1));
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} out_$p594 := ldv_usb_alloc_urb_17(0, 208);
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    out_$p593 := $load.ref($M.0, out_$p592);
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$p592 := $add.ref($add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i590, 8));
    goto corral_source_split_1390;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    out_$i590 := $sext.i32.i64(out_$i586);
    goto corral_source_split_1389;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$p589 := $load.ref($M.19, out_$p588);
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$p588 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i587, 8));
    goto corral_source_split_1387;

  $bb198:
    assume {:verifier.code 0} true;
    out_$i587 := $sext.i32.i64(out_$i586);
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb205_dummy:
    call {:si_unique_call 1} out_$i587, out_$p588, out_$p589, out_$i590, out_$p592, out_$p593, out_$p594, out_$p595, out_$p596, out_$p597, out_$i598, out_$i599, out_$i600, out_$p601, out_$i602, out_$p603, out_$i604, out_$p605, out_$p606, out_$p607, out_$p608, out_$i609, out_$i610, out_$p611, out_$i612, out_$i613, out_$i614, out_$p615, out_$p616, out_$i617, out_$p618, out_$p619, out_$p620, out_$p621, out_$p622, out_$p623, out_$p624, out_$p625, out_$i626, out_$i627, out_$i628, out_$i629, out_$i586 := usb_serial_probe_loop_$bb197(in_$p2, in_$p21, in_$p52, in_$i312, out_$i587, out_$p588, out_$p589, out_$i590, out_$p592, out_$p593, out_$p594, out_$p595, out_$p596, out_$p597, out_$i598, out_$i599, out_$i600, out_$p601, out_$i602, out_$p603, out_$i604, out_$p605, out_$p606, out_$p607, out_$p608, out_$i609, out_$i610, out_$p611, out_$i612, out_$i613, out_$i614, out_$p615, out_$p616, out_$i617, out_$p618, out_$p619, out_$p620, out_$p621, out_$p622, out_$p623, out_$p624, out_$p625, out_$i626, out_$i627, out_$i628, out_$i629, out_$i586);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb197(in_$p2: ref, in_$p21: ref, in_$p52: ref, in_$i312: i32, in_$i587: i64, in_$p588: ref, in_$p589: ref, in_$i590: i64, in_$p592: ref, in_$p593: ref, in_$p594: ref, in_$p595: ref, in_$p596: ref, in_$p597: ref, in_$i598: i64, in_$i599: i1, in_$i600: i32, in_$p601: ref, in_$i602: i8, in_$p603: ref, in_$i604: i64, in_$p605: ref, in_$p606: ref, in_$p607: ref, in_$p608: ref, in_$i609: i64, in_$i610: i1, in_$p611: ref, in_$i612: i8, in_$i613: i32, in_$i614: i32, in_$p615: ref, in_$p616: ref, in_$i617: i32, in_$p618: ref, in_$p619: ref, in_$p620: ref, in_$p621: ref, in_$p622: ref, in_$p623: ref, in_$p624: ref, in_$p625: ref, in_$i626: i8, in_$i627: i32, in_$i628: i32, in_$i629: i1, in_$i586: i32) returns (out_$i587: i64, out_$p588: ref, out_$p589: ref, out_$i590: i64, out_$p592: ref, out_$p593: ref, out_$p594: ref, out_$p595: ref, out_$p596: ref, out_$p597: ref, out_$i598: i64, out_$i599: i1, out_$i600: i32, out_$p601: ref, out_$i602: i8, out_$p603: ref, out_$i604: i64, out_$p605: ref, out_$p606: ref, out_$p607: ref, out_$p608: ref, out_$i609: i64, out_$i610: i1, out_$p611: ref, out_$i612: i8, out_$i613: i32, out_$i614: i32, out_$p615: ref, out_$p616: ref, out_$i617: i32, out_$p618: ref, out_$p619: ref, out_$p620: ref, out_$p621: ref, out_$p622: ref, out_$p623: ref, out_$p624: ref, out_$p625: ref, out_$i626: i8, out_$i627: i32, out_$i628: i32, out_$i629: i1, out_$i586: i32);
  modifies $M.9, $M.8, $M.0, $CurrAddr, $M.7;



implementation usb_serial_probe_loop_$bb178(in_$p21: ref, in_$p52: ref, in_$p502: ref, in_$p506: ref, in_$i520: i32, in_$i526: i64, in_$p527: ref, in_$p528: ref, in_$i529: i64, in_$p531: ref, in_$i532: i64, in_$p534: ref, in_$p535: ref, in_$i536: i64, in_$i537: i1, in_$i538: i64, in_$p539: ref, in_$i540: i64, in_$p542: ref, in_$i543: i64, in_$p545: ref, in_$p546: ref, in_$i547: i64, in_$i548: i1, in_$p549: ref, in_$i550: i8, in_$i551: i32, in_$i552: i32, in_$i553: i64, in_$p555: ref, in_$p556: ref, in_$i557: i32, in_$i558: i64, in_$p560: ref, in_$p561: ref, in_$p562: ref, in_$p563: ref, in_$p564: ref, in_$p565: ref, in_$p566: ref, in_$i567: i32, in_$i568: i1, in_$i525: i32) returns (out_$i526: i64, out_$p527: ref, out_$p528: ref, out_$i529: i64, out_$p531: ref, out_$i532: i64, out_$p534: ref, out_$p535: ref, out_$i536: i64, out_$i537: i1, out_$i538: i64, out_$p539: ref, out_$i540: i64, out_$p542: ref, out_$i543: i64, out_$p545: ref, out_$p546: ref, out_$i547: i64, out_$i548: i1, out_$p549: ref, out_$i550: i8, out_$i551: i32, out_$i552: i32, out_$i553: i64, out_$p555: ref, out_$p556: ref, out_$i557: i32, out_$i558: i64, out_$p560: ref, out_$p561: ref, out_$p562: ref, out_$p563: ref, out_$p564: ref, out_$p565: ref, out_$p566: ref, out_$i567: i32, out_$i568: i1, out_$i525: i32)
{

  entry:
    out_$i526, out_$p527, out_$p528, out_$i529, out_$p531, out_$i532, out_$p534, out_$p535, out_$i536, out_$i537, out_$i538, out_$p539, out_$i540, out_$p542, out_$i543, out_$p545, out_$p546, out_$i547, out_$i548, out_$p549, out_$i550, out_$i551, out_$i552, out_$i553, out_$p555, out_$p556, out_$i557, out_$i558, out_$p560, out_$p561, out_$p562, out_$p563, out_$p564, out_$p565, out_$p566, out_$i567, out_$i568, out_$i525 := in_$i526, in_$p527, in_$p528, in_$i529, in_$p531, in_$i532, in_$p534, in_$p535, in_$i536, in_$i537, in_$i538, in_$p539, in_$i540, in_$p542, in_$i543, in_$p545, in_$p546, in_$i547, in_$i548, in_$p549, in_$i550, in_$i551, in_$i552, in_$i553, in_$p555, in_$p556, in_$i557, in_$i558, in_$p560, in_$p561, in_$p562, in_$p563, in_$p564, in_$p565, in_$p566, in_$i567, in_$i568, in_$i525;
    goto $bb178, exit;

  $bb178:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  $bb186:
    assume out_$i568 == 1;
    assume {:verifier.code 0} true;
    out_$i525 := out_$i567;
    goto $bb186_dummy;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$i568 := $ule.i32(out_$i567, 1);
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$i567 := $add.i32(out_$i525, 1);
    call {:si_unique_call 272} {:cexpr "j"} boogie_si_record_i32(out_$i567);
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} ldv_usb_fill_bulk_urb_14(out_$p556, in_$p21, out_$i557, out_$p561, in_$i520, out_$p565, out_$p566);
    goto corral_source_split_1352;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$p566 := $bitcast.ref.ref(in_$p506);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$p565 := $load.ref($M.0, out_$p564);
    goto corral_source_split_1350;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    out_$p564 := $add.ref($add.ref(out_$p563, $mul.ref(0, 552)), $mul.ref(528, 1));
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$p563 := $load.ref($M.0, out_$p562);
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$p562 := $add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$p561 := $load.ref($M.0, out_$p560);
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    out_$p560 := $add.ref($add.ref($add.ref(in_$p506, $mul.ref(0, 2992)), $mul.ref(1320, 1)), $mul.ref(out_$i558, 8));
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    out_$i558 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1344;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$i557 := $or.i32(out_$i552, $sub.i32(0, 1073741824));
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$p556 := $load.ref($M.0, out_$p555);
    goto corral_source_split_1342;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    out_$p555 := $add.ref($add.ref($add.ref(in_$p506, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(out_$i553, 8));
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    out_$i553 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1340;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} out_$i552 := __create_pipe(in_$p21, out_$i551);
    call {:si_unique_call 270} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i552);
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    out_$i551 := $zext.i8.i32(out_$i550);
    goto corral_source_split_1338;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    out_$i550 := $load.i8($M.0, out_$p549);
    goto corral_source_split_1337;

  $bb185:
    assume {:verifier.code 0} true;
    out_$p549 := $add.ref($add.ref(in_$p502, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1336;

  $bb184:
    assume !(out_$i548 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    out_$i548 := $eq.i64(out_$i547, 0);
    goto corral_source_split_1332;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    out_$i547 := $p2i.ref.i64(out_$p546);
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    out_$p546 := $load.ref($M.0, out_$p545);
    goto corral_source_split_1330;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    out_$p545 := $add.ref($add.ref($add.ref(in_$p506, $mul.ref(0, 2992)), $mul.ref(1320, 1)), $mul.ref(out_$i543, 8));
    goto corral_source_split_1329;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    out_$i543 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1328;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p542, out_$p539);
    goto corral_source_split_1327;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    out_$p542 := $add.ref($add.ref($add.ref(in_$p506, $mul.ref(0, 2992)), $mul.ref(1320, 1)), $mul.ref(out_$i540, 8));
    goto corral_source_split_1326;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    out_$i540 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1325;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} out_$p539 := kmalloc(out_$i538, 208);
    goto corral_source_split_1324;

  $bb182:
    assume {:verifier.code 0} true;
    out_$i538 := $sext.i32.i64(in_$i520);
    goto corral_source_split_1323;

  $bb181:
    assume !(out_$i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    out_$i537 := $eq.i64(out_$i536, 0);
    goto corral_source_split_1319;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    out_$i536 := $p2i.ref.i64(out_$p535);
    goto corral_source_split_1318;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    out_$p535 := $load.ref($M.0, out_$p534);
    goto corral_source_split_1317;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    out_$p534 := $add.ref($add.ref($add.ref(in_$p506, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(out_$i532, 8));
    goto corral_source_split_1316;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    out_$i532 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1315;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p531, out_$p528);
    goto corral_source_split_1314;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    out_$p531 := $add.ref($add.ref($add.ref(in_$p506, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(out_$i529, 8));
    goto corral_source_split_1313;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    out_$i529 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1312;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} out_$p528 := ldv_usb_alloc_urb_15(0, 208);
    goto corral_source_split_1311;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} set_bit(out_$i526, out_$p527);
    goto corral_source_split_1310;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    out_$p527 := $add.ref($add.ref(in_$p506, $mul.ref(0, 2992)), $mul.ref(1352, 1));
    goto corral_source_split_1309;

  $bb179:
    assume {:verifier.code 0} true;
    out_$i526 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1308;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb186_dummy:
    call {:si_unique_call 1} out_$i526, out_$p527, out_$p528, out_$i529, out_$p531, out_$i532, out_$p534, out_$p535, out_$i536, out_$i537, out_$i538, out_$p539, out_$i540, out_$p542, out_$i543, out_$p545, out_$p546, out_$i547, out_$i548, out_$p549, out_$i550, out_$i551, out_$i552, out_$i553, out_$p555, out_$p556, out_$i557, out_$i558, out_$p560, out_$p561, out_$p562, out_$p563, out_$p564, out_$p565, out_$p566, out_$i567, out_$i568, out_$i525 := usb_serial_probe_loop_$bb178(in_$p21, in_$p52, in_$p502, in_$p506, in_$i520, out_$i526, out_$p527, out_$p528, out_$i529, out_$p531, out_$i532, out_$p534, out_$p535, out_$i536, out_$i537, out_$i538, out_$p539, out_$i540, out_$p542, out_$i543, out_$p545, out_$p546, out_$i547, out_$i548, out_$p549, out_$i550, out_$i551, out_$i552, out_$i553, out_$p555, out_$p556, out_$i557, out_$i558, out_$p560, out_$p561, out_$p562, out_$p563, out_$p564, out_$p565, out_$p566, out_$i567, out_$i568, out_$i525);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb178(in_$p21: ref, in_$p52: ref, in_$p502: ref, in_$p506: ref, in_$i520: i32, in_$i526: i64, in_$p527: ref, in_$p528: ref, in_$i529: i64, in_$p531: ref, in_$i532: i64, in_$p534: ref, in_$p535: ref, in_$i536: i64, in_$i537: i1, in_$i538: i64, in_$p539: ref, in_$i540: i64, in_$p542: ref, in_$i543: i64, in_$p545: ref, in_$p546: ref, in_$i547: i64, in_$i548: i1, in_$p549: ref, in_$i550: i8, in_$i551: i32, in_$i552: i32, in_$i553: i64, in_$p555: ref, in_$p556: ref, in_$i557: i32, in_$i558: i64, in_$p560: ref, in_$p561: ref, in_$p562: ref, in_$p563: ref, in_$p564: ref, in_$p565: ref, in_$p566: ref, in_$i567: i32, in_$i568: i1, in_$i525: i32) returns (out_$i526: i64, out_$p527: ref, out_$p528: ref, out_$i529: i64, out_$p531: ref, out_$i532: i64, out_$p534: ref, out_$p535: ref, out_$i536: i64, out_$i537: i1, out_$i538: i64, out_$p539: ref, out_$i540: i64, out_$p542: ref, out_$i543: i64, out_$p545: ref, out_$p546: ref, out_$i547: i64, out_$i548: i1, out_$p549: ref, out_$i550: i8, out_$i551: i32, out_$i552: i32, out_$i553: i64, out_$p555: ref, out_$p556: ref, out_$i557: i32, out_$i558: i64, out_$p560: ref, out_$p561: ref, out_$p562: ref, out_$p563: ref, out_$p564: ref, out_$p565: ref, out_$p566: ref, out_$i567: i32, out_$i568: i1, out_$i525: i32);
  modifies $M.11, $M.10, $M.0, $CurrAddr, $M.7;



implementation usb_serial_probe_loop_$bb170(in_$p5: ref, in_$p21: ref, in_$p52: ref, in_$i97: i32, in_$i500: i64, in_$p501: ref, in_$p502: ref, in_$i503: i64, in_$p505: ref, in_$p506: ref, in_$p508: ref, in_$p509: ref, in_$i510: i32, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$p514: ref, in_$p515: ref, in_$i516: i64, in_$i517: i32, in_$i518: i1, in_$i519: i32, in_$i520: i32, in_$p521: ref, in_$p522: ref, in_$i523: i8, in_$p524: ref, in_$i526: i64, in_$p527: ref, in_$p528: ref, in_$i529: i64, in_$p531: ref, in_$i532: i64, in_$p534: ref, in_$p535: ref, in_$i536: i64, in_$i537: i1, in_$i538: i64, in_$p539: ref, in_$i540: i64, in_$p542: ref, in_$i543: i64, in_$p545: ref, in_$p546: ref, in_$i547: i64, in_$i548: i1, in_$p549: ref, in_$i550: i8, in_$i551: i32, in_$i552: i32, in_$i553: i64, in_$p555: ref, in_$p556: ref, in_$i557: i32, in_$i558: i64, in_$p560: ref, in_$p561: ref, in_$p562: ref, in_$p563: ref, in_$p564: ref, in_$p565: ref, in_$p566: ref, in_$i567: i32, in_$i568: i1, in_$i525: i32, in_$p570: ref, in_$p571: ref, in_$p572: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$i577: i32, in_$i578: i1, in_$i499: i32) returns (out_$i500: i64, out_$p501: ref, out_$p502: ref, out_$i503: i64, out_$p505: ref, out_$p506: ref, out_$p508: ref, out_$p509: ref, out_$i510: i32, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$p514: ref, out_$p515: ref, out_$i516: i64, out_$i517: i32, out_$i518: i1, out_$i519: i32, out_$i520: i32, out_$p521: ref, out_$p522: ref, out_$i523: i8, out_$p524: ref, out_$i526: i64, out_$p527: ref, out_$p528: ref, out_$i529: i64, out_$p531: ref, out_$i532: i64, out_$p534: ref, out_$p535: ref, out_$i536: i64, out_$i537: i1, out_$i538: i64, out_$p539: ref, out_$i540: i64, out_$p542: ref, out_$i543: i64, out_$p545: ref, out_$p546: ref, out_$i547: i64, out_$i548: i1, out_$p549: ref, out_$i550: i8, out_$i551: i32, out_$i552: i32, out_$i553: i64, out_$p555: ref, out_$p556: ref, out_$i557: i32, out_$i558: i64, out_$p560: ref, out_$p561: ref, out_$p562: ref, out_$p563: ref, out_$p564: ref, out_$p565: ref, out_$p566: ref, out_$i567: i32, out_$i568: i1, out_$i525: i32, out_$p570: ref, out_$p571: ref, out_$p572: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$i577: i32, out_$i578: i1, out_$i499: i32)
{

  entry:
    out_$i500, out_$p501, out_$p502, out_$i503, out_$p505, out_$p506, out_$p508, out_$p509, out_$i510, out_$i511, out_$i512, out_$p513, out_$p514, out_$p515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$p521, out_$p522, out_$i523, out_$p524, out_$i526, out_$p527, out_$p528, out_$i529, out_$p531, out_$i532, out_$p534, out_$p535, out_$i536, out_$i537, out_$i538, out_$p539, out_$i540, out_$p542, out_$i543, out_$p545, out_$p546, out_$i547, out_$i548, out_$p549, out_$i550, out_$i551, out_$i552, out_$i553, out_$p555, out_$p556, out_$i557, out_$i558, out_$p560, out_$p561, out_$p562, out_$p563, out_$p564, out_$p565, out_$p566, out_$i567, out_$i568, out_$i525, out_$p570, out_$p571, out_$p572, out_$p574, out_$p575, out_$p576, out_$i577, out_$i578, out_$i499 := in_$i500, in_$p501, in_$p502, in_$i503, in_$p505, in_$p506, in_$p508, in_$p509, in_$i510, in_$i511, in_$i512, in_$p513, in_$p514, in_$p515, in_$i516, in_$i517, in_$i518, in_$i519, in_$i520, in_$p521, in_$p522, in_$i523, in_$p524, in_$i526, in_$p527, in_$p528, in_$i529, in_$p531, in_$i532, in_$p534, in_$p535, in_$i536, in_$i537, in_$i538, in_$p539, in_$i540, in_$p542, in_$i543, in_$p545, in_$p546, in_$i547, in_$i548, in_$p549, in_$i550, in_$i551, in_$i552, in_$i553, in_$p555, in_$p556, in_$i557, in_$i558, in_$p560, in_$p561, in_$p562, in_$p563, in_$p564, in_$p565, in_$p566, in_$i567, in_$i568, in_$i525, in_$p570, in_$p571, in_$p572, in_$p574, in_$p575, in_$p576, in_$i577, in_$i578, in_$i499;
    goto $bb170, exit;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_1272;

  $bb189:
    assume out_$i578 == 1;
    assume {:verifier.code 0} true;
    out_$i499 := out_$i577;
    goto $bb189_dummy;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    out_$i578 := $slt.i32(out_$i577, in_$i97);
    goto corral_source_split_1365;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    out_$i577 := $add.i32(out_$i499, 1);
    call {:si_unique_call 273} {:cexpr "i"} boogie_si_record_i32(out_$i577);
    goto corral_source_split_1364;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p576, out_$p575);
    goto corral_source_split_1363;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    out_$p576 := $add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1272, 1));
    goto corral_source_split_1362;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    out_$p575 := $load.ref($M.0, out_$p574);
    goto corral_source_split_1361;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    out_$p574 := $add.ref($add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1320, 1)), $mul.ref(0, 8));
    goto corral_source_split_1360;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p572, out_$p571);
    goto corral_source_split_1359;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    out_$p572 := $add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1288, 1));
    goto corral_source_split_1358;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    out_$p571 := $load.ref($M.0, out_$p570);
    goto corral_source_split_1357;

  $bb188:
    assume {:verifier.code 0} true;
    out_$p570 := $add.ref($add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(0, 8));
    goto corral_source_split_1356;

  $bb187:
    assume !(out_$i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$i568 := $ule.i32(out_$i567, 1);
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$i567 := $add.i32(out_$i525, 1);
    call {:si_unique_call 272} {:cexpr "j"} boogie_si_record_i32(out_$i567);
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} ldv_usb_fill_bulk_urb_14(out_$p556, in_$p21, out_$i557, out_$p561, out_$i520, out_$p565, out_$p566);
    goto corral_source_split_1352;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$p566 := $bitcast.ref.ref(out_$p506);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$p565 := $load.ref($M.0, out_$p564);
    goto corral_source_split_1350;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    out_$p564 := $add.ref($add.ref(out_$p563, $mul.ref(0, 552)), $mul.ref(528, 1));
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$p563 := $load.ref($M.0, out_$p562);
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$p562 := $add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$p561 := $load.ref($M.0, out_$p560);
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    out_$p560 := $add.ref($add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1320, 1)), $mul.ref(out_$i558, 8));
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    out_$i558 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1344;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$i557 := $or.i32(out_$i552, $sub.i32(0, 1073741824));
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$p556 := $load.ref($M.0, out_$p555);
    goto corral_source_split_1342;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    out_$p555 := $add.ref($add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(out_$i553, 8));
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    out_$i553 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1340;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} out_$i552 := __create_pipe(in_$p21, out_$i551);
    call {:si_unique_call 270} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i552);
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    out_$i551 := $zext.i8.i32(out_$i550);
    goto corral_source_split_1338;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    out_$i550 := $load.i8($M.0, out_$p549);
    goto corral_source_split_1337;

  $bb185:
    assume {:verifier.code 0} true;
    out_$p549 := $add.ref($add.ref(out_$p502, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1336;

  $bb184:
    assume !(out_$i548 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    out_$i548 := $eq.i64(out_$i547, 0);
    goto corral_source_split_1332;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    out_$i547 := $p2i.ref.i64(out_$p546);
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    out_$p546 := $load.ref($M.0, out_$p545);
    goto corral_source_split_1330;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    out_$p545 := $add.ref($add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1320, 1)), $mul.ref(out_$i543, 8));
    goto corral_source_split_1329;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    out_$i543 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1328;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p542, out_$p539);
    goto corral_source_split_1327;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    out_$p542 := $add.ref($add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1320, 1)), $mul.ref(out_$i540, 8));
    goto corral_source_split_1326;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    out_$i540 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1325;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} out_$p539 := kmalloc(out_$i538, 208);
    goto corral_source_split_1324;

  $bb182:
    assume {:verifier.code 0} true;
    out_$i538 := $sext.i32.i64(out_$i520);
    goto corral_source_split_1323;

  $bb181:
    assume !(out_$i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    out_$i537 := $eq.i64(out_$i536, 0);
    goto corral_source_split_1319;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    out_$i536 := $p2i.ref.i64(out_$p535);
    goto corral_source_split_1318;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    out_$p535 := $load.ref($M.0, out_$p534);
    goto corral_source_split_1317;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    out_$p534 := $add.ref($add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(out_$i532, 8));
    goto corral_source_split_1316;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    out_$i532 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1315;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p531, out_$p528);
    goto corral_source_split_1314;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    out_$p531 := $add.ref($add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(out_$i529, 8));
    goto corral_source_split_1313;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    out_$i529 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1312;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} out_$p528 := ldv_usb_alloc_urb_15(0, 208);
    goto corral_source_split_1311;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} set_bit(out_$i526, out_$p527);
    goto corral_source_split_1310;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    out_$p527 := $add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1352, 1));
    goto corral_source_split_1309;

  $bb179:
    assume {:verifier.code 0} true;
    out_$i526 := $sext.i32.i64(out_$i525);
    goto corral_source_split_1308;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb178:
    call out_$i526, out_$p527, out_$p528, out_$i529, out_$p531, out_$i532, out_$p534, out_$p535, out_$i536, out_$i537, out_$i538, out_$p539, out_$i540, out_$p542, out_$i543, out_$p545, out_$p546, out_$i547, out_$i548, out_$p549, out_$i550, out_$i551, out_$i552, out_$i553, out_$p555, out_$p556, out_$i557, out_$i558, out_$p560, out_$p561, out_$p562, out_$p563, out_$p564, out_$p565, out_$p566, out_$i567, out_$i568, out_$i525 := usb_serial_probe_loop_$bb178(in_$p21, in_$p52, out_$p502, out_$p506, out_$i520, out_$i526, out_$p527, out_$p528, out_$i529, out_$p531, out_$i532, out_$p534, out_$p535, out_$i536, out_$i537, out_$i538, out_$p539, out_$i540, out_$p542, out_$i543, out_$p545, out_$p546, out_$i547, out_$i548, out_$p549, out_$i550, out_$i551, out_$i552, out_$i553, out_$p555, out_$p556, out_$i557, out_$i558, out_$p560, out_$p561, out_$p562, out_$p563, out_$p564, out_$p565, out_$p566, out_$i567, out_$i568, out_$i525);
    goto $bb178_last;

  $bb178_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    out_$i525 := 0;
    goto $bb178;

  $bb186:
    assume out_$i568 == 1;
    assume {:verifier.code 0} true;
    out_$i525 := out_$i567;
    assume false;
    return;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p524, out_$i523);
    goto corral_source_split_1304;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    out_$p524 := $add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1360, 1));
    goto corral_source_split_1303;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    out_$i523 := $load.i8($M.0, out_$p522);
    goto corral_source_split_1302;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    out_$p522 := $add.ref($add.ref(out_$p502, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1301;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p521, out_$i520);
    goto corral_source_split_1300;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    out_$p521 := $add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1280, 1));
    goto corral_source_split_1299;

  $bb177:
    assume {:verifier.code 0} true;
    goto corral_source_split_1298;

  $bb176:
    assume !(out_$i518 == 1);
    assume {:verifier.code 0} true;
    out_$i520 := out_$i517;
    goto $bb177;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    out_$i520 := out_$i519;
    goto $bb177;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} out_$i519 := usb_endpoint_maxp(out_$p502);
    call {:si_unique_call 265} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i519);
    goto corral_source_split_1296;

  $bb175:
    assume out_$i518 == 1;
    goto corral_source_split_1295;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    out_$i518 := $eq.i32(out_$i517, 0);
    goto corral_source_split_1293;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    out_$i517 := $trunc.i64.i32(out_$i516);
    call {:si_unique_call 263} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i517);
    goto corral_source_split_1292;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    out_$i516 := $load.i64($M.0, out_$p515);
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    out_$p515 := $add.ref($add.ref(out_$p514, $mul.ref(0, 552)), $mul.ref(264, 1));
    goto corral_source_split_1290;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    out_$p514 := $load.ref($M.0, out_$p513);
    goto corral_source_split_1289;

  $bb174:
    assume {:verifier.code 0} true;
    out_$p513 := $add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1288;

  $bb173:
    assume !(out_$i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    out_$i512 := $ne.i32(out_$i511, 0);
    goto corral_source_split_1284;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} out_$i511 := __kfifo_int_must_check_helper(out_$i510);
    call {:si_unique_call 262} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i511);
    goto corral_source_split_1283;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} out_$i510 := __kfifo_alloc(out_$p509, 4096, 1, 208);
    call {:si_unique_call 260} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i510);
    goto corral_source_split_1282;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    out_$p509 := $bitcast.ref.ref(out_$p508);
    goto corral_source_split_1281;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    out_$p508 := $add.ref($add.ref($add.ref(out_$p506, $mul.ref(0, 2992)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_1280;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    out_$p506 := $load.ref($M.0, out_$p505);
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    out_$p505 := $add.ref($add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i503, 8));
    goto corral_source_split_1278;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$i503 := $sext.i32.i64(out_$i499);
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$p502 := $load.ref($M.18, out_$p501);
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    out_$p501 := $add.ref($add.ref(in_$p5, $mul.ref(0, 64)), $mul.ref(out_$i500, 8));
    goto corral_source_split_1275;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i500 := $sext.i32.i64(out_$i499);
    goto corral_source_split_1274;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb189_dummy:
    call {:si_unique_call 1} out_$i500, out_$p501, out_$p502, out_$i503, out_$p505, out_$p506, out_$p508, out_$p509, out_$i510, out_$i511, out_$i512, out_$p513, out_$p514, out_$p515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$p521, out_$p522, out_$i523, out_$p524, out_$i526, out_$p527, out_$p528, out_$i529, out_$p531, out_$i532, out_$p534, out_$p535, out_$i536, out_$i537, out_$i538, out_$p539, out_$i540, out_$p542, out_$i543, out_$p545, out_$p546, out_$i547, out_$i548, out_$p549, out_$i550, out_$i551, out_$i552, out_$i553, out_$p555, out_$p556, out_$i557, out_$i558, out_$p560, out_$p561, out_$p562, out_$p563, out_$p564, out_$p565, out_$p566, out_$i567, out_$i568, out_$i525, out_$p570, out_$p571, out_$p572, out_$p574, out_$p575, out_$p576, out_$i577, out_$i578, out_$i499 := usb_serial_probe_loop_$bb170(in_$p5, in_$p21, in_$p52, in_$i97, out_$i500, out_$p501, out_$p502, out_$i503, out_$p505, out_$p506, out_$p508, out_$p509, out_$i510, out_$i511, out_$i512, out_$p513, out_$p514, out_$p515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$p521, out_$p522, out_$i523, out_$p524, out_$i526, out_$p527, out_$p528, out_$i529, out_$p531, out_$i532, out_$p534, out_$p535, out_$i536, out_$i537, out_$i538, out_$p539, out_$i540, out_$p542, out_$i543, out_$p545, out_$p546, out_$i547, out_$i548, out_$p549, out_$i550, out_$i551, out_$i552, out_$i553, out_$p555, out_$p556, out_$i557, out_$i558, out_$p560, out_$p561, out_$p562, out_$p563, out_$p564, out_$p565, out_$p566, out_$i567, out_$i568, out_$i525, out_$p570, out_$p571, out_$p572, out_$p574, out_$p575, out_$p576, out_$i577, out_$i578, out_$i499);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb170(in_$p5: ref, in_$p21: ref, in_$p52: ref, in_$i97: i32, in_$i500: i64, in_$p501: ref, in_$p502: ref, in_$i503: i64, in_$p505: ref, in_$p506: ref, in_$p508: ref, in_$p509: ref, in_$i510: i32, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$p514: ref, in_$p515: ref, in_$i516: i64, in_$i517: i32, in_$i518: i1, in_$i519: i32, in_$i520: i32, in_$p521: ref, in_$p522: ref, in_$i523: i8, in_$p524: ref, in_$i526: i64, in_$p527: ref, in_$p528: ref, in_$i529: i64, in_$p531: ref, in_$i532: i64, in_$p534: ref, in_$p535: ref, in_$i536: i64, in_$i537: i1, in_$i538: i64, in_$p539: ref, in_$i540: i64, in_$p542: ref, in_$i543: i64, in_$p545: ref, in_$p546: ref, in_$i547: i64, in_$i548: i1, in_$p549: ref, in_$i550: i8, in_$i551: i32, in_$i552: i32, in_$i553: i64, in_$p555: ref, in_$p556: ref, in_$i557: i32, in_$i558: i64, in_$p560: ref, in_$p561: ref, in_$p562: ref, in_$p563: ref, in_$p564: ref, in_$p565: ref, in_$p566: ref, in_$i567: i32, in_$i568: i1, in_$i525: i32, in_$p570: ref, in_$p571: ref, in_$p572: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$i577: i32, in_$i578: i1, in_$i499: i32) returns (out_$i500: i64, out_$p501: ref, out_$p502: ref, out_$i503: i64, out_$p505: ref, out_$p506: ref, out_$p508: ref, out_$p509: ref, out_$i510: i32, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$p514: ref, out_$p515: ref, out_$i516: i64, out_$i517: i32, out_$i518: i1, out_$i519: i32, out_$i520: i32, out_$p521: ref, out_$p522: ref, out_$i523: i8, out_$p524: ref, out_$i526: i64, out_$p527: ref, out_$p528: ref, out_$i529: i64, out_$p531: ref, out_$i532: i64, out_$p534: ref, out_$p535: ref, out_$i536: i64, out_$i537: i1, out_$i538: i64, out_$p539: ref, out_$i540: i64, out_$p542: ref, out_$i543: i64, out_$p545: ref, out_$p546: ref, out_$i547: i64, out_$i548: i1, out_$p549: ref, out_$i550: i8, out_$i551: i32, out_$i552: i32, out_$i553: i64, out_$p555: ref, out_$p556: ref, out_$i557: i32, out_$i558: i64, out_$p560: ref, out_$p561: ref, out_$p562: ref, out_$p563: ref, out_$p564: ref, out_$p565: ref, out_$p566: ref, out_$i567: i32, out_$i568: i1, out_$i525: i32, out_$p570: ref, out_$p571: ref, out_$p572: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$i577: i32, out_$i578: i1, out_$i499: i32);
  modifies $M.0, $M.11, $M.10, $CurrAddr, $M.7;



implementation usb_serial_probe_loop_$bb153(in_$p21: ref, in_$p52: ref, in_$p427: ref, in_$p431: ref, in_$i439: i32, in_$i445: i64, in_$p446: ref, in_$p447: ref, in_$i448: i64, in_$p450: ref, in_$i451: i64, in_$p453: ref, in_$p454: ref, in_$i455: i64, in_$i456: i1, in_$i457: i64, in_$p458: ref, in_$i459: i64, in_$p461: ref, in_$i462: i64, in_$p464: ref, in_$p465: ref, in_$i466: i64, in_$i467: i1, in_$p468: ref, in_$i469: i8, in_$i470: i32, in_$i471: i32, in_$i472: i64, in_$p474: ref, in_$p475: ref, in_$i476: i32, in_$i477: i64, in_$p479: ref, in_$p480: ref, in_$p481: ref, in_$p482: ref, in_$p483: ref, in_$p484: ref, in_$p485: ref, in_$i486: i32, in_$i487: i1, in_$i444: i32) returns (out_$i445: i64, out_$p446: ref, out_$p447: ref, out_$i448: i64, out_$p450: ref, out_$i451: i64, out_$p453: ref, out_$p454: ref, out_$i455: i64, out_$i456: i1, out_$i457: i64, out_$p458: ref, out_$i459: i64, out_$p461: ref, out_$i462: i64, out_$p464: ref, out_$p465: ref, out_$i466: i64, out_$i467: i1, out_$p468: ref, out_$i469: i8, out_$i470: i32, out_$i471: i32, out_$i472: i64, out_$p474: ref, out_$p475: ref, out_$i476: i32, out_$i477: i64, out_$p479: ref, out_$p480: ref, out_$p481: ref, out_$p482: ref, out_$p483: ref, out_$p484: ref, out_$p485: ref, out_$i486: i32, out_$i487: i1, out_$i444: i32)
{

  entry:
    out_$i445, out_$p446, out_$p447, out_$i448, out_$p450, out_$i451, out_$p453, out_$p454, out_$i455, out_$i456, out_$i457, out_$p458, out_$i459, out_$p461, out_$i462, out_$p464, out_$p465, out_$i466, out_$i467, out_$p468, out_$i469, out_$i470, out_$i471, out_$i472, out_$p474, out_$p475, out_$i476, out_$i477, out_$p479, out_$p480, out_$p481, out_$p482, out_$p483, out_$p484, out_$p485, out_$i486, out_$i487, out_$i444 := in_$i445, in_$p446, in_$p447, in_$i448, in_$p450, in_$i451, in_$p453, in_$p454, in_$i455, in_$i456, in_$i457, in_$p458, in_$i459, in_$p461, in_$i462, in_$p464, in_$p465, in_$i466, in_$i467, in_$p468, in_$i469, in_$i470, in_$i471, in_$i472, in_$p474, in_$p475, in_$i476, in_$i477, in_$p479, in_$p480, in_$p481, in_$p482, in_$p483, in_$p484, in_$p485, in_$i486, in_$i487, in_$i444;
    goto $bb153, exit;

  $bb153:
    assume {:verifier.code 0} true;
    goto corral_source_split_1205;

  $bb161:
    assume out_$i487 == 1;
    assume {:verifier.code 0} true;
    out_$i444 := out_$i486;
    goto $bb161_dummy;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    out_$i487 := $ule.i32(out_$i486, 1);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$i486 := $add.i32(out_$i444, 1);
    call {:si_unique_call 257} {:cexpr "j"} boogie_si_record_i32(out_$i486);
    goto corral_source_split_1252;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} ldv_usb_fill_bulk_urb_14(out_$p475, in_$p21, out_$i476, out_$p480, in_$i439, out_$p484, out_$p485);
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    out_$p485 := $bitcast.ref.ref(in_$p431);
    goto corral_source_split_1250;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    out_$p484 := $load.ref($M.0, out_$p483);
    goto corral_source_split_1249;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$p483 := $add.ref($add.ref(out_$p482, $mul.ref(0, 552)), $mul.ref(520, 1));
    goto corral_source_split_1248;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    out_$p482 := $load.ref($M.0, out_$p481);
    goto corral_source_split_1247;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$p481 := $add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$p480 := $load.ref($M.0, out_$p479);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$p479 := $add.ref($add.ref($add.ref(in_$p431, $mul.ref(0, 2992)), $mul.ref(1232, 1)), $mul.ref(out_$i477, 8));
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    out_$i477 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$i476 := $or.i32(out_$i471, $sub.i32(0, 1073741696));
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    out_$p475 := $load.ref($M.0, out_$p474);
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    out_$p474 := $add.ref($add.ref($add.ref(in_$p431, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(out_$i472, 8));
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$i472 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} out_$i471 := __create_pipe(in_$p21, out_$i470);
    call {:si_unique_call 255} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i471);
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    out_$i470 := $zext.i8.i32(out_$i469);
    goto corral_source_split_1237;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    out_$i469 := $load.i8($M.0, out_$p468);
    goto corral_source_split_1236;

  $bb160:
    assume {:verifier.code 0} true;
    out_$p468 := $add.ref($add.ref(in_$p427, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1235;

  $bb159:
    assume !(out_$i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$i467 := $eq.i64(out_$i466, 0);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$i466 := $p2i.ref.i64(out_$p465);
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$p465 := $load.ref($M.0, out_$p464);
    goto corral_source_split_1229;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    out_$p464 := $add.ref($add.ref($add.ref(in_$p431, $mul.ref(0, 2992)), $mul.ref(1232, 1)), $mul.ref(out_$i462, 8));
    goto corral_source_split_1228;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    out_$i462 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p461, out_$p458);
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    out_$p461 := $add.ref($add.ref($add.ref(in_$p431, $mul.ref(0, 2992)), $mul.ref(1232, 1)), $mul.ref(out_$i459, 8));
    goto corral_source_split_1225;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    out_$i459 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1224;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} out_$p458 := kmalloc(out_$i457, 208);
    goto corral_source_split_1223;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i457 := $sext.i32.i64(in_$i439);
    goto corral_source_split_1222;

  $bb156:
    assume !(out_$i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    out_$i456 := $eq.i64(out_$i455, 0);
    goto corral_source_split_1218;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    out_$i455 := $p2i.ref.i64(out_$p454);
    goto corral_source_split_1217;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    out_$p454 := $load.ref($M.0, out_$p453);
    goto corral_source_split_1216;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$p453 := $add.ref($add.ref($add.ref(in_$p431, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(out_$i451, 8));
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    out_$i451 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p450, out_$p447);
    goto corral_source_split_1213;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$p450 := $add.ref($add.ref($add.ref(in_$p431, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(out_$i448, 8));
    goto corral_source_split_1212;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$i448 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} out_$p447 := ldv_usb_alloc_urb_13(0, 208);
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} set_bit(out_$i445, out_$p446);
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    out_$p446 := $add.ref($add.ref(in_$p431, $mul.ref(0, 2992)), $mul.ref(1264, 1));
    goto corral_source_split_1208;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i445 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb161_dummy:
    call {:si_unique_call 1} out_$i445, out_$p446, out_$p447, out_$i448, out_$p450, out_$i451, out_$p453, out_$p454, out_$i455, out_$i456, out_$i457, out_$p458, out_$i459, out_$p461, out_$i462, out_$p464, out_$p465, out_$i466, out_$i467, out_$p468, out_$i469, out_$i470, out_$i471, out_$i472, out_$p474, out_$p475, out_$i476, out_$i477, out_$p479, out_$p480, out_$p481, out_$p482, out_$p483, out_$p484, out_$p485, out_$i486, out_$i487, out_$i444 := usb_serial_probe_loop_$bb153(in_$p21, in_$p52, in_$p427, in_$p431, in_$i439, out_$i445, out_$p446, out_$p447, out_$i448, out_$p450, out_$i451, out_$p453, out_$p454, out_$i455, out_$i456, out_$i457, out_$p458, out_$i459, out_$p461, out_$i462, out_$p464, out_$p465, out_$i466, out_$i467, out_$p468, out_$i469, out_$i470, out_$i471, out_$i472, out_$p474, out_$p475, out_$i476, out_$i477, out_$p479, out_$p480, out_$p481, out_$p482, out_$p483, out_$p484, out_$p485, out_$i486, out_$i487, out_$i444);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb153(in_$p21: ref, in_$p52: ref, in_$p427: ref, in_$p431: ref, in_$i439: i32, in_$i445: i64, in_$p446: ref, in_$p447: ref, in_$i448: i64, in_$p450: ref, in_$i451: i64, in_$p453: ref, in_$p454: ref, in_$i455: i64, in_$i456: i1, in_$i457: i64, in_$p458: ref, in_$i459: i64, in_$p461: ref, in_$i462: i64, in_$p464: ref, in_$p465: ref, in_$i466: i64, in_$i467: i1, in_$p468: ref, in_$i469: i8, in_$i470: i32, in_$i471: i32, in_$i472: i64, in_$p474: ref, in_$p475: ref, in_$i476: i32, in_$i477: i64, in_$p479: ref, in_$p480: ref, in_$p481: ref, in_$p482: ref, in_$p483: ref, in_$p484: ref, in_$p485: ref, in_$i486: i32, in_$i487: i1, in_$i444: i32) returns (out_$i445: i64, out_$p446: ref, out_$p447: ref, out_$i448: i64, out_$p450: ref, out_$i451: i64, out_$p453: ref, out_$p454: ref, out_$i455: i64, out_$i456: i1, out_$i457: i64, out_$p458: ref, out_$i459: i64, out_$p461: ref, out_$i462: i64, out_$p464: ref, out_$p465: ref, out_$i466: i64, out_$i467: i1, out_$p468: ref, out_$i469: i8, out_$i470: i32, out_$i471: i32, out_$i472: i64, out_$p474: ref, out_$p475: ref, out_$i476: i32, out_$i477: i64, out_$p479: ref, out_$p480: ref, out_$p481: ref, out_$p482: ref, out_$p483: ref, out_$p484: ref, out_$p485: ref, out_$i486: i32, out_$i487: i1, out_$i444: i32);
  modifies $M.11, $M.10, $M.0, $CurrAddr, $M.7;



implementation usb_serial_probe_loop_$bb148(in_$p4: ref, in_$p21: ref, in_$p52: ref, in_$i96: i32, in_$i425: i64, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$p433: ref, in_$p434: ref, in_$i435: i64, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$p440: ref, in_$p441: ref, in_$i442: i8, in_$p443: ref, in_$i445: i64, in_$p446: ref, in_$p447: ref, in_$i448: i64, in_$p450: ref, in_$i451: i64, in_$p453: ref, in_$p454: ref, in_$i455: i64, in_$i456: i1, in_$i457: i64, in_$p458: ref, in_$i459: i64, in_$p461: ref, in_$i462: i64, in_$p464: ref, in_$p465: ref, in_$i466: i64, in_$i467: i1, in_$p468: ref, in_$i469: i8, in_$i470: i32, in_$i471: i32, in_$i472: i64, in_$p474: ref, in_$p475: ref, in_$i476: i32, in_$i477: i64, in_$p479: ref, in_$p480: ref, in_$p481: ref, in_$p482: ref, in_$p483: ref, in_$p484: ref, in_$p485: ref, in_$i486: i32, in_$i487: i1, in_$i444: i32, in_$p489: ref, in_$p490: ref, in_$p491: ref, in_$p493: ref, in_$p494: ref, in_$p495: ref, in_$i496: i32, in_$i497: i1, in_$i424: i32) returns (out_$i425: i64, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$p433: ref, out_$p434: ref, out_$i435: i64, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$p440: ref, out_$p441: ref, out_$i442: i8, out_$p443: ref, out_$i445: i64, out_$p446: ref, out_$p447: ref, out_$i448: i64, out_$p450: ref, out_$i451: i64, out_$p453: ref, out_$p454: ref, out_$i455: i64, out_$i456: i1, out_$i457: i64, out_$p458: ref, out_$i459: i64, out_$p461: ref, out_$i462: i64, out_$p464: ref, out_$p465: ref, out_$i466: i64, out_$i467: i1, out_$p468: ref, out_$i469: i8, out_$i470: i32, out_$i471: i32, out_$i472: i64, out_$p474: ref, out_$p475: ref, out_$i476: i32, out_$i477: i64, out_$p479: ref, out_$p480: ref, out_$p481: ref, out_$p482: ref, out_$p483: ref, out_$p484: ref, out_$p485: ref, out_$i486: i32, out_$i487: i1, out_$i444: i32, out_$p489: ref, out_$p490: ref, out_$p491: ref, out_$p493: ref, out_$p494: ref, out_$p495: ref, out_$i496: i32, out_$i497: i1, out_$i424: i32)
{

  entry:
    out_$i425, out_$p426, out_$p427, out_$i428, out_$p430, out_$p431, out_$p432, out_$p433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$p440, out_$p441, out_$i442, out_$p443, out_$i445, out_$p446, out_$p447, out_$i448, out_$p450, out_$i451, out_$p453, out_$p454, out_$i455, out_$i456, out_$i457, out_$p458, out_$i459, out_$p461, out_$i462, out_$p464, out_$p465, out_$i466, out_$i467, out_$p468, out_$i469, out_$i470, out_$i471, out_$i472, out_$p474, out_$p475, out_$i476, out_$i477, out_$p479, out_$p480, out_$p481, out_$p482, out_$p483, out_$p484, out_$p485, out_$i486, out_$i487, out_$i444, out_$p489, out_$p490, out_$p491, out_$p493, out_$p494, out_$p495, out_$i496, out_$i497, out_$i424 := in_$i425, in_$p426, in_$p427, in_$i428, in_$p430, in_$p431, in_$p432, in_$p433, in_$p434, in_$i435, in_$i436, in_$i437, in_$i438, in_$i439, in_$p440, in_$p441, in_$i442, in_$p443, in_$i445, in_$p446, in_$p447, in_$i448, in_$p450, in_$i451, in_$p453, in_$p454, in_$i455, in_$i456, in_$i457, in_$p458, in_$i459, in_$p461, in_$i462, in_$p464, in_$p465, in_$i466, in_$i467, in_$p468, in_$i469, in_$i470, in_$i471, in_$i472, in_$p474, in_$p475, in_$i476, in_$i477, in_$p479, in_$p480, in_$p481, in_$p482, in_$p483, in_$p484, in_$p485, in_$i486, in_$i487, in_$i444, in_$p489, in_$p490, in_$p491, in_$p493, in_$p494, in_$p495, in_$i496, in_$i497, in_$i424;
    goto $bb148, exit;

  $bb148:
    assume {:verifier.code 0} true;
    goto corral_source_split_1177;

  $bb164:
    assume out_$i497 == 1;
    assume {:verifier.code 0} true;
    out_$i424 := out_$i496;
    goto $bb164_dummy;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    out_$i497 := $slt.i32(out_$i496, in_$i96);
    goto corral_source_split_1264;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    out_$i496 := $add.i32(out_$i424, 1);
    call {:si_unique_call 258} {:cexpr "i"} boogie_si_record_i32(out_$i496);
    goto corral_source_split_1263;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p495, out_$p494);
    goto corral_source_split_1262;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    out_$p495 := $add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1200, 1));
    goto corral_source_split_1261;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    out_$p494 := $load.ref($M.0, out_$p493);
    goto corral_source_split_1260;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    out_$p493 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1232, 1)), $mul.ref(0, 8));
    goto corral_source_split_1259;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p491, out_$p490);
    goto corral_source_split_1258;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    out_$p491 := $add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1216, 1));
    goto corral_source_split_1257;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$p490 := $load.ref($M.0, out_$p489);
    goto corral_source_split_1256;

  $bb163:
    assume {:verifier.code 0} true;
    out_$p489 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(0, 8));
    goto corral_source_split_1255;

  $bb162:
    assume !(out_$i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    out_$i487 := $ule.i32(out_$i486, 1);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$i486 := $add.i32(out_$i444, 1);
    call {:si_unique_call 257} {:cexpr "j"} boogie_si_record_i32(out_$i486);
    goto corral_source_split_1252;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} ldv_usb_fill_bulk_urb_14(out_$p475, in_$p21, out_$i476, out_$p480, out_$i439, out_$p484, out_$p485);
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    out_$p485 := $bitcast.ref.ref(out_$p431);
    goto corral_source_split_1250;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    out_$p484 := $load.ref($M.0, out_$p483);
    goto corral_source_split_1249;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$p483 := $add.ref($add.ref(out_$p482, $mul.ref(0, 552)), $mul.ref(520, 1));
    goto corral_source_split_1248;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    out_$p482 := $load.ref($M.0, out_$p481);
    goto corral_source_split_1247;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$p481 := $add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$p480 := $load.ref($M.0, out_$p479);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$p479 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1232, 1)), $mul.ref(out_$i477, 8));
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    out_$i477 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$i476 := $or.i32(out_$i471, $sub.i32(0, 1073741696));
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    out_$p475 := $load.ref($M.0, out_$p474);
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    out_$p474 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(out_$i472, 8));
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$i472 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} out_$i471 := __create_pipe(in_$p21, out_$i470);
    call {:si_unique_call 255} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i471);
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    out_$i470 := $zext.i8.i32(out_$i469);
    goto corral_source_split_1237;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    out_$i469 := $load.i8($M.0, out_$p468);
    goto corral_source_split_1236;

  $bb160:
    assume {:verifier.code 0} true;
    out_$p468 := $add.ref($add.ref(out_$p427, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1235;

  $bb159:
    assume !(out_$i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$i467 := $eq.i64(out_$i466, 0);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$i466 := $p2i.ref.i64(out_$p465);
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$p465 := $load.ref($M.0, out_$p464);
    goto corral_source_split_1229;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    out_$p464 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1232, 1)), $mul.ref(out_$i462, 8));
    goto corral_source_split_1228;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    out_$i462 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p461, out_$p458);
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    out_$p461 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1232, 1)), $mul.ref(out_$i459, 8));
    goto corral_source_split_1225;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    out_$i459 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1224;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} out_$p458 := kmalloc(out_$i457, 208);
    goto corral_source_split_1223;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i457 := $sext.i32.i64(out_$i439);
    goto corral_source_split_1222;

  $bb156:
    assume !(out_$i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    out_$i456 := $eq.i64(out_$i455, 0);
    goto corral_source_split_1218;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    out_$i455 := $p2i.ref.i64(out_$p454);
    goto corral_source_split_1217;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    out_$p454 := $load.ref($M.0, out_$p453);
    goto corral_source_split_1216;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$p453 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(out_$i451, 8));
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    out_$i451 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p450, out_$p447);
    goto corral_source_split_1213;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$p450 := $add.ref($add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1248, 1)), $mul.ref(out_$i448, 8));
    goto corral_source_split_1212;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$i448 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} out_$p447 := ldv_usb_alloc_urb_13(0, 208);
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} set_bit(out_$i445, out_$p446);
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    out_$p446 := $add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1264, 1));
    goto corral_source_split_1208;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i445 := $sext.i32.i64(out_$i444);
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb153:
    call out_$i445, out_$p446, out_$p447, out_$i448, out_$p450, out_$i451, out_$p453, out_$p454, out_$i455, out_$i456, out_$i457, out_$p458, out_$i459, out_$p461, out_$i462, out_$p464, out_$p465, out_$i466, out_$i467, out_$p468, out_$i469, out_$i470, out_$i471, out_$i472, out_$p474, out_$p475, out_$i476, out_$i477, out_$p479, out_$p480, out_$p481, out_$p482, out_$p483, out_$p484, out_$p485, out_$i486, out_$i487, out_$i444 := usb_serial_probe_loop_$bb153(in_$p21, in_$p52, out_$p427, out_$p431, out_$i439, out_$i445, out_$p446, out_$p447, out_$i448, out_$p450, out_$i451, out_$p453, out_$p454, out_$i455, out_$i456, out_$i457, out_$p458, out_$i459, out_$p461, out_$i462, out_$p464, out_$p465, out_$i466, out_$i467, out_$p468, out_$i469, out_$i470, out_$i471, out_$i472, out_$p474, out_$p475, out_$i476, out_$i477, out_$p479, out_$p480, out_$p481, out_$p482, out_$p483, out_$p484, out_$p485, out_$i486, out_$i487, out_$i444);
    goto $bb153_last;

  $bb153_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$i444 := 0;
    goto $bb153;

  $bb161:
    assume out_$i487 == 1;
    assume {:verifier.code 0} true;
    out_$i444 := out_$i486;
    assume false;
    return;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p443, out_$i442);
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$p443 := $add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1224, 1));
    goto corral_source_split_1202;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    out_$i442 := $load.i8($M.0, out_$p441);
    goto corral_source_split_1201;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    out_$p441 := $add.ref($add.ref(out_$p427, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1200;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p440, out_$i439);
    goto corral_source_split_1199;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    out_$p440 := $add.ref($add.ref(out_$p431, $mul.ref(0, 2992)), $mul.ref(1208, 1));
    goto corral_source_split_1198;

  $bb152:
    assume {:verifier.code 0} true;
    goto corral_source_split_1197;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    out_$i439 := out_$i437;
    goto $bb152;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    out_$i439 := out_$i436;
    goto $bb152;

  $bb150:
    assume out_$i438 == 1;
    goto corral_source_split_1193;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    out_$i438 := $sgt.i32(out_$i436, out_$i437);
    goto corral_source_split_1191;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} out_$i437 := usb_endpoint_maxp(out_$p427);
    call {:si_unique_call 250} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i437);
    goto corral_source_split_1190;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    out_$i436 := $trunc.i64.i32(out_$i435);
    call {:si_unique_call 248} {:cexpr "__max1"} boogie_si_record_i32(out_$i436);
    goto corral_source_split_1189;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    out_$i435 := $load.i64($M.0, out_$p434);
    goto corral_source_split_1188;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    out_$p434 := $add.ref($add.ref(out_$p433, $mul.ref(0, 552)), $mul.ref(256, 1));
    goto corral_source_split_1187;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    out_$p433 := $load.ref($M.0, out_$p432);
    goto corral_source_split_1186;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    out_$p432 := $add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_1185;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    out_$p431 := $load.ref($M.0, out_$p430);
    goto corral_source_split_1184;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    out_$p430 := $add.ref($add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i428, 8));
    goto corral_source_split_1183;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    out_$i428 := $sext.i32.i64(out_$i424);
    goto corral_source_split_1182;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    out_$p427 := $load.ref($M.17, out_$p426);
    goto corral_source_split_1181;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    out_$p426 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(out_$i425, 8));
    goto corral_source_split_1180;

  $bb149:
    assume {:verifier.code 0} true;
    out_$i425 := $sext.i32.i64(out_$i424);
    goto corral_source_split_1179;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb151:
    assume !(out_$i438 == 1);
    goto corral_source_split_1195;

  $bb164_dummy:
    call {:si_unique_call 1} out_$i425, out_$p426, out_$p427, out_$i428, out_$p430, out_$p431, out_$p432, out_$p433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$p440, out_$p441, out_$i442, out_$p443, out_$i445, out_$p446, out_$p447, out_$i448, out_$p450, out_$i451, out_$p453, out_$p454, out_$i455, out_$i456, out_$i457, out_$p458, out_$i459, out_$p461, out_$i462, out_$p464, out_$p465, out_$i466, out_$i467, out_$p468, out_$i469, out_$i470, out_$i471, out_$i472, out_$p474, out_$p475, out_$i476, out_$i477, out_$p479, out_$p480, out_$p481, out_$p482, out_$p483, out_$p484, out_$p485, out_$i486, out_$i487, out_$i444, out_$p489, out_$p490, out_$p491, out_$p493, out_$p494, out_$p495, out_$i496, out_$i497, out_$i424 := usb_serial_probe_loop_$bb148(in_$p4, in_$p21, in_$p52, in_$i96, out_$i425, out_$p426, out_$p427, out_$i428, out_$p430, out_$p431, out_$p432, out_$p433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$p440, out_$p441, out_$i442, out_$p443, out_$i445, out_$p446, out_$p447, out_$i448, out_$p450, out_$i451, out_$p453, out_$p454, out_$i455, out_$i456, out_$i457, out_$p458, out_$i459, out_$p461, out_$i462, out_$p464, out_$p465, out_$i466, out_$i467, out_$p468, out_$i469, out_$i470, out_$i471, out_$i472, out_$p474, out_$p475, out_$i476, out_$i477, out_$p479, out_$p480, out_$p481, out_$p482, out_$p483, out_$p484, out_$p485, out_$i486, out_$i487, out_$i444, out_$p489, out_$p490, out_$p491, out_$p493, out_$p494, out_$p495, out_$i496, out_$i497, out_$i424);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb148(in_$p4: ref, in_$p21: ref, in_$p52: ref, in_$i96: i32, in_$i425: i64, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$p433: ref, in_$p434: ref, in_$i435: i64, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$p440: ref, in_$p441: ref, in_$i442: i8, in_$p443: ref, in_$i445: i64, in_$p446: ref, in_$p447: ref, in_$i448: i64, in_$p450: ref, in_$i451: i64, in_$p453: ref, in_$p454: ref, in_$i455: i64, in_$i456: i1, in_$i457: i64, in_$p458: ref, in_$i459: i64, in_$p461: ref, in_$i462: i64, in_$p464: ref, in_$p465: ref, in_$i466: i64, in_$i467: i1, in_$p468: ref, in_$i469: i8, in_$i470: i32, in_$i471: i32, in_$i472: i64, in_$p474: ref, in_$p475: ref, in_$i476: i32, in_$i477: i64, in_$p479: ref, in_$p480: ref, in_$p481: ref, in_$p482: ref, in_$p483: ref, in_$p484: ref, in_$p485: ref, in_$i486: i32, in_$i487: i1, in_$i444: i32, in_$p489: ref, in_$p490: ref, in_$p491: ref, in_$p493: ref, in_$p494: ref, in_$p495: ref, in_$i496: i32, in_$i497: i1, in_$i424: i32) returns (out_$i425: i64, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$p433: ref, out_$p434: ref, out_$i435: i64, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$p440: ref, out_$p441: ref, out_$i442: i8, out_$p443: ref, out_$i445: i64, out_$p446: ref, out_$p447: ref, out_$i448: i64, out_$p450: ref, out_$i451: i64, out_$p453: ref, out_$p454: ref, out_$i455: i64, out_$i456: i1, out_$i457: i64, out_$p458: ref, out_$i459: i64, out_$p461: ref, out_$i462: i64, out_$p464: ref, out_$p465: ref, out_$i466: i64, out_$i467: i1, out_$p468: ref, out_$i469: i8, out_$i470: i32, out_$i471: i32, out_$i472: i64, out_$p474: ref, out_$p475: ref, out_$i476: i32, out_$i477: i64, out_$p479: ref, out_$p480: ref, out_$p481: ref, out_$p482: ref, out_$p483: ref, out_$p484: ref, out_$p485: ref, out_$i486: i32, out_$i487: i1, out_$i444: i32, out_$p489: ref, out_$p490: ref, out_$p491: ref, out_$p493: ref, out_$p494: ref, out_$p495: ref, out_$i496: i32, out_$i497: i1, out_$i424: i32);
  modifies $M.0, $M.11, $M.10, $CurrAddr, $M.7;



implementation usb_serial_probe_loop_$bb136(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p52: ref, in_$i361: i32, in_$p383: ref, in_$p384: ref, in_$i385: i64, in_$i386: i1, in_$p387: ref, in_$p389: ref, in_$p390: ref, in_$p391: ref, in_$p394: ref, in_$p395: ref, in_$p396: ref, in_$p397: ref, in_$p399: ref, in_$p400: ref, in_$p401: ref, in_$p403: ref, in_$p405: ref, in_$p407: ref, in_$i408: i64, in_$p410: ref, in_$p411: ref, in_$p413: ref, in_$p415: ref, in_$p417: ref, in_$p419: ref, in_$p420: ref, in_$i421: i32, in_$i422: i1, in_$i382: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_31: ref) returns (out_$p383: ref, out_$p384: ref, out_$i385: i64, out_$i386: i1, out_$p387: ref, out_$p389: ref, out_$p390: ref, out_$p391: ref, out_$p394: ref, out_$p395: ref, out_$p396: ref, out_$p397: ref, out_$p399: ref, out_$p400: ref, out_$p401: ref, out_$p403: ref, out_$p405: ref, out_$p407: ref, out_$i408: i64, out_$p410: ref, out_$p411: ref, out_$p413: ref, out_$p415: ref, out_$p417: ref, out_$p419: ref, out_$p420: ref, out_$i421: i32, out_$i422: i1, out_$i382: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_31: ref)
{

  entry:
    out_$p383, out_$p384, out_$i385, out_$i386, out_$p387, out_$p389, out_$p390, out_$p391, out_$p394, out_$p395, out_$p396, out_$p397, out_$p399, out_$p400, out_$p401, out_$p403, out_$p405, out_$p407, out_$i408, out_$p410, out_$p411, out_$p413, out_$p415, out_$p417, out_$p419, out_$p420, out_$i421, out_$i422, out_$i382, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_31 := in_$p383, in_$p384, in_$i385, in_$i386, in_$p387, in_$p389, in_$p390, in_$p391, in_$p394, in_$p395, in_$p396, in_$p397, in_$p399, in_$p400, in_$p401, in_$p403, in_$p405, in_$p407, in_$i408, in_$p410, in_$p411, in_$p413, in_$p415, in_$p417, in_$p419, in_$p420, in_$i421, in_$i422, in_$i382, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_vslice_dummy_var_31;
    goto $bb136, exit;

  $bb136:
    assume {:verifier.code 0} true;
    goto corral_source_split_1115;

  $bb142:
    assume out_$i422 == 1;
    assume {:verifier.code 0} true;
    out_$i382 := out_$i421;
    goto $bb142_dummy;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    out_$i422 := $slt.i32(out_$i421, in_$i361);
    goto corral_source_split_1169;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    out_$i421 := $add.i32(out_$i382, 1);
    call {:si_unique_call 247} {:cexpr "i"} boogie_si_record_i32(out_$i421);
    goto corral_source_split_1168;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} device_initialize(out_$p420);
    goto corral_source_split_1167;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    out_$p420 := $add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1166;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p419, usb_serial_port_release);
    goto corral_source_split_1165;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    out_$p419 := $add.ref($add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1608, 1)), $mul.ref(1360, 1));
    goto corral_source_split_1164;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p417, usb_serial_bus_type);
    goto corral_source_split_1163;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    out_$p417 := $add.ref($add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1608, 1)), $mul.ref(496, 1));
    goto corral_source_split_1162;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p415, $0.ref);
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    out_$p415 := $add.ref($add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1608, 1)), $mul.ref(504, 1));
    goto corral_source_split_1160;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p413, out_$p411);
    goto corral_source_split_1159;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    out_$p413 := $add.ref($add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1608, 1)), $mul.ref(0, 1));
    goto corral_source_split_1158;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1157;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p410, out_$p383);
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    out_$p410 := $add.ref($add.ref($add.ref(in_$p52, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i408, 8));
    goto corral_source_split_1155;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    out_$i408 := $sext.i32.i64(out_$i382);
    goto corral_source_split_1154;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p407, usb_serial_port_work);
    goto corral_source_split_1153;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$p407 := $add.ref($add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1512, 1)), $mul.ref(24, 1));
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} INIT_LIST_HEAD(out_$p405);
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    out_$p405 := $add.ref($add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1512, 1)), $mul.ref(8, 1));
    goto corral_source_split_1150;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} lockdep_init_map(out_$p403, .str.38, in_$p15, 0);
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    out_$p403 := $add.ref($add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1512, 1)), $mul.ref(32, 1));
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 243} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p400, out_$p401, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$p401 := $bitcast.ref.ref(in_$p16);
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$p400 := $bitcast.ref.ref(out_$p399);
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    out_$p399 := $add.ref($add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1512, 1)), $mul.ref(0, 1));
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p397, 137438953408);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$p397 := $add.ref($add.ref(in_$p16, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} __init_work(out_$p396, 0);
    goto corral_source_split_1141;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    out_$p396 := $add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1512, 1));
    goto corral_source_split_1140;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} __raw_spin_lock_init(out_$p395, .str.37, in_$p14);
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    out_$p395 := $bitcast.ref.ref(out_$p394);
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    out_$p394 := $add.ref($add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1064, 1)), $mul.ref(0, 1));
    goto corral_source_split_1137;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} out_vslice_dummy_var_31 := spinlock_check(out_$p391);
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    out_$p391 := $add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_1135;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p390, in_$p52);
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    out_$p390 := $add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p389, serial_port_ops);
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$p389 := $add.ref($add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(8, 1)), $mul.ref(328, 1));
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} tty_port_init(out_$p387);
    goto corral_source_split_1130;

  $bb141:
    assume {:verifier.code 0} true;
    out_$p387 := $add.ref($add.ref(out_$p384, $mul.ref(0, 2992)), $mul.ref(8, 1));
    goto corral_source_split_1129;

  $bb139:
    assume !(out_$i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    out_$i386 := $eq.i64(out_$i385, 0);
    goto corral_source_split_1120;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    out_$i385 := $p2i.ref.i64(out_$p384);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$p384 := $bitcast.ref.ref(out_$p383);
    goto corral_source_split_1118;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} out_$p383 := kzalloc(2984, 208);
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb142_dummy:
    call {:si_unique_call 1} out_$p383, out_$p384, out_$i385, out_$i386, out_$p387, out_$p389, out_$p390, out_$p391, out_$p394, out_$p395, out_$p396, out_$p397, out_$p399, out_$p400, out_$p401, out_$p403, out_$p405, out_$p407, out_$i408, out_$p410, out_$p411, out_$p413, out_$p415, out_$p417, out_$p419, out_$p420, out_$i421, out_$i422, out_$i382, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_31 := usb_serial_probe_loop_$bb136(in_$p0, in_$p14, in_$p15, in_$p16, in_$p52, in_$i361, out_$p383, out_$p384, out_$i385, out_$i386, out_$p387, out_$p389, out_$p390, out_$p391, out_$p394, out_$p395, out_$p396, out_$p397, out_$p399, out_$p400, out_$p401, out_$p403, out_$p405, out_$p407, out_$i408, out_$p410, out_$p411, out_$p413, out_$p415, out_$p417, out_$p419, out_$p420, out_$i421, out_$i422, out_$i382, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_31);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb136(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p52: ref, in_$i361: i32, in_$p383: ref, in_$p384: ref, in_$i385: i64, in_$i386: i1, in_$p387: ref, in_$p389: ref, in_$p390: ref, in_$p391: ref, in_$p394: ref, in_$p395: ref, in_$p396: ref, in_$p397: ref, in_$p399: ref, in_$p400: ref, in_$p401: ref, in_$p403: ref, in_$p405: ref, in_$p407: ref, in_$i408: i64, in_$p410: ref, in_$p411: ref, in_$p413: ref, in_$p415: ref, in_$p417: ref, in_$p419: ref, in_$p420: ref, in_$i421: i32, in_$i422: i1, in_$i382: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_31: ref) returns (out_$p383: ref, out_$p384: ref, out_$i385: i64, out_$i386: i1, out_$p387: ref, out_$p389: ref, out_$p390: ref, out_$p391: ref, out_$p394: ref, out_$p395: ref, out_$p396: ref, out_$p397: ref, out_$p399: ref, out_$p400: ref, out_$p401: ref, out_$p403: ref, out_$p405: ref, out_$p407: ref, out_$i408: i64, out_$p410: ref, out_$p411: ref, out_$p413: ref, out_$p415: ref, out_$p417: ref, out_$p419: ref, out_$p420: ref, out_$i421: i32, out_$i422: i1, out_$i382: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_31: ref);
  modifies $M.0, $CurrAddr;



implementation usb_serial_probe_loop_$bb84(in_$p2: ref, in_$p12: ref, in_$p20: ref, in_$p263: ref, in_$p265: ref, in_$p272: ref, in_$p273: ref, in_$i274: i64, in_$p276: ref, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$p284: ref, in_$i285: i24, in_$i286: i24, in_$i287: i24, in_$p288: ref, in_$p289: ref, in_$i290: i8, in_$i291: i64, in_$i292: i64, in_$i293: i64, in_$i294: i1, in_$i296: i64, in_$p297: ref, in_$i298: i32, in_$i299: i32, in_$i300: i32, in_$i301: i8, in_$i302: i32, in_$i303: i1, in_$i270: i32, in_$i271: i32, in_$i304: i32, in_vslice_dummy_var_24: i32) returns (out_$p272: ref, out_$p273: ref, out_$i274: i64, out_$p276: ref, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$p284: ref, out_$i285: i24, out_$i286: i24, out_$i287: i24, out_$p288: ref, out_$p289: ref, out_$i290: i8, out_$i291: i64, out_$i292: i64, out_$i293: i64, out_$i294: i1, out_$i296: i64, out_$p297: ref, out_$i298: i32, out_$i299: i32, out_$i300: i32, out_$i301: i8, out_$i302: i32, out_$i303: i1, out_$i270: i32, out_$i271: i32, out_$i304: i32, out_vslice_dummy_var_24: i32)
{

  entry:
    out_$p272, out_$p273, out_$i274, out_$p276, out_$i277, out_$i278, out_$p279, out_$p280, out_$p281, out_$p282, out_$p283, out_$p284, out_$i285, out_$i286, out_$i287, out_$p288, out_$p289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i270, out_$i271, out_$i304, out_vslice_dummy_var_24 := in_$p272, in_$p273, in_$i274, in_$p276, in_$i277, in_$i278, in_$p279, in_$p280, in_$p281, in_$p282, in_$p283, in_$p284, in_$i285, in_$i286, in_$i287, in_$p288, in_$p289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i296, in_$p297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i270, in_$i271, in_$i304, in_vslice_dummy_var_24;
    goto $bb84, exit;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_930;

  $bb92:
    assume out_$i303 == 1;
    assume {:verifier.code 0} true;
    out_$i270, out_$i271 := out_$i300, out_$i299;
    goto $bb92_dummy;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    out_$i304 := out_$i299;
    assume true;
    goto $bb92;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    out_$i303 := $sgt.i32(out_$i302, out_$i300);
    goto corral_source_split_976;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    out_$i302 := $zext.i8.i32(out_$i301);
    goto corral_source_split_975;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    out_$i301 := $load.i8($M.0, in_$p265);
    goto corral_source_split_974;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    out_$i300 := $add.i32(out_$i270, 1);
    call {:si_unique_call 219} {:cexpr "i"} boogie_si_record_i32(out_$i300);
    goto corral_source_split_973;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_972;

  $bb87:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    out_$i299 := out_$i271;
    goto $bb91;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    out_$i299 := out_$i298;
    goto $bb91;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$i298 := $add.i32(out_$i271, 1);
    call {:si_unique_call 218} {:cexpr "num_interrupt_in"} boogie_si_record_i32(out_$i298);
    goto corral_source_split_970;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, out_$p297, out_$p276);
    goto corral_source_split_969;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    out_$p297 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i296, 8));
    goto corral_source_split_968;

  $bb90:
    assume {:verifier.code 0} true;
    out_$i296 := $sext.i32.i64(out_$i271);
    goto corral_source_split_967;

  $bb89:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} out_vslice_dummy_var_24 := __dynamic_dev_dbg.ref.ref.ref(in_$p12, in_$p20, .str.30);
    goto corral_source_split_965;

  $bb88:
    assume out_$i294 == 1;
    goto corral_source_split_964;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    out_$i294 := $ne.i64(out_$i293, 0);
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} out_$i293 := ldv__builtin_expect(out_$i292, 0);
    call {:si_unique_call 216} {:cexpr "tmp___12"} boogie_si_record_i64(out_$i293);
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$i292 := $and.i64(out_$i291, 1);
    goto corral_source_split_960;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$i291 := $zext.i8.i64(out_$i290);
    goto corral_source_split_959;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    out_$i290 := $load.i8($M.6, out_$p289);
    goto corral_source_split_958;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$p289 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_957;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p288, 0);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$p288 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p284, out_$i287);
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$i287 := $or.i24(out_$i286, 870);
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$i286 := $and.i24(out_$i285, $sub.i24(0, 262144));
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$i285 := $load.i24($M.5, out_$p284);
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    out_$p284 := $bitcast.ref.ref(out_$p283);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p282, .str.30);
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$p282 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p281, .str.22);
    goto corral_source_split_946;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p280, .str.21);
    goto corral_source_split_944;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    out_$p280 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_943;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p279, .str);
    goto corral_source_split_942;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(in_$p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_941;

  $bb86:
    assume out_$i278 == 1;
    goto corral_source_split_940;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    out_$i278 := $ne.i32(out_$i277, 0);
    goto corral_source_split_938;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} out_$i277 := usb_endpoint_is_int_in(out_$p276);
    call {:si_unique_call 214} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i277);
    goto corral_source_split_937;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    out_$p276 := $add.ref($add.ref(out_$p273, $mul.ref(out_$i274, 64)), $mul.ref(0, 1));
    goto corral_source_split_936;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    out_$i274 := $sext.i32.i64(out_$i270);
    goto corral_source_split_934;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$p273 := $load.ref($M.0, out_$p272);
    goto corral_source_split_933;

  $bb85:
    assume {:verifier.code 0} true;
    out_$p272 := $add.ref($add.ref(in_$p263, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb92_dummy:
    call {:si_unique_call 1} out_$p272, out_$p273, out_$i274, out_$p276, out_$i277, out_$i278, out_$p279, out_$p280, out_$p281, out_$p282, out_$p283, out_$p284, out_$i285, out_$i286, out_$i287, out_$p288, out_$p289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i270, out_$i271, out_$i304, out_vslice_dummy_var_24 := usb_serial_probe_loop_$bb84(in_$p2, in_$p12, in_$p20, in_$p263, in_$p265, out_$p272, out_$p273, out_$i274, out_$p276, out_$i277, out_$i278, out_$p279, out_$p280, out_$p281, out_$p282, out_$p283, out_$p284, out_$i285, out_$i286, out_$i287, out_$p288, out_$p289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i270, out_$i271, out_$i304, out_vslice_dummy_var_24);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb84(in_$p2: ref, in_$p12: ref, in_$p20: ref, in_$p263: ref, in_$p265: ref, in_$p272: ref, in_$p273: ref, in_$i274: i64, in_$p276: ref, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$p284: ref, in_$i285: i24, in_$i286: i24, in_$i287: i24, in_$p288: ref, in_$p289: ref, in_$i290: i8, in_$i291: i64, in_$i292: i64, in_$i293: i64, in_$i294: i1, in_$i296: i64, in_$p297: ref, in_$i298: i32, in_$i299: i32, in_$i300: i32, in_$i301: i8, in_$i302: i32, in_$i303: i1, in_$i270: i32, in_$i271: i32, in_$i304: i32, in_vslice_dummy_var_24: i32) returns (out_$p272: ref, out_$p273: ref, out_$i274: i64, out_$p276: ref, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$p284: ref, out_$i285: i24, out_$i286: i24, out_$i287: i24, out_$p288: ref, out_$p289: ref, out_$i290: i8, out_$i291: i64, out_$i292: i64, out_$i293: i64, out_$i294: i1, out_$i296: i64, out_$p297: ref, out_$i298: i32, out_$i299: i32, out_$i300: i32, out_$i301: i8, out_$i302: i32, out_$i303: i1, out_$i270: i32, out_$i271: i32, out_$i304: i32, out_vslice_dummy_var_24: i32);
  modifies $M.19, $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation usb_serial_probe_loop_$bb29(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p20: ref, in_$p88: ref, in_$p90: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i24, in_$i117: i24, in_$i118: i24, in_$p119: ref, in_$p120: ref, in_$i121: i8, in_$i122: i64, in_$i123: i64, in_$i124: i64, in_$i125: i1, in_$i127: i64, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i24, in_$i140: i24, in_$i141: i24, in_$p142: ref, in_$p143: ref, in_$i144: i8, in_$i145: i64, in_$i146: i64, in_$i147: i64, in_$i148: i1, in_$i150: i64, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i24, in_$i163: i24, in_$i164: i24, in_$p165: ref, in_$p166: ref, in_$i167: i8, in_$i168: i64, in_$i169: i64, in_$i170: i64, in_$i171: i1, in_$i173: i64, in_$p174: ref, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$i185: i24, in_$i186: i24, in_$i187: i24, in_$p188: ref, in_$p189: ref, in_$i190: i8, in_$i191: i64, in_$i192: i64, in_$i193: i64, in_$i194: i1, in_$i196: i64, in_$p197: ref, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i8, in_$i202: i32, in_$i203: i1, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i204: i32, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_vslice_dummy_var_20: i32, in_vslice_dummy_var_21: i32, in_vslice_dummy_var_22: i32, in_vslice_dummy_var_23: i32) returns (out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i24, out_$i117: i24, out_$i118: i24, out_$p119: ref, out_$p120: ref, out_$i121: i8, out_$i122: i64, out_$i123: i64, out_$i124: i64, out_$i125: i1, out_$i127: i64, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i24, out_$i140: i24, out_$i141: i24, out_$p142: ref, out_$p143: ref, out_$i144: i8, out_$i145: i64, out_$i146: i64, out_$i147: i64, out_$i148: i1, out_$i150: i64, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i24, out_$i163: i24, out_$i164: i24, out_$p165: ref, out_$p166: ref, out_$i167: i8, out_$i168: i64, out_$i169: i64, out_$i170: i64, out_$i171: i1, out_$i173: i64, out_$p174: ref, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$i185: i24, out_$i186: i24, out_$i187: i24, out_$p188: ref, out_$p189: ref, out_$i190: i8, out_$i191: i64, out_$i192: i64, out_$i193: i64, out_$i194: i1, out_$i196: i64, out_$p197: ref, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i8, out_$i202: i32, out_$i203: i1, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i204: i32, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_vslice_dummy_var_20: i32, out_vslice_dummy_var_21: i32, out_vslice_dummy_var_22: i32, out_vslice_dummy_var_23: i32)
{

  entry:
    out_$p103, out_$p104, out_$i105, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i204, out_$i205, out_$i206, out_$i207, out_vslice_dummy_var_20, out_vslice_dummy_var_21, out_vslice_dummy_var_22, out_vslice_dummy_var_23 := in_$p103, in_$p104, in_$i105, in_$p107, in_$i108, in_$i109, in_$p110, in_$p111, in_$p112, in_$p113, in_$p114, in_$p115, in_$i116, in_$i117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i127, in_$p128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p133, in_$p134, in_$p135, in_$p136, in_$p137, in_$p138, in_$i139, in_$i140, in_$i141, in_$p142, in_$p143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i150, in_$p151, in_$i152, in_$i153, in_$i154, in_$i155, in_$p156, in_$p157, in_$p158, in_$p159, in_$p160, in_$p161, in_$i162, in_$i163, in_$i164, in_$p165, in_$p166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i173, in_$p174, in_$i175, in_$i176, in_$i177, in_$i178, in_$p179, in_$p180, in_$p181, in_$p182, in_$p183, in_$p184, in_$i185, in_$i186, in_$i187, in_$p188, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i196, in_$p197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i204, in_$i205, in_$i206, in_$i207, in_vslice_dummy_var_20, in_vslice_dummy_var_21, in_vslice_dummy_var_22, in_vslice_dummy_var_23;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_705;

  $bb55:
    assume out_$i203 == 1;
    assume {:verifier.code 0} true;
    out_$i98, out_$i99, out_$i100, out_$i101, out_$i102 := out_$i153, out_$i130, out_$i200, out_$i176, out_$i199;
    goto $bb55_dummy;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i204, out_$i205, out_$i206, out_$i207 := out_$i199, out_$i176, out_$i130, out_$i153;
    assume true;
    goto $bb55;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i203 := $sgt.i32(out_$i202, out_$i200);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$i202 := $zext.i8.i32(out_$i201);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i8($M.0, in_$p90);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$i200 := $add.i32(out_$i100, 1);
    call {:si_unique_call 212} {:cexpr "i"} boogie_si_record_i32(out_$i200);
    goto corral_source_split_856;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_855;

  $bb50:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    out_$i199 := out_$i102;
    goto $bb54;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$i199 := out_$i198;
    goto $bb54;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$i198 := $add.i32(out_$i102, 1);
    call {:si_unique_call 211} {:cexpr "num_interrupt_out"} boogie_si_record_i32(out_$i198);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, out_$p197, out_$p107);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(out_$i196, 8));
    goto corral_source_split_851;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i196 := $sext.i32.i64(out_$i102);
    goto corral_source_split_850;

  $bb52:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} out_vslice_dummy_var_23 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p11, in_$p20, .str.29, out_$i100);
    goto corral_source_split_848;

  $bb51:
    assume out_$i194 == 1;
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i194 := $ne.i64(out_$i193, 0);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} out_$i193 := ldv__builtin_expect(out_$i192, 0);
    call {:si_unique_call 209} {:cexpr "tmp___10"} boogie_si_record_i64(out_$i193);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i192 := $and.i64(out_$i191, 1);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i191 := $zext.i8.i64(out_$i190);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i8($M.6, out_$p189);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p188, 0);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p184, out_$i187);
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i187 := $or.i24(out_$i186, 846);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$i186 := $and.i24(out_$i185, $sub.i24(0, 262144));
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$i185 := $load.i24($M.5, out_$p184);
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$p184 := $bitcast.ref.ref(out_$p183);
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p182, .str.29);
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p181, .str.22);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p180, .str.21);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p179, .str);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_824;

  $bb49:
    assume out_$i178 == 1;
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i32(out_$i177, 0);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} out_$i177 := usb_endpoint_is_int_out(out_$p107);
    call {:si_unique_call 207} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i177);
    goto corral_source_split_820;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_819;

  $bb44:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    out_$i176 := out_$i101;
    goto $bb48;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$i176 := out_$i175;
    goto $bb48;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i175 := $add.i32(out_$i101, 1);
    call {:si_unique_call 205} {:cexpr "num_interrupt_in"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, out_$p174, out_$p107);
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i173, 8));
    goto corral_source_split_815;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i173 := $sext.i32.i64(out_$i101);
    goto corral_source_split_814;

  $bb46:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} out_vslice_dummy_var_22 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p10, in_$p20, .str.28, out_$i100);
    goto corral_source_split_812;

  $bb45:
    assume out_$i171 == 1;
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$i171 := $ne.i64(out_$i170, 0);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} out_$i170 := ldv__builtin_expect(out_$i169, 0);
    call {:si_unique_call 203} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i170);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$i169 := $and.i64(out_$i168, 1);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$i168 := $zext.i8.i64(out_$i167);
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i8($M.6, out_$p166);
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p165, 0);
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p161, out_$i164);
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    out_$i164 := $or.i24(out_$i163, 839);
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$i163 := $and.i24(out_$i162, $sub.i24(0, 262144));
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i24($M.5, out_$p161);
    goto corral_source_split_798;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    out_$p161 := $bitcast.ref.ref(out_$p160);
    goto corral_source_split_797;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_796;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p159, .str.28);
    goto corral_source_split_795;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_794;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p158, .str.22);
    goto corral_source_split_793;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_792;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p157, .str.21);
    goto corral_source_split_791;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p156, .str);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_788;

  $bb43:
    assume out_$i155 == 1;
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$i155 := $ne.i32(out_$i154, 0);
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} out_$i154 := usb_endpoint_is_int_in(out_$p107);
    call {:si_unique_call 201} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i154);
    goto corral_source_split_784;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_783;

  $bb38:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    out_$i153 := out_$i98;
    goto $bb42;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i153 := out_$i152;
    goto $bb42;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$i152 := $add.i32(out_$i98, 1);
    call {:si_unique_call 199} {:cexpr "num_bulk_out"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, out_$p151, out_$p107);
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(in_$p5, $mul.ref(0, 64)), $mul.ref(out_$i150, 8));
    goto corral_source_split_779;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i150 := $sext.i32.i64(out_$i98);
    goto corral_source_split_778;

  $bb40:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} out_vslice_dummy_var_21 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p9, in_$p20, .str.27, out_$i100);
    goto corral_source_split_776;

  $bb39:
    assume out_$i148 == 1;
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$i148 := $ne.i64(out_$i147, 0);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} out_$i147 := ldv__builtin_expect(out_$i146, 0);
    call {:si_unique_call 197} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i147);
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i146 := $and.i64(out_$i145, 1);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i8.i64(out_$i144);
    goto corral_source_split_770;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i8($M.6, out_$p143);
    goto corral_source_split_769;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p142, 0);
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_766;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p138, out_$i141);
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    out_$i141 := $or.i24(out_$i140, 832);
    goto corral_source_split_764;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$i140 := $and.i24(out_$i139, $sub.i24(0, 262144));
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i24($M.5, out_$p138);
    goto corral_source_split_762;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$p138 := $bitcast.ref.ref(out_$p137);
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p136, .str.27);
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p135, .str.22);
    goto corral_source_split_757;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p134, .str.21);
    goto corral_source_split_755;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_754;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p133, .str);
    goto corral_source_split_753;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_752;

  $bb37:
    assume out_$i132 == 1;
    goto corral_source_split_751;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i32(out_$i131, 0);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} out_$i131 := usb_endpoint_is_bulk_out(out_$p107);
    call {:si_unique_call 195} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i131);
    goto corral_source_split_748;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_747;

  $bb32:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := out_$i99;
    goto $bb36;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$i130 := out_$i129;
    goto $bb36;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$i129 := $add.i32(out_$i99, 1);
    call {:si_unique_call 193} {:cexpr "num_bulk_in"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, out_$p128, out_$p107);
    goto corral_source_split_744;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(out_$i127, 8));
    goto corral_source_split_743;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(out_$i99);
    goto corral_source_split_742;

  $bb34:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} out_vslice_dummy_var_20 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p8, in_$p20, .str.26, out_$i100);
    goto corral_source_split_740;

  $bb33:
    assume out_$i125 == 1;
    goto corral_source_split_739;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i64(out_$i124, 0);
    goto corral_source_split_737;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} out_$i124 := ldv__builtin_expect(out_$i123, 0);
    call {:si_unique_call 191} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i124);
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$i123 := $and.i64(out_$i122, 1);
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i8.i64(out_$i121);
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i8($M.6, out_$p120);
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p119, 0);
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_730;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p115, out_$i118);
    goto corral_source_split_729;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    out_$i118 := $or.i24(out_$i117, 825);
    goto corral_source_split_728;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    out_$i117 := $and.i24(out_$i116, $sub.i24(0, 262144));
    goto corral_source_split_727;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i24($M.5, out_$p115);
    goto corral_source_split_726;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(out_$p114);
    goto corral_source_split_725;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_724;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p113, .str.26);
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_722;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p112, .str.22);
    goto corral_source_split_721;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_720;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p111, .str.21);
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_718;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p110, .str);
    goto corral_source_split_717;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_716;

  $bb31:
    assume out_$i109 == 1;
    goto corral_source_split_715;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i32(out_$i108, 0);
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} out_$i108 := usb_endpoint_is_bulk_in(out_$p107);
    call {:si_unique_call 189} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_712;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p104, $mul.ref(out_$i105, 64)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    out_$i105 := $sext.i32.i64(out_$i100);
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_708;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p88, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb55_dummy:
    call {:si_unique_call 1} out_$p103, out_$p104, out_$i105, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i204, out_$i205, out_$i206, out_$i207, out_vslice_dummy_var_20, out_vslice_dummy_var_21, out_vslice_dummy_var_22, out_vslice_dummy_var_23 := usb_serial_probe_loop_$bb29(in_$p2, in_$p3, in_$p4, in_$p5, in_$p8, in_$p9, in_$p10, in_$p11, in_$p20, in_$p88, in_$p90, out_$p103, out_$p104, out_$i105, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i204, out_$i205, out_$i206, out_$i207, out_vslice_dummy_var_20, out_vslice_dummy_var_21, out_vslice_dummy_var_22, out_vslice_dummy_var_23);
    return;

  exit:
    return;
}



procedure usb_serial_probe_loop_$bb29(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p20: ref, in_$p88: ref, in_$p90: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i24, in_$i117: i24, in_$i118: i24, in_$p119: ref, in_$p120: ref, in_$i121: i8, in_$i122: i64, in_$i123: i64, in_$i124: i64, in_$i125: i1, in_$i127: i64, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i24, in_$i140: i24, in_$i141: i24, in_$p142: ref, in_$p143: ref, in_$i144: i8, in_$i145: i64, in_$i146: i64, in_$i147: i64, in_$i148: i1, in_$i150: i64, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i24, in_$i163: i24, in_$i164: i24, in_$p165: ref, in_$p166: ref, in_$i167: i8, in_$i168: i64, in_$i169: i64, in_$i170: i64, in_$i171: i1, in_$i173: i64, in_$p174: ref, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$i185: i24, in_$i186: i24, in_$i187: i24, in_$p188: ref, in_$p189: ref, in_$i190: i8, in_$i191: i64, in_$i192: i64, in_$i193: i64, in_$i194: i1, in_$i196: i64, in_$p197: ref, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i8, in_$i202: i32, in_$i203: i1, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i204: i32, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_vslice_dummy_var_20: i32, in_vslice_dummy_var_21: i32, in_vslice_dummy_var_22: i32, in_vslice_dummy_var_23: i32) returns (out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i24, out_$i117: i24, out_$i118: i24, out_$p119: ref, out_$p120: ref, out_$i121: i8, out_$i122: i64, out_$i123: i64, out_$i124: i64, out_$i125: i1, out_$i127: i64, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i24, out_$i140: i24, out_$i141: i24, out_$p142: ref, out_$p143: ref, out_$i144: i8, out_$i145: i64, out_$i146: i64, out_$i147: i64, out_$i148: i1, out_$i150: i64, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i24, out_$i163: i24, out_$i164: i24, out_$p165: ref, out_$p166: ref, out_$i167: i8, out_$i168: i64, out_$i169: i64, out_$i170: i64, out_$i171: i1, out_$i173: i64, out_$p174: ref, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$i185: i24, out_$i186: i24, out_$i187: i24, out_$p188: ref, out_$p189: ref, out_$i190: i8, out_$i191: i64, out_$i192: i64, out_$i193: i64, out_$i194: i1, out_$i196: i64, out_$p197: ref, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i8, out_$i202: i32, out_$i203: i1, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i204: i32, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_vslice_dummy_var_20: i32, out_vslice_dummy_var_21: i32, out_vslice_dummy_var_22: i32, out_vslice_dummy_var_23: i32);
  modifies $M.20, $M.6, $M.5, $M.4, $M.3, $M.2, $M.1, $M.19, $M.18, $M.17;



implementation usb_serial_disconnect_loop_$bb4(in_$p2: ref, in_$p10: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i14: i32, in_vslice_dummy_var_38: i1) returns (out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i14: i32, out_vslice_dummy_var_38: i1)
{

  entry:
    out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i14, out_vslice_dummy_var_38 := in_$i15, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p26, in_$p27, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i14, in_vslice_dummy_var_38;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  $bb15:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i33;
    goto $bb15_dummy;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i35, out_$i33);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, in_$p10);
    goto corral_source_split_1733;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i14, 1);
    call {:si_unique_call 327} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_1732;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} device_del(out_$p32);
    goto corral_source_split_1730;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p18, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1729;

  $bb11:
    assume out_$i31 == 1;
    goto corral_source_split_1728;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} out_$i30 := device_is_registered(out_$p29);
    call {:si_unique_call 325} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p18, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} out_vslice_dummy_var_38 := cancel_work_sync(out_$p27);
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref(0, 2992)), $mul.ref(1512, 1));
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} __wake_up(out_$p26, 1, 1, $0.ref);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 2992)), $mul.ref(8, 1)), $mul.ref(592, 1));
    goto corral_source_split_1720;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} usb_serial_port_poison_urbs(out_$p18);
    goto corral_source_split_1719;

  $bb9:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} tty_kref_put(out_$p22);
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} tty_vhangup(out_$p22);
    goto corral_source_split_1716;

  $bb8:
    assume out_$i24 == 1;
    goto corral_source_split_1715;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} out_$p22 := tty_port_tty_get(out_$p21);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(0, 2992)), $mul.ref(8, 1));
    goto corral_source_split_1710;

  $bb6:
    assume out_$i20 == 1;
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i15, 8));
    goto corral_source_split_1704;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i14, out_vslice_dummy_var_38 := usb_serial_disconnect_loop_$bb4(in_$p2, in_$p10, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i14, out_vslice_dummy_var_38);
    return;

  exit:
    return;
}



procedure usb_serial_disconnect_loop_$bb4(in_$p2: ref, in_$p10: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i14: i32, in_vslice_dummy_var_38: i1) returns (out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i14: i32, out_vslice_dummy_var_38: i1);



implementation usb_serial_suspend_loop_$bb11(in_$p5: ref, in_$p29: ref, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$i33: i32) returns (out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$i33: i32)
{

  entry:
    out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i33 := in_$i34, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i33;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1795;

  $bb16:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i40;
    goto $bb16_dummy;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i43 := $sgt.i32(out_$i42, out_$i40);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, in_$p29);
    goto corral_source_split_1807;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i33, 1);
    call {:si_unique_call 336} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_1806;

  $bb14:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} usb_serial_port_poison_urbs(out_$p37);
    goto corral_source_split_1804;

  $bb13:
    assume out_$i39 == 1;
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i34, 8));
    goto corral_source_split_1798;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i33 := usb_serial_suspend_loop_$bb11(in_$p5, in_$p29, out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i33);
    return;

  exit:
    return;
}



procedure usb_serial_suspend_loop_$bb11(in_$p5: ref, in_$p29: ref, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$i33: i32) returns (out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$i33: i32);



implementation usb_serial_unpoison_port_urbs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := in_$i6, in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  $bb9:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i12;
    goto $bb9_dummy;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    out_$i15 := $sgt.i32(out_$i14, out_$i12);
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_1862;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, in_$p1);
    goto corral_source_split_1861;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i5, 1);
    call {:si_unique_call 345} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_1860;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} usb_serial_port_unpoison_urbs(out_$p9);
    goto corral_source_split_1858;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i64(out_$i10, 0);
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i6, 8));
    goto corral_source_split_1852;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := usb_serial_unpoison_port_urbs_loop_$bb4(in_$p0, in_$p1, out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5);
    return;

  exit:
    return;
}



procedure usb_serial_unpoison_port_urbs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32);



implementation destroy_serial_loop_$bb13(in_$p1: ref, in_$p23: ref, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$i27: i32) returns (out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$i27: i32)
{

  entry:
    out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i27 := in_$i28, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i27;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  $bb18:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i36;
    goto $bb18_dummy;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$i39 := $sgt.i32(out_$i38, out_$i36);
    goto corral_source_split_2004;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.0, in_$p23);
    goto corral_source_split_2002;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i27, 1);
    call {:si_unique_call 367} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_2001;

  $bb16:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} put_device(out_$p35);
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p31, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p34, $0.ref);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_1996;

  $bb15:
    assume out_$i33 == 1;
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, 0);
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 96), 280)), $mul.ref(32, 1)), $mul.ref(out_$i28, 8));
    goto corral_source_split_1990;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i27 := destroy_serial_loop_$bb13(in_$p1, in_$p23, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i27);
    return;

  exit:
    return;
}



procedure destroy_serial_loop_$bb13(in_$p1: ref, in_$p23: ref, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$i27: i32) returns (out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$i27: i32);
  modifies $M.0;



implementation release_minors_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := in_$i6, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2029;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i12;
    goto $bb6_dummy;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$i15 := $sgt.i32(out_$i14, out_$i12);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, in_$p1);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i5, 1);
    call {:si_unique_call 374} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} idr_remove(serial_minors, out_$i11);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2992)), $mul.ref(1136, 1));
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i6, 8));
    goto corral_source_split_2032;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := release_minors_loop_$bb4(in_$p0, in_$p1, out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5);
    return;

  exit:
    return;
}



procedure release_minors_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32);



implementation search_serial_device_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p12: ref, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p12: ref, out_$p13: ref)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p12, out_$p13 := in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p12, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;

  $bb13:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$p13 := out_$p29, out_$p20;
    goto $bb13_dummy;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, $p2i.ref.i64(usb_serial_driver_list));
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p28, $mul.ref($sub.ref(0, 24), 552)), $mul.ref(24, 1));
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p28, $mul.ref($sub.ref(0, 24), 552));
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_2124;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.16, out_$p26);
    goto corral_source_split_2123;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2122;

  $bb10:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p12;
    assume true;
    goto $bb10;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_2115;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2114;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$p20 := out_$p13;
    goto $bb8;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p19;
    goto $bb8;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} out_$p19 := get_iface_id(out_$p12, in_$p0);
    goto corral_source_split_2112;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i64(out_$i16, out_$i17);
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_2108;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.16, out_$p14);
    goto corral_source_split_2106;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p12, $mul.ref(0, 552)), $mul.ref(160, 1));
    goto corral_source_split_2105;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p12, out_$p13 := search_serial_device_loop_$bb4(in_$p0, in_$p5, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p12, out_$p13);
    return;

  exit:
    return;
}



procedure search_serial_device_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p12: ref, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p12: ref, out_$p13: ref);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation {:SIextraRecBound 2} usb_serial_port_release_loop_$bb9(in_$p2: ref, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i36: i32) returns (out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i36: i32)
{

  entry:
    out_$i37, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$i36 := in_$i37, in_$p39, in_$p40, in_$i41, in_$p43, in_$p44, in_$i45, in_$i46, in_$i36;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2366;

  $bb11:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i45;
    goto $bb11_dummy;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$i46 := $ule.i32(out_$i45, 1);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i36, 1);
    call {:si_unique_call 435} {:cexpr "i"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} kfree(out_$p44);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1320, 1)), $mul.ref(out_$i41, 8));
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i36);
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} ldv_usb_free_urb_11(out_$p40);
    goto corral_source_split_2371;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_2370;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1336, 1)), $mul.ref(out_$i37, 8));
    goto corral_source_split_2369;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i36);
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i37, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$i36 := usb_serial_port_release_loop_$bb9(in_$p2, out_$i37, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$i36);
    return;

  exit:
    return;
}



procedure usb_serial_port_release_loop_$bb9(in_$p2: ref, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i36: i32) returns (out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i36: i32);
  modifies $M.7;



implementation {:SIextraRecBound 2} usb_serial_port_release_loop_$bb4(in_$p2: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i25: i32) returns (out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i25: i32)
{

  entry:
    out_$i26, out_$p28, out_$p29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i25 := in_$i26, in_$p28, in_$p29, in_$i30, in_$p32, in_$p33, in_$i34, in_$i35, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;

  $bb6:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := out_$i34;
    goto $bb6_dummy;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    out_$i35 := $ule.i32(out_$i34, 1);
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i25, 1);
    call {:si_unique_call 432} {:cexpr "i"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} kfree(out_$p33);
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1232, 1)), $mul.ref(out_$i30, 8));
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} ldv_usb_free_urb_10(out_$p29);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 1608), 2992)), $mul.ref(1248, 1)), $mul.ref(out_$i26, 8));
    goto corral_source_split_2356;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i26, out_$p28, out_$p29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i25 := usb_serial_port_release_loop_$bb4(in_$p2, out_$i26, out_$p28, out_$p29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i25);
    return;

  exit:
    return;
}



procedure usb_serial_port_release_loop_$bb4(in_$p2: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i25: i32) returns (out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i25: i32);
  modifies $M.7;



implementation allocate_minors_loop_$bb20(in_$p0: ref, in_$i32: i32, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i45: i32) returns (out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i45: i32)
{

  entry:
    out_$i46, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i45 := in_$i46, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i45;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2505;

  $bb22:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i52;
    goto $bb22_dummy;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    out_$i53 := $ult.i32(out_$i52, in_$i32);
    goto corral_source_split_2514;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i45, 1);
    call {:si_unique_call 482} {:cexpr "j"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2513;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} idr_remove(serial_minors, out_$i51);
    goto corral_source_split_2512;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_2511;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 2992)), $mul.ref(1136, 1));
    goto corral_source_split_2510;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_2509;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i46, 8));
    goto corral_source_split_2508;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(out_$i45);
    goto corral_source_split_2507;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i46, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i45 := allocate_minors_loop_$bb20(in_$p0, in_$i32, out_$i46, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i45);
    return;

  exit:
    return;
}



procedure allocate_minors_loop_$bb20(in_$p0: ref, in_$i32: i32, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i45: i32) returns (out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i45: i32);



implementation allocate_minors_loop_$bb7(in_$p0: ref, in_$i1: i32, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i8, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i24: i32) returns (out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i8, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i24: i32)
{

  entry:
    out_$i25, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i24 := in_$i25, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i24;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2471;

  $bb13:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i37;
    goto $bb13_dummy;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$i38 := $ugt.i32(in_$i1, out_$i37);
    goto corral_source_split_2490;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i24, 1);
    call {:si_unique_call 479} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_2489;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p36, out_$i35);
    goto corral_source_split_2488;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p28, $mul.ref(0, 2992)), $mul.ref(1140, 1));
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i32.i8(out_$i24);
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p34, out_$i30);
    goto corral_source_split_2485;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p28, $mul.ref(0, 2992)), $mul.ref(1136, 1));
    goto corral_source_split_2484;

  $bb10:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i24, out_$i30;
    assume true;
    goto $bb10;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i30, 0);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} out_$i30 := idr_alloc(serial_minors, out_$p29, 0, 0, 208);
    call {:si_unique_call 478} {:cexpr "minor"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i25, 8));
    goto corral_source_split_2474;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i32.i64(out_$i24);
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i25, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i24 := allocate_minors_loop_$bb7(in_$p0, in_$i1, out_$i25, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i24);
    return;

  exit:
    return;
}



procedure allocate_minors_loop_$bb7(in_$p0: ref, in_$i1: i32, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i8, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i24: i32) returns (out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i8, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i24: i32);
  modifies $M.0;



implementation match_dynamic_id_loop_$bb4(in_$p0: ref, in_$i13: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$i17, out_$i18, out_$p19, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p15 := in_$p16, in_$i17, in_$i18, in_$p19, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2705;

  $bb10:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p26;
    goto $bb10_dummy;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, in_$i13);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_2720;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_2719;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2718;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p15;
    assume true;
    goto $bb7;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} out_$i17 := usb_match_one_id(in_$p0, out_$p16);
    call {:si_unique_call 519} {:cexpr "tmp"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_2708;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p16, out_$i17, out_$i18, out_$p19, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p15 := match_dynamic_id_loop_$bb4(in_$p0, in_$i13, out_$p16, out_$i17, out_$i18, out_$p19, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p15);
    return;

  exit:
    return;
}



procedure match_dynamic_id_loop_$bb4(in_$p0: ref, in_$i13: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p15: ref);



implementation serial_proc_show_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$i44: i16, in_$i45: i32, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i4: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32) returns (out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p43: ref, out_$i44: i16, out_$i45: i32, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p59: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i4: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p59, out_$p62, out_$i63, out_$i64, out_$i4, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73 := in_$p5, in_$i6, in_$i7, in_$p8, in_$p9, in_$p11, in_$p12, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p27, in_$p29, in_$p30, in_$p31, in_$p32, in_$p34, in_$p35, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p43, in_$i44, in_$i45, in_$p47, in_$i48, in_$i49, in_$p51, in_$i52, in_$i53, in_$p55, in_$p56, in_$p57, in_$p59, in_$p62, in_$i63, in_$i64, in_$i4, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3880;

  $bb13:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i63;
    goto $bb13_dummy;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$i64 := $sle.i32(out_$i63, 511);
    goto corral_source_split_3889;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i4, 1);
    call {:si_unique_call 728} {:cexpr "i"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3888;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i7 == 1;
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i64(out_$i6, 0);
    goto corral_source_split_3884;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_3883;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} out_$p5 := usb_serial_port_get_by_minor(out_$i4);
    goto corral_source_split_3882;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} mutex_unlock(out_$p62);
    goto corral_source_split_3951;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p9, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_3950;

  SeqInstr_147:
    goto corral_source_split_3949;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} usb_serial_put(out_$p9);
    goto SeqInstr_146;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} out_vslice_dummy_var_73 := seq_putc(in_$p0, 10);
    goto corral_source_split_3948;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} out_vslice_dummy_var_72 := seq_printf.ref.ref.ref(in_$p0, .str.105, out_$p59);
    goto corral_source_split_3947;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3946;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} out_vslice_dummy_var_71 := usb_make_path(out_$p56, out_$p57, 40);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p9, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} out_vslice_dummy_var_70 := seq_printf.ref.ref.i32(in_$p0, .str.104, out_$i53);
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.0, out_$p51);
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p5, $mul.ref(0, 2992)), $mul.ref(1140, 1));
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} out_vslice_dummy_var_69 := seq_printf.ref.ref.i32(in_$p0, .str.103, out_$i49);
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.0, out_$p47);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p9, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} out_vslice_dummy_var_68 := seq_printf.ref.ref.i32.i32(in_$p0, .str.102, out_$i39, out_$i45);
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32(out_$i44);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i16($M.0, out_$p43);
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p41, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(10, 1));
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p9, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i38);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i16($M.0, out_$p37);
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p35, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(8, 1));
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_3924;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p9, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} out_vslice_dummy_var_67 := seq_printf.ref.ref.ref(in_$p0, .str.101, out_$p32);
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_3919;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p9, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3918;

  $bb8:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} out_vslice_dummy_var_66 := seq_printf.ref.ref.ref(in_$p0, .str.99, out_$p27);
    goto corral_source_split_3916;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$p27 := .str.100;
    goto $bb11;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$p27 := out_$p25;
    goto $bb11;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p22, $mul.ref(0, 848)), $mul.ref(24, 1));
    goto corral_source_split_3910;

  $bb9:
    assume out_$i24 == 1;
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_3905;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3903;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p9, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3902;

  $bb7:
    assume out_$i17 == 1;
    goto corral_source_split_3901;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_3899;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_3898;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_3897;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_3896;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p9, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} out_vslice_dummy_var_65 := seq_printf.ref.ref.i32(in_$p0, .str.98, out_$i4);
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_3892;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p5, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_3891;

  $bb4:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10:
    assume !(out_$i24 == 1);
    goto corral_source_split_3913;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p59, out_$p62, out_$i63, out_$i64, out_$i4, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73 := serial_proc_show_loop_$bb1(in_$p0, in_$p2, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p59, out_$p62, out_$i63, out_$i64, out_$i4, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73);
    return;

  exit:
    return;
}



procedure serial_proc_show_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$i44: i16, in_$i45: i32, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i4: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32) returns (out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p43: ref, out_$i44: i16, out_$i45: i32, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p59: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i4: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed, $M.8, $M.10;



implementation usb_serial_generic_write_start_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p8: ref, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$i12: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i64, in_$p34: ref, in_$i35: i64, in_$i36: i32, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i64, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i64, in_$i96: i64, in_$i97: i1) returns (out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$i12: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i64, out_$p34: ref, out_$i35: i64, out_$i36: i32, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i64, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i64, out_$i96: i64, out_$i97: i1)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97 := in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i12, in_$p21, in_$p22, in_$p23, in_$i24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p92, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4078;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i64(out_$i15, 0);
    goto corral_source_split_4093;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i64($M.0, in_$p8);
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} out_$i14 := _raw_spin_lock_irqsave(out_$p13);
    call {:si_unique_call 785} {:cexpr "flags"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} out_$p13 := spinlock_check(in_$p5);
    goto corral_source_split_4090;

  $bb9:
    assume out_$i97 == 1;
    goto corral_source_split_4089;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i64(out_$i96, 0);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i96 := $and.i64(out_$i95, 67043328);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i94);
    goto corral_source_split_4176;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.0, out_$p93);
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p92, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_4174;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} out_$p92 := current_thread_info();
    goto corral_source_split_4173;

  $bb17:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    out_$i70, out_$i71, out_$i72 := out_$i36, out_$i53, out_$i68;
    assume true;
    goto $bb17;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_4142;

  SeqInstr_150:
    call {:si_unique_call 801} {:cexpr "result"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_4141;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} out_$i68 := ldv_usb_submit_urb_41(out_$p41, 32);
    goto SeqInstr_149;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} clear_bit(out_$i66, out_$p67);
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1352, 1));
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i36);
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} spin_unlock_irqrestore(out_$p65, out_$i60);
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, out_$i63);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1408, 1));
    goto corral_source_split_4134;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, out_$i53);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_4132;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1408, 1));
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} out_$i60 := _raw_spin_lock_irqsave(out_$p59);
    call {:si_unique_call 797} {:cexpr "flags"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} out_$p59 := spinlock_check(out_$p58);
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_4128;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} usb_serial_debug_data(out_$p55, .str.114, out_$i53, out_$p57);
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p41, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1608, 1));
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, out_$i53);
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p41, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_4122;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i51);
    call {:si_unique_call 792} out_$i53 := devirtbounce.22(out_$p47, in_$p0, out_$p49, out_$i52);
    call {:si_unique_call 793} {:cexpr "count"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_4120;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1280, 1));
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p41, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4117;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 552)), $mul.ref(544, 1));
    goto corral_source_split_4115;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_4114;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_4113;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_4112;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(0, 1));
    goto corral_source_split_4111;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1336, 1)), $mul.ref(out_$i38, 8));
    goto corral_source_split_4109;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i36);
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} spin_unlock_irqrestore(out_$p37, out_$i12);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1064, 1));
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i64.i32(out_$i35);
    call {:si_unique_call 790} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} out_$i35 := find_first_bit(out_$p34, 2);
    call {:si_unique_call 789} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_4104;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1352, 1));
    goto corral_source_split_4103;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i12;
    assume true;
    goto $bb13;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_4087;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i24, out_$i28);
    goto corral_source_split_4086;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_4085;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_4084;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_4083;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    out_$p25 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4081;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_4080;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2992)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4079;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97 := usb_serial_generic_write_start_loop_$bb8(in_$p0, in_$p5, in_$p8, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97);
    return;

  exit:
    return;
}



procedure usb_serial_generic_write_start_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p8: ref, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$i12: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i64, in_$p34: ref, in_$i35: i64, in_$i36: i32, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i64, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i64, in_$i96: i64, in_$i97: i1) returns (out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$i12: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i64, out_$p34: ref, out_$i35: i64, out_$i36: i32, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i64, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i64, out_$i96: i64, out_$i97: i1);
  modifies $M.8, $M.10, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.24, $M.26, $M.25, $CurrAddr, $M.7, assertsPassed;



implementation main_loop_$bb1(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$i3: i32, in_$i4: i32, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$p17: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i32, in_$p25: ref, in_$i27: i32, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i32, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i32, in_$i214: i1, in_$p215: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i1, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_$i230: i1, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$p237: ref, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$p252: ref, in_$i253: i32, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i32, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i1, in_$i274: i32, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_$i281: i32, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i291: i32, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i32, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$i300: i32, in_$i301: i32, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i307: i32, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i315: i32, in_$i316: i32, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$i322: i32, in_$i323: i32, in_$i324: i32, in_$i325: i1, in_$i326: i32, in_$i327: i32, in_$i328: i1, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i64, in_vslice_dummy_var_99: i64) returns (out_$i27: i32, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i32, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i32, out_$i214: i1, out_$p215: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i1, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_$i230: i1, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$p237: ref, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$p252: ref, out_$i253: i32, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i32, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i1, out_$i274: i32, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_$i281: i32, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i291: i32, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i32, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$i300: i32, out_$i301: i32, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i307: i32, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i315: i32, out_$i316: i32, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$i322: i32, out_$i323: i32, out_$i324: i32, out_$i325: i1, out_$i326: i32, out_$i327: i32, out_$i328: i1, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i64, out_vslice_dummy_var_99: i64)
{

  entry:
    out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$p215, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p236, out_$p237, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$p252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$p314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$p321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99 := in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$i69, in_$i70, in_$p71, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$p102, in_$i104, in_$i105, in_$p106, in_$i108, in_$i109, in_$p110, in_$i112, in_$i113, in_$p114, in_$i116, in_$i117, in_$p118, in_$i120, in_$i121, in_$p122, in_$i124, in_$i125, in_$p126, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$p136, in_$p137, in_$i138, in_$i139, in_$p140, in_$i142, in_$i143, in_$p144, in_$i146, in_$i147, in_$p148, in_$i150, in_$i151, in_$p152, in_$i154, in_$i155, in_$p156, in_$i158, in_$i159, in_$p160, in_$i162, in_$i163, in_$p164, in_$i166, in_$i167, in_$p168, in_$i170, in_$i171, in_$p172, in_$i173, in_$i174, in_$p175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$p197, in_$i199, in_$i200, in_$p201, in_$i203, in_$i204, in_$p205, in_$i207, in_$i208, in_$p209, in_$i210, in_$i211, in_$p212, in_$i213, in_$i214, in_$p215, in_$i216, in_$i217, in_$p218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$p236, in_$p237, in_$i239, in_$i240, in_$i241, in_$i242, in_$p243, in_$i245, in_$i246, in_$p247, in_$i249, in_$i250, in_$p251, in_$p252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$p290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$p298, in_$p299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$p306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$p314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$p321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 902} out_$i27 := __VERIFIER_nondet_int();
    call {:si_unique_call 903} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i27);
    call {:si_unique_call 904} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i27);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb164_dummy;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb25:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4421;

  SeqInstr_159:
    goto corral_source_split_4420;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} serial_throttle(out_$p64);
    goto SeqInstr_158;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$p64 := $M.32;
    goto corral_source_split_4419;

  $bb67:
    assume out_$i63 == 1;
    goto corral_source_split_4418;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 2);
    goto corral_source_split_4416;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i62 := $M.34;
    goto corral_source_split_4415;

  $bb65:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4413;

  SeqInstr_156:
    goto corral_source_split_4412;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} serial_throttle(out_$p61);
    goto SeqInstr_155;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$p61 := $M.32;
    goto corral_source_split_4411;

  $bb64:
    assume out_$i60 == 1;
    goto corral_source_split_4410;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 1);
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    out_$i59 := $M.34;
    goto corral_source_split_4407;

  $bb62:
    assume out_$i58 == 1;
    goto corral_source_split_4406;

  $bb60:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb56:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb48:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb27:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i40, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_4340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 905} out_$i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 906} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i40);
    call {:si_unique_call 907} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i40);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i39 == 1;
    goto corral_source_split_4340;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_4338;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$i38 := $M.34;
    goto corral_source_split_4337;

  $bb22:
    assume out_$i37 == 1;
    goto corral_source_split_4336;

  $bb20:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i27, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb16:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i27, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb3:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i27, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i27, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb75:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4434;

  SeqInstr_165:
    goto corral_source_split_4433;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} out_vslice_dummy_var_77 := serial_get_icount(out_$p71, in_$p11);
    goto SeqInstr_164;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$p71 := $M.32;
    goto corral_source_split_4432;

  $bb74:
    assume out_$i70 == 1;
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 2);
    goto corral_source_split_4429;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i69 := $M.34;
    goto corral_source_split_4428;

  $bb72:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4426;

  SeqInstr_162:
    goto corral_source_split_4425;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} out_vslice_dummy_var_76 := serial_get_icount(out_$p67, in_$p11);
    goto SeqInstr_161;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$p67 := $M.32;
    goto corral_source_split_4424;

  $bb71:
    assume out_$i66 == 1;
    goto corral_source_split_4423;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 1);
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$i65 := $M.34;
    goto corral_source_split_4403;

  $bb61:
    assume !(out_$i57 == 1);
    goto corral_source_split_4402;

  $bb81:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4447;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} serial_hangup(out_$p78);
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$p78 := $M.32;
    goto corral_source_split_4445;

  $bb80:
    assume out_$i77 == 1;
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 2);
    goto corral_source_split_4442;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i76 := $M.34;
    goto corral_source_split_4441;

  $bb78:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4439;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} serial_hangup(out_$p75);
    goto corral_source_split_4438;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$p75 := $M.32;
    goto corral_source_split_4437;

  $bb77:
    assume out_$i74 == 1;
    goto corral_source_split_4436;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 1);
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$i73 := $M.34;
    goto corral_source_split_4395;

  $bb58:
    assume out_$i56 == 1;
    goto corral_source_split_4394;

  $bb57:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb87:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4460;

  SeqInstr_171:
    goto corral_source_split_4459;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} serial_unthrottle(out_$p84);
    goto SeqInstr_170;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    out_$p84 := $M.32;
    goto corral_source_split_4458;

  $bb86:
    assume out_$i83 == 1;
    goto corral_source_split_4457;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 2);
    goto corral_source_split_4455;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i82 := $M.34;
    goto corral_source_split_4454;

  $bb84:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4452;

  SeqInstr_168:
    goto corral_source_split_4451;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} serial_unthrottle(out_$p81);
    goto SeqInstr_167;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$p81 := $M.32;
    goto corral_source_split_4450;

  $bb83:
    assume out_$i80 == 1;
    goto corral_source_split_4449;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 1);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$i79 := $M.34;
    goto corral_source_split_4399;

  $bb59:
    assume !(out_$i56 == 1);
    goto corral_source_split_4398;

  $bb90:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb92:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $M.40 := out_$i93;
    call {:si_unique_call 927} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i92, 1);
    goto corral_source_split_4473;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    out_$i92 := $M.40;
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 926} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4471;

  $bb91:
    assume out_$i91 == 1;
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 0);
    goto corral_source_split_4468;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    out_$i90 := $M.43;
    goto corral_source_split_4467;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $M.43 := out_$i89;
    call {:si_unique_call 925} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_4466;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} out_$i89 := serial_open(out_$p87, out_$p88);
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$p88 := $M.31;
    goto corral_source_split_4464;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$p87 := $M.32;
    goto corral_source_split_4463;

  $bb89:
    assume out_$i86 == 1;
    goto corral_source_split_4462;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 1);
    goto corral_source_split_4388;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    out_$i85 := $M.34;
    goto corral_source_split_4387;

  $bb54:
    assume out_$i54 == 1;
    goto corral_source_split_4386;

  $bb50:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i40, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb49:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i40, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb99:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} serial_set_termios(out_$p99, in_$p13);
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    out_$p99 := $M.32;
    goto corral_source_split_4485;

  $bb98:
    assume out_$i98 == 1;
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 2);
    goto corral_source_split_4482;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i97 := $M.34;
    goto corral_source_split_4481;

  $bb96:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4479;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} serial_set_termios(out_$p96, in_$p13);
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$p96 := $M.32;
    goto corral_source_split_4477;

  $bb95:
    assume out_$i95 == 1;
    goto corral_source_split_4476;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 1);
    goto corral_source_split_4392;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$i94 := $M.34;
    goto corral_source_split_4391;

  $bb55:
    assume !(out_$i54 == 1);
    goto corral_source_split_4390;

  $bb105:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} out_vslice_dummy_var_79 := serial_ioctl(out_$p106, in_$i7, in_$i1);
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    out_$p106 := $M.32;
    goto corral_source_split_4498;

  $bb104:
    assume out_$i105 == 1;
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 2);
    goto corral_source_split_4495;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i104 := $M.34;
    goto corral_source_split_4494;

  $bb102:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} out_vslice_dummy_var_78 := serial_ioctl(out_$p102, in_$i7, in_$i1);
    goto corral_source_split_4491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    out_$p102 := $M.32;
    goto corral_source_split_4490;

  $bb101:
    assume out_$i101 == 1;
    goto corral_source_split_4489;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 1);
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    out_$i100 := $M.34;
    goto corral_source_split_4379;

  $bb52:
    assume out_$i53 == 1;
    goto corral_source_split_4378;

  $bb51:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i40, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb111:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4513;

  SeqInstr_177:
    goto corral_source_split_4512;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} out_vslice_dummy_var_81 := serial_install(in_$p6, out_$p114);
    goto SeqInstr_176;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$p114 := $M.32;
    goto corral_source_split_4511;

  $bb110:
    assume out_$i113 == 1;
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 2);
    goto corral_source_split_4508;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i112 := $M.34;
    goto corral_source_split_4507;

  $bb108:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4505;

  SeqInstr_174:
    goto corral_source_split_4504;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} out_vslice_dummy_var_80 := serial_install(in_$p6, out_$p110);
    goto SeqInstr_173;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$p110 := $M.32;
    goto corral_source_split_4503;

  $bb107:
    assume out_$i109 == 1;
    goto corral_source_split_4502;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 1);
    goto corral_source_split_4384;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    out_$i108 := $M.34;
    goto corral_source_split_4383;

  $bb53:
    assume !(out_$i53 == 1);
    goto corral_source_split_4382;

  $bb117:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} out_vslice_dummy_var_83 := serial_tiocmset(out_$p122, in_$i4, in_$i9);
    goto corral_source_split_4525;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$p122 := $M.32;
    goto corral_source_split_4524;

  $bb116:
    assume out_$i121 == 1;
    goto corral_source_split_4523;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 2);
    goto corral_source_split_4521;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i120 := $M.34;
    goto corral_source_split_4520;

  $bb114:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4518;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} out_vslice_dummy_var_82 := serial_tiocmset(out_$p118, in_$i4, in_$i9);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$p118 := $M.32;
    goto corral_source_split_4516;

  $bb113:
    assume out_$i117 == 1;
    goto corral_source_split_4515;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 1);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i116 := $M.34;
    goto corral_source_split_4371;

  $bb46:
    assume out_$i50 == 1;
    goto corral_source_split_4370;

  $bb42:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i40, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb29:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i40, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb28:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i40, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb120:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4531;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} out_vslice_dummy_var_84 := serial_write(out_$p126, in_$p2, in_$i14);
    goto corral_source_split_4530;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    out_$p126 := $M.32;
    goto corral_source_split_4529;

  $bb119:
    assume out_$i125 == 1;
    goto corral_source_split_4528;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 2);
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i124 := $M.34;
    goto corral_source_split_4375;

  $bb47:
    assume !(out_$i50 == 1);
    goto corral_source_split_4374;

  $bb126:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4544;

  SeqInstr_183:
    goto corral_source_split_4543;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} serial_cleanup(out_$p133);
    goto SeqInstr_182;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    out_$p133 := $M.32;
    goto corral_source_split_4542;

  $bb125:
    assume out_$i132 == 1;
    goto corral_source_split_4541;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 2);
    goto corral_source_split_4539;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i131 := $M.34;
    goto corral_source_split_4538;

  $bb123:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4536;

  SeqInstr_180:
    goto corral_source_split_4535;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} serial_cleanup(out_$p130);
    goto SeqInstr_179;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    out_$p130 := $M.32;
    goto corral_source_split_4534;

  $bb122:
    assume out_$i129 == 1;
    goto corral_source_split_4533;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 1);
    goto corral_source_split_4364;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$i128 := $M.34;
    goto corral_source_split_4363;

  $bb44:
    assume out_$i49 == 1;
    goto corral_source_split_4362;

  $bb43:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i40, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb129:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4550;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} serial_close(out_$p136, out_$p137);
    goto corral_source_split_4549;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    out_$p137 := $M.31;
    goto corral_source_split_4548;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    out_$p136 := $M.32;
    goto corral_source_split_4547;

  $bb128:
    assume out_$i135 == 1;
    goto corral_source_split_4546;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 2);
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$i134 := $M.34;
    goto corral_source_split_4367;

  $bb45:
    assume !(out_$i49 == 1);
    goto corral_source_split_4366;

  $bb135:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4563;

  SeqInstr_189:
    goto corral_source_split_4562;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_vslice_dummy_var_86 := serial_write_room(out_$p144);
    goto SeqInstr_188;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    out_$p144 := $M.32;
    goto corral_source_split_4561;

  $bb134:
    assume out_$i143 == 1;
    goto corral_source_split_4560;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 2);
    goto corral_source_split_4558;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i142 := $M.34;
    goto corral_source_split_4557;

  $bb132:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4555;

  SeqInstr_186:
    goto corral_source_split_4554;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} out_vslice_dummy_var_85 := serial_write_room(out_$p140);
    goto SeqInstr_185;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    out_$p140 := $M.32;
    goto corral_source_split_4553;

  $bb131:
    assume out_$i139 == 1;
    goto corral_source_split_4552;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 1);
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i138 := $M.34;
    goto corral_source_split_4355;

  $bb40:
    assume out_$i47 == 1;
    goto corral_source_split_4354;

  $bb31:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i40, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb30:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i40, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb141:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4576;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_vslice_dummy_var_88 := serial_break(out_$p152, in_$i8);
    goto corral_source_split_4575;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    out_$p152 := $M.32;
    goto corral_source_split_4574;

  $bb140:
    assume out_$i151 == 1;
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 2);
    goto corral_source_split_4571;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i150 := $M.34;
    goto corral_source_split_4570;

  $bb138:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4568;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} out_vslice_dummy_var_87 := serial_break(out_$p148, in_$i8);
    goto corral_source_split_4567;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    out_$p148 := $M.32;
    goto corral_source_split_4566;

  $bb137:
    assume out_$i147 == 1;
    goto corral_source_split_4565;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 1);
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i146 := $M.34;
    goto corral_source_split_4359;

  $bb41:
    assume !(out_$i47 == 1);
    goto corral_source_split_4358;

  $bb147:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4589;

  SeqInstr_195:
    goto corral_source_split_4588;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} out_vslice_dummy_var_90 := serial_chars_in_buffer(out_$p160);
    goto SeqInstr_194;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$p160 := $M.32;
    goto corral_source_split_4587;

  $bb146:
    assume out_$i159 == 1;
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 2);
    goto corral_source_split_4584;

  $bb145:
    assume {:verifier.code 0} true;
    out_$i158 := $M.34;
    goto corral_source_split_4583;

  $bb144:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4581;

  SeqInstr_192:
    goto corral_source_split_4580;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} out_vslice_dummy_var_89 := serial_chars_in_buffer(out_$p156);
    goto SeqInstr_191;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    out_$p156 := $M.32;
    goto corral_source_split_4579;

  $bb143:
    assume out_$i155 == 1;
    goto corral_source_split_4578;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 1);
    goto corral_source_split_4344;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    out_$i154 := $M.34;
    goto corral_source_split_4343;

  $bb33:
    assume out_$i44 == 1;
    goto corral_source_split_4342;

  $bb32:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i40, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb153:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4602;

  SeqInstr_201:
    goto corral_source_split_4601;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} out_vslice_dummy_var_92 := serial_tiocmget(out_$p168);
    goto SeqInstr_200;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$p168 := $M.32;
    goto corral_source_split_4600;

  $bb152:
    assume out_$i167 == 1;
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 2);
    goto corral_source_split_4597;

  $bb151:
    assume {:verifier.code 0} true;
    out_$i166 := $M.34;
    goto corral_source_split_4596;

  $bb150:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4594;

  SeqInstr_198:
    goto corral_source_split_4593;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} out_vslice_dummy_var_91 := serial_tiocmget(out_$p164);
    goto SeqInstr_197;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$p164 := $M.32;
    goto corral_source_split_4592;

  $bb149:
    assume out_$i163 == 1;
    goto corral_source_split_4591;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 1);
    goto corral_source_split_4348;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    out_$i162 := $M.34;
    goto corral_source_split_4347;

  $bb35:
    assume out_$i45 == 1;
    goto corral_source_split_4346;

  $bb34:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i40, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb159:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} serial_wait_until_sent(out_$p175, in_$i3);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$p175 := $M.32;
    goto corral_source_split_4613;

  $bb158:
    assume out_$i174 == 1;
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 2);
    goto corral_source_split_4610;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i173 := $M.34;
    goto corral_source_split_4609;

  $bb156:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4607;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} serial_wait_until_sent(out_$p172, in_$i3);
    goto corral_source_split_4606;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    out_$p172 := $M.32;
    goto corral_source_split_4605;

  $bb155:
    assume out_$i171 == 1;
    goto corral_source_split_4604;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 1);
    goto corral_source_split_4352;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i170 := $M.34;
    goto corral_source_split_4351;

  $bb37:
    assume out_$i46 == 1;
    goto corral_source_split_4350;

  $bb36:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i40, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} ldv_stop();
    goto corral_source_split_4617;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb39;

  $bb63:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb39;

  $bb166:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} ldv_main_exported_3();
    goto corral_source_split_4620;

  $bb165:
    assume out_$i177 == 1;
    goto corral_source_split_4619;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i32(out_$i176, 0);
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$i176 := $M.35;
    goto corral_source_split_4333;

  $bb21:
    assume !(out_$i36 == 1);
    goto corral_source_split_4332;

  $bb169:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb187:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.40 := out_$i194;
    call {:si_unique_call 980} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i194);
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    out_$i194 := $add.i32(out_$i193, 1);
    goto corral_source_split_4654;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    out_$i193 := $M.40;
    goto corral_source_split_4653;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4652;

  $bb186:
    assume out_$i192 == 1;
    goto corral_source_split_4651;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 0);
    goto corral_source_split_4649;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    out_$i191 := $M.44;
    goto corral_source_split_4648;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $M.44 := out_$i190;
    call {:si_unique_call 978} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_4647;

  SeqInstr_204:
    goto corral_source_split_4646;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} out_$i190 := serial_port_activate(out_$p189, in_$p17);
    goto SeqInstr_203;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    out_$p189 := $M.15;
    goto corral_source_split_4645;

  $bb184:
    assume out_$i188 == 1;
    goto corral_source_split_4644;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 1);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$i187 := $M.13;
    goto corral_source_split_4641;

  $bb182:
    assume out_$i186 == 1;
    goto corral_source_split_4640;

  $bb180:
    assume out_$i185 == 1;
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i180, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb171:
    assume out_$i181 == 1;
    assume {:verifier.code 0} true;
    out_$i185 := $slt.i32(out_$i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb170:
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i180, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_4622:
    assume {:verifier.code 1} true;
    call {:si_unique_call 974} out_$i180 := __VERIFIER_nondet_int();
    call {:si_unique_call 975} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i180);
    call {:si_unique_call 976} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i180);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb168:
    assume out_$i179 == 1;
    goto corral_source_split_4622;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i179 := $ne.i32(out_$i178, 0);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$i178 := $M.13;
    goto corral_source_split_4325;

  $bb18:
    assume out_$i35 == 1;
    goto corral_source_split_4324;

  $bb17:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i27, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb198:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 986} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4676;

  SeqInstr_213:
    goto corral_source_split_4675;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} out_vslice_dummy_var_95 := serial_port_carrier_raised(out_$p205);
    goto SeqInstr_212;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    out_$p205 := $M.15;
    goto corral_source_split_4674;

  $bb197:
    assume out_$i204 == 1;
    goto corral_source_split_4673;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 2);
    goto corral_source_split_4671;

  $bb196:
    assume {:verifier.code 0} true;
    out_$i203 := $M.13;
    goto corral_source_split_4670;

  $bb195:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.13 := 3;
    call {:si_unique_call 984} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_4668;

  SeqInstr_210:
    goto corral_source_split_4667;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} out_vslice_dummy_var_94 := serial_port_carrier_raised(out_$p201);
    goto SeqInstr_209;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    out_$p201 := $M.15;
    goto corral_source_split_4666;

  $bb194:
    assume out_$i200 == 1;
    goto corral_source_split_4665;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 3);
    goto corral_source_split_4663;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i199 := $M.13;
    goto corral_source_split_4662;

  $bb192:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4660;

  SeqInstr_207:
    goto corral_source_split_4659;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} out_vslice_dummy_var_93 := serial_port_carrier_raised(out_$p197);
    goto SeqInstr_206;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    out_$p197 := $M.15;
    goto corral_source_split_4658;

  $bb191:
    assume out_$i196 == 1;
    goto corral_source_split_4657;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 1);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    out_$i195 := $M.13;
    goto corral_source_split_4637;

  $bb181:
    assume !(out_$i185 == 1);
    goto corral_source_split_4636;

  $bb207:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 992} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4697;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} serial_port_dtr_rts(out_$p215, in_$i15);
    goto corral_source_split_4696;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    out_$p215 := $M.15;
    goto corral_source_split_4695;

  $bb206:
    assume out_$i214 == 1;
    goto corral_source_split_4694;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i213, 2);
    goto corral_source_split_4692;

  $bb205:
    assume {:verifier.code 0} true;
    out_$i213 := $M.13;
    goto corral_source_split_4691;

  $bb204:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $M.13 := 3;
    call {:si_unique_call 990} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_4689;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} serial_port_dtr_rts(out_$p212, in_$i15);
    goto corral_source_split_4688;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$p212 := $M.15;
    goto corral_source_split_4687;

  $bb203:
    assume out_$i211 == 1;
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 3);
    goto corral_source_split_4684;

  $bb202:
    assume {:verifier.code 0} true;
    out_$i210 := $M.13;
    goto corral_source_split_4683;

  $bb201:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4681;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} serial_port_dtr_rts(out_$p209, in_$i15);
    goto corral_source_split_4680;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    out_$p209 := $M.15;
    goto corral_source_split_4679;

  $bb200:
    assume out_$i208 == 1;
    goto corral_source_split_4678;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 1);
    goto corral_source_split_4626;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$i207 := $M.13;
    goto corral_source_split_4625;

  $bb173:
    assume out_$i182 == 1;
    goto corral_source_split_4624;

  $bb172:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    out_$i182 := $slt.i32(out_$i180, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb210:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.40 := out_$i220;
    call {:si_unique_call 995} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i220);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$i220 := $sub.i32(out_$i219, 1);
    goto corral_source_split_4704;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$i219 := $M.40;
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4702;

  SeqInstr_216:
    goto corral_source_split_4701;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} serial_port_shutdown(out_$p218);
    goto SeqInstr_215;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    out_$p218 := $M.15;
    goto corral_source_split_4700;

  $bb209:
    assume out_$i217 == 1;
    goto corral_source_split_4699;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 2);
    goto corral_source_split_4630;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    out_$i216 := $M.13;
    goto corral_source_split_4629;

  $bb175:
    assume out_$i183 == 1;
    goto corral_source_split_4628;

  $bb174:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    out_$i183 := $slt.i32(out_$i180, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb213:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $M.13 := 3;
    call {:si_unique_call 997} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} out_vslice_dummy_var_96 := ldv_destruct_7();
    goto corral_source_split_4708;

  $bb212:
    assume out_$i222 == 1;
    goto corral_source_split_4707;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 1);
    goto corral_source_split_4634;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$i221 := $M.13;
    goto corral_source_split_4633;

  $bb177:
    assume out_$i184 == 1;
    goto corral_source_split_4632;

  $bb176:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i180, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} ldv_stop();
    goto corral_source_split_4711;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb178:
    assume {:verifier.code 0} true;
    assume !(out_$i184 == 1);
    goto $bb179;

  $bb183:
    assume {:verifier.code 0} true;
    assume !(out_$i186 == 1);
    goto $bb179;

  $bb219:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} ldv_main_exported_2();
    goto corral_source_split_4714;

  $bb218:
    assume out_$i225 == 1;
    goto corral_source_split_4713;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    out_$i225 := $ne.i32(out_$i224, 0);
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    out_$i224 := $M.36;
    goto corral_source_split_4329;

  $bb19:
    assume !(out_$i35 == 1);
    goto corral_source_split_4328;

  $bb222:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb236:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.40 := out_$i240;
    call {:si_unique_call 1005} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i240);
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$i240 := $sub.i32(out_$i239, 1);
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$i239 := $M.40;
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} out_vslice_dummy_var_97 := single_release(out_$p236, out_$p237);
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    out_$p237 := $M.30;
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$p236 := $M.29;
    goto corral_source_split_4735;

  $bb235:
    assume out_$i235 == 1;
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 2);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$i234 := $M.37;
    goto corral_source_split_4731;

  $bb233:
    assume out_$i233 == 1;
    goto corral_source_split_4730;

  $bb231:
    assume out_$i232 == 1;
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i228, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb224:
    assume out_$i229 == 1;
    assume {:verifier.code 0} true;
    out_$i232 := $slt.i32(out_$i228, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb223:
    assume {:verifier.code 0} true;
    out_$i229 := $slt.i32(out_$i228, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_4716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1000} out_$i228 := __VERIFIER_nondet_int();
    call {:si_unique_call 1001} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i228);
    call {:si_unique_call 1002} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i228);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb221:
    assume out_$i227 == 1;
    goto corral_source_split_4716;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    out_$i227 := $ne.i32(out_$i226, 0);
    goto corral_source_split_4318;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    out_$i226 := $M.37;
    goto corral_source_split_4317;

  $bb14:
    assume out_$i33 == 1;
    goto corral_source_split_4316;

  $bb5:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i27, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb240:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_4746;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} out_vslice_dummy_var_98 := seq_read(out_$p243, in_$p21, in_$i22, in_$p19);
    goto corral_source_split_4745;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    out_$p243 := $M.30;
    goto corral_source_split_4744;

  $bb239:
    assume out_$i242 == 1;
    goto corral_source_split_4743;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 2);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$i241 := $M.37;
    goto corral_source_split_4727;

  $bb232:
    assume !(out_$i232 == 1);
    goto corral_source_split_4726;

  $bb243:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1009} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_4751;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} out_vslice_dummy_var_99 := seq_lseek(out_$p247, in_$i20, in_$i23);
    goto corral_source_split_4750;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    out_$p247 := $M.30;
    goto corral_source_split_4749;

  $bb242:
    assume out_$i246 == 1;
    goto corral_source_split_4748;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 2);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$i245 := $M.37;
    goto corral_source_split_4719;

  $bb226:
    assume out_$i230 == 1;
    goto corral_source_split_4718;

  $bb225:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    out_$i230 := $slt.i32(out_$i228, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb246:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb248:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.40 := out_$i257;
    call {:si_unique_call 1013} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i257);
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    out_$i257 := $add.i32(out_$i256, 1);
    goto corral_source_split_4764;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    out_$i256 := $M.40;
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_4762;

  $bb247:
    assume out_$i255 == 1;
    goto corral_source_split_4761;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 0);
    goto corral_source_split_4759;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    out_$i254 := $M.45;
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $M.45 := out_$i253;
    call {:si_unique_call 1011} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i253);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} out_$i253 := serial_proc_open(out_$p251, out_$p252);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$p252 := $M.30;
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    out_$p251 := $M.29;
    goto corral_source_split_4754;

  $bb245:
    assume out_$i250 == 1;
    goto corral_source_split_4753;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 1);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$i249 := $M.37;
    goto corral_source_split_4723;

  $bb228:
    assume out_$i231 == 1;
    goto corral_source_split_4722;

  $bb227:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i228, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ldv_stop();
    goto corral_source_split_4767;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb229:
    assume {:verifier.code 0} true;
    assume !(out_$i231 == 1);
    goto $bb230;

  $bb234:
    assume {:verifier.code 0} true;
    assume !(out_$i233 == 1);
    goto $bb230;

  $bb255:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto $bb256;

  SeqInstr_219:
    goto corral_source_split_4770;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} ldv_main_exported_1();
    goto SeqInstr_218;

  $bb254:
    assume out_$i259 == 1;
    goto corral_source_split_4769;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$i259 := $ne.i32(out_$i258, 0);
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$i258 := $M.38;
    goto corral_source_split_4321;

  $bb15:
    assume !(out_$i33 == 1);
    goto corral_source_split_4320;

  $bb258:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb259;

  SeqInstr_222:
    goto corral_source_split_4773;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} ldv_main_exported_4();
    goto SeqInstr_221;

  $bb257:
    assume out_$i261 == 1;
    goto corral_source_split_4772;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    out_$i261 := $ne.i32(out_$i260, 0);
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$i260 := $M.39;
    goto corral_source_split_4305;

  $bb7:
    assume out_$i30 == 1;
    goto corral_source_split_4304;

  $bb6:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i27, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb261:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb271:
    assume {:verifier.code 0} true;
    assume !(out_$i269 == 1);
    goto $bb272;

  $bb274:
    assume {:verifier.code 0} true;
    assume !(out_$i271 == 1);
    goto $bb272;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 0);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$i270 := $M.40;
    goto corral_source_split_4786;

  $bb270:
    assume out_$i269 == 1;
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 2);
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$i268 := $M.41;
    goto corral_source_split_4782;

  $bb268:
    assume out_$i267 == 1;
    goto corral_source_split_4781;

  $bb263:
    assume out_$i265 == 1;
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i264, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb262:
    assume {:verifier.code 0} true;
    out_$i265 := $slt.i32(out_$i264, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_4775:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1017} out_$i264 := __VERIFIER_nondet_int();
    call {:si_unique_call 1018} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i264);
    call {:si_unique_call 1019} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i264);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb260:
    assume out_$i263 == 1;
    goto corral_source_split_4775;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    out_$i263 := $ne.i32(out_$i262, 0);
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    out_$i262 := $M.41;
    goto corral_source_split_4309;

  $bb9:
    assume out_$i31 == 1;
    goto corral_source_split_4308;

  $bb8:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i27, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb279:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb284:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} ldv_file_operations_8();
    goto corral_source_split_4819;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1036} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_4818;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_initialize_tty_operations_6();
    goto corral_source_split_4817;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1034} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4816;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} ldv_initialize_usb_serial_driver_4();
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} ldv_initialize_bus_type_1();
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1029} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_initialize_driver_attribute_2();
    goto corral_source_split_4810;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1027} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4808;

  $bb283:
    assume out_$i278 == 1;
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 0);
    goto corral_source_split_4805;

  $bb282:
    assume {:verifier.code 0} true;
    out_$i277 := $M.46;
    goto corral_source_split_4804;

  $bb281:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$i276 := $ne.i32(out_$i275, 0);
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i275 := $M.46;
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $M.46 := out_$i274;
    call {:si_unique_call 1024} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i274);
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} out_$i274 := usb_serial_init();
    goto corral_source_split_4796;

  $bb278:
    assume out_$i273 == 1;
    goto corral_source_split_4795;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    out_$i273 := $eq.i32(out_$i272, 1);
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    out_$i272 := $M.41;
    goto corral_source_split_4778;

  $bb265:
    assume out_$i266 == 1;
    goto corral_source_split_4777;

  $bb264:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i264, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} ldv_stop();
    goto corral_source_split_4821;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb266:
    assume {:verifier.code 0} true;
    assume !(out_$i266 == 1);
    goto $bb267;

  $bb269:
    assume {:verifier.code 0} true;
    assume !(out_$i267 == 1);
    goto $bb267;

  $bb291:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb307:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb309:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.40 := out_$i295;
    call {:si_unique_call 1045} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i295);
    goto corral_source_split_4856;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    out_$i295 := $add.i32(out_$i294, 1);
    goto corral_source_split_4855;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    out_$i294 := $M.40;
    goto corral_source_split_4854;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1044} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4853;

  $bb308:
    assume out_$i293 == 1;
    goto corral_source_split_4852;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 0);
    goto corral_source_split_4850;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    out_$i292 := $M.47;
    goto corral_source_split_4849;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $M.47 := out_$i291;
    call {:si_unique_call 1043} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i291);
    goto corral_source_split_4848;

  SeqInstr_231:
    goto corral_source_split_4847;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} out_$i291 := usb_serial_probe(out_$p290, in_$p25);
    goto SeqInstr_230;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$p290 := $M.28;
    goto corral_source_split_4846;

  $bb306:
    assume out_$i289 == 1;
    goto corral_source_split_4845;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 1);
    goto corral_source_split_4843;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    out_$i288 := $M.42;
    goto corral_source_split_4842;

  $bb304:
    assume out_$i287 == 1;
    goto corral_source_split_4841;

  $bb302:
    assume out_$i286 == 1;
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i281, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb293:
    assume out_$i282 == 1;
    assume {:verifier.code 0} true;
    out_$i286 := $slt.i32(out_$i281, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb292:
    assume {:verifier.code 0} true;
    out_$i282 := $slt.i32(out_$i281, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_4823:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1039} out_$i281 := __VERIFIER_nondet_int();
    call {:si_unique_call 1040} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i281);
    call {:si_unique_call 1041} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i281);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb290:
    assume out_$i280 == 1;
    goto corral_source_split_4823;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$i280 := $ne.i32(out_$i279, 0);
    goto corral_source_split_4314;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    out_$i279 := $M.42;
    goto corral_source_split_4313;

  $bb11:
    assume out_$i32 == 1;
    goto corral_source_split_4312;

  $bb10:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i27, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb314:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb316:
    assume !(out_$i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    goto $bb317;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1048} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_4868;

  $bb315:
    assume out_$i303 == 1;
    goto corral_source_split_4867;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    out_$i303 := $eq.i32(out_$i302, 0);
    goto corral_source_split_4865;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    out_$i302 := $M.48;
    goto corral_source_split_4864;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $M.48 := out_$i301;
    call {:si_unique_call 1047} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i301);
    goto corral_source_split_4863;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} out_$i301 := usb_serial_suspend(out_$p298, out_$i300);
    goto corral_source_split_4862;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    out_$i300 := $load.i32($M.33, out_$p299);
    goto corral_source_split_4861;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    out_$p299 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4860;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    out_$p298 := $M.28;
    goto corral_source_split_4859;

  $bb313:
    assume out_$i297 == 1;
    goto corral_source_split_4858;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 2);
    goto corral_source_split_4839;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    out_$i296 := $M.42;
    goto corral_source_split_4838;

  $bb303:
    assume !(out_$i286 == 1);
    goto corral_source_split_4837;

  $bb320:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb322:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1051} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4878;

  $bb321:
    assume out_$i309 == 1;
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 0);
    goto corral_source_split_4875;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    out_$i308 := $M.49;
    goto corral_source_split_4874;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $M.49 := out_$i307;
    call {:si_unique_call 1050} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i307);
    goto corral_source_split_4873;

  SeqInstr_234:
    goto corral_source_split_4872;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} out_$i307 := usb_serial_resume(out_$p306);
    goto SeqInstr_233;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    out_$p306 := $M.28;
    goto corral_source_split_4871;

  $bb319:
    assume out_$i305 == 1;
    goto corral_source_split_4870;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i304, 3);
    goto corral_source_split_4827;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    out_$i304 := $M.42;
    goto corral_source_split_4826;

  $bb295:
    assume out_$i283 == 1;
    goto corral_source_split_4825;

  $bb294:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    out_$i283 := $slt.i32(out_$i281, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $M.40 := out_$i323;
    call {:si_unique_call 1057} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i323);
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$i323 := $sub.i32(out_$i322, 1);
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    out_$i322 := $M.40;
    goto corral_source_split_4903;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1056} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4902;

  SeqInstr_240:
    goto corral_source_split_4901;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} usb_serial_disconnect(out_$p321);
    goto SeqInstr_239;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    out_$p321 := $M.28;
    goto corral_source_split_4900;

  $bb334:
    assume out_$i320 == 1;
    goto corral_source_split_4899;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    out_$i320 := $eq.i32(out_$i319, 0);
    goto corral_source_split_4897;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    out_$i319 := $M.50;
    goto corral_source_split_4896;

  $bb331:
    assume out_$i318 == 1;
    goto corral_source_split_4895;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 2);
    goto corral_source_split_4893;

  $bb330:
    assume {:verifier.code 0} true;
    out_$i317 := $M.42;
    goto corral_source_split_4892;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $M.40 := out_$i316;
    call {:si_unique_call 1054} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i316);
    goto corral_source_split_4890;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    out_$i316 := $sub.i32(out_$i315, 1);
    goto corral_source_split_4889;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    out_$i315 := $M.40;
    goto corral_source_split_4888;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1053} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4887;

  SeqInstr_237:
    goto corral_source_split_4886;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} usb_serial_disconnect(out_$p314);
    goto SeqInstr_236;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    out_$p314 := $M.28;
    goto corral_source_split_4885;

  $bb328:
    assume out_$i313 == 1;
    goto corral_source_split_4884;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 0);
    goto corral_source_split_4882;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    out_$i312 := $M.50;
    goto corral_source_split_4881;

  $bb325:
    assume out_$i311 == 1;
    goto corral_source_split_4880;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 3);
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$i310 := $M.42;
    goto corral_source_split_4830;

  $bb297:
    assume out_$i284 == 1;
    goto corral_source_split_4829;

  $bb296:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    out_$i284 := $slt.i32(out_$i281, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb326:
    assume {:verifier.code 0} true;
    assume !(out_$i311 == 1);
    goto $bb327;

  $bb329:
    assume {:verifier.code 0} true;
    assume !(out_$i313 == 1);
    goto $bb327;

  $bb332:
    assume {:verifier.code 0} true;
    assume !(out_$i318 == 1);
    goto $bb333;

  $bb335:
    assume {:verifier.code 0} true;
    assume !(out_$i320 == 1);
    goto $bb333;

  $bb338:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb340:
    assume !(out_$i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    goto $bb341;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1060} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4914;

  $bb339:
    assume out_$i328 == 1;
    goto corral_source_split_4913;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i327, 0);
    goto corral_source_split_4911;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$i327 := $M.51;
    goto corral_source_split_4910;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $M.51 := out_$i326;
    call {:si_unique_call 1059} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i326);
    goto corral_source_split_4909;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} out_$i326 := ldv_reset_resume_5();
    goto corral_source_split_4908;

  $bb337:
    assume out_$i325 == 1;
    goto corral_source_split_4907;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i324, 3);
    goto corral_source_split_4835;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$i324 := $M.42;
    goto corral_source_split_4834;

  $bb299:
    assume out_$i285 == 1;
    goto corral_source_split_4833;

  $bb298:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i281, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} ldv_stop();
    goto corral_source_split_4916;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb300:
    assume {:verifier.code 0} true;
    assume !(out_$i285 == 1);
    goto $bb301;

  $bb305:
    assume {:verifier.code 0} true;
    assume !(out_$i287 == 1);
    goto $bb301;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_stop();
    goto corral_source_split_4918;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb13;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb13;

  $bb164_dummy:
    call {:si_unique_call 1} out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$p215, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p236, out_$p237, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$p252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$p314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$p321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99 := main_loop_$bb1(in_$p0, in_$i1, in_$p2, in_$i3, in_$i4, in_$p6, in_$i7, in_$i8, in_$i9, in_$p11, in_$p13, in_$i14, in_$i15, in_$p17, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p25, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$p215, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p236, out_$p237, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$p252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$p314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$p321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$i3: i32, in_$i4: i32, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$p17: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i32, in_$p25: ref, in_$i27: i32, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i32, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i32, in_$i214: i1, in_$p215: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i1, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_$i230: i1, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$p237: ref, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$p252: ref, in_$i253: i32, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i32, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i1, in_$i274: i32, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_$i281: i32, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i291: i32, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i32, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$i300: i32, in_$i301: i32, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i307: i32, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i315: i32, in_$i316: i32, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$i322: i32, in_$i323: i32, in_$i324: i32, in_$i325: i1, in_$i326: i32, in_$i327: i32, in_$i328: i1, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i64, in_vslice_dummy_var_99: i64) returns (out_$i27: i32, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i32, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i32, out_$i214: i1, out_$p215: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i1, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_$i230: i1, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$p237: ref, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$p252: ref, out_$i253: i32, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i32, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i1, out_$i274: i32, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_$i281: i32, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i291: i32, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i32, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$i300: i32, out_$i301: i32, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i307: i32, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i315: i32, out_$i316: i32, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$i322: i32, out_$i323: i32, out_$i324: i32, out_$i325: i1, out_$i326: i32, out_$i327: i32, out_$i328: i1, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i64, out_vslice_dummy_var_99: i64);
  modifies $M.34, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.14, $M.24, $M.26, $M.25, $M.7, assertsPassed, $M.8, $M.10, $M.17, $M.18, $M.19, $M.20, $M.13, $M.11, $M.9, $M.15, $M.40, $M.43, $M.35, $M.44, $M.36, $M.37, $M.45, $M.54, $M.38, $M.39, $M.56, $M.29, $M.30, $M.31, $M.32, $M.55, $M.53, $M.52, $M.41, $M.46, $M.12, $M.42, $M.50, $M.28, $M.59, $M.57, $M.47, $M.48, $M.23, $M.49, $M.51;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


