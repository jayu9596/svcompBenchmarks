var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: ref;

var $M.8: i32;

var $M.9: [ref]i8;

var $M.10: [ref]i32;

var $M.18: [ref]i8;

var $M.19: [ref]i32;

var $M.20: [ref]i32;

var $M.22: [ref]i16;

var $M.23: [ref]i32;

var $M.24: [ref]i16;

var $M.25: [ref]i16;

var $M.26: i32;

var $M.27: [ref]i8;

var $M.28: [ref]i32;

var $M.29: [ref]i16;

var $M.30: [ref]i16;

var $M.37: [ref]i8;

var $M.38: [ref]i8;

var $M.39: [ref]i8;

var $M.41: [ref]ref;

var $M.42: [ref]i8;

var $M.43: [ref]ref;

var $M.44: [ref]i64;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $M.50: [ref]i16;

var $M.51: [ref]ref;

var $M.53: [ref]i16;

var $M.54: [ref]i32;

var $M.55: [ref]i16;

var $M.56: [ref]i16;

var $M.57: [ref]i16;

var $M.58: [ref]i16;

var $M.59: [ref]i8;

var $M.60: [ref]i16;

var $M.61: [ref]i32;

var $M.62: [ref]i32;

var $M.63: [ref]i32;

var $M.64: [ref]i16;

var $M.65: [ref]i8;

var $M.66: [ref]ref;

var $M.67: [ref]ref;

var $M.68: [ref]ref;

var $M.69: [ref]ref;

var $M.70: [ref]i24;

var $M.71: [ref]i8;

var $M.72: i32;

var $M.73: i32;

var $M.75: [ref]i8;

var $M.89: [ref]i8;

var $M.162: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 907296);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const zd_workqueue: ref;

axiom zd_workqueue == $sub.ref(0, 1032);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 2060);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 3116);

const {:count 60} usb_ids: ref;

axiom usb_ids == $sub.ref(0, 6060);

const driver: ref;

axiom driver == $sub.ref(0, 7388);

const {:count 16} rfs: ref;

axiom rfs == $sub.ref(0, 8540);

const {:count 19} uw2453_txgain: ref;

axiom uw2453_txgain == $sub.ref(0, 9640);

const {:count 11} uw2453_std_vco_cfg: ref;

axiom uw2453_std_vco_cfg == $sub.ref(0, 10818);

const {:count 14} uw2453_synth_divide: ref;

axiom uw2453_synth_divide == $sub.ref(0, 11870);

const {:count 14} uw2453_std_synth: ref;

axiom uw2453_std_synth == $sub.ref(0, 12908);

const {:count 14} uw2453_autocal_synth: ref;

axiom uw2453_autocal_synth == $sub.ref(0, 13960);

const {:count 5} ioreqs_sw: ref;

axiom ioreqs_sw == $sub.ref(0, 15004);

const {:count 3} rv_init2: ref;

axiom rv_init2 == $sub.ref(0, 16040);

const {:count 4} rv_init1: ref;

axiom rv_init1 == $sub.ref(0, 17080);

const {:count 10} std_rv: ref;

axiom std_rv == $sub.ref(0, 18144);

const {:count 14} chan_rv: ref;

axiom chan_rv == $sub.ref(0, 19280);

const {:count 14} rf2959_table: ref;

axiom rf2959_table == $sub.ref(0, 20416);

const {:count 14} zd1211_al2230_table: ref;

axiom zd1211_al2230_table == $sub.ref(0, 21608);

const {:count 14} zd1211b_al2230_table: ref;

axiom zd1211b_al2230_table == $sub.ref(0, 22800);

const {:count 10} ioreqs_init_al2230s: ref;

axiom ioreqs_init_al2230s == $sub.ref(0, 23864);

const {:count 2} zd1211b_ioreqs_shared_1: ref;

axiom zd1211b_ioreqs_shared_1 == $sub.ref(0, 24896);

const zd_ops: ref;

axiom zd_ops == $sub.ref(0, 26496);

const {:count 14} zd_channels: ref;

axiom zd_channels == $sub.ref(0, 28080);

const {:count 12} zd_rates: ref;

axiom zd_rates == $sub.ref(0, 29248);

const {:count 12} zd_retry_rates: ref;

axiom zd_retry_rates == $sub.ref(0, 30800);

const {:count 8} reg_alpha2_map: ref;

axiom reg_alpha2_map == $sub.ref(0, 31888);

const ldv_mutex_setup_mutex: ref;

axiom ldv_mutex_setup_mutex == $sub.ref(0, 32916);

const ldv_mutex_mutex: ref;

axiom ldv_mutex_mutex == $sub.ref(0, 33944);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 34972);

const ldv_mutex_cred_guard_mutex: ref;

axiom ldv_mutex_cred_guard_mutex == $sub.ref(0, 36000);

const .str: ref;

axiom .str == $sub.ref(0, 37037);

const {:count 20} .str.237: ref;

axiom .str.237 == $sub.ref(0, 38081);

const {:count 17} .str.238: ref;

axiom .str.238 == $sub.ref(0, 39122);

const {:count 9} .str.1: ref;

axiom .str.1 == $sub.ref(0, 40155);

const {:count 12} .str.239: ref;

axiom .str.239 == $sub.ref(0, 41191);

const {:count 309} .str.60: ref;

axiom .str.60 == $sub.ref(0, 42524);

const {:count 27} .str.4: ref;

axiom .str.4 == $sub.ref(0, 43575);

const {:count 25} .str.240: ref;

axiom .str.240 == $sub.ref(0, 44624);

const {:count 26} .str.241: ref;

axiom .str.241 == $sub.ref(0, 45674);

const {:count 27} .str.242: ref;

axiom .str.242 == $sub.ref(0, 46725);

const {:count 2} .str.6: ref;

axiom .str.6 == $sub.ref(0, 47751);

const {:count 7} .str.26: ref;

axiom .str.26 == $sub.ref(0, 48782);

const {:count 25} .str.243: ref;

axiom .str.243 == $sub.ref(0, 49831);

const {:count 19} .str.218: ref;

axiom .str.218 == $sub.ref(0, 50874);

const {:count 300} .str.32: ref;

axiom .str.32 == $sub.ref(0, 52198);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 165} .str.149: ref;

axiom .str.149 == $sub.ref(0, 53387);

const {:count 22} .str.206: ref;

axiom .str.206 == $sub.ref(0, 54433);

const {:count 16} .str.219: ref;

axiom .str.219 == $sub.ref(0, 55473);

const {:count 29} .str.220: ref;

axiom .str.220 == $sub.ref(0, 56526);

const {:count 175} .str.221: ref;

axiom .str.221 == $sub.ref(0, 57725);

const {:count 197} .str.222: ref;

axiom .str.222 == $sub.ref(0, 58946);

const {:count 30} .str.223: ref;

axiom .str.223 == $sub.ref(0, 60000);

const {:count 31} .str.224: ref;

axiom .str.224 == $sub.ref(0, 61055);

const {:count 36} .str.225: ref;

axiom .str.225 == $sub.ref(0, 62115);

const {:count 17} .str.226: ref;

axiom .str.226 == $sub.ref(0, 63156);

const {:count 17} .str.150: ref;

axiom .str.150 == $sub.ref(0, 64197);

const {:count 309} .str.31: ref;

axiom .str.31 == $sub.ref(0, 65530);

const {:count 199} .str.42: ref;

axiom .str.42 == $sub.ref(0, 66753);

const {:count 38} .str.151: ref;

axiom .str.151 == $sub.ref(0, 67815);

const {:count 64} .str.158: ref;

axiom .str.158 == $sub.ref(0, 68903);

const {:count 16} .str.159: ref;

axiom .str.159 == $sub.ref(0, 69943);

const {:count 20} .str.233: ref;

axiom .str.233 == $sub.ref(0, 70987);

const {:count 30} .str.234: ref;

axiom .str.234 == $sub.ref(0, 72041);

const {:count 31} .str.235: ref;

axiom .str.235 == $sub.ref(0, 73096);

const {:count 39} .str.236: ref;

axiom .str.236 == $sub.ref(0, 74159);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 22} .str.160: ref;

axiom .str.160 == $sub.ref(0, 75205);

const {:count 22} .str.231: ref;

axiom .str.231 == $sub.ref(0, 76251);

const {:count 9} .str.232: ref;

axiom .str.232 == $sub.ref(0, 77284);

const {:count 14} .str.229: ref;

axiom .str.229 == $sub.ref(0, 78322);

const {:count 24} .str.230: ref;

axiom .str.230 == $sub.ref(0, 79370);

const {:count 310} .str.3: ref;

axiom .str.3 == $sub.ref(0, 80704);

const {:count 50} .str.7: ref;

axiom .str.7 == $sub.ref(0, 81778);

const {:count 20} .str.8: ref;

axiom .str.8 == $sub.ref(0, 82822);

const {:count 20} .str.100: ref;

axiom .str.100 == $sub.ref(0, 83866);

const {:count 173} .str.101: ref;

axiom .str.101 == $sub.ref(0, 85063);

const {:count 30} .str.10: ref;

axiom .str.10 == $sub.ref(0, 86117);

const {:count 27} .str.74: ref;

axiom .str.74 == $sub.ref(0, 87168);

const {:count 17} .str.75: ref;

axiom .str.75 == $sub.ref(0, 88209);

const {:count 46} .str.76: ref;

axiom .str.76 == $sub.ref(0, 89279);

const {:count 48} .str.77: ref;

axiom .str.77 == $sub.ref(0, 90351);

const {:count 39} .str.78: ref;

axiom .str.78 == $sub.ref(0, 91414);

const {:count 45} .str.79: ref;

axiom .str.79 == $sub.ref(0, 92483);

const {:count 53} .str.80: ref;

axiom .str.80 == $sub.ref(0, 93560);

const {:count 69} .str.81: ref;

axiom .str.81 == $sub.ref(0, 94653);

const {:count 21} .str.82: ref;

axiom .str.82 == $sub.ref(0, 95698);

const {:count 35} .str.83: ref;

axiom .str.83 == $sub.ref(0, 96757);

const {:count 31} .str.270: ref;

axiom .str.270 == $sub.ref(0, 97812);

const {:count 12} .str.271: ref;

axiom .str.271 == $sub.ref(0, 98848);

const {:count 52} .str.214: ref;

axiom .str.214 == $sub.ref(0, 99924);

const {:count 16} .str.215: ref;

axiom .str.215 == $sub.ref(0, 100964);

const {:count 54} .str.216: ref;

axiom .str.216 == $sub.ref(0, 102042);

const {:count 41} .str.217: ref;

axiom .str.217 == $sub.ref(0, 103107);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 24} .str.181: ref;

axiom .str.181 == $sub.ref(0, 104155);

const {:count 28} .str.88: ref;

axiom .str.88 == $sub.ref(0, 105207);

const {:count 14} .str.89: ref;

axiom .str.89 == $sub.ref(0, 106245);

const {:count 56} .str.90: ref;

axiom .str.90 == $sub.ref(0, 107325);

const {:count 15} .str.91: ref;

axiom .str.91 == $sub.ref(0, 108364);

const {:count 49} .str.272: ref;

axiom .str.272 == $sub.ref(0, 109437);

const {:count 22} .str.273: ref;

axiom .str.273 == $sub.ref(0, 110483);

const {:count 28} .str.102: ref;

axiom .str.102 == $sub.ref(0, 111535);

const {:count 34} .str.103: ref;

axiom .str.103 == $sub.ref(0, 112593);

const {:count 24} .str.92: ref;

axiom .str.92 == $sub.ref(0, 113641);

const {:count 30} .str.84: ref;

axiom .str.84 == $sub.ref(0, 114695);

const {:count 39} .str.85: ref;

axiom .str.85 == $sub.ref(0, 115758);

const {:count 38} .str.86: ref;

axiom .str.86 == $sub.ref(0, 116820);

const {:count 15} .str.87: ref;

axiom .str.87 == $sub.ref(0, 117859);

const {:count 51} .str.12: ref;

axiom .str.12 == $sub.ref(0, 118934);

const {:count 21} .str.13: ref;

axiom .str.13 == $sub.ref(0, 119979);

const {:count 18} .str.179: ref;

axiom .str.179 == $sub.ref(0, 121021);

const {:count 24} .str.180: ref;

axiom .str.180 == $sub.ref(0, 122069);

const {:count 18} .str.182: ref;

axiom .str.182 == $sub.ref(0, 123111);

const {:count 23} .str.183: ref;

axiom .str.183 == $sub.ref(0, 124158);

const {:count 18} .str.24: ref;

axiom .str.24 == $sub.ref(0, 125200);

const {:count 32} .str.25: ref;

axiom .str.25 == $sub.ref(0, 126256);

const {:count 20} .str.109: ref;

axiom .str.109 == $sub.ref(0, 127300);

const {:count 33} .str.152: ref;

axiom .str.152 == $sub.ref(0, 128357);

const {:count 26} .str.153: ref;

axiom .str.153 == $sub.ref(0, 129407);

const {:count 42} .str.154: ref;

axiom .str.154 == $sub.ref(0, 130473);

const {:count 49} .str.155: ref;

axiom .str.155 == $sub.ref(0, 131546);

const {:count 30} .str.156: ref;

axiom .str.156 == $sub.ref(0, 132600);

const {:count 34} .str.157: ref;

axiom .str.157 == $sub.ref(0, 133658);

const {:count 24} .str.21: ref;

axiom .str.21 == $sub.ref(0, 134706);

const {:count 29} .str.19: ref;

axiom .str.19 == $sub.ref(0, 135759);

const {:count 30} .str.20: ref;

axiom .str.20 == $sub.ref(0, 136813);

const {:count 19} .str.147: ref;

axiom .str.147 == $sub.ref(0, 137856);

const {:count 15} .str.146: ref;

axiom .str.146 == $sub.ref(0, 138895);

const {:count 24} .str.125: ref;

axiom .str.125 == $sub.ref(0, 139943);

const {:count 20} .str.105: ref;

axiom .str.105 == $sub.ref(0, 140987);

const {:count 21} .str.9: ref;

axiom .str.9 == $sub.ref(0, 142032);

const {:count 47} .str.11: ref;

axiom .str.11 == $sub.ref(0, 143103);

const {:count 18} .str.52: ref;

axiom .str.52 == $sub.ref(0, 144145);

const {:count 308} .str.49: ref;

axiom .str.49 == $sub.ref(0, 145477);

const {:count 43} .str.53: ref;

axiom .str.53 == $sub.ref(0, 146544);

const {:count 18} .str.54: ref;

axiom .str.54 == $sub.ref(0, 147586);

const {:count 22} .str.18: ref;

axiom .str.18 == $sub.ref(0, 148632);

const {:count 4} .str.14: ref;

axiom .str.14 == $sub.ref(0, 149660);

const {:count 18} .str.106: ref;

axiom .str.106 == $sub.ref(0, 150702);

const {:count 25} .str.107: ref;

axiom .str.107 == $sub.ref(0, 151751);

const {:count 18} .str.108: ref;

axiom .str.108 == $sub.ref(0, 152793);

const {:count 6} .str.15: ref;

axiom .str.15 == $sub.ref(0, 153823);

const {:count 20} .str.64: ref;

axiom .str.64 == $sub.ref(0, 154867);

const {:count 19} .str.65: ref;

axiom .str.65 == $sub.ref(0, 155910);

const {:count 20} .str.56: ref;

axiom .str.56 == $sub.ref(0, 156954);

const {:count 21} .str.174: ref;

axiom .str.174 == $sub.ref(0, 157999);

const {:count 15} .str.168: ref;

axiom .str.168 == $sub.ref(0, 159038);

const {:count 23} .str.69: ref;

axiom .str.69 == $sub.ref(0, 160085);

const {:count 28} .str.35: ref;

axiom .str.35 == $sub.ref(0, 161137);

const {:count 12} .str.36: ref;

axiom .str.36 == $sub.ref(0, 162173);

const {:count 14} .str.167: ref;

axiom .str.167 == $sub.ref(0, 163211);

const {:count 20} .str.173: ref;

axiom .str.173 == $sub.ref(0, 164255);

const {:count 22} .str.68: ref;

axiom .str.68 == $sub.ref(0, 165301);

const {:count 19} .str.55: ref;

axiom .str.55 == $sub.ref(0, 166344);

const {:count 18} .str.59: ref;

axiom .str.59 == $sub.ref(0, 167386);

const {:count 40} .str.61: ref;

axiom .str.61 == $sub.ref(0, 168450);

const {:count 20} .str.62: ref;

axiom .str.62 == $sub.ref(0, 169494);

const {:count 43} .str.63: ref;

axiom .str.63 == $sub.ref(0, 170561);

const {:count 17} .str.207: ref;

axiom .str.207 == $sub.ref(0, 171602);

const {:count 29} .str.208: ref;

axiom .str.208 == $sub.ref(0, 172655);

const {:count 31} .str.209: ref;

axiom .str.209 == $sub.ref(0, 173710);

const {:count 34} .str.210: ref;

axiom .str.210 == $sub.ref(0, 174768);

const {:count 41} .str.211: ref;

axiom .str.211 == $sub.ref(0, 175833);

const {:count 17} .str.41: ref;

axiom .str.41 == $sub.ref(0, 176874);

const {:count 16} .str.212: ref;

axiom .str.212 == $sub.ref(0, 177914);

const {:count 161} .str.213: ref;

axiom .str.213 == $sub.ref(0, 179099);

const {:count 15} .str.70: ref;

axiom .str.70 == $sub.ref(0, 180138);

const {:count 41} .str.71: ref;

axiom .str.71 == $sub.ref(0, 181203);

const {:count 52} .str.72: ref;

axiom .str.72 == $sub.ref(0, 182279);

const {:count 47} .str.73: ref;

axiom .str.73 == $sub.ref(0, 183350);

const {:count 15} .str.30: ref;

axiom .str.30 == $sub.ref(0, 184389);

const {:count 23} .str.16: ref;

axiom .str.16 == $sub.ref(0, 185436);

const {:count 18} .str.17: ref;

axiom .str.17 == $sub.ref(0, 186478);

const {:count 16} .str.28: ref;

axiom .str.28 == $sub.ref(0, 187518);

const {:count 4} .str.139: ref;

axiom .str.139 == $sub.ref(0, 188546);

const {:count 2} .str.141: ref;

axiom .str.141 == $sub.ref(0, 189572);

const .str.142: ref;

axiom .str.142 == $sub.ref(0, 190597);

const {:count 15} .str.140: ref;

axiom .str.140 == $sub.ref(0, 191636);

const {:count 2} .str.143: ref;

axiom .str.143 == $sub.ref(0, 192662);

const {:count 18} .str.144: ref;

axiom .str.144 == $sub.ref(0, 193704);

const {:count 3} .str.51: ref;

axiom .str.51 == $sub.ref(0, 194731);

const {:count 15} .str.145: ref;

axiom .str.145 == $sub.ref(0, 195770);

const {:count 22} .str.244: ref;

axiom .str.244 == $sub.ref(0, 196816);

const {:count 4} .str.245: ref;

axiom .str.245 == $sub.ref(0, 197844);

const {:count 5} .str.246: ref;

axiom .str.246 == $sub.ref(0, 198873);

const {:count 5} .str.247: ref;

axiom .str.247 == $sub.ref(0, 199902);

const {:count 14} .str.248: ref;

axiom .str.248 == $sub.ref(0, 200940);

const {:count 12} .str.138: ref;

axiom .str.138 == $sub.ref(0, 201976);

const {:count 35} .str.132: ref;

axiom .str.132 == $sub.ref(0, 203035);

const {:count 18} .str.133: ref;

axiom .str.133 == $sub.ref(0, 204077);

const {:count 29} .str.134: ref;

axiom .str.134 == $sub.ref(0, 205130);

const {:count 26} .str.135: ref;

axiom .str.135 == $sub.ref(0, 206180);

const {:count 28} .str.136: ref;

axiom .str.136 == $sub.ref(0, 207232);

const {:count 28} .str.137: ref;

axiom .str.137 == $sub.ref(0, 208284);

const {:count 24} .str.130: ref;

axiom .str.130 == $sub.ref(0, 209332);

const {:count 6} .str.131: ref;

axiom .str.131 == $sub.ref(0, 210362);

const {:count 19} .str.104: ref;

axiom .str.104 == $sub.ref(0, 211405);

const {:count 14} .str.48: ref;

axiom .str.48 == $sub.ref(0, 212443);

const {:count 28} .str.50: ref;

axiom .str.50 == $sub.ref(0, 213495);

const {:count 30} .str.22: ref;

axiom .str.22 == $sub.ref(0, 214549);

const {:count 30} .str.23: ref;

axiom .str.23 == $sub.ref(0, 215603);

const {:count 18} .str.148: ref;

axiom .str.148 == $sub.ref(0, 216645);

const {:count 15} .str.93: ref;

axiom .str.93 == $sub.ref(0, 217684);

const {:count 67} .str.94: ref;

axiom .str.94 == $sub.ref(0, 218775);

const {:count 57} .str.95: ref;

axiom .str.95 == $sub.ref(0, 219856);

const {:count 44} .str.96: ref;

axiom .str.96 == $sub.ref(0, 220924);

const {:count 26} .str.97: ref;

axiom .str.97 == $sub.ref(0, 221974);

const {:count 39} .str.98: ref;

axiom .str.98 == $sub.ref(0, 223037);

const {:count 68} .str.99: ref;

axiom .str.99 == $sub.ref(0, 224129);

const {:count 61} .str.188: ref;

axiom .str.188 == $sub.ref(0, 225214);

const {:count 25} .str.189: ref;

axiom .str.189 == $sub.ref(0, 226263);

const {:count 37} .str.185: ref;

axiom .str.185 == $sub.ref(0, 227324);

const {:count 15} .str.186: ref;

axiom .str.186 == $sub.ref(0, 228363);

const {:count 38} .str.187: ref;

axiom .str.187 == $sub.ref(0, 229425);

const {:count 21} .str.29: ref;

axiom .str.29 == $sub.ref(0, 230470);

const {:count 25} .str.184: ref;

axiom .str.184 == $sub.ref(0, 231519);

const {:count 55} .str.47: ref;

axiom .str.47 == $sub.ref(0, 232598);

const {:count 8} .str.122: ref;

axiom .str.122 == $sub.ref(0, 233630);

const {:count 13} .str.127: ref;

axiom .str.127 == $sub.ref(0, 234667);

const {:count 20} .str.129: ref;

axiom .str.129 == $sub.ref(0, 235711);

const {:count 21} .str.128: ref;

axiom .str.128 == $sub.ref(0, 236756);

const {:count 20} .str.124: ref;

axiom .str.124 == $sub.ref(0, 237800);

const {:count 12} .str.126: ref;

axiom .str.126 == $sub.ref(0, 238836);

const {:count 21} .str.123: ref;

axiom .str.123 == $sub.ref(0, 239881);

const {:count 9} .str.119: ref;

axiom .str.119 == $sub.ref(0, 240914);

const {:count 21} .str.120: ref;

axiom .str.120 == $sub.ref(0, 241959);

const {:count 104} .str.121: ref;

axiom .str.121 == $sub.ref(0, 243087);

const {:count 20} .str.118: ref;

axiom .str.118 == $sub.ref(0, 244131);

const {:count 20} .str.116: ref;

axiom .str.116 == $sub.ref(0, 245175);

const {:count 27} .str.117: ref;

axiom .str.117 == $sub.ref(0, 246226);

const {:count 13} .str.110: ref;

axiom .str.110 == $sub.ref(0, 247263);

const {:count 10} .str.111: ref;

axiom .str.111 == $sub.ref(0, 248297);

const {:count 13} .str.112: ref;

axiom .str.112 == $sub.ref(0, 249334);

const {:count 40} .str.113: ref;

axiom .str.113 == $sub.ref(0, 250398);

const {:count 8} .str.114: ref;

axiom .str.114 == $sub.ref(0, 251430);

const {:count 16} .str.115: ref;

axiom .str.115 == $sub.ref(0, 252470);

const {:count 3} .str.249: ref;

axiom .str.249 == $sub.ref(0, 253497);

const {:count 65} .str.250: ref;

axiom .str.250 == $sub.ref(0, 254586);

const {:count 59} .str.251: ref;

axiom .str.251 == $sub.ref(0, 255669);

const {:count 64} .str.252: ref;

axiom .str.252 == $sub.ref(0, 256757);

const {:count 16} .str.253: ref;

axiom .str.253 == $sub.ref(0, 257797);

const {:count 5} .str.254: ref;

axiom .str.254 == $sub.ref(0, 258826);

const {:count 53} .str.255: ref;

axiom .str.255 == $sub.ref(0, 259903);

const {:count 15} .str.263: ref;

axiom .str.263 == $sub.ref(0, 260942);

const {:count 24} .str.264: ref;

axiom .str.264 == $sub.ref(0, 261990);

const {:count 12} .str.265: ref;

axiom .str.265 == $sub.ref(0, 263026);

const {:count 65} .str.266: ref;

axiom .str.266 == $sub.ref(0, 264115);

const {:count 64} .str.267: ref;

axiom .str.267 == $sub.ref(0, 265203);

const {:count 71} .str.268: ref;

axiom .str.268 == $sub.ref(0, 266298);

const {:count 42} .str.269: ref;

axiom .str.269 == $sub.ref(0, 267364);

const {:count 3} .str.262: ref;

axiom .str.262 == $sub.ref(0, 268391);

const {:count 17} .str.259: ref;

axiom .str.259 == $sub.ref(0, 269432);

const {:count 16} .str.260: ref;

axiom .str.260 == $sub.ref(0, 270472);

const {:count 50} .str.261: ref;

axiom .str.261 == $sub.ref(0, 271546);

const {:count 16} .str.257: ref;

axiom .str.257 == $sub.ref(0, 272586);

const {:count 15} .str.258: ref;

axiom .str.258 == $sub.ref(0, 273625);

const {:count 5} .str.256: ref;

axiom .str.256 == $sub.ref(0, 274654);

const {:count 29} .str.66: ref;

axiom .str.66 == $sub.ref(0, 275707);

const {:count 10} .str.67: ref;

axiom .str.67 == $sub.ref(0, 276741);

const {:count 16} .str.227: ref;

axiom .str.227 == $sub.ref(0, 277781);

const {:count 31} .str.228: ref;

axiom .str.228 == $sub.ref(0, 278836);

const {:count 13} .str.175: ref;

axiom .str.175 == $sub.ref(0, 279873);

const {:count 19} .str.176: ref;

axiom .str.176 == $sub.ref(0, 280916);

const {:count 24} .str.177: ref;

axiom .str.177 == $sub.ref(0, 281964);

const {:count 23} .str.178: ref;

axiom .str.178 == $sub.ref(0, 283011);

const {:count 12} .str.190: ref;

axiom .str.190 == $sub.ref(0, 284047);

const {:count 12} .str.191: ref;

axiom .str.191 == $sub.ref(0, 285083);

const {:count 10} .str.192: ref;

axiom .str.192 == $sub.ref(0, 286117);

const {:count 9} .str.193: ref;

axiom .str.193 == $sub.ref(0, 287150);

const {:count 10} .str.194: ref;

axiom .str.194 == $sub.ref(0, 288184);

const {:count 11} .str.195: ref;

axiom .str.195 == $sub.ref(0, 289219);

const {:count 9} .str.196: ref;

axiom .str.196 == $sub.ref(0, 290252);

const {:count 10} .str.197: ref;

axiom .str.197 == $sub.ref(0, 291286);

const {:count 13} .str.198: ref;

axiom .str.198 == $sub.ref(0, 292323);

const {:count 10} .str.199: ref;

axiom .str.199 == $sub.ref(0, 293357);

const {:count 11} .str.200: ref;

axiom .str.200 == $sub.ref(0, 294392);

const {:count 10} .str.201: ref;

axiom .str.201 == $sub.ref(0, 295426);

const {:count 12} .str.202: ref;

axiom .str.202 == $sub.ref(0, 296462);

const {:count 10} .str.203: ref;

axiom .str.203 == $sub.ref(0, 297496);

const {:count 14} .str.204: ref;

axiom .str.204 == $sub.ref(0, 298534);

const {:count 11} .str.205: ref;

axiom .str.205 == $sub.ref(0, 299569);

const {:count 14} .str.290: ref;

axiom .str.290 == $sub.ref(0, 300607);

const {:count 54} .str.291: ref;

axiom .str.291 == $sub.ref(0, 301685);

const {:count 32} .str.292: ref;

axiom .str.292 == $sub.ref(0, 302741);

const {:count 20} .str.37: ref;

axiom .str.37 == $sub.ref(0, 303785);

const {:count 35} .str.38: ref;

axiom .str.38 == $sub.ref(0, 304844);

const {:count 37} .str.39: ref;

axiom .str.39 == $sub.ref(0, 305905);

const {:count 44} .str.40: ref;

axiom .str.40 == $sub.ref(0, 306973);

const {:count 12} .str.289: ref;

axiom .str.289 == $sub.ref(0, 308009);

const {:count 11} .str.293: ref;

axiom .str.293 == $sub.ref(0, 309044);

const {:count 14} .str.294: ref;

axiom .str.294 == $sub.ref(0, 310082);

const {:count 13} .str.33: ref;

axiom .str.33 == $sub.ref(0, 311119);

const {:count 28} .str.34: ref;

axiom .str.34 == $sub.ref(0, 312171);

const pv_lock_ops: ref;

axiom pv_lock_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 14} .str.2: ref;

axiom .str.2 == $sub.ref(0, 313209);

const {:count 31} .str.5: ref;

axiom .str.5 == $sub.ref(0, 314264);

const {:count 24} .str.280: ref;

axiom .str.280 == $sub.ref(0, 315312);

const {:count 6} .str.281: ref;

axiom .str.281 == $sub.ref(0, 316342);

const {:count 44} .str.282: ref;

axiom .str.282 == $sub.ref(0, 317410);

const {:count 48} .str.283: ref;

axiom .str.283 == $sub.ref(0, 318482);

const {:count 17} .str.284: ref;

axiom .str.284 == $sub.ref(0, 319523);

const {:count 25} .str.27: ref;

axiom .str.27 == $sub.ref(0, 320572);

const {:count 41} .str.57: ref;

axiom .str.57 == $sub.ref(0, 321637);

const {:count 48} .str.58: ref;

axiom .str.58 == $sub.ref(0, 322709);

const {:count 20} .str.43: ref;

axiom .str.43 == $sub.ref(0, 323753);

const {:count 16} .str.44: ref;

axiom .str.44 == $sub.ref(0, 324793);

const {:count 21} .str.45: ref;

axiom .str.45 == $sub.ref(0, 325838);

const {:count 21} .str.46: ref;

axiom .str.46 == $sub.ref(0, 326883);

const {:count 28} .str.161: ref;

axiom .str.161 == $sub.ref(0, 327935);

const {:count 16} .str.162: ref;

axiom .str.162 == $sub.ref(0, 328975);

const {:count 38} .str.163: ref;

axiom .str.163 == $sub.ref(0, 330037);

const {:count 39} .str.164: ref;

axiom .str.164 == $sub.ref(0, 331100);

const {:count 69} .str.165: ref;

axiom .str.165 == $sub.ref(0, 332193);

const {:count 24} .str.166: ref;

axiom .str.166 == $sub.ref(0, 333241);

const {:count 44} .str.169: ref;

axiom .str.169 == $sub.ref(0, 334309);

const {:count 45} .str.170: ref;

axiom .str.170 == $sub.ref(0, 335378);

const {:count 36} .str.171: ref;

axiom .str.171 == $sub.ref(0, 336438);

const {:count 17} .str.172: ref;

axiom .str.172 == $sub.ref(0, 337479);

const {:count 44} .str.287: ref;

axiom .str.287 == $sub.ref(0, 338547);

const {:count 37} .str.288: ref;

axiom .str.288 == $sub.ref(0, 339608);

const {:count 9} .str.285: ref;

axiom .str.285 == $sub.ref(0, 340641);

const {:count 9} .str.286: ref;

axiom .str.286 == $sub.ref(0, 341674);

const {:count 9} .str.295: ref;

axiom .str.295 == $sub.ref(0, 342707);

const {:count 15} .str.296: ref;

axiom .str.296 == $sub.ref(0, 343746);

const {:count 9} .str.274: ref;

axiom .str.274 == $sub.ref(0, 344779);

const {:count 15} .str.275: ref;

axiom .str.275 == $sub.ref(0, 345818);

const {:count 14} .str.276: ref;

axiom .str.276 == $sub.ref(0, 346856);

const {:count 31} .str.277: ref;

axiom .str.277 == $sub.ref(0, 347911);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 44} .str.278: ref;

axiom .str.278 == $sub.ref(0, 348979);

const {:count 16} .str.279: ref;

axiom .str.279 == $sub.ref(0, 350019);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 351051);

const {:count 3} .str.1.604: ref;

axiom .str.1.604 == $sub.ref(0, 352078);

const {:count 14} .str.605: ref;

axiom .str.605 == $sub.ref(0, 353116);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 354144);

const zd_chip_init: ref;

axiom zd_chip_init == $sub.ref(0, 355176);

procedure zd_chip_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation zd_chip_init($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 1} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p4, 0, 11584, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} __mutex_init($p5, .str, $p3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} zd_usb_init($p6, $p1, $p2);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11272, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} zd_rf_init($p7);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 356208);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 357240);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 358272);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_init: ref;

axiom zd_usb_init == $sub.ref(0, 359304);

procedure zd_usb_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation zd_usb_init($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 5} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p3, 0, 11272, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p4 := usb_get_intf($p2);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p4);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} usb_set_intfdata($p7, $p8);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11008, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} init_usb_anchor($p9);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} init_usb_interrupt($p0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} init_usb_tx($p0);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} init_usb_rx($p0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    return;
}



const zd_rf_init: ref;

axiom zd_rf_init == $sub.ref(0, 360336);

procedure zd_rf_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_rf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i8;
  var $i5: i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 12} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p1, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i4 := $and.i8($i3, $sub.i8(0, 2));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i5 := $or.i8($i4, 1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i5);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    return;
}



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 361368);

procedure usb_get_intf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p1 := external_alloc();
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 362400);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_94 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    return;
}



const init_usb_anchor: ref;

axiom init_usb_anchor == $sub.ref(0, 363432);

procedure init_usb_anchor($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_usb_anchor($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_95: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} INIT_LIST_HEAD($p3);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} __init_waitqueue_head($p4, .str.229, $p1);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} vslice_dummy_var_95 := spinlock_check($p5);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} __raw_spin_lock_init($p9, .str.230, $p2);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    return;
}



const init_usb_interrupt: ref;

axiom init_usb_interrupt == $sub.ref(0, 364464);

procedure init_usb_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_usb_interrupt($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var vslice_dummy_var_96: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_96 := spinlock_check($p3);
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} __raw_spin_lock_init($p7, .str.231, $p1);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p8 := zd_usb_to_usbdev($p0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i9 := int_urb_interval($p8);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} init_completion($p12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} atomic_set($p13, 0);
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $sub.i16(0, 27376));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    return;
}



const init_usb_tx: ref;

axiom init_usb_tx == $sub.ref(0, 365496);

procedure init_usb_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_usb_tx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p34: ref;
  var $p37: ref;
  var $p39: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p47: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_97: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} vslice_dummy_var_97 := spinlock_check($p6);
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} __raw_spin_lock_init($p10, .str.233, $p1);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(0, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} atomic_set($p11, 0);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(580, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, $sub.i8(0, 2));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i14);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(296, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} skb_queue_head_init($p15);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(392, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} init_usb_anchor($p16);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(576, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(580, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, $sub.i8(0, 3));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i20);
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} __init_work($p22, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, 4195328);
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 38} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p27, $p28, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    $p31 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} lockdep_init_map($p31, .str.234, $p2, 0);
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} INIT_LIST_HEAD($p34);
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, zd_tx_watchdog_handler);
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(80, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} init_timer_key($p39, 2, .str.235, $p4);
    $p42 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, delayed_work_timer_fn);
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    $p47 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i44);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    return;
}



const init_usb_rx: ref;

axiom init_usb_rx == $sub.ref(0, 366528);

procedure init_usb_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation init_usb_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p56: ref;
  var $p59: ref;
  var $p62: ref;
  var $p64: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p72: ref;
  var $p74: ref;
  var $i75: i64;
  var $p77: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_98: ref;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} vslice_dummy_var_98 := spinlock_check($p8);
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} __raw_spin_lock_init($p12, .str.237, $p1);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} __mutex_init($p13, .str.238, $p2);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p16 := interface_to_usbdev($p15);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1744)), $mul.ref(28, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10100, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 64);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 53} {:cexpr "tmp___1"} boogie_si_record_i64($i27);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} __init_work($p47, 0);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, 4195328);
    $p51 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(240, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p5);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 59} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p52, $p53, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    $p56 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(240, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} lockdep_init_map($p56, .str.241, $p4, 0);
    $p59 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(240, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} INIT_LIST_HEAD($p59);
    $p62 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(240, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, zd_rx_idle_timer_handler);
    $p64 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(240, 1)), $mul.ref(80, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} init_timer_key($p64, 2, .str.242, $p6);
    $p67 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(240, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, delayed_work_timer_fn);
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(240, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    $p72 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(240, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i69);
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(456, 1)), $mul.ref(24, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, zd_usb_reset_rx_idle_timer_tasklet);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p0);
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(456, 1)), $mul.ref(32, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p77, $i75);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p29, .str.1);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p30, .str.239);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p31, .str.60);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p32, .str.4);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.5, $p34);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 1232);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p34, $i37);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p38, 1);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.6, $p39);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 55} {:cexpr "tmp___0"} boogie_si_record_i64($i43);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} dump_stack();
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i44 == 1;
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} vslice_dummy_var_99 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.60, 1232, .str.240);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i19 == 1;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10100, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 512);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 367560);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 368592);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 369624);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 136), 1744));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 370656);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 64} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 371688);

procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 67} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 68} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dump_stack: ref;

axiom dump_stack == $sub.ref(0, 372720);

procedure dump_stack();
  free requires assertsPassed;



implementation dump_stack()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 373752);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 374784);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 375816);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 376848);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    return;
}



const zd_rx_idle_timer_handler: ref;

axiom zd_rx_idle_timer_handler == $sub.ref(0, 377880);

procedure zd_rx_idle_timer_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, assertsPassed, $CurrAddr;



implementation zd_rx_idle_timer_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 536), 11272));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $p3 := zd_usb_to_mac($p2);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(12448, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i5 := constant_test_bit(0, $p4);
    call {:si_unique_call 73} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 536), 11272)), $mul.ref(11000, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vslice_dummy_var_100 := dev_printk.ref.ref.ref.ref(.str.6, $p9, .str.26, .str.243);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} zd_usb_reset_rx($p2);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 378912);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 379944);

procedure delayed_work_timer_fn($i0: i64);



const zd_usb_reset_rx_idle_timer_tasklet: ref;

axiom zd_usb_reset_rx_idle_timer_tasklet == $sub.ref(0, 380976);

procedure zd_usb_reset_rx_idle_timer_tasklet($i0: i64);



const zd_usb_reset_rx_idle_timer: ref;

axiom zd_usb_reset_rx_idle_timer == $sub.ref(0, 382008);

procedure zd_usb_reset_rx_idle_timer($p0: ref);
  free requires assertsPassed;



implementation zd_usb_reset_rx_idle_timer($p0: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_101: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i2 := round_jiffies_relative(7500);
    call {:si_unique_call 78} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p3 := $M.7;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(240, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} vslice_dummy_var_101 := mod_delayed_work($p3, $p4, $i2);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    return;
}



const round_jiffies_relative: ref;

axiom round_jiffies_relative == $sub.ref(0, 383040);

procedure round_jiffies_relative($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation round_jiffies_relative($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 80} {:cexpr "round_jiffies_relative:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 81} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 82} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mod_delayed_work: ref;

axiom mod_delayed_work == $sub.ref(0, 384072);

procedure mod_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation mod_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 83} {:cexpr "mod_delayed_work:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 1} true;
    call {:si_unique_call 84} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 85} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const zd_usb_to_mac: ref;

axiom zd_usb_to_mac == $sub.ref(0, 385104);

procedure zd_usb_to_mac($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_usb_to_mac($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p1 := zd_usb_to_chip($p0);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $p2 := zd_chip_to_mac($p1);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 386136);

procedure constant_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i32($i0);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i32($i0, 64);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref($i3, 8));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i0, 63);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i5, $i7);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const dev_printk: ref;

axiom dev_printk == $sub.ref(0, 387168);

procedure dev_printk.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 1} true;
    call {:si_unique_call 89} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 90} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 91} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 92} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 1} true;
    call {:si_unique_call 93} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 94} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 95} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 96} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 1} true;
    call {:si_unique_call 97} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 98} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 99} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 101} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 102} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 1} true;
    call {:si_unique_call 103} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 104} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 105} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 106} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 107} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 108} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const zd_usb_reset_rx: ref;

axiom zd_usb_reset_rx == $sub.ref(0, 388200);

procedure zd_usb_reset_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, assertsPassed, $CurrAddr;



implementation zd_usb_reset_rx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i1;
  var $p14: ref;
  var $i15: i1;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} ldv_mutex_lock_216($p2);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p4 := spinlock_check($p3);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 112} {:cexpr "flags"} boogie_si_record_i64($i5);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 113} {:cexpr "do_reset"} boogie_si_record_i8($i10);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} spin_unlock_irqrestore($p11, $i5);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i10);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} ldv_mutex_unlock_217($p14);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i10);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} zd_usb_reset_rx_idle_timer($p0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} __zd_usb_disable_rx($p0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_102 := __zd_usb_enable_rx($p0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_216: ref;

axiom ldv_mutex_lock_216 == $sub.ref(0, 389232);

procedure ldv_mutex_lock_216($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_216($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} ldv_mutex_lock_setup_mutex($p0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} mutex_lock($p0);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 390264);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 121} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 122} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 391296);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    return;
}



const __zd_usb_disable_rx: ref;

axiom __zd_usb_disable_rx == $sub.ref(0, 392328);

procedure __zd_usb_disable_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __zd_usb_disable_rx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i13: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p3 := spinlock_check($p2);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 127} {:cexpr "flags"} boogie_si_record_i64($i4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10112, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 128} {:cexpr "count"} boogie_si_record_i32($i8);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} spin_unlock_irqrestore($p9, $i4);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p6);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32(0, $i8);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p6);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} kfree($p22);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p24 := spinlock_check($p23);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i25 := _raw_spin_lock_irqsave($p24);
    call {:si_unique_call 136} {:cexpr "flags"} boogie_si_record_i64($i25);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $0.ref);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10112, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} spin_unlock_irqrestore($p28, $i25);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb8:
    call $i14, $p15, $p16, $i17, $p18, $p19, $i20, $i21, $i13 := __zd_usb_disable_rx_loop_$bb8($p6, $i8, $i14, $p15, $p16, $i17, $p18, $p19, $i20, $i21, $i13);
    goto $bb8_last;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p6, $mul.ref($i14, 8));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} usb_kill_urb($p16);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i13);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p6, $mul.ref($i17, 8));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} free_rx_urb($p19);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i13, 1);
    call {:si_unique_call 132} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i21 := $ult.i32($i20, $i8);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i20;
    goto $bb10_dummy;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_329;
}



const __zd_usb_enable_rx: ref;

axiom __zd_usb_enable_rx == $sub.ref(0, 393360);

procedure __zd_usb_enable_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation __zd_usb_enable_rx($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i12: i32;
  var $i23: i64;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i11: i32;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i60: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} vslice_dummy_var_103 := dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.218);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $p7 := kcalloc(5, 8, 208);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;

  $bb5:
    call $p13, $i14, $p15, $i16, $p17, $p18, $i19, $i20, $i21, $i22, $i12 := __zd_usb_enable_rx_loop_$bb5($p0, $p8, $p13, $i14, $p15, $i16, $p17, $p18, $i19, $i20, $i21, $i22, $i12);
    goto $bb5_last;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p13 := alloc_rx_urb($p0);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i12);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p8, $mul.ref($i14, 8));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p13);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i12);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p8, $mul.ref($i16, 8));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i12, 1);
    call {:si_unique_call 142} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i21, 4);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i23 := arch_local_save_flags();
    call {:si_unique_call 144} {:cexpr "_flags"} boogie_si_record_i64($i23);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i24 := arch_irqs_disabled_flags($i23);
    call {:si_unique_call 146} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 148} {:cexpr "tmp___2"} boogie_si_record_i64($i28);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} spin_lock_irq($p47);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $p7);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10112, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 5);
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} spin_unlock_irq($p55);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p8);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i57 := usb_submit_urb($p56, 208);
    call {:si_unique_call 157} {:cexpr "r"} boogie_si_record_i32($i57);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i59 := $i57;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p8, $mul.ref(1, 8));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i87 := usb_submit_urb($p86, 208);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i59 := $i87;
    assume {:branchcond $i88} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p8, $mul.ref(2, 8));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i91 := usb_submit_urb($p90, 208);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i59 := $i91;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p8, $mul.ref(3, 8));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i95 := usb_submit_urb($p94, 208);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i59 := $i95;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p8, $mul.ref(4, 8));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i99 := usb_submit_urb($p98, 208);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i59 := $i99;
    assume {:branchcond $i100} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i60 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $r := $i60;
    return;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p8);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} usb_kill_urb($p61);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p8, $mul.ref(1, 8));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} usb_kill_urb($p78);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p8, $mul.ref(2, 8));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} usb_kill_urb($p80);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p8, $mul.ref(3, 8));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} usb_kill_urb($p82);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p8, $mul.ref(4, 8));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_kill_urb($p84);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} spin_lock_irq($p62);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $0.ref);
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10112, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 0);
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} spin_unlock_irq($p65);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i11 := $i59;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p8);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i60 := $i11;
    goto $bb31;

  $bb36:
    assume $i67 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p8);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} free_rx_urb($p68);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p8, $mul.ref(1, 8));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} free_rx_urb($p70);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p8, $mul.ref(2, 8));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} free_rx_urb($p72);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p8, $mul.ref(3, 8));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} free_rx_urb($p74);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p8, $mul.ref(4, 8));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} free_rx_urb($p76);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb25;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb25;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb25;

  $bb19:
    assume $i51 == 1;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} spin_unlock_irq($p52);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p30, .str.1);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p31, .str.218);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p32, .str.60);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p33, .str.4);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.5, $p35);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 818);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p35, $i38);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p39, 1);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.6, $p40);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 150} {:cexpr "tmp___0"} boogie_si_record_i64($i44);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} dump_stack();
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i45 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} vslice_dummy_var_104 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.60, 818, .str.32);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i21;
    goto $bb10_dummy;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_369;
}



const ldv_mutex_unlock_217: ref;

axiom ldv_mutex_unlock_217 == $sub.ref(0, 394392);

procedure ldv_mutex_unlock_217($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_217($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} ldv_mutex_unlock_setup_mutex($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} mutex_unlock($p0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_setup_mutex: ref;

axiom ldv_mutex_unlock_setup_mutex == $sub.ref(0, 395424);

procedure ldv_mutex_unlock_setup_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_setup_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} ldv_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 177} {:cexpr "ldv_mutex_setup_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 396456);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 397488);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 178} __VERIFIER_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 398520);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 180} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 181} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const alloc_rx_urb: ref;

axiom alloc_rx_urb == $sub.ref(0, 399552);

procedure alloc_rx_urb($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation alloc_rx_urb($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $p1 := zd_usb_to_usbdev($p0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $p2 := usb_alloc_urb(0, 208);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p7 := usb_alloc_coherent($p1, 4800, 208, $p6);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i10 := __create_pipe($p1, 2);
    call {:si_unique_call 188} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, $sub.i32(0, 1073741696));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} usb_fill_bulk_urb($p2, $p1, $i11, $p7, 4800, rx_urb_complete, $p12);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 4);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} usb_free_urb($p2);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 400584);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.9, pv_irq_ops);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 191} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 193} $i7 := devirtbounce.1(0, 45, pv_irq_ops, 1);
    call {:si_unique_call 194} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 192} devirtbounce(0, .str.149, 825, 12);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 401616);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 402648);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} _raw_spin_lock_irq($p2);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 403680);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} _raw_spin_unlock_irq($p2);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    return;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 404712);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 198} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 199} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 200} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 405744);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    return;
}



const free_rx_urb: ref;

axiom free_rx_urb == $sub.ref(0, 406776);

procedure free_rx_urb($p0: ref);
  free requires assertsPassed;



implementation free_rx_urb($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} usb_free_coherent($p4, $i7, $p9, $i11);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} usb_free_urb($p0);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 407808);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 204} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 408840);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 409872);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 410904);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_to_usbdev: ref;

axiom zd_usb_to_usbdev == $sub.ref(0, 411936);

procedure zd_usb_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_usb_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $p3 := interface_to_usbdev($p2);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 412968);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 207} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p2 := external_alloc();
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_alloc_coherent: ref;

axiom usb_alloc_coherent == $sub.ref(0, 414000);

procedure usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} {:cexpr "usb_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 210} {:cexpr "usb_alloc_coherent:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p4 := external_alloc();
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 415032);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(0, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const rx_urb_complete: ref;

axiom rx_urb_complete == $sub.ref(0, 416064);

procedure rx_urb_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation rx_urb_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i50: i1;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i24;
  var $i62: i24;
  var $i63: i24;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i24;
  var $i97: i24;
  var $i98: i24;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} vslice_dummy_var_106 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p26, .str.206, .str.219, $p0, $i28);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i126 := usb_submit_urb($p0, 32);
    call {:si_unique_call 220} {:cexpr "r"} boogie_si_record_i32($i126);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    return;

  $bb56:
    assume $i127 == 1;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_111 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p130, .str.224, .str.219, $p0, $i126);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 216} {:cexpr "length"} boogie_si_record_i32($i33);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(456, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} tasklet_schedule($p38);
    $p39 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10100, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i41 := $urem.i32($i33, $i40);
    $p42 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10100, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i43, 4);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i45 := $ugt.i32($i41, $i44);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    $p78 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} spin_lock($p78);
    $p79 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i81 == 1);
    $p125 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} spin_unlock($p125);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} handle_rx_packet($p36, $p31, $i33);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb47:
    assume $i81 == 1;
    $p82 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, $i33);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i85 := $ugt.i32($i84, 9600);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i32($i85);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 234} {:cexpr "tmp___2"} boogie_si_record_i64($i88);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} vslice_dummy_var_110 := dev_printk.ref.ref.ref.ref(.str.6, $p109, .str.223, .str.219);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i111 := $zext.i32.i64($i33);
    call {:si_unique_call 242} {:cexpr "__len___0"} boogie_si_record_i64($i111);
    $p112 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(496, 1));
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    $p114 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i116 := $zext.i32.i64($i115);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p113, $mul.ref($i116, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 243} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p117, $p31, $i111, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    $p118 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(496, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    $p120 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i121, $i33);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} handle_rx_packet($p36, $p119, $i122);
    $p123 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 0);
    $p124 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} spin_unlock($p124);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume $i89 == 1;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p90, .str.1);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p91, .str.219);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p92, .str.60);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p93, .str.4);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i96 := $load.i24($M.5, $p95);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i97 := $and.i24($i96, $sub.i24(0, 262144));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i98 := $or.i24($i97, 749);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p95, $i98);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p99, 1);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.6, $p100);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i64($i101);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i103 := $and.i64($i102, 1);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 238} {:cexpr "tmp___1"} boogie_si_record_i64($i104);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} dump_stack();
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i105 == 1;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} vslice_dummy_var_109 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.60, 749, .str.222);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb38:
    assume $i45 == 1;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} vslice_dummy_var_107 := dev_printk.ref.ref.ref.ref(.str.6, $p48, .str.220, .str.219);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i33, 9600);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 223} {:cexpr "tmp___0"} boogie_si_record_i64($i53);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    $p72 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} spin_lock($p72);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i33);
    call {:si_unique_call 229} {:cexpr "__len"} boogie_si_record_i64($i73);
    $p74 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(496, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 230} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p75, $p31, $i73, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    $p76 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, $i33);
    $p77 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} spin_unlock($p77);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb40:
    assume $i54 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p55, .str.1);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p56, .str.219);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p57, .str.60);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p58, .str.4);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i61 := $load.i24($M.5, $p60);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i62 := $and.i24($i61, $sub.i24(0, 262144));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i63 := $or.i24($i62, 737);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p60, $i63);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p64, 1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.6, $p65);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i64($i66);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i68 := $and.i64($i67, 1);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 225} {:cexpr "tmp"} boogie_si_record_i64($i69);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} dump_stack();
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i70 == 1;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_108 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.60, 737, .str.221);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} vslice_dummy_var_105 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p20, .str.206, .str.219, $p0, $i22);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i4, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i4, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i4, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i4, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i4, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i4, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb27;

  $bb24:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i4, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb30;

  $bb22:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i4, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb32:
    assume $i17 == 1;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    goto $bb20;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 417096);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 248} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    return;
}



const tasklet_schedule: ref;

axiom tasklet_schedule == $sub.ref(0, 418128);

procedure tasklet_schedule($p0: ref);
  free requires assertsPassed;



implementation tasklet_schedule($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i2 := test_and_set_bit(0, $p1);
    call {:si_unique_call 250} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} __tasklet_schedule($p0);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 419160);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} _raw_spin_lock($p2);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 420192);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} _raw_spin_unlock($p2);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    return;
}



const handle_rx_packet: ref;

axiom handle_rx_packet == $sub.ref(0, 421224);

procedure handle_rx_packet($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation handle_rx_packet($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "handle_rx_packet:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i3 := $ule.i32($i2, 7);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i2);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $sub.i64(0, 8));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p1, $mul.ref($i9, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i14 := get_unaligned_le16($p13);
    call {:si_unique_call 257} {:cexpr "tmp___2"} boogie_si_record_i16($i14);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 27006);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $p40 := zd_usb_to_hw($p0);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_113 := zd_mac_rx($p40, $p1, $i2);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i19 := get_unaligned_le16($p18);
    call {:si_unique_call 259} {:cexpr "tmp"} boogie_si_record_i16($i19);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    call {:si_unique_call 260} {:cexpr "k"} boogie_si_record_i32($i20);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i21 == 1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i22, $i23, $i24 := $i20, 0, 0;
    goto $bb10;

  $bb10:
    call $i22, $i23, $i24, $i25, $i26, $p27, $i28, $p29, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, vslice_dummy_var_114 := handle_rx_packet_loop_$bb10($p0, $p1, $i2, $p18, $i22, $i23, $i24, $i25, $i26, $p27, $i28, $p29, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, vslice_dummy_var_114);
    goto $bb10_last;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i23, $i22);
    call {:si_unique_call 263} {:cexpr "n"} boogie_si_record_i32($i25);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i25, $i2);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p27 := zd_usb_to_hw($p0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i23);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p1, $mul.ref($i28, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_114 := zd_mac_rx($p27, $p29, $i22);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i24, 1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i25, 3);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $sub.i32(0, 4));
    call {:si_unique_call 266} {:cexpr "l"} boogie_si_record_i32($i33);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i24, 1);
    call {:si_unique_call 267} {:cexpr "i"} boogie_si_record_i32($i34);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p18, $mul.ref($i35, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i37 := get_unaligned_le16($p36);
    call {:si_unique_call 269} {:cexpr "tmp"} boogie_si_record_i16($i37);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    call {:si_unique_call 270} {:cexpr "k"} boogie_si_record_i32($i38);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb19;

  $bb19:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i22, $i23, $i24 := $i38, $i33, $i34;
    goto $bb19_dummy;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} vslice_dummy_var_112 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p6, .str.225, .str.226, $i2);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;
}



const get_unaligned_le16: ref;

axiom get_unaligned_le16 == $sub.ref(0, 422256);

procedure get_unaligned_le16($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation get_unaligned_le16($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i2 := __le16_to_cpup($p1);
    call {:si_unique_call 272} {:cexpr "tmp"} boogie_si_record_i16($i2);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const zd_usb_to_hw: ref;

axiom zd_usb_to_hw == $sub.ref(0, 423288);

procedure zd_usb_to_hw($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_usb_to_hw($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p3 := zd_intf_to_hw($p2);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const zd_mac_rx: ref;

axiom zd_mac_rx == $sub.ref(0, 424320);

procedure zd_mac_rx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation zd_mac_rx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i64;
  var $p37: ref;
  var $i38: i16;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $i47: i8;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i53: i16;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i1;
  var $i64: i8;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i52: i32;
  var $i69: i32;
  var $p70: ref;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $i80: i16;
  var $i81: i32;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i16;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i94: i1;
  var $i95: i64;
  var $p96: ref;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i6: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 275} {:cexpr "zd_mac_rx:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $p4 := zd_hw_mac($p0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i2, 23);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 277} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p7, 0, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i2);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $sub.i64(0, 5));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p1, $mul.ref($i9, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i32 := _zd_chip_get_channel($p31);
    call {:si_unique_call 279} {:cexpr "tmp___0"} boogie_si_record_i8($i32);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, $sub.i32(0, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref($i35, 40)), $mul.ref(4, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $i38);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(31, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p11, $mul.ref(0, 5)), $mul.ref(1, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i44 := zd_check_signal($p0, $i43);
    call {:si_unique_call 281} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i45);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i47 := zd_rx_rate($p1, $p11);
    call {:si_unique_call 283} {:cexpr "rate"} boogie_si_record_i8($i47);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 13336)), $mul.ref(13256, 1)), $mul.ref(24, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i51 := $sgt.i32($i50, 0);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i2, 10);
    call {:si_unique_call 285} {:cexpr "length"} boogie_si_record_i32($i69);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i30, 0);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i80 := get_unaligned_le16($p70);
    call {:si_unique_call 289} {:cexpr "fc"} boogie_si_record_i16($i80);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i83 := ieee80211_is_data_qos($i82);
    call {:si_unique_call 291} {:cexpr "tmp___3"} boogie_si_record_i32($i83);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i80);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i86 := ieee80211_has_a4($i85);
    call {:si_unique_call 293} {:cexpr "tmp___4"} boogie_si_record_i32($i86);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i87 := $xor.i32($i83, $i86);
    call {:si_unique_call 294} {:cexpr "need_padding"} boogie_si_record_i32($i87);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i89 := (if $i88 == 1 then 2 else 0);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, $i69);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p91 := dev_alloc_skb($i90);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i87, 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i69);
    call {:si_unique_call 297} {:cexpr "__len"} boogie_si_record_i64($i95);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $p96 := skb_put($p91, $i69);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 299} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p96, $p70, $i95, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i97 := $ugt.i64(40, 63);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i97 == 1);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p101 := IEEE80211_SKB_RXCB($p91);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p3);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 303} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p102, $p103, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} ieee80211_rx_irqsafe($p0, $p91);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb40:
    assume $i97 == 1;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $p98 := IEEE80211_SKB_RXCB($p91);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p3);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 301} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p99, $p100, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i94 == 1;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} skb_reserve($p91, 2);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i93 == 1;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb25:
    assume $i71 == 1;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p70);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i73 := filter_ack($p0, $p72, $p3);
    call {:si_unique_call 287} {:cexpr "tmp___2"} boogie_si_record_i32($i73);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i74 == 1;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p4);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(13328, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i79 == 1;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb14:
    assume $i51 == 1;
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb17;

  $bb17:
    call $i53, $i54, $p56, $p57, $i58, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i52 := zd_mac_rx_loop_$bb17($p3, $p4, $i47, $p49, $i53, $i54, $p56, $p57, $i58, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i52);
    goto $bb17_last;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i16($i47);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 13336)), $mul.ref(13256, 1)), $mul.ref(8, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i52);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p57, $mul.ref($i58, 12)), $mul.ref(6, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.9, $p60);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i54, $i62);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i52, 1);
    call {:si_unique_call 284} {:cexpr "i"} boogie_si_record_i32($i66);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p49);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, $i66);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i68 == 1);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb22:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i52 := $i66;
    goto $bb22_dummy;

  $bb19:
    assume $i63 == 1;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i52);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, $i64);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p4);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(13328, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 16);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb9;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 32);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb13;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_957;
}



const zd_hw_mac: ref;

axiom zd_hw_mac == $sub.ref(0, 425352);

procedure zd_hw_mac($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_hw_mac($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(56, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const _zd_chip_get_channel: ref;

axiom _zd_chip_get_channel == $sub.ref(0, 426384);

procedure _zd_chip_get_channel($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation _zd_chip_get_channel($p0: ref) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11272, 1)), $mul.ref(1, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const zd_check_signal: ref;

axiom zd_check_signal == $sub.ref(0, 427416);

procedure zd_check_signal($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation zd_check_signal($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i17: i1;
  var $i19: i1;
  var $i20: i32;
  var $i18: i32;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} {:cexpr "zd_check_signal:arg:signal"} boogie_si_record_i32($i1);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p2 := zd_hw_mac($p0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i1, 100);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 307} {:cexpr "__cond"} boogie_si_record_i8($i6);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i64($i7);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 309} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, 0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i1, 100);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i18 := $i20;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i20 := 100;
    goto $bb12;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} vslice_dummy_var_115 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p15, .str.158, .str.159, .str.159, $i1);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const zd_rx_rate: ref;

axiom zd_rx_rate == $sub.ref(0, 428448);

procedure zd_rx_rate($p0: ref, $p1: ref) returns ($r: i8);
  free requires assertsPassed;



implementation zd_rx_rate($p0: ref, $p1: ref) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i8;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i10 := zd_cck_plcp_header_signal($p9);
    call {:si_unique_call 314} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 55);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 110);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 110);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i19 := 3;
    goto $bb20;

  $bb7:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, 55);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb12:
    assume $i15 == 1;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i19 := 2;
    goto $bb20;

  $bb5:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i11, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i11, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb11;

  $bb16:
    assume $i17 == 1;
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb20;

  $bb14:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i11, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb11;

  $bb18:
    assume $i18 == 1;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb20;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i7 := zd_rate_from_ofdm_plcp_header($p0);
    call {:si_unique_call 312} {:cexpr "zd_rate"} boogie_si_record_i8($i7);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const filter_ack: ref;

axiom filter_ack == $sub.ref(0, 429480);

procedure filter_ack($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation filter_ack($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i47: i32;
  var $p33: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i22: i32;
  var $p23: ref;
  var $i54: i32;
  var $i21: i32;
  var $i48: i32;
  var $i49: i32;
  var $i55: i1;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $i57: i32;
  var $p72: ref;
  var $i73: i8;
  var $i74: i8;
  var $i75: i8;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $i87: i8;
  var $i88: i8;
  var $p89: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $p3 := zd_hw_mac($p0);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i8 := ieee80211_is_ack($i7);
    call {:si_unique_call 317} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(12456, 1));
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(12456, 1)), $mul.ref(24, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p13 := spinlock_check($p12);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 320} {:cexpr "flags"} boogie_si_record_i64($i14);
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(12456, 1)), $mul.ref(0, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p11);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i17, $i19);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i21 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i48, $i49 := 0, $i21;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i48, 0);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $p89 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(12456, 1)), $mul.ref(24, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} spin_unlock_irqrestore($p89, $i14);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb24:
    assume $i55 == 1;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32(1, $i49);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(13328, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i74 := $and.i8($i73, $sub.i8(0, 9));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i75 := $or.i8($i74, 8);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $i75);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i78 := $sext.i8.i32($i77);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(13332, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i78);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(12436, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 3);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i82 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p83 := __skb_dequeue($p11);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(13332, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} zd_mac_tx_status($p0, $p83, $i85, $0.ref);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(13328, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i88 := $and.i8($i87, $sub.i8(0, 9));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, $i88);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i57 := 1;
    goto $bb29;

  $bb29:
    call $p58, $p59, $p60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i57 := filter_ack_loop_$bb29($p0, $p3, $p11, $i49, $p58, $p59, $p60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i57);
    goto $bb29_last;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p58 := __skb_dequeue($p11);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p3);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref(13328, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i63 == 1);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} zd_mac_tx_status($p0, $p58, $i66, $0.ref);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(13328, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i69 := $and.i8($i68, $sub.i8(0, 9));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i69);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i57, 1);
    call {:si_unique_call 330} {:cexpr "i"} boogie_si_record_i32($i70);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, $i49);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i71 == 1);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb34:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i57 := $i70;
    goto $bb34_dummy;

  $bb31:
    assume $i63 == 1;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(13332, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i66 := $i65;
    goto $bb33;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i22, $p23 := 0, $p16;
    goto $bb8;

  $bb8:
    call $i24, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $p34, $p35, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p33, $p50, $p51, $i52, $i53, $i22, $p23, $i54 := filter_ack_loop_$bb8($p1, $p3, $p11, $i19, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $p34, $p35, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p33, $p50, $p51, $i52, $i53, $i22, $p23, $i54);
    goto $bb8_last;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i22, 1);
    call {:si_unique_call 321} {:cexpr "position"} boogie_si_record_i32($i24);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p3);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(13328, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p23, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 30)), $mul.ref(10, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i41 := memcmp($p38, $p40, 6);
    call {:si_unique_call 325} {:cexpr "tmp___3"} boogie_si_record_i32($i41);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i45 := ldv__builtin_expect($i44, 1);
    call {:si_unique_call 327} {:cexpr "tmp___4"} boogie_si_record_i64($i45);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i47 := $i24;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p33 := $p23;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p33, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, $i19);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i54 := $i24;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i21 := $i54;
    goto $bb7;

  $bb21:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i22, $p23 := $i24, $p51;
    goto $bb21_dummy;

  $bb17:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i48, $i49 := 1, $i47;
    goto $bb19;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i30 := skb_queue_is_first($p11, $p23);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 323} {:cexpr "tmp___2"} boogie_si_record_i8($i31);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p33 := $p23;
    goto $bb14;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb34_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1175;

  $bb21_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1127;
}



const ieee80211_is_data_qos: ref;

axiom ieee80211_is_data_qos == $sub.ref(0, 430512);

procedure ieee80211_is_data_qos($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_data_qos($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} {:cexpr "ieee80211_is_data_qos:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 140);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 136);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_has_a4: ref;

axiom ieee80211_has_a4 == $sub.ref(0, 431544);

procedure ieee80211_has_a4($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_has_a4($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "ieee80211_has_a4:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32(768);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, $i2);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32(768);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, $i4);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 432576);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dev_alloc_skb($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} {:cexpr "dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $p1 := netdev_alloc_skb($0.ref, $i0);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 433608);

procedure skb_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(212, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(212, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 434640);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p2 := external_alloc();
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IEEE80211_SKB_RXCB: ref;

axiom IEEE80211_SKB_RXCB == $sub.ref(0, 435672);

procedure IEEE80211_SKB_RXCB($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation IEEE80211_SKB_RXCB($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_rx_irqsafe: ref;

axiom ieee80211_rx_irqsafe == $sub.ref(0, 436704);

procedure ieee80211_rx_irqsafe($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_rx_irqsafe($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 437736);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 1} true;
    call {:si_unique_call 341} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 342} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 438768);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $p2 := __netdev_alloc_skb($p0, $i1, 32);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 439800);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} {:cexpr "__netdev_alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 346} {:cexpr "__netdev_alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p3 := external_alloc();
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ieee80211_is_ack: ref;

axiom ieee80211_is_ack == $sub.ref(0, 440832);

procedure ieee80211_is_ack($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_ack($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "ieee80211_is_ack:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 252);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 212);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_queue_is_first: ref;

axiom skb_queue_is_first == $sub.ref(0, 441864);

procedure skb_queue_is_first($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_queue_is_first($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i4, $i6);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 442896);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const __skb_dequeue: ref;

axiom __skb_dequeue == $sub.ref(0, 443928);

procedure __skb_dequeue($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_dequeue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p1 := skb_peek($p0);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} __skb_unlink($p1, $p0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_mac_tx_status: ref;

axiom zd_mac_tx_status == $sub.ref(0, 444960);

procedure zd_mac_tx_status($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation zd_mac_tx_status($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i24;
  var $i53: i24;
  var $i54: i24;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $i63: i64;
  var $i65: i1;
  var $i66: i32;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i24;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $p99: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i8;
  var $i110: i8;
  var $i111: i1;
  var $i114: i64;
  var $p116: ref;
  var $i117: i32;
  var $i118: i8;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i8;
  var $i133: i8;
  var $i134: i32;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i113: i32;
  var $i138: i32;
  var $i112: i32;
  var $i139: i1;
  var $i140: i1;
  var $i141: i1;
  var $i144: i32;
  var $i145: i64;
  var $p147: ref;
  var $i148: i32;
  var $i149: i8;
  var $i150: i64;
  var $p151: ref;
  var $p152: ref;
  var $p155: ref;
  var $i156: i64;
  var $p157: ref;
  var $p158: ref;
  var $p161: ref;
  var $i162: i8;
  var $i163: i8;
  var $i164: i8;
  var $i165: i32;
  var $i166: i1;
  var $i167: i1;
  var $i168: i1;
  var $i143: i32;
  var $i169: i32;
  var $i142: i32;
  var $i170: i1;
  var $i171: i64;
  var $p172: ref;
  var $p173: ref;
  var $p176: ref;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 353} {:cexpr "zd_mac_tx_status:arg:ackssi"} boogie_si_record_i32($i2);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p6 := IEEE80211_SKB_CB($p1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} ieee80211_tx_info_clear_status($p6);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p3);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i18, $i19 := 1, 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i18, 0);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, $sub.i32(0, 513));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p30, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i35 := $sext.i8.i32($i34);
    call {:si_unique_call 358} {:cexpr "first_idx"} boogie_si_record_i32($i35);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 360} {:cexpr "tmp___1"} boogie_si_record_i64($i39);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i32($i35, 11);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 362} {:cexpr "tmp___2"} boogie_si_record_i64($i44);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i35);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i65 := $sle.i32($i19, 0);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i32($i65);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 368} {:cexpr "tmp___4"} boogie_si_record_i64($i68);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i69 == 1);
    $p70 := $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i63, 44)), $mul.ref(0, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.10, $p70);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, $i19);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 370} {:cexpr "tmp___5"} boogie_si_record_i64($i75);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    $p95 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i63, 44)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.10, $p95);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p99, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, $i97);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p104, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i109 := $and.i8($i108, $sub.i8(0, 32));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i110 := $or.i8($i109, 1);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, $i110);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32(1, $i19);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i112 := 1;
    assume {:branchcond $i111} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i139 := $sle.i32($i112, 3);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i112, $i19);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i141 := $and.i1($i139, $i140);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i142 := $i112;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i170 := $sle.i32($i142, 3);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i177 := zd_check_signal($p0, $i2);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p179, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p180, $i177);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} ieee80211_tx_status_irqsafe($p0, $p1);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    return;

  $bb43:
    assume $i170 == 1;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i142);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p173, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref($i171, 4)), $mul.ref(0, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p176, $sub.i8(0, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb35:
    assume $i141 == 1;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i143 := $i112;
    goto $bb38;

  $bb38:
    call $i144, $i145, $p147, $i148, $i149, $i150, $p151, $p152, $p155, $i156, $p157, $p158, $p161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i143, $i169 := zd_mac_tx_status_loop_$bb38($p6, $i19, $i63, $i144, $i145, $p147, $i148, $i149, $i150, $p151, $p152, $p155, $i156, $p157, $p158, $p161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i143, $i169);
    goto $bb38_last;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i19, $sub.i32(0, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i144);
    $p147 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i63, 44)), $mul.ref(4, 1)), $mul.ref($i145, 4));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.10, $p147);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i8($i148);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i143);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($add.ref($p152, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref($i150, 4)), $mul.ref(0, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p155, $i149);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i156 := $sext.i32.i64($i143);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($add.ref($p158, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref($i156, 4)), $mul.ref(1, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.0, $p161);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i163 := $and.i8($i162, $sub.i8(0, 32));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i164 := $or.i8($i163, 1);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p161, $i164);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i165 := $add.i32($i143, 1);
    call {:si_unique_call 376} {:cexpr "i"} boogie_si_record_i32($i165);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i166 := $sle.i32($i165, 3);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i167 := $slt.i32($i165, $i19);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i168 := $and.i1($i166, $i167);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i169 := $i165;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i142 := $i169;
    goto $bb37;

  $bb40:
    assume $i168 == 1;
    assume {:verifier.code 0} true;
    $i143 := $i165;
    goto $bb40_dummy;

  $bb27:
    assume $i111 == 1;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i113 := 1;
    goto $bb30;

  $bb30:
    call $i114, $p116, $i117, $i118, $i119, $p120, $p121, $p124, $i125, $p126, $p127, $p130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i113, $i138 := zd_mac_tx_status_loop_$bb30($p6, $i19, $i63, $i114, $p116, $i117, $i118, $i119, $p120, $p121, $p124, $i125, $p126, $p127, $p130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i113, $i138);
    goto $bb30_last;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    $p116 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i63, 44)), $mul.ref(4, 1)), $mul.ref($i114, 4));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.10, $p116);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i113);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($add.ref($p121, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref($i119, 4)), $mul.ref(0, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, $i118);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i113);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p127, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref($i125, 4)), $mul.ref(1, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i132 := $and.i8($i131, $sub.i8(0, 32));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i133 := $or.i8($i132, 1);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, $i133);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i113, 1);
    call {:si_unique_call 375} {:cexpr "i"} boogie_si_record_i32($i134);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i135 := $sle.i32($i134, 2);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i134, $i19);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i137 := $and.i1($i135, $i136);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i138 := $i134;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i112 := $i138;
    goto $bb29;

  $bb32:
    assume $i137 == 1;
    assume {:verifier.code 0} true;
    $i113 := $i134;
    goto $bb32_dummy;

  $bb20:
    assume $i76 == 1;
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p77, .str.1);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p78, .str.150);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p79, .str.31);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p80, .str.4);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.5, $p82);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 262144));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i85 := $or.i24($i84, 512);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p82, $i85);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p86, 1);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.6, $p87);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 372} {:cexpr "tmp___3"} boogie_si_record_i64($i91);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} dump_stack();
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i92 == 1;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_117 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p5, .str.4, .str.31, 512, .str.151);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i69 == 1;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i45 == 1;
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p46, .str.1);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p47, .str.150);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p48, .str.31);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p49, .str.4);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i52 := $load.i24($M.5, $p51);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i53 := $and.i24($i52, $sub.i24(0, 262144));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i54 := $or.i24($i53, 510);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p51, $i54);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p55, 1);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.6, $p56);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 1);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 364} {:cexpr "tmp___0"} boogie_si_record_i64($i60);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} dump_stack();
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i61 == 1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} vslice_dummy_var_116 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.31, 510, .str.42);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 512);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(11, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 356} {:cexpr "success"} boogie_si_record_i32($i13);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, $i13);
    call {:si_unique_call 357} {:cexpr "retry"} boogie_si_record_i32($i17);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i13, $i17;
    goto $bb3;

  $bb40_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1478;

  $bb32_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1447;
}



const IEEE80211_SKB_CB: ref;

axiom IEEE80211_SKB_CB == $sub.ref(0, 445992);

procedure IEEE80211_SKB_CB($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation IEEE80211_SKB_CB($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_tx_info_clear_status: ref;

axiom ieee80211_tx_info_clear_status == $sub.ref(0, 447024);

procedure ieee80211_tx_info_clear_status($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ieee80211_tx_info_clear_status($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 32));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i7);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 4)), $mul.ref(1, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, $sub.i8(0, 32));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i17);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 4)), $mul.ref(1, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i23, $sub.i8(0, 32));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i24);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 4)), $mul.ref(1, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i30, $sub.i8(0, 32));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i31);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 379} cmdloc_dummy_var_30 := $memset.i8(cmdloc_dummy_var_29, $p10, 0, 24, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_tx_status_irqsafe: ref;

axiom ieee80211_tx_status_irqsafe == $sub.ref(0, 448056);

procedure ieee80211_tx_status_irqsafe($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_tx_status_irqsafe($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    return;
}



const skb_peek: ref;

axiom skb_peek == $sub.ref(0, 449088);

procedure skb_peek($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_peek($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p7 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const __skb_unlink: ref;

axiom __skb_unlink == $sub.ref(0, 450120);

procedure __skb_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_unlink($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p9);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p7);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    return;
}



const zd_rate_from_ofdm_plcp_header: ref;

axiom zd_rate_from_ofdm_plcp_header == $sub.ref(0, 451152);

procedure zd_rate_from_ofdm_plcp_header($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation zd_rate_from_ofdm_plcp_header($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i2 := zd_ofdm_plcp_header_rate($p1);
    call {:si_unique_call 381} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, 16);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const zd_cck_plcp_header_signal: ref;

axiom zd_cck_plcp_header_signal == $sub.ref(0, 452184);

procedure zd_cck_plcp_header_signal($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation zd_cck_plcp_header_signal($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const zd_ofdm_plcp_header_rate: ref;

axiom zd_ofdm_plcp_header_rate == $sub.ref(0, 453216);

procedure zd_ofdm_plcp_header_rate($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation zd_ofdm_plcp_header_rate($p0: ref) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 15);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const zd_intf_to_hw: ref;

axiom zd_intf_to_hw == $sub.ref(0, 454248);

procedure zd_intf_to_hw($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_intf_to_hw($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 455280);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 456312);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p1 := external_alloc();
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __le16_to_cpup: ref;

axiom __le16_to_cpup == $sub.ref(0, 457344);

procedure __le16_to_cpup($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __le16_to_cpup($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.0, $p0);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 458376);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 459408);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 460440);

procedure test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 386} $i2 := devirtbounce.2(0, $p1, $i0, $p1);
    call {:si_unique_call 387} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __tasklet_schedule: ref;

axiom __tasklet_schedule == $sub.ref(0, 461472);

procedure __tasklet_schedule($p0: ref);
  free requires assertsPassed;



implementation __tasklet_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 462504);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 389} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 390} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 463536);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 393} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p2 := ldv_malloc($i0);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 464568);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 395} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 396} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 397} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p3 := malloc($i0);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i4 := ldv_is_err($p3);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 400} __VERIFIER_assume($i7);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 465600);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 401} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 466632);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 467664);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} free_($p0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 468696);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 403} $free($p0);
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 469728);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_setup_mutex: ref;

axiom ldv_mutex_lock_setup_mutex == $sub.ref(0, 470760);

procedure ldv_mutex_lock_setup_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_setup_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} ldv_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 406} {:cexpr "ldv_mutex_setup_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 471792);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_to_chip: ref;

axiom zd_usb_to_chip == $sub.ref(0, 472824);

procedure zd_usb_to_chip($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_usb_to_chip($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const zd_chip_to_mac: ref;

axiom zd_chip_to_mac == $sub.ref(0, 473856);

procedure zd_chip_to_mac($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_chip_to_mac($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 474888);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    return;
}



const skb_queue_head_init: ref;

axiom skb_queue_head_init == $sub.ref(0, 475920);

procedure skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation skb_queue_head_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_118: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_118 := spinlock_check($p2);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} __raw_spin_lock_init($p6, .str.160, $p1);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} __skb_queue_head_init($p0);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    return;
}



const zd_tx_watchdog_handler: ref;

axiom zd_tx_watchdog_handler == $sub.ref(0, 476952);

procedure zd_tx_watchdog_handler($p0: ref);
  free requires assertsPassed;



implementation zd_tx_watchdog_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var vslice_dummy_var_119: i1;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 10496), 11272));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10496), 11272)), $mul.ref(10416, 1));
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10496), 11272)), $mul.ref(10416, 1)), $mul.ref(0, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i5 := atomic_read($p4);
    call {:si_unique_call 413} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(580, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i12 := zd_tx_timeout($p2);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 418} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10496), 11272)), $mul.ref(11000, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_120 := dev_warn.ref.ref($p19, .str.236);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10496), 11272)), $mul.ref(11000, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} usb_queue_reset_device($p22);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i23 := round_jiffies_relative(250);
    call {:si_unique_call 415} {:cexpr "tmp___2"} boogie_si_record_i64($i23);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p24 := $M.7;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10496), 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} vslice_dummy_var_119 := queue_delayed_work($p24, $p25, $i23);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 477984);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const zd_tx_timeout: ref;

axiom zd_tx_timeout == $sub.ref(0, 479016);

procedure zd_tx_timeout($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation zd_tx_timeout($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p14: ref;
  var $p15: ref;
  var $i27: i8;
  var $p32: ref;
  var $i33: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(296, 1));
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $p4 := spinlock_check($p3);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 423} {:cexpr "flags"} boogie_si_record_i64($i5);
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p7);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i10, $i12);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} spin_unlock_irqrestore($p32, $i5);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i27);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p14, $p15 := $p9, $p7;
    goto $bb4;

  $bb4:
    call $p16, $p17, $p18, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $p28, $p29, $i30, $i31, $p14, $p15 := zd_tx_timeout_loop_$bb4($i12, $p16, $p17, $p18, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $p28, $p29, $i30, $i31, $p14, $p15);
    goto $bb4_last;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p16 := IEEE80211_SKB_CB($p15);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(1, 8));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    call {:si_unique_call 425} {:cexpr "trans_start"} boogie_si_record_i64($i22);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1250);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.9, jiffies);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64($i23, $i24);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i26 := $slt.i64($i25, 0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p14, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p14);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, $i12);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p14, $p15 := $p29, $p14;
    goto $bb10_dummy;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1760;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 480048);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 427} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 428} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 429} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 430} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_queue_reset_device: ref;

axiom usb_queue_reset_device == $sub.ref(0, 481080);

procedure usb_queue_reset_device($p0: ref);
  free requires assertsPassed;



implementation usb_queue_reset_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 482112);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 431} {:cexpr "queue_delayed_work:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 432} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 433} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __skb_queue_head_init: ref;

axiom __skb_queue_head_init == $sub.ref(0, 483144);

procedure __skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_head_init($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    return;
}



const int_urb_interval: ref;

axiom int_urb_interval == $sub.ref(0, 484176);

procedure int_urb_interval($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation int_urb_interval($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(28, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i7 := 4;
    goto $bb11;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i7 := 10;
    goto $bb11;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 485208);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} __init_waitqueue_head($p3, .str.232, $p1);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 486240);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 487272);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 1} true;
    call {:si_unique_call 436} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 437} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const zd_op_tx: ref;

axiom zd_op_tx == $sub.ref(0, 488304);

procedure zd_op_tx($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.65, $CurrAddr;



implementation zd_op_tx($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p3 := zd_hw_mac($p0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p4 := IEEE80211_SKB_CB($p2);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i5 := fill_ctrlset($p3, $p2);
    call {:si_unique_call 441} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(0, 8));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p0);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i14 := zd_usb_tx($p13, $p2);
    call {:si_unique_call 444} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} consume_skb($p2);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_op_start: ref;

axiom zd_op_start == $sub.ref(0, 489336);

procedure zd_op_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.20, $M.41, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.26, $M.22, $M.24, $M.23, $M.45, $M.48, $M.49, assertsPassed, $CurrAddr, $M.29, $M.30, $M.54, $M.62, $M.8, $M.46, $M.42, $M.27, $M.57, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.37, $M.53;



implementation zd_op_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i28: i32;
  var $i29: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i30: i32;
  var $i16: i32;
  var $i11: i32;
  var $i34: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p1 := zd_hw_mac($p0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 13336)), $mul.ref(0, 1));
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(11268, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i12 := zd_chip_enable_int($p2);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 449} {:cexpr "r"} boogie_si_record_i32($i12);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i14 := zd_chip_set_basic_rates($p2, $sub.i16(0, 241));
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 451} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i17 := set_rx_filter($p1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 454} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i19 := set_mc_hash($p1);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 456} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} msleep(10);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i21 := zd_chip_switch_radio_on($p2);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 459} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i28 := zd_chip_enable_rxtx($p2);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 462} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i31 := zd_chip_enable_hwint($p2);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 465} {:cexpr "r"} boogie_si_record_i32($i31);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} housekeeping_enable($p1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} beacon_enable($p1);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 13336)), $mul.ref(12448, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} set_bit(0, $p33);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb28:
    assume $i32 == 1;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} zd_chip_disable_rxtx($p2);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i30 := $i31;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_122 := zd_chip_switch_radio_off($p2);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i16 := $i30;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} zd_chip_disable_int($p2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i34 := $i11;
    goto $bb32;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i29 == 1;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb26;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i22 == 1;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} vslice_dummy_var_121 := dev_err.ref.ref.ref($p26, .str.35, .str.36);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb13;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i20 == 1;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i16 := $i19;
    goto $bb13;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i16 := $i17;
    goto $bb13;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb13;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb5;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i9 := zd_usb_init_hw($p3);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 447} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb5;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const zd_op_stop: ref;

axiom zd_op_stop == $sub.ref(0, 490368);

procedure zd_op_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.26, $M.24, $M.30, $M.29, $M.22, $M.23, assertsPassed, $M.8, $CurrAddr, $M.27, $M.54, $M.62, $M.19, $M.20, $M.57, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.41, $M.45, $M.48, $M.49, $M.46, $M.42, $M.37, $M.53;



implementation zd_op_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p11: ref;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $p1 := zd_hw_mac($p0);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 13336)), $mul.ref(12456, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 13336)), $mul.ref(12448, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} clear_bit(0, $p4);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} zd_chip_disable_rxtx($p2);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} beacon_disable($p1);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} housekeeping_disable($p1);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p5 := $M.7;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} flush_workqueue($p5);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} vslice_dummy_var_123 := zd_chip_disable_hwint($p2);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_124 := zd_chip_switch_radio_off($p2);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} zd_chip_disable_int($p2);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p8 := skb_dequeue($p3);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p11 := $p8;
    goto $bb4;

  $bb4:
    call $p12, $i13, $i14, $p11 := zd_op_stop_loop_$bb4($p3, $p12, $i13, $i14, $p11);
    goto $bb4_last;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} dev_kfree_skb_any($p11);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p12 := skb_dequeue($p3);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p12;
    goto $bb6_dummy;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1940;
}



const zd_op_add_interface: ref;

axiom zd_op_add_interface == $sub.ref(0, 491400);

procedure zd_op_add_interface($p0: ref, $p1: ref) returns ($r: i32);



const zd_op_remove_interface: ref;

axiom zd_op_remove_interface == $sub.ref(0, 492432);

procedure zd_op_remove_interface($p0: ref, $p1: ref);



const zd_op_config: ref;

axiom zd_op_config == $sub.ref(0, 493464);

procedure zd_op_config($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.30, $M.29, assertsPassed, $CurrAddr, $M.27, $M.54, $M.57;



implementation zd_op_config($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} {:cexpr "zd_op_config:arg:changed"} boogie_si_record_i32($i1);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p2 := zd_hw_mac($p0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} spin_lock_irq($p4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i16.i8($i8);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 13336)), $mul.ref(12434, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} spin_unlock_irq($p11);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 13336)), $mul.ref(0, 1));
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i16.i8($i16);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i20 := zd_chip_set_channel($p12, $i19);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 487} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const zd_op_bss_info_changed: ref;

axiom zd_op_bss_info_changed == $sub.ref(0, 494496);

procedure zd_op_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32);



const zd_op_prepare_multicast: ref;

axiom zd_op_prepare_multicast == $sub.ref(0, 495528);

procedure zd_op_prepare_multicast($p0: ref, $p1: ref) returns ($r: i64);



const zd_op_configure_filter: ref;

axiom zd_op_configure_filter == $sub.ref(0, 496560);

procedure zd_op_configure_filter($p0: ref, $i1: i32, $p2: ref, $i3: i64);



const zd_op_get_tsf: ref;

axiom zd_op_get_tsf == $sub.ref(0, 497592);

procedure zd_op_get_tsf($p0: ref, $p1: ref) returns ($r: i64);



const zd_chip_get_tsf: ref;

axiom zd_chip_get_tsf == $sub.ref(0, 498624);

procedure zd_chip_get_tsf($p0: ref) returns ($r: i64);



const ldv_mutex_lock_52: ref;

axiom ldv_mutex_lock_52 == $sub.ref(0, 499656);

procedure ldv_mutex_lock_52($p0: ref);



const zd_ioread32v_locked: ref;

axiom zd_ioread32v_locked == $sub.ref(0, 500688);

procedure zd_ioread32v_locked($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.27, $M.0;



implementation zd_ioread32v_locked($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i31: i16;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i24: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i51: i1;
  var $i53: i32;
  var $i54: i64;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i52: i32;
  var $i7: i32;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p4 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p5 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    call {:si_unique_call 490} {:cexpr "zd_ioread32v_locked:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i3, 7);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i3, 2);
    call {:si_unique_call 491} {:cexpr "count16"} boogie_si_record_i32($i8);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i10 := $mul.i64($i9, 2);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64($i10, 28);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 493} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i8);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 2);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64($i17, 28);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 496} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32(0, $i3);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p5);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i44 := zd_ioread16v_locked($p0, $p42, $p43, $i8);
    call {:si_unique_call 502} {:cexpr "r"} boogie_si_record_i32($i44);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i51 := $ult.i32(0, $i3);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb24:
    assume $i51 == 1;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb27;

  $bb27:
    call $i53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $i52 := zd_ioread32v_locked_loop_$bb27($p1, $i3, $p5, $i53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $i52);
    goto $bb27_last;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i52, 2);
    call {:si_unique_call 504} {:cexpr "j___0"} boogie_si_record_i32($i53);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref($i54, 2));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.25, $p55);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i58 := $shl.i32($i57, 16);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i53, 1);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref($i60, 2));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.25, $p61);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i58, $i63);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i52);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p1, $mul.ref($i65, 4));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p66, $i64);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i52, 1);
    call {:si_unique_call 505} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i68 := $ult.i32($i67, $i3);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i68 == 1);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i52 := $i67;
    goto $bb29_dummy;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_125 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p49, .str.7, .str.8, $i44);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i7 := $i44;
    goto $bb3;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb16;

  $bb16:
    call $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $p35, $i36, $i37, $i38, $p39, $i40, $i41, $i24 := zd_ioread32v_locked_loop_$bb16($p2, $i3, $p4, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $p35, $i36, $i37, $i38, $p39, $i40, $i41, $i24);
    goto $bb16_last;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i24, 2);
    call {:si_unique_call 498} {:cexpr "j"} boogie_si_record_i32($i25);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i24);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref($i26, 2));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.22, $p27);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i31 := inc_addr($i30);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i25);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref($i32, 2));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.24 := $store.i16($M.24, $p33, $i31);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i24);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p2, $mul.ref($i34, 2));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.22, $p35);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i25, 1);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref($i38, 2));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.24 := $store.i16($M.24, $p39, $i36);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i24, 1);
    call {:si_unique_call 500} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i41 := $ult.i32($i40, $i3);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i40;
    goto $bb18_dummy;

  $bb9:
    assume $i22 == 1;
    call {:si_unique_call 497} devirtbounce(0, .str.3, 160, 12);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call zd_ioread32v_locked_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i15 == 1;
    call {:si_unique_call 494} devirtbounce(0, .str.3, 159, 12);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call zd_ioread32v_locked_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2042;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;
}



const ldv_mutex_unlock_53: ref;

axiom ldv_mutex_unlock_53 == $sub.ref(0, 501720);

procedure ldv_mutex_unlock_53($p0: ref);



const ldv_mutex_unlock_mutex: ref;

axiom ldv_mutex_unlock_mutex == $sub.ref(0, 502752);

procedure ldv_mutex_unlock_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i1 := $M.26;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} ldv_error();
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 507} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const inc_addr: ref;

axiom inc_addr == $sub.ref(0, 503784);

procedure inc_addr($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation inc_addr($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i7: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} {:cexpr "inc_addr:arg:addr"} boogie_si_record_i16($i0);
    call {:si_unique_call 509} {:cexpr "inc_addr:arg:a"} boogie_si_record_i16($i0);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 61440);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 36864);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i0);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    call {:si_unique_call 511} {:cexpr "a"} boogie_si_record_i16($i10);
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 2);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    call {:si_unique_call 510} {:cexpr "a"} boogie_si_record_i16($i6);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const zd_ioread16v_locked: ref;

axiom zd_ioread16v_locked == $sub.ref(0, 504816);

procedure zd_ioread16v_locked($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.27, $M.0, $CurrAddr;



implementation zd_ioread16v_locked($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 513} {:cexpr "zd_ioread16v_locked:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i6 := mutex_is_locked($p5);
    call {:si_unique_call 515} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 517} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i30 := zd_usb_ioread16v($p29, $p1, $p2, $i3);
    call {:si_unique_call 523} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.1);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.100);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str.101);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str.4);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.5, $p17);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 813);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p17, $i20);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p21, 1);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 519} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} dump_stack();
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} vslice_dummy_var_126 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.101, 813, .str.10);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const mutex_is_locked: ref;

axiom mutex_is_locked == $sub.ref(0, 505848);

procedure mutex_is_locked($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_is_locked($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i2 := atomic_read($p1);
    call {:si_unique_call 525} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const zd_usb_ioread16v: ref;

axiom zd_usb_ioread16v == $sub.ref(0, 506880);

procedure zd_usb_ioread16v($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_usb_ioread16v($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i24;
  var $i48: i24;
  var $i49: i24;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $i66: i64;
  var $i67: i64;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $i75: i64;
  var $p76: ref;
  var $i77: i16;
  var $i78: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i74: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i89: i32;
  var $i87: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i88: i32;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i102: i64;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i112: i32;
  var $i113: i8;
  var $i114: i1;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i121: i32;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $i115: i32;
  var $i94: i32;
  var $i12: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 529} {:cexpr "zd_usb_ioread16v:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p5, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i3, 15);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p18 := current_thread_info();
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.9, $p19);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, $sub.i32(0, 268435457));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i27 := usb_int_enabled($p0);
    call {:si_unique_call 535} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p33 := zd_usb_to_chip($p0);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i35 := mutex_is_locked($p34);
    call {:si_unique_call 539} {:cexpr "tmp___3"} boogie_si_record_i32($i35);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 541} {:cexpr "tmp___4"} boogie_si_record_i64($i39);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i3);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 1);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i60 := $mul.i64($i59, 2);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i61 := $ugt.i64($i60, 64);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 547} {:cexpr "tmp___5"} boogie_si_record_i64($i64);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i66 := $zext.i32.i64($i3);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 1);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i32($i67);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i69 := $mul.i32($i68, 2);
    call {:si_unique_call 549} {:cexpr "req_len"} boogie_si_record_i32($i69);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11204, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, 34);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i73 := $ult.i32(0, $i3);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $p83 := zd_usb_to_usbdev($p0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} prepare_read_regs_int($p0, $p71, $i3);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p71);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i85 := zd_ep_regs_out_msg($p83, $p84, $i69, $p4, 50);
    call {:si_unique_call 554} {:cexpr "r"} boogie_si_record_i32($i85);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i87 := $i85;
    assume {:branchcond $i86} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i86 == 1);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i88 := 1;
    goto $bb35;

  $bb35:
    call $i89, $i88, $i95, $i96, $i102, $p105, $i106, $i107, $i112, $i113, $i114, $i116, $p117, $p118, $p119, $i121, $p122, $i123, $i124, $i115, vslice_dummy_var_135 := zd_usb_ioread16v_loop_$bb35($p0, $p1, $i3, $p4, $p5, $i69, $p71, $p84, $i89, $i88, $i95, $i96, $i102, $p105, $i106, $i107, $i112, $i113, $i114, $i116, $p117, $p118, $p119, $i121, $p122, $i123, $i124, $i115, vslice_dummy_var_135);
    goto $bb35_last;

  $bb38:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.28, $p4);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i69, $i95);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i102 := msecs_to_jiffies(50);
    call {:si_unique_call 558} {:cexpr "tmp___6"} boogie_si_record_i64($i102);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i106 := wait_for_completion_timeout($p105, $i102);
    call {:si_unique_call 560} {:cexpr "timeout"} boogie_si_record_i64($i106);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i106, 0);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i112 := get_results($p0, $p1, $p71, $i3, $p5);
    call {:si_unique_call 564} {:cexpr "r"} boogie_si_record_i32($i112);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.27, $p5);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i8.i1($i113);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i115 := $i112;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i94 := $i115;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i12 := $i94;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb45:
    assume $i114 == 1;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i116 := $sle.i32($i88, 19);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i115 := $i112;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb47;

  $bb48:
    assume $i116 == 1;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_135 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p119, .str.83, .str.75, $i88);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i88, 1);
    call {:si_unique_call 566} {:cexpr "try_count"} boogie_si_record_i32($i121);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $p122 := zd_usb_to_usbdev($p0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} prepare_read_regs_int($p0, $p71, $i3);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i123 := zd_ep_regs_out_msg($p122, $p84, $i69, $p4, 50);
    call {:si_unique_call 570} {:cexpr "r"} boogie_si_record_i32($i123);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i89 := $i123;
    assume true;
    goto $bb36, $bb50;

  $bb50:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i88 := $i121;
    goto $bb50_dummy;

  $bb36:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i87 := $i89;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_132 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p92, .str.80, .str.75, $i87);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i94 := $i87;
    goto $bb37;

  $bb42:
    assume $i107 == 1;
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} disable_read_regs_int($p0);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_134 := dev_printk.ref.ref.ref.ref(.str.6, $p110, .str.82, .str.75);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32(0, 110);
    goto $bb37;

  $bb39:
    assume $i96 == 1;
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.28, $p4);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_133 := dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p99, .str.81, .str.75, $i69, $i100);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32(0, 5);
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb33;

  $bb24:
    assume $i73 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb27;

  $bb27:
    call $i75, $p76, $i77, $i78, $p80, $i81, $i82, $i74 := zd_usb_ioread16v_loop_$bb27($p2, $i3, $p71, $i75, $p76, $i77, $i78, $p80, $i81, $i82, $i74);
    goto $bb27_last;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p2, $mul.ref($i75, 2));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.24, $p76);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i74);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p71, $mul.ref(0, 2)), $mul.ref(2, 1)), $mul.ref($i78, 2));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, $i77);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i74, 1);
    call {:si_unique_call 550} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i82 := $ult.i32($i81, $i3);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i82 == 1);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i74 := $i81;
    goto $bb29_dummy;

  $bb20:
    assume $i65 == 1;
    call {:si_unique_call 548} devirtbounce(0, .str.60, 1784, 12);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    call zd_usb_ioread16v_loop_$bb22();
    goto $bb22_last;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p41, .str.1);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p42, .str.75);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p43, .str.60);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p44, .str.4);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i47 := $load.i24($M.5, $p46);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i48 := $and.i24($i47, $sub.i24(0, 262144));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i49 := $or.i24($i48, 1780);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p46, $i49);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p50, 1);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.6, $p51);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i64($i52);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i54 := $and.i64($i53, 1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i55 := ldv__builtin_expect($i54, 0);
    call {:si_unique_call 543} {:cexpr "tmp___1"} boogie_si_record_i64($i55);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} dump_stack();
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} vslice_dummy_var_131 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p6, .str.4, .str.60, 1780, .str.79);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_130 := dev_printk.ref.ref.ref.ref(.str.6, $p31, .str.78, .str.75);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 11);
    goto $bb3;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_129 := dev_printk.ref.ref.ref.ref(.str.6, $p25, .str.77, .str.75);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 11);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_128 := dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p16, .str.76, .str.75, $i3, 15);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} vslice_dummy_var_127 := dev_printk.ref.ref.ref.ref(.str.6, $p10, .str.74, .str.75);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb50_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;

  $bb22_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 507912);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i0 := devirtbounce.3(0, kernel_stack);
    call {:si_unique_call 572} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 8152);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_int_enabled: ref;

axiom usb_int_enabled == $sub.ref(0, 508944);

procedure usb_int_enabled($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_int_enabled($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $p3 := spinlock_check($p2);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 575} {:cexpr "flags"} boogie_si_record_i64($i4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} spin_unlock_irqrestore($p7, $i4);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p6);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const prepare_read_regs_int: ref;

axiom prepare_read_regs_int == $sub.ref(0, 509976);

procedure prepare_read_regs_int($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation prepare_read_regs_int($p0: ref, $p1: ref, $i2: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} {:cexpr "prepare_read_regs_int:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} spin_lock_irq($p4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} atomic_set($p5, 1);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    $p12 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} spin_unlock_irq($p13);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    return;
}



const zd_ep_regs_out_msg: ref;

axiom zd_ep_regs_out_msg == $sub.ref(0, 511008);

procedure zd_ep_regs_out_msg($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation zd_ep_regs_out_msg($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} {:cexpr "zd_ep_regs_out_msg:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 582} {:cexpr "zd_ep_regs_out_msg:arg:timeout"} boogie_si_record_i32($i4);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i5 := __create_pipe($p0, 4);
    call {:si_unique_call 584} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1073741824);
    call {:si_unique_call 585} {:cexpr "pipe"} boogie_si_record_i32($i6);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p7 := usb_pipe_endpoint($p0, $i6);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i12 := usb_endpoint_xfer_int($p11);
    call {:si_unique_call 588} {:cexpr "tmp___3"} boogie_si_record_i32($i12);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i15 := __create_pipe($p0, 4);
    call {:si_unique_call 592} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, $sub.i32(0, 1073741824));
    call {:si_unique_call 593} {:cexpr "pipe"} boogie_si_record_i32($i16);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i17 := usb_bulk_msg($p0, $i16, $p1, $i2, $p3, $i4);
    call {:si_unique_call 595} {:cexpr "tmp___2"} boogie_si_record_i32($i17);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i14 := usb_interrupt_msg($p0, $i6, $p1, $i2, $p3, $i4);
    call {:si_unique_call 590} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 512040);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 596} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 1} true;
    call {:si_unique_call 597} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 598} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 513072);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 599} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 600} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 601} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const disable_read_regs_int: ref;

axiom disable_read_regs_int == $sub.ref(0, 514104);

procedure disable_read_regs_int($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation disable_read_regs_int($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} spin_lock_irq($p2);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} atomic_set($p3, 0);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} spin_unlock_irq($p4);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    return;
}



const get_results: ref;

axiom get_results == $sub.ref(0, 515136);

procedure get_results($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.0;



implementation get_results($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i8;
  var $i16: i8;
  var $i17: i1;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $i35: i16;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i29: i32;
  var $i18: i32;
  var $p40: ref;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} {:cexpr "get_results:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1));
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} spin_lock_irq($p9);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(288, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p4, $i15);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.27, $p4);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i19 := check_read_regs($p0, $p2, $i3);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 609} {:cexpr "tmp"} boogie_si_record_i8($i20);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32(0, $i3);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} spin_unlock_irq($p40);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb14;

  $bb14:
    call $p30, $p31, $i32, $p34, $i35, $i36, $p37, $i38, $i39, $i29 := get_results_loop_$bb14($p1, $i3, $p8, $p30, $p31, $i32, $p34, $i35, $i36, $p37, $i38, $i39, $i29);
    goto $bb14_last;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i29);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref($i32, 4)), $mul.ref(2, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i29);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p1, $mul.ref($i36, 2));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, $i35);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i29, 1);
    call {:si_unique_call 611} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i39 := $ult.i32($i38, $i3);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i38;
    goto $bb16_dummy;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} vslice_dummy_var_136 := dev_printk.ref.ref.ref.ref(.str.6, $p26, .str.270, .str.271);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2407;
}



const check_read_regs: ref;

axiom check_read_regs == $sub.ref(0, 516168);

procedure check_read_regs($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation check_read_regs($p0: ref, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i64;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i57: i32;
  var $i58: i1;
  var $i29: i32;
  var $i18: i1;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} {:cexpr "check_read_regs:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i7 := usb_int_regs_length($i2);
    call {:si_unique_call 614} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(172, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, $i7);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(172, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 64);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32(0, $i2);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb11;

  $bb11:
    call $p30, $p31, $i32, $p33, $p34, $i35, $i36, $i37, $p39, $i40, $i41, $i42, $i43, $p44, $i57, $i58, $i29 := check_read_regs_loop_$bb11($p1, $i2, $p6, $p30, $p31, $i32, $p33, $p34, $i35, $i36, $i37, $p39, $i40, $i41, $i42, $i43, $p44, $i57, $i58, $i29);
    goto $bb11_last;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i29);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p31, $mul.ref($i32, 4));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref($i32, 4)), $mul.ref(0, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i29);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(2, 1)), $mul.ref($i37, 2));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i36, $i41);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i43, $p44 := $i29, $p33;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i29, 1);
    call {:si_unique_call 620} {:cexpr "i"} boogie_si_record_i32($i57);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i58 := $ult.i32($i57, $i2);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i58 == 1);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i57;
    goto $bb16_dummy;

  $bb13:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p44, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i43);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(2, 1)), $mul.ref($i51, 2));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vslice_dummy_var_139 := dev_printk.ref.ref.ref.ref.i32.i32.i32(.str.6, $p47, .str.217, .str.215, $i43, $i50, $i55);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1288)), $mul.ref(48, 1));
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(172, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_138 := dev_printk.ref.ref.ref.ref.i32.i64(.str.6, $p24, .str.216, .str.215, $i26, 64);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i11 := usb_int_regs_length($i2);
    call {:si_unique_call 616} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1288)), $mul.ref(48, 1));
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(172, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_137 := dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p14, .str.214, .str.215, $i16, $i11);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2455;
}



const usb_int_regs_length: ref;

axiom usb_int_regs_length == $sub.ref(0, 517200);

procedure usb_int_regs_length($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_int_regs_length($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} {:cexpr "usb_int_regs_length:arg:count"} boogie_si_record_i32($i0);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i1 := $mul.i32($i0, 4);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 2);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_pipe_endpoint: ref;

axiom usb_pipe_endpoint == $sub.ref(0, 518232);

procedure usb_pipe_endpoint($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_pipe_endpoint($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p7: ref;
  var $p6: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} {:cexpr "usb_pipe_endpoint:arg:pipe"} boogie_si_record_i32($i1);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 128);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(1456, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p6 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i1, 15);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 15);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p6, $mul.ref($i11, 8));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(1328, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p6 := $p4;
    goto $bb3;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 519264);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_interrupt_msg: ref;

axiom usb_interrupt_msg == $sub.ref(0, 520296);

procedure usb_interrupt_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_interrupt_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 623} {:cexpr "usb_interrupt_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 624} {:cexpr "usb_interrupt_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 625} {:cexpr "usb_interrupt_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 626} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 627} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 521328);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 628} {:cexpr "usb_bulk_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 629} {:cexpr "usb_bulk_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 630} {:cexpr "usb_bulk_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 1} true;
    call {:si_unique_call 631} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 632} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_mutex_lock_mutex: ref;

axiom ldv_mutex_lock_mutex == $sub.ref(0, 522360);

procedure ldv_mutex_lock_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i1 := $M.26;
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} ldv_error();
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 634} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_mc_add_all: ref;

axiom zd_mc_add_all == $sub.ref(0, 523392);

procedure zd_mc_add_all($p0: ref);



const zd_chip_set_multicast_hash: ref;

axiom zd_chip_set_multicast_hash == $sub.ref(0, 524424);

procedure zd_chip_set_multicast_hash($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, assertsPassed;



implementation zd_chip_set_multicast_hash($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 27100));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i6);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $sub.i16(0, 27096));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i12);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i16 := zd_iowrite32a($p0, $p15, 2);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 637} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const set_rx_filter: ref;

axiom set_rx_filter == $sub.ref(0, 525456);

procedure set_rx_filter($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.0, assertsPassed, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30;



implementation set_rx_filter($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p2 := spinlock_check($p1);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 640} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(13328, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i10 := 604045311;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} spin_unlock_irqrestore($p11, $i3);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i13 := zd_iowrite32($p12, $sub.i16(0, 26996), $i10);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 644} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i9 := $or.i32(604045311, $sub.i32(0, 671088640));
    call {:si_unique_call 641} {:cexpr "filter"} boogie_si_record_i32($i9);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 526488);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 1} true;
    call {:si_unique_call 645} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 646} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 1} true;
    call {:si_unique_call 647} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 648} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 649} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 650} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 651} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 652} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 653} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 654} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const zd_iowrite32: ref;

axiom zd_iowrite32 == $sub.ref(0, 527520);

procedure zd_iowrite32($p0: ref, $i1: i16, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.0, assertsPassed, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30;



implementation zd_iowrite32($p0: ref, $i1: i16, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} {:cexpr "zd_iowrite32:arg:addr"} boogie_si_record_i16($i1);
    call {:si_unique_call 656} {:cexpr "zd_iowrite32:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} ldv_mutex_lock_14($p3);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i6 := zd_iowrite32_locked($p0, $i2, $i5);
    call {:si_unique_call 659} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} ldv_mutex_unlock_15($p7);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_14: ref;

axiom ldv_mutex_lock_14 == $sub.ref(0, 528552);

procedure ldv_mutex_lock_14($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} mutex_lock($p0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const zd_iowrite32_locked: ref;

axiom zd_iowrite32_locked == $sub.ref(0, 529584);

procedure zd_iowrite32_locked($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30;



implementation zd_iowrite32_locked($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 664} {:cexpr "zd_iowrite32_locked:arg:value"} boogie_si_record_i32($i1);
    call {:si_unique_call 665} {:cexpr "zd_iowrite32_locked:arg:addr"} boogie_si_record_i16($i2);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $i2);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i1);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i6 := _zd_iowrite32v_locked($p0, $p3, 1);
    call {:si_unique_call 667} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_mutex_unlock_15: ref;

axiom ldv_mutex_unlock_15 == $sub.ref(0, 530616);

procedure ldv_mutex_unlock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} mutex_unlock($p0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const _zd_iowrite32v_locked: ref;

axiom _zd_iowrite32v_locked == $sub.ref(0, 531648);

procedure _zd_iowrite32v_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.29, $M.30, $CurrAddr;



implementation _zd_iowrite32v_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p9: ref;
  var $i10: i32;
  var $i8: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} {:cexpr "_zd_iowrite32v_locked:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} zd_usb_iowrite16v_async_start($p3);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i4 := _zd_iowrite32v_async_locked($p0, $p1, $i2);
    call {:si_unique_call 673} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i10 := zd_usb_iowrite16v_async_end($p9, 50);
    call {:si_unique_call 676} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vslice_dummy_var_140 := zd_usb_iowrite16v_async_end($p6, 0);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i8 := $i4;
    goto $bb3;
}



const zd_usb_iowrite16v_async_start: ref;

axiom zd_usb_iowrite16v_async_start == $sub.ref(0, 532680);

procedure zd_usb_iowrite16v_async_start($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_usb_iowrite16v_async_start($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i24;
  var $i70: i24;
  var $i71: i24;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i24;
  var $i95: i24;
  var $i96: i24;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $p105: ref;
  var $i106: i8;
  var $i107: i8;
  var $i108: i8;
  var $p109: ref;
  var $p110: ref;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11008, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i6 := usb_anchor_empty($p5);
    call {:si_unique_call 682} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 684} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11192, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 690} {:cexpr "tmp___3"} boogie_si_record_i64($i35);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p0);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(11268, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 696} {:cexpr "tmp___5"} boogie_si_record_i64($i61);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $p80 := zd_usb_to_chip($p0);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i82 := mutex_is_locked($p81);
    call {:si_unique_call 703} {:cexpr "tmp___8"} boogie_si_record_i32($i82);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i32($i83);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 705} {:cexpr "tmp___9"} boogie_si_record_i64($i86);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11268, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i107 := $and.i8($i106, $sub.i8(0, 9));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i108 := $or.i8($i107, 8);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, $i108);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11200, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11192, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $0.ref);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i87 == 1;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p88, .str.1);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p89, .str.84);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p90, .str.60);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p91, .str.4);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i94 := $load.i24($M.5, $p93);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i95 := $and.i24($i94, $sub.i24(0, 262144));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i96 := $or.i24($i95, 1876);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p93, $i96);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p97, 1);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.6, $p98);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i64($i99);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i101 := $and.i64($i100, 1);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i102 := ldv__builtin_expect($i101, 0);
    call {:si_unique_call 707} {:cexpr "tmp___6"} boogie_si_record_i64($i102);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} dump_stack();
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i103 == 1;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} vslice_dummy_var_144 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.60, 1876, .str.79);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p63, .str.1);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p64, .str.84);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p65, .str.60);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p66, .str.4);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i69 := $load.i24($M.5, $p68);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i70 := $and.i24($i69, $sub.i24(0, 262144));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i71 := $or.i24($i70, 1874);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p68, $i71);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p72, 1);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.6, $p73);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i64($i74);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i75, 1);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 698} {:cexpr "tmp___4"} boogie_si_record_i64($i77);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} dump_stack();
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i78 == 1;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} vslice_dummy_var_143 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.60, 1874, .str.87);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, .str.1);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, .str.84);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p39, .str.60);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str.4);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.5, $p42);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 1873);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p42, $i45);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p46, 1);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 692} {:cexpr "tmp___2"} boogie_si_record_i64($i51);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} dump_stack();
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i52 == 1;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} vslice_dummy_var_142 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.60, 1873, .str.86);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.1);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.84);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str.60);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str.4);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.5, $p17);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1872);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p17, $i20);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p21, 1);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 686} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} dump_stack();
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_141 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.60, 1872, .str.85);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const _zd_iowrite32v_async_locked: ref;

axiom _zd_iowrite32v_async_locked == $sub.ref(0, 533712);

procedure _zd_iowrite32v_async_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $M.0, $CurrAddr;



implementation _zd_iowrite32v_async_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i29: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i40: i1;
  var $i42: i32;
  var $i43: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $i49: i64;
  var $p51: ref;
  var $i52: i64;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i16;
  var $i58: i16;
  var $i59: i64;
  var $p61: ref;
  var $i62: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i64;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i41: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i30: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p3 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 712} {:cexpr "_zd_iowrite32v_async_locked:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i6 := mutex_is_locked($p5);
    call {:si_unique_call 714} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 716} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i2, 0);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i2, 7);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i2, 2);
    call {:si_unique_call 721} {:cexpr "count16"} boogie_si_record_i32($i32);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i34 := $mul.i64($i33, 4);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i64($i34, 56);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 723} {:cexpr "tmp___2"} boogie_si_record_i64($i38);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i40 := $ult.i32(0, $i2);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p3);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i83 := zd_usb_iowrite16v_async($p81, $p82, $i32);
    call {:si_unique_call 729} {:cexpr "r"} boogie_si_record_i32($i83);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i30 := $i83;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb26:
    assume $i84 == 1;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} vslice_dummy_var_146 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p88, .str.103, .str.102, $i83);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb21;

  $bb21:
    call $i42, $i43, $p45, $i46, $i47, $i48, $i49, $p51, $i52, $p54, $i55, $i56, $i57, $i58, $i59, $p61, $i62, $p64, $i65, $i66, $i67, $i68, $p70, $i71, $p73, $i74, $i75, $i76, $p78, $i79, $i80, $i41 := _zd_iowrite32v_async_locked_loop_$bb21($p1, $i2, $p3, $i42, $i43, $p45, $i46, $i47, $i48, $i49, $p51, $i52, $p54, $i55, $i56, $i57, $i58, $i59, $p61, $i62, $p64, $i65, $i66, $i67, $i68, $p70, $i71, $p73, $i74, $i75, $i76, $p78, $i79, $i80, $i41);
    goto $bb21_last;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i41, 2);
    call {:si_unique_call 725} {:cexpr "j"} boogie_si_record_i32($i42);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i41);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref($i43, 8)), $mul.ref(4, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i47 := $lshr.i32($i46, 16);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i42);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref($i49, 4)), $mul.ref(2, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p51, $i48);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i41);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref($i52, 8)), $mul.ref(0, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i58 := inc_addr($i57);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i42);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref($i59, 4)), $mul.ref(0, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p61, $i58);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i41);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref($i62, 8)), $mul.ref(4, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i42, 1);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref($i68, 4)), $mul.ref(2, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p70, $i66);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i41);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref($i71, 8)), $mul.ref(0, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.0, $p73);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i42, 1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref($i76, 4)), $mul.ref(0, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p78, $i74);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i41, 1);
    call {:si_unique_call 727} {:cexpr "i"} boogie_si_record_i32($i79);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i80 := $ult.i32($i79, $i2);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i80 == 1);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i41 := $i79;
    goto $bb23_dummy;

  $bb14:
    assume $i39 == 1;
    call {:si_unique_call 724} devirtbounce(0, .str.3, 202, 12);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call _zd_iowrite32v_async_locked_loop_$bb16();
    goto $bb16_last;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb9;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.1);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.102);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str.3);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str.4);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.5, $p17);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 194);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p17, $i20);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p21, 1);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 718} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} dump_stack();
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} vslice_dummy_var_145 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.3, 194, .str.10);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2850;

  $bb16_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;
}



const zd_usb_iowrite16v_async_end: ref;

axiom zd_usb_iowrite16v_async_end == $sub.ref(0, 534744);

procedure zd_usb_iowrite16v_async_end($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_usb_iowrite16v_async_end($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i24;
  var $i45: i24;
  var $i46: i24;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $i77: i32;
  var $i62: i32;
  var $p78: ref;
  var $i79: i8;
  var $i80: i8;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 733} {:cexpr "zd_usb_iowrite16v_async_end:arg:timeout"} boogie_si_record_i32($i1);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $p4 := zd_usb_to_chip($p0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i6 := mutex_is_locked($p5);
    call {:si_unique_call 736} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 738} {:cexpr "tmp___2"} boogie_si_record_i64($i10);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(11268, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 744} {:cexpr "tmp___4"} boogie_si_record_i64($i36);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i55 := zd_submit_waiting_urb($p0, 1);
    call {:si_unique_call 750} {:cexpr "r"} boogie_si_record_i32($i55);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i1, 0);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11200, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    call {:si_unique_call 757} {:cexpr "r"} boogie_si_record_i32($i77);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i62 := $i77;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11268, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i80 := $and.i8($i79, $sub.i8(0, 9));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, $i80);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $r := $i62;
    return;

  $bb20:
    assume $i67 == 1;
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11008, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} usb_kill_anchored_urbs($p68);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11200, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, $sub.i32(0, 2));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i71 == 1;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_150 := dev_printk.ref.ref.ref.ref(.str.6, $p74, .str.91, .str.88);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 110);
    goto $bb15;

  $bb17:
    assume $i63 == 1;
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11008, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i65 := usb_wait_anchor_empty_timeout($p64, $i1);
    call {:si_unique_call 754} {:cexpr "tmp___5"} boogie_si_record_i32($i65);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i66 := $i65;
    goto $bb19;

  $bb13:
    assume $i56 == 1;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_149 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p59, .str.90, .str.88, $i55);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11008, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} usb_kill_anchored_urbs($p61);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i62 := $i55;
    goto $bb15;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, .str.1);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p39, .str.88);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p40, .str.60);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p41, .str.4);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i44 := $load.i24($M.5, $p43);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i45 := $and.i24($i44, $sub.i24(0, 262144));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i46 := $or.i24($i45, 1888);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p43, $i46);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p47, 1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.6, $p48);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 746} {:cexpr "tmp___3"} boogie_si_record_i64($i52);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} dump_stack();
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i53 == 1;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_148 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.60, 1888, .str.89);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.1);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.88);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str.60);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str.4);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.5, $p17);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1887);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p17, $i20);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p21, 1);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 740} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} dump_stack();
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_147 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.60, 1887, .str.79);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_submit_waiting_urb: ref;

axiom zd_submit_waiting_urb == $sub.ref(0, 535776);

procedure zd_submit_waiting_urb($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_submit_waiting_urb($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i7: i32;
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 758} {:cexpr "zd_submit_waiting_urb:arg:last"} boogie_si_record_i1($i1);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11192, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11192, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i2);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 128);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11008, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} usb_anchor_urb($p4, $p14);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i15 := usb_submit_urb($p4, 208);
    call {:si_unique_call 761} {:cexpr "r"} boogie_si_record_i32($i15);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} usb_free_urb($p4);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i7 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} usb_unanchor_urb($p4);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} vslice_dummy_var_151 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p19, .str.272, .str.273, $i15);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const usb_kill_anchored_urbs: ref;

axiom usb_kill_anchored_urbs == $sub.ref(0, 536808);

procedure usb_kill_anchored_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_kill_anchored_urbs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    return;
}



const usb_wait_anchor_empty_timeout: ref;

axiom usb_wait_anchor_empty_timeout == $sub.ref(0, 537840);

procedure usb_wait_anchor_empty_timeout($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_wait_anchor_empty_timeout($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 765} {:cexpr "usb_wait_anchor_empty_timeout:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 766} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 767} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_anchor_urb: ref;

axiom usb_anchor_urb == $sub.ref(0, 538872);

procedure usb_anchor_urb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_anchor_urb($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    return;
}



const usb_unanchor_urb: ref;

axiom usb_unanchor_urb == $sub.ref(0, 539904);

procedure usb_unanchor_urb($p0: ref);
  free requires assertsPassed;



implementation usb_unanchor_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_iowrite16v_async: ref;

axiom zd_usb_iowrite16v_async == $sub.ref(0, 540936);

procedure zd_usb_iowrite16v_async($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_usb_iowrite16v_async($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i24;
  var $i46: i24;
  var $i47: i24;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i56: i1;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p89: ref;
  var $i90: i1;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i96: i64;
  var $p98: ref;
  var $i99: i16;
  var $p100: ref;
  var $i101: i64;
  var $p103: ref;
  var $i104: i16;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $i91: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p133: ref;
  var $i88: i32;
  var $i57: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 770} {:cexpr "zd_usb_iowrite16v_async:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p5 := zd_usb_to_chip($p0);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i7 := mutex_is_locked($p6);
    call {:si_unique_call 773} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 775} {:cexpr "tmp___2"} boogie_si_record_i64($i11);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(11268, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 781} {:cexpr "tmp___4"} boogie_si_record_i64($i37);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i2, 0);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i58 := $ugt.i32($i2, 15);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p63 := current_thread_info();
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.9, $p64);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, $sub.i32(0, 268435457));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $p72 := zd_usb_to_usbdev($p0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i73 := __create_pipe($p72, 4);
    call {:si_unique_call 791} {:cexpr "tmp___6"} boogie_si_record_i32($i73);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 1073741824);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p75 := usb_pipe_endpoint($p72, $i74);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p78 := usb_alloc_urb(0, 208);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i81 := $mul.i32($i2, 4);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i81, 2);
    call {:si_unique_call 794} {:cexpr "req_len"} boogie_si_record_i32($i82);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $p84 := kmalloc($i83, 208);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p85, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, 33);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i90 := $ult.i32(0, $i2);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p75, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i109 := usb_endpoint_xfer_int($p108);
    call {:si_unique_call 799} {:cexpr "tmp___10"} boogie_si_record_i32($i109);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i110 == 1);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i119 := __create_pipe($p72, 4);
    call {:si_unique_call 804} {:cexpr "tmp___9"} boogie_si_record_i32($i119);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i120 := $or.i32($i119, $sub.i32(0, 1073741824));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p85);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} usb_fill_bulk_urb($p78, $p72, $i120, $p121, $i82, iowrite16v_urb_complete, $p122);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p78, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i125 := $or.i32($i124, 256);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p78, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, $i125);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i127 := zd_submit_waiting_urb($p0, 0);
    call {:si_unique_call 807} {:cexpr "r"} boogie_si_record_i32($i127);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11192, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p133, $p78);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $r := $i57;
    return;

  $bb44:
    assume $i128 == 1;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_156 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p131, .str.90, .str.92, $i127);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i88 := $i127;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} usb_free_urb($p78);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i57 := $i88;
    goto $bb15;

  $bb41:
    assume $i110 == 1;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i111 := __create_pipe($p72, 4);
    call {:si_unique_call 801} {:cexpr "tmp___8"} boogie_si_record_i32($i111);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i112 := $or.i32($i111, 1073741824);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p85);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p0);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} usb_fill_int_urb($p78, $p72, $i112, $p113, $i82, iowrite16v_urb_complete, $p114, $i118);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb33:
    assume $i90 == 1;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb36;

  $bb36:
    call $p92, $p93, $i94, $i96, $p98, $i99, $p100, $i101, $p103, $i104, $p105, $i106, $i107, $i91 := zd_usb_iowrite16v_async_loop_$bb36($p1, $i2, $p85, $p92, $p93, $i94, $i96, $p98, $i99, $p100, $i101, $p103, $i104, $p105, $i106, $i107, $i91);
    goto $bb36_last;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p85, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i91);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i91);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref($i96, 4)), $mul.ref(0, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.30, $p98);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p93, $mul.ref($i94, 4)), $mul.ref(0, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p100, $i99);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i91);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref($i101, 4)), $mul.ref(2, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.29, $p103);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p93, $mul.ref($i94, 4)), $mul.ref(2, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, $i104);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i91, 1);
    call {:si_unique_call 797} {:cexpr "i"} boogie_si_record_i32($i106);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i107 := $ult.i32($i106, $i2);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i107 == 1);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i91 := $i106;
    goto $bb38_dummy;

  $bb29:
    assume $i87 == 1;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32(0, 12);
    goto $bb31;

  $bb26:
    assume $i80 == 1;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 12);
    goto $bb15;

  $bb23:
    assume $i77 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 2);
    goto $bb15;

  $bb20:
    assume $i67 == 1;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} vslice_dummy_var_155 := dev_printk.ref.ref.ref.ref(.str.6, $p70, .str.77, .str.92);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 11);
    goto $bb15;

  $bb17:
    assume $i58 == 1;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_154 := dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p61, .str.76, .str.92, $i2, 15);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 22);
    goto $bb15;

  $bb13:
    assume $i56 == 1;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb15;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p39, .str.1);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p40, .str.92);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p41, .str.60);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p42, .str.4);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i45 := $load.i24($M.5, $p44);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i46 := $and.i24($i45, $sub.i24(0, 262144));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i47 := $or.i24($i46, 1930);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p44, $i47);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p48, 1);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.6, $p49);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 1);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 783} {:cexpr "tmp___3"} boogie_si_record_i64($i53);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} dump_stack();
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i54 == 1;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_153 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.60, 1930, .str.89);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str.1);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.92);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.60);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.4);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.5, $p18);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 1929);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p18, $i21);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 1);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.6, $p23);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 777} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} dump_stack();
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_152 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.60, 1929, .str.79);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb38_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3207;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 541968);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 810} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const iowrite16v_urb_complete: ref;

axiom iowrite16v_urb_complete == $sub.ref(0, 543000);

procedure iowrite16v_urb_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation iowrite16v_urb_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 11272)), $mul.ref(11200, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i17, $i19);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 11272)), $mul.ref(11200, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $sub.i32(0, 5));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 11272)), $mul.ref(11200, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 11272)), $mul.ref(11200, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 544032);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 813} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 814} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i4);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p5);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 1744)), $mul.ref(28, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 1744)), $mul.ref(28, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i7);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $sub.i32(0, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32(1, $i20);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const usb_anchor_empty: ref;

axiom usb_anchor_empty == $sub.ref(0, 545064);

procedure usb_anchor_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_anchor_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 1} true;
    call {:si_unique_call 815} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 816} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const zd_iowrite32a: ref;

axiom zd_iowrite32a == $sub.ref(0, 546096);

procedure zd_iowrite32a($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.29, $M.30, assertsPassed, $CurrAddr;



implementation zd_iowrite32a($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} {:cexpr "zd_iowrite32a:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} ldv_mutex_lock_18($p3);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i4 := zd_iowrite32a_locked($p0, $p1, $i2);
    call {:si_unique_call 820} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} ldv_mutex_unlock_19($p5);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_18: ref;

axiom ldv_mutex_lock_18 == $sub.ref(0, 547128);

procedure ldv_mutex_lock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} mutex_lock($p0);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const zd_iowrite32a_locked: ref;

axiom zd_iowrite32a_locked == $sub.ref(0, 548160);

procedure zd_iowrite32a_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.29, $M.30, $CurrAddr;



implementation zd_iowrite32a_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i22: i32;
  var $i23: i1;
  var $i11: i32;
  var $i24: i32;
  var $i10: i32;
  var $i20: i32;
  var $i21: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i5: i32;
  var $p41: ref;
  var $i42: i32;
  var $i37: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} {:cexpr "zd_iowrite32a_locked:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} zd_usb_iowrite16v_async_start($p3);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i4 := $ult.i32(0, $i2);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i42 := zd_usb_iowrite16v_async_end($p41, 50);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i32($i42);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i37 := $i42;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i9, $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i22, $i23, $i11, $i24, $i10, $i20, $i21, $i25, $p26, $i27, $i28, $i29, $i38, $i39, $i40, $i5 := zd_iowrite32a_locked_loop_$bb4($p0, $p1, $i2, $i6, $i7, $i8, $i9, $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i22, $i23, $i11, $i24, $i10, $i20, $i21, $i25, $p26, $i27, $i28, $i29, $i38, $i39, $i40, $i5);
    goto $bb4_last;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i2, $i5);
    call {:si_unique_call 826} {:cexpr "max"} boogie_si_record_i32($i6);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 7);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i8);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i10, 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i5);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p1, $mul.ref($i25, 8));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i27 := _zd_iowrite32v_async_locked($p0, $p26, $i20);
    call {:si_unique_call 828} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i20, $i21);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, $i5);
    call {:si_unique_call 832} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i40 := $ult.i32($i39, $i2);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i40 == 1);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb25:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i39;
    goto $bb25_dummy;

  $bb21:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} vslice_dummy_var_157 := zd_usb_iowrite16v_async_end($p30, 0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_158 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p35, .str.12, .str.13, $i29);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i37 := $i29;
    goto $bb23;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb12;

  $bb12:
    call $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i22, $i23, $i11, $i24 := zd_iowrite32a_locked_loop_$bb12($p1, $i8, $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i22, $i23, $i11, $i24, $i5);
    goto $bb12_last;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i5, $i11);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref($i13, 8)), $mul.ref(0, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i19 := $i11;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i11, 1);
    call {:si_unique_call 829} {:cexpr "j"} boogie_si_record_i32($i22);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32($i22, $i8);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb11;

  $bb18:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb18_dummy;

  $bb14:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i19, 1;
    goto $bb16;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i8 := 7;
    goto $bb8;

  $bb18_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3370;

  $bb25_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3358;
}



const ldv_mutex_unlock_19: ref;

axiom ldv_mutex_unlock_19 == $sub.ref(0, 549192);

procedure ldv_mutex_unlock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} mutex_unlock($p0);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const zd_mc_clear: ref;

axiom zd_mc_clear == $sub.ref(0, 550224);

procedure zd_mc_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.19, $M.20;



implementation zd_mc_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p1, 0);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p2, $sub.i32(0, 2147483648));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    return;
}



const zd_mc_add_addr: ref;

axiom zd_mc_add_addr == $sub.ref(0, 551256);

procedure zd_mc_add_addr($p0: ref, $p1: ref);



const ieee80211_beacon_get: ref;

axiom ieee80211_beacon_get == $sub.ref(0, 552288);

procedure ieee80211_beacon_get($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_beacon_get($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $p2 := ieee80211_beacon_get_tim($p0, $p1, $0.ref, $0.ref);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const zd_chip_disable_hwint: ref;

axiom zd_chip_disable_hwint == $sub.ref(0, 553320);

procedure zd_chip_disable_hwint($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.0, assertsPassed, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30;



implementation zd_chip_disable_hwint($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} ldv_mutex_lock_28($p1);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i2 := disable_hwint($p0);
    call {:si_unique_call 840} {:cexpr "r"} boogie_si_record_i32($i2);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} ldv_mutex_unlock_29($p3);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const zd_mac_config_beacon: ref;

axiom zd_mac_config_beacon == $sub.ref(0, 554352);

procedure zd_mac_config_beacon($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $M.26, $M.22, $M.24, $M.23, $CurrAddr, assertsPassed, $M.27;



implementation zd_mac_config_beacon($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i71: i64;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i46: i64;
  var $i75: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i101: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i64;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i99: i32;
  var $i100: i32;
  var $i117: i32;
  var $i98: i32;
  var $i118: i64;
  var $p120: ref;
  var $i121: i64;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $i127: i32;
  var $i128: i64;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $i34: i32;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $i136: i32;
  var $i137: i1;
  var $i139: i1;
  var $i140: i64;
  var $i141: i64;
  var $i142: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $i138: i32;
  var $i143: i32;
  var $i148: i1;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $i158: i32;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i29: i32;
  var $p30: ref;
  var $p165: ref;
  var $i14: i32;
  var $p15: ref;
  var $p167: ref;
  var $p170: ref;
  var $p171: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p180: ref;
  var $p181: ref;
  var $i168: i32;
  var $i182: i64;
  var $p184: ref;
  var $i185: i64;
  var $p187: ref;
  var $i188: i32;
  var $i189: i64;
  var $p191: ref;
  var $i192: i64;
  var $p194: ref;
  var $i195: i32;
  var $i196: i64;
  var $p198: ref;
  var $i199: i64;
  var $p201: ref;
  var $i126: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 843} {:cexpr "zd_mac_config_beacon:arg:in_intr"} boogie_si_record_i1($i2);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p5 := zd_hw_mac($p0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 4);
    call {:si_unique_call 845} {:cexpr "full_len"} boogie_si_record_i32($i8);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(11336, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} ldv_mutex_lock_116($p10);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i11 := zd_mac_match_cur_beacon($p5, $p1);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 848} {:cexpr "tmp___1"} boogie_si_record_i8($i12);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i17 := zd_chip_is_zd1211b($p16);
    call {:si_unique_call 852} {:cexpr "tmp___2"} boogie_si_record_i32($i17);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, $i8);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    call {:si_unique_call 853} {:cexpr "num_cmds"} boogie_si_record_i32($i19);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i21 := $mul.i64($i20, 8);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p22 := kmalloc($i21, 208);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i27 := zd_iowrite32_locked($p26, 0, $sub.i16(0, 26988));
    call {:si_unique_call 856} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i32 := zd_ioread32_locked($p31, $p3, $sub.i16(0, 26988));
    call {:si_unique_call 859} {:cexpr "r"} boogie_si_record_i32($i32);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i4);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.9, jiffies);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 125);
    call {:si_unique_call 863} {:cexpr "end_jiffies"} boogie_si_record_i64($i40);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.9, jiffies);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 25);
    call {:si_unique_call 864} {:cexpr "message_jiffies"} boogie_si_record_i64($i42);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.23, $p3);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 2);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64(0);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p23, $mul.ref($i75, 8)), $mul.ref(0, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, $sub.i16(0, 27024));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32($i8, 1);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64(0);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p23, $mul.ref($i79, 8)), $mul.ref(4, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i78);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i82 := $add.i32(0, 1);
    call {:si_unique_call 877} {:cexpr "req_pos"} boogie_si_record_i32($i82);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i84 := zd_chip_is_zd1211b($p83);
    call {:si_unique_call 879} {:cexpr "tmp___4"} boogie_si_record_i32($i84);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i94 := $i82;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i97 := $ugt.i32($i96, 0);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i98 := $i94;
    assume {:branchcond $i97} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i98);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p23, $mul.ref($i118, 8)), $mul.ref(0, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p120, $sub.i16(0, 27024));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i98);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p23, $mul.ref($i121, 8)), $mul.ref(4, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 0);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i98, 1);
    call {:si_unique_call 883} {:cexpr "req_pos"} boogie_si_record_i32($i124);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i182 := $sext.i32.i64($i124);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p23, $mul.ref($i182, 8)), $mul.ref(0, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p184, $sub.i16(0, 27024));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i185 := $sext.i32.i64($i124);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p23, $mul.ref($i185, 8)), $mul.ref(4, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p187, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i188 := $add.i32($i124, 1);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i189 := $sext.i32.i64($i188);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p23, $mul.ref($i189, 8)), $mul.ref(0, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p191, $sub.i16(0, 27024));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i192 := $sext.i32.i64($i188);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p23, $mul.ref($i192, 8)), $mul.ref(4, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p194, 0);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i195 := $add.i32($i188, 1);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i195);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p23, $mul.ref($i196, 8)), $mul.ref(0, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p198, $sub.i16(0, 27024));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i199 := $sext.i32.i64($i195);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p23, $mul.ref($i199, 8)), $mul.ref(4, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, 0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i195, 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i126, $i19);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i32($i125);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64($i127);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i129 := ldv__builtin_expect($i128, 0);
    call {:si_unique_call 885} {:cexpr "tmp___5"} boogie_si_record_i64($i129);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i129, 0);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i132 := zd_iowrite32a_locked($p131, $p23, $i19);
    call {:si_unique_call 888} {:cexpr "r"} boogie_si_record_i32($i132);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i34 := $i132;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i133 := $load.i64($M.9, jiffies);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i134 := $add.i64($i133, 125);
    call {:si_unique_call 860} {:cexpr "end_jiffies"} boogie_si_record_i64($i134);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i136 := zd_iowrite32_locked($p135, 1, $sub.i16(0, 26988));
    call {:si_unique_call 862} {:cexpr "ret"} boogie_si_record_i32($i136);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i136, 0);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i138 := $i136;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i143 := $i138;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i143, 0);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i34, 0);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb77, $bb79;

  $bb79:
    assume !($i155 == 1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i156 := $slt.i32($i143, 0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} zd_mac_free_cur_beacon_locked($p5);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(216, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p160, $p1);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i162 := $shl.i32($i8, 19);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i163 := $or.i32($i162, 1024);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i164 := zd_iowrite32_locked($p161, $i163, $sub.i16(0, 27104));
    call {:si_unique_call 896} {:cexpr "r"} boogie_si_record_i32($i164);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i29, $p30 := $i164, $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p23);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} kfree($p165);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i14, $p15 := $i29, $p30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} kfree_skb($p15);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(11336, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} ldv_mutex_unlock_117($p167);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i168 := $i14;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $r := $i168;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i157 := $sge.i32($i34, 0);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    $i158 := $i34;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} zd_mac_free_cur_beacon_locked($p5);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i29, $p30 := $i158, $p1;
    goto $bb10;

  $bb82:
    assume $i157 == 1;
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i158 := $i143;
    goto $bb84;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb78;

  $bb74:
    assume $i148 == 1;
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_162 := dev_err.ref.ref($p153, .str.154);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb59:
    assume $i137 == 1;
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    call $i139, $i140, $i141, $i142, $p144, $i145, $i146, $i147 := zd_mac_config_beacon_loop_$bb62($i4, $p5, $i134, $i139, $i140, $i141, $i142, $p144, $i145, $i146, $i147);
    goto $bb62_last;

  $bb63:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i8.i1($i4);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb66;

  $bb66:
    assume !($i139 == 1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.9, jiffies);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i141 := $sub.i64($i140, $i134);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i142 := $sge.i64($i141, 0);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} msleep(20);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i145 := zd_iowrite32_locked($p144, 1, $sub.i16(0, 26988));
    call {:si_unique_call 891} {:cexpr "ret"} boogie_si_record_i32($i145);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i145, 0);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i147 := $i145;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i138 := $i147;
    goto $bb61;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb71_dummy;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i143 := $sub.i32(0, 110);
    goto $bb69;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb65;

  $bb55:
    assume $i130 == 1;
    call {:si_unique_call 886} devirtbounce(0, .str.31, 836, 12);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    call zd_mac_config_beacon_loop_$bb57();
    goto $bb57_last;

  $bb43:
    assume $i97 == 1;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i99, $i100 := 0, $i94;
    goto $bb46;

  $bb46:
    call $i101, $p103, $p104, $p105, $i106, $p107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $i116, $i99, $i100, $i117 := zd_mac_config_beacon_loop_$bb46($p1, $p23, $p95, $i101, $p103, $p104, $p105, $i106, $p107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $i116, $i99, $i100, $i117);
    goto $bb46_last;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i100);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p23, $mul.ref($i101, 8)), $mul.ref(0, 1));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p103, $sub.i16(0, 27024));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i106 := $zext.i32.i64($i99);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p105, $mul.ref($i106, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i100);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p23, $mul.ref($i110, 8)), $mul.ref(4, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, $i109);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i100, 1);
    call {:si_unique_call 881} {:cexpr "req_pos"} boogie_si_record_i32($i113);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i99, 1);
    call {:si_unique_call 882} {:cexpr "j"} boogie_si_record_i32($i114);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p95);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i116 := $ugt.i32($i115, $i114);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i117 := $i113;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i98 := $i117;
    goto $bb45;

  $bb48:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i99, $i100 := $i114, $i113;
    goto $bb48_dummy;

  $bb40:
    assume $i85 == 1;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i82);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p23, $mul.ref($i86, 8)), $mul.ref(0, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p88, $sub.i16(0, 27036));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i8, 1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i82);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p23, $mul.ref($i90, 8)), $mul.ref(4, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i89);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i82, 1);
    call {:si_unique_call 880} {:cexpr "req_pos"} boogie_si_record_i32($i93);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i94 := $i93;
    goto $bb42;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i46 := $i42;
    goto $bb25;

  $bb25:
    call $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p58, $p59, $p60, $i62, $i63, $i64, $i71, $i72, $i73, $i74, $i46, vslice_dummy_var_159 := zd_mac_config_beacon_loop_$bb25($p3, $p5, $i40, $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p58, $p59, $p60, $i62, $i63, $i64, $i71, $i72, $i73, $i74, $i46, vslice_dummy_var_159);
    goto $bb25_last;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i48 := zd_ioread32_locked($p47, $p3, $sub.i16(0, 26988));
    call {:si_unique_call 866} {:cexpr "r"} boogie_si_record_i32($i48);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i50 := $i48;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.9, jiffies);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i52 := $sub.i64($i51, $i46);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i53 := $sge.i64($i52, 0);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i71 := $i46;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} msleep(20);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.23, $p3);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 2);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i74 == 1);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb37:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i71;
    goto $bb37_dummy;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.9, jiffies);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 25);
    call {:si_unique_call 867} {:cexpr "message_jiffies"} boogie_si_record_i64($i55);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} vslice_dummy_var_159 := dev_err.ref.ref($p60, .str.152);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.9, jiffies);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i63 := $sub.i64($i62, $i40);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i64 := $sge.i64($i63, 0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i71 := $i55;
    goto $bb36;

  $bb32:
    assume $i64 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} vslice_dummy_var_160 := dev_err.ref.ref($p69, .str.153);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} zd_mac_free_cur_beacon_locked($p5);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} kfree_skb($p1);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(11336, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} ldv_mutex_unlock_118($p170);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p23);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} kfree($p171);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p175, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_161 := dev_warn.ref.ref($p176, .str.155);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} usb_queue_reset_device($p181);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i168 := $sub.i32(0, 110);
    goto $bb86;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i34 := $i50;
    goto $bb14;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.23, $p3);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 2);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb18;

  $bb19:
    assume $i38 == 1;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 16);
    goto $bb14;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb14;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i29, $p30 := $i27, $p1;
    goto $bb10;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i14, $p15 := $sub.i32(0, 12), $p1;
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i14, $p15 := 0, $p1;
    goto $bb3;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb71_dummy:
    assume false;
    return;

  $bb62_last:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb57_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    goto $bb57_dummy;

  $bb48_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3589;

  $bb37_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3505;
}



const zd_chip_enable_hwint: ref;

axiom zd_chip_enable_hwint == $sub.ref(0, 555384);

procedure zd_chip_enable_hwint($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30;



implementation zd_chip_enable_hwint($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} ldv_mutex_lock_26($p1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i2 := zd_iowrite32_locked($p0, 5177344, $sub.i16(0, 27376));
    call {:si_unique_call 899} {:cexpr "r"} boogie_si_record_i32($i2);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ldv_mutex_unlock_27($p3);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const zd_set_beacon_interval: ref;

axiom zd_set_beacon_interval == $sub.ref(0, 556416);

procedure zd_set_beacon_interval($p0: ref, $i1: i16, $i2: i8, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, assertsPassed, $M.22, $M.24, $M.23, $M.37, $M.29, $M.30, $CurrAddr, $M.27;



implementation zd_set_beacon_interval($p0: ref, $i1: i16, $i2: i8, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} {:cexpr "zd_set_beacon_interval:arg:interval"} boogie_si_record_i16($i1);
    call {:si_unique_call 902} {:cexpr "zd_set_beacon_interval:arg:dtim_period"} boogie_si_record_i8($i2);
    call {:si_unique_call 903} {:cexpr "zd_set_beacon_interval:arg:type"} boogie_si_record_i32($i3);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ldv_mutex_lock_24($p4);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i9 := set_beacon_interval($p0, $i6, $i8, $i3);
    call {:si_unique_call 906} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} ldv_mutex_unlock_25($p10);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 557448);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);



const set_rts_cts: ref;

axiom set_rts_cts == $sub.ref(0, 558480);

procedure set_rts_cts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.26, $M.0, assertsPassed, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30;



implementation set_rts_cts($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} {:cexpr "set_rts_cts:arg:short_preamble"} boogie_si_record_i32($i1);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(11336, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} ldv_mutex_lock_119($p3);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} vslice_dummy_var_163 := zd_chip_set_rts_cts_rate_locked($p4, $i1);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(11336, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} ldv_mutex_unlock_120($p7);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_119: ref;

axiom ldv_mutex_lock_119 == $sub.ref(0, 559512);

procedure ldv_mutex_lock_119($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_119($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} mutex_lock($p0);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const zd_chip_set_rts_cts_rate_locked: ref;

axiom zd_chip_set_rts_cts_rate_locked == $sub.ref(0, 560544);

procedure zd_chip_set_rts_cts_rate_locked($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30;



implementation zd_chip_set_rts_cts_rate_locked($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} {:cexpr "zd_chip_set_rts_cts_rate_locked:arg:preamble"} boogie_si_record_i32($i1);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} vslice_dummy_var_164 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p5, .str.24, .str.25, $i1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i1, 9);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 0);
    call {:si_unique_call 916} {:cexpr "value"} boogie_si_record_i32($i8);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i1, 25);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, $i8);
    call {:si_unique_call 917} {:cexpr "value"} boogie_si_record_i32($i10);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 3);
    call {:si_unique_call 918} {:cexpr "value"} boogie_si_record_i32($i11);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 196608);
    call {:si_unique_call 919} {:cexpr "value"} boogie_si_record_i32($i12);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i13 := zd_iowrite32_locked($p0, $i12, $sub.i16(0, 27080));
    call {:si_unique_call 921} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const ldv_mutex_unlock_120: ref;

axiom ldv_mutex_unlock_120 == $sub.ref(0, 561576);

procedure ldv_mutex_unlock_120($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_120($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} mutex_unlock($p0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 562608);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 563640);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);



const ldv_mutex_lock_24: ref;

axiom ldv_mutex_lock_24 == $sub.ref(0, 564672);

procedure ldv_mutex_lock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} mutex_lock($p0);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const set_beacon_interval: ref;

axiom set_beacon_interval == $sub.ref(0, 565704);

procedure set_beacon_interval($p0: ref, $i1: i16, $i2: i8, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.22, $M.24, $M.23, $M.37, $M.29, $M.30, $CurrAddr, $M.27;



implementation set_beacon_interval($p0: ref, $i1: i16, $i2: i8, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i47: i32;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p4 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 928} {:cexpr "set_beacon_interval:arg:interval"} boogie_si_record_i16($i1);
    call {:si_unique_call 929} {:cexpr "set_beacon_interval:arg:dtim_period"} boogie_si_record_i8($i2);
    call {:si_unique_call 930} {:cexpr "set_beacon_interval:arg:type"} boogie_si_record_i32($i3);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i7 := mutex_is_locked($p6);
    call {:si_unique_call 932} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 934} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i1);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i38, $i39 := 0, 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i38);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i41 := $shl.i32($i40, 16);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, $i39);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i42, $i43);
    call {:si_unique_call 939} {:cexpr "b_interval"} boogie_si_record_i32($i44);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i45 := zd_iowrite32_locked($p0, $i44, $sub.i16(0, 27360));
    call {:si_unique_call 941} {:cexpr "r"} boogie_si_record_i32($i45);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i48 := get_aw_pt_bi($p0, $p4);
    call {:si_unique_call 943} {:cexpr "r"} boogie_si_record_i32($i48);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $i50 := set_aw_pt_bi($p0, $p4);
    call {:si_unique_call 945} {:cexpr "tmp___2"} boogie_si_record_i32($i50);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i47 := $i50;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb29:
    assume $i49 == 1;
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i47 := $i48;
    goto $bb27;

  $bb25:
    assume $i46 == 1;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb27;

  $bb7:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i3, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i3, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i38, $i39 := $i2, $i37;
    goto $bb24;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i37 := 33554432;
    goto $bb22;

  $bb12:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb17;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i37 := 16777216;
    goto $bb22;

  $bb10:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb17;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str.1);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.109);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.3);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.4);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.5, $p18);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 941);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p18, $i21);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.6, $p23);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 936} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} dump_stack();
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} vslice_dummy_var_165 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p5, .str.4, .str.3, 941, .str.10);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_mutex_unlock_25: ref;

axiom ldv_mutex_unlock_25 == $sub.ref(0, 566736);

procedure ldv_mutex_unlock_25($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} mutex_unlock($p0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const get_aw_pt_bi: ref;

axiom get_aw_pt_bi == $sub.ref(0, 567768);

procedure get_aw_pt_bi($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.23, $M.37, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.27, $M.0;



implementation get_aw_pt_bi($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i12: i32;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(0, 2));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p4, $sub.i16(0, 27364));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(1, 2));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p5, $sub.i16(0, 27356));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(2, 2));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p6, $sub.i16(0, 27360));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i9 := zd_ioread32v_locked($p0, $p7, $p8, 3);
    call {:si_unique_call 951} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.23, $p13);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p15, $i14);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.23, $p16);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p18, $i17);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.23, $p19);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p21, $i20);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.37;
    call {:si_unique_call 952} cmdloc_dummy_var_32 := $memset.i8(cmdloc_dummy_var_31, $p11, 0, 12, $zext.i32.i64(1), 0 == 1);
    $M.37 := cmdloc_dummy_var_32;
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const set_aw_pt_bi: ref;

axiom set_aw_pt_bi == $sub.ref(0, 568800);

procedure set_aw_pt_bi($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $CurrAddr;



implementation set_aw_pt_bi($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i8: i16;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.37, $p3);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    call {:si_unique_call 954} {:cexpr "b_interval"} boogie_si_record_i16($i5);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i6, 5);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.37, $p9);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i11 := $ule.i32($i10, 3);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.37, $p12);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i8);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i15 := $uge.i32($i13, $i14);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.37, $p19);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.37, $p21);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i23 := $uge.i32($i20, $i22);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $sub.i16(0, 27364));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.37, $p30);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i31);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $sub.i16(0, 27356));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.37, $p36);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i37);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $sub.i16(0, 27360));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.37, $p42);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, $sub.i32(0, 65536));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i8);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i44, $i45);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i46);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p2);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i50 := zd_iowrite32a_locked($p0, $p49, 3);
    call {:si_unique_call 956} {:cexpr "tmp"} boogie_si_record_i32($i50);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.37, $p24);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 1);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p27, $i26);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i8);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, $sub.i32(0, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p18, $i17);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb5;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i8 := 5;
    goto $bb3;
}



const ldv_mutex_lock_26: ref;

axiom ldv_mutex_lock_26 == $sub.ref(0, 569832);

procedure ldv_mutex_lock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} mutex_lock($p0);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 570864);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} mutex_unlock($p0);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_116: ref;

axiom ldv_mutex_lock_116 == $sub.ref(0, 571896);

procedure ldv_mutex_lock_116($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_116($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} mutex_lock($p0);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const zd_mac_match_cur_beacon: ref;

axiom zd_mac_match_cur_beacon == $sub.ref(0, 572928);

procedure zd_mac_match_cur_beacon($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation zd_mac_match_cur_beacon($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i32;
  var $i27: i1;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(216, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(216, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i12, $i14);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(216, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i26 := memcmp($p17, $p22, $i25);
    call {:si_unique_call 964} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const zd_chip_is_zd1211b: ref;

axiom zd_chip_is_zd1211b == $sub.ref(0, 573960);

procedure zd_chip_is_zd1211b($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation zd_chip_is_zd1211b($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11268, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i4 := $and.i8($i3, 1);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const zd_ioread32_locked: ref;

axiom zd_ioread32_locked == $sub.ref(0, 574992);

procedure zd_ioread32_locked($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.27, $M.0;



implementation zd_ioread32_locked($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p3, $i2);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i4 := zd_ioread32v_locked($p0, $p1, $p3, 1);
    call {:si_unique_call 967} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 576024);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    return;
}



const zd_mac_free_cur_beacon_locked: ref;

axiom zd_mac_free_cur_beacon_locked == $sub.ref(0, 577056);

procedure zd_mac_free_cur_beacon_locked($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_mac_free_cur_beacon_locked($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(11336, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 971} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 973} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(216, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} kfree_skb($p29);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(216, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $0.ref);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.1);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.156);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.31);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.4);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 744);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 1);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 975} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} dump_stack();
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} vslice_dummy_var_166 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.31, 744, .str.157);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 578088);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_117: ref;

axiom ldv_mutex_unlock_117 == $sub.ref(0, 579120);

procedure ldv_mutex_unlock_117($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_117($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} mutex_unlock($p0);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_118: ref;

axiom ldv_mutex_unlock_118 == $sub.ref(0, 580152);

procedure ldv_mutex_unlock_118($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_118($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} mutex_unlock($p0);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_28: ref;

axiom ldv_mutex_lock_28 == $sub.ref(0, 581184);

procedure ldv_mutex_lock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} mutex_lock($p0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const disable_hwint: ref;

axiom disable_hwint == $sub.ref(0, 582216);

procedure disable_hwint($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30;



implementation disable_hwint($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i1 := zd_iowrite32_locked($p0, 0, $sub.i16(0, 27376));
    call {:si_unique_call 986} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 583248);

procedure ldv_mutex_unlock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} mutex_unlock($p0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const ieee80211_beacon_get_tim: ref;

axiom ieee80211_beacon_get_tim == $sub.ref(0, 584280);

procedure ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p4 := external_alloc();
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const zd_chip_set_channel: ref;

axiom zd_chip_set_channel == $sub.ref(0, 585312);

procedure zd_chip_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.30, $M.29, assertsPassed, $CurrAddr, $M.27, $M.54, $M.57;



implementation zd_chip_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i11: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i5: i32;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} {:cexpr "zd_chip_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} ldv_mutex_lock_32($p2);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i3 := zd_chip_lock_phy_regs($p0);
    call {:si_unique_call 993} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11272, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i9 := zd_rf_set_channel($p6, $i8);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 996} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i14 := update_channel_integration_and_calibration($p0, $i13);
    call {:si_unique_call 1000} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i16 := patch_cck_gain($p0);
    call {:si_unique_call 1002} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i20 := patch_6m_band_edge($p0, $i19);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 1004} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $i22 := zd_iowrite32_locked($p0, 0, $sub.i16(0, 27584));
    call {:si_unique_call 1006} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $i23 := zd_chip_unlock_phy_regs($p0);
    call {:si_unique_call 998} {:cexpr "t"} boogie_si_record_i32($i23);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i26 := $i11;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i5 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} ldv_mutex_unlock_33($p27);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i11, 0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb20;

  $bb21:
    assume $i25 == 1;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i26 := $i23;
    goto $bb23;

  $bb15:
    assume $i21 == 1;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i11 := $i20;
    goto $bb7;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb7;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb7;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb7;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_32: ref;

axiom ldv_mutex_lock_32 == $sub.ref(0, 586344);

procedure ldv_mutex_lock_32($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} mutex_lock($p0);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const zd_chip_lock_phy_regs: ref;

axiom zd_chip_lock_phy_regs == $sub.ref(0, 587376);

procedure zd_chip_lock_phy_regs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $CurrAddr, $M.27, $M.29, $M.30;



implementation zd_chip_lock_phy_regs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i34: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 1012} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1014} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i27 := zd_ioread32_locked($p0, $p1, $sub.i16(0, 27008));
    call {:si_unique_call 1020} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.23, $p1);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, $sub.i32(0, 129));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p1, $i36);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.23, $p1);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i38 := zd_iowrite32_locked($p0, $i37, $sub.i16(0, 27008));
    call {:si_unique_call 1023} {:cexpr "r"} boogie_si_record_i32($i38);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $i38;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} vslice_dummy_var_169 := dev_err.ref.ref.i32($p43, .str.20, $i38);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} vslice_dummy_var_168 := dev_err.ref.ref.i32($p32, .str.19, $i27);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i34 := $i27;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.1);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.18);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.3);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.4);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 563);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 1);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1016} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} dump_stack();
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_167 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 563, .str.10);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_rf_set_channel: ref;

axiom zd_rf_set_channel == $sub.ref(0, 588408);

procedure zd_rf_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.30, $M.29, $CurrAddr, $M.54, $M.24, $M.27, $M.57, $M.26, $M.22, $M.23, assertsPassed;



implementation zd_rf_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i28: i32;
  var $i29: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i30: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1026} {:cexpr "zd_rf_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $p3 := zd_rf_to_chip($p0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 1029} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1031} {:cexpr "tmp___2"} boogie_si_record_i64($i9);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i1);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i31, 14);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $p33 := zd_rf_to_chip($p0);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.38, $p35);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i1);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} vslice_dummy_var_171 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p37, .str.54, .str.52, $i38);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i1);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    call {:si_unique_call 1038} $i44 := devirtbounce.4($p41, $p0, $i43);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 1039} {:cexpr "r"} boogie_si_record_i32($i44);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i45 := $sge.i32($i44, 0);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i30 := $i44;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i1);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb9;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.1);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.52);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.49);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.4);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 163);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 1);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1033} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} dump_stack();
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} vslice_dummy_var_170 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.49, 163, .str.53);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const update_channel_integration_and_calibration: ref;

axiom update_channel_integration_and_calibration == $sub.ref(0, 589440);

procedure update_channel_integration_and_calibration($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation update_channel_integration_and_calibration($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 1041} {:cexpr "update_channel_integration_and_calibration:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11272, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i4 := zd_rf_should_update_pwr_int($p3);
    call {:si_unique_call 1043} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i9 := update_pwr_int($p0, $i8);
    call {:si_unique_call 1045} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i11 := zd_chip_is_zd1211b($p0);
    call {:si_unique_call 1047} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p14, $sub.i16(0, 28396));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p16, 40);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p18, 0);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p20, 0);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p22, $sub.i16(0, 28396));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p24, 42);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i27 := update_ofdm_cal($p0, $i26);
    call {:si_unique_call 1049} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i1);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i31 := update_pwr_cal($p0, $i30);
    call {:si_unique_call 1051} {:cexpr "r"} boogie_si_record_i32($i31);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p2);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i34 := zd_iowrite16a_locked($p0, $p33, 3);
    call {:si_unique_call 1053} {:cexpr "r"} boogie_si_record_i32($i34);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i6 := $i34;
    goto $bb3;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i6 := $i31;
    goto $bb3;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i6 := $i27;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const patch_cck_gain: ref;

axiom patch_cck_gain == $sub.ref(0, 590472);

procedure patch_cck_gain($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.30, $M.29, $CurrAddr, $M.27, $M.0;



implementation patch_cck_gain($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i45: i32;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i16;
  var $i50: i32;
  var $i8: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(11578, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11272, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i10 := zd_rf_should_patch_cck_gain($p9);
    call {:si_unique_call 1057} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i13 := mutex_is_locked($p12);
    call {:si_unique_call 1059} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1061} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i36 := zd_ioread32_locked($p0, $p1, $sub.i16(0, 1988));
    call {:si_unique_call 1067} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.23, $p1);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 255);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} vslice_dummy_var_173 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p41, .str.125, .str.146, $i43);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.23, $p1);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 255);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i50 := zd_iowrite16_locked($p0, $i49, $sub.i16(0, 28484));
    call {:si_unique_call 1070} {:cexpr "tmp___3"} boogie_si_record_i32($i50);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i8 := $i50;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i8 := $i36;
    goto $bb3;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, .str.1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p20, .str.146);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p21, .str.3);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p22, .str.4);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.5, $p24);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 1306);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p24, $i27);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p28, 1);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.6, $p29);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 1063} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} dump_stack();
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} vslice_dummy_var_172 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 1306, .str.10);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const patch_6m_band_edge: ref;

axiom patch_6m_band_edge == $sub.ref(0, 591504);

procedure patch_6m_band_edge($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.0, $M.30, $M.29, $M.54, $M.24, $M.27, $M.57, $M.26, $M.22, $M.23, assertsPassed;



implementation patch_6m_band_edge($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i32: i32;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1072} {:cexpr "patch_6m_band_edge:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 1074} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1076} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p0);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(11578, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11272, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i1);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i36 := zd_rf_patch_6m_band_edge($p33, $i35);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 1082} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i32 := $i36;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.1);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.147);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.3);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.4);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 623);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 1);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1078} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} dump_stack();
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} vslice_dummy_var_174 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 623, .str.10);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_chip_unlock_phy_regs: ref;

axiom zd_chip_unlock_phy_regs == $sub.ref(0, 592536);

procedure zd_chip_unlock_phy_regs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $CurrAddr, $M.27, $M.29, $M.30;



implementation zd_chip_unlock_phy_regs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i34: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 1086} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1088} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i27 := zd_ioread32_locked($p0, $p1, $sub.i16(0, 27008));
    call {:si_unique_call 1094} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.23, $p1);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 128);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p1, $i36);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.23, $p1);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i38 := zd_iowrite32_locked($p0, $i37, $sub.i16(0, 27008));
    call {:si_unique_call 1097} {:cexpr "r"} boogie_si_record_i32($i38);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $i38;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} vslice_dummy_var_177 := dev_err.ref.ref.i32($p43, .str.20, $i38);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_176 := dev_err.ref.ref.i32($p32, .str.19, $i27);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i34 := $i27;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.1);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.21);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.3);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.4);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 583);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 1);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1090} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} dump_stack();
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_175 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 583, .str.10);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_mutex_unlock_33: ref;

axiom ldv_mutex_unlock_33 == $sub.ref(0, 593568);

procedure ldv_mutex_unlock_33($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} mutex_unlock($p0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const zd_rf_patch_6m_band_edge: ref;

axiom zd_rf_patch_6m_band_edge == $sub.ref(0, 594600);

procedure zd_rf_patch_6m_band_edge($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.54, $M.24, $M.27, $M.57, $M.26, $M.22, $M.23, $CurrAddr, assertsPassed;



implementation zd_rf_patch_6m_band_edge($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} {:cexpr "zd_rf_patch_6m_band_edge:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 1102} $i11 := devirtbounce.4($p8, $p0, $i10);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 1103} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const zd_rf_should_patch_cck_gain: ref;

axiom zd_rf_should_patch_cck_gain == $sub.ref(0, 595632);

procedure zd_rf_should_patch_cck_gain($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation zd_rf_should_patch_cck_gain($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i8($i2, 1);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i4 := $and.i8($i3, 1);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const zd_iowrite16_locked: ref;

axiom zd_iowrite16_locked == $sub.ref(0, 596664);

procedure zd_iowrite16_locked($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.30, $M.29, $M.0, $CurrAddr;



implementation zd_iowrite16_locked($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var vslice_dummy_var_178: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1106} {:cexpr "zd_iowrite16_locked:arg:value"} boogie_si_record_i16($i1);
    call {:si_unique_call 1107} {:cexpr "zd_iowrite16_locked:arg:addr"} boogie_si_record_i16($i2);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i6 := mutex_is_locked($p5);
    call {:si_unique_call 1109} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1111} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p29, $i2);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p30, $i1);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $i32 := zd_usb_iowrite16v($p31, $p3, 1);
    call {:si_unique_call 1117} {:cexpr "tmp___2"} boogie_si_record_i32($i32);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.1);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.105);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str.101);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str.4);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.5, $p17);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 838);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p17, $i20);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p21, 1);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 1113} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} dump_stack();
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} vslice_dummy_var_178 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.101, 838, .str.10);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_usb_iowrite16v: ref;

axiom zd_usb_iowrite16v == $sub.ref(0, 597696);

procedure zd_usb_iowrite16v($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_usb_iowrite16v($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i7: i32;
  var $i6: i32;
  var vslice_dummy_var_179: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} {:cexpr "zd_usb_iowrite16v:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} zd_usb_iowrite16v_async_start($p0);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i3 := zd_usb_iowrite16v_async($p0, $p1, $i2);
    call {:si_unique_call 1121} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i7 := zd_usb_iowrite16v_async_end($p0, 50);
    call {:si_unique_call 1124} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} vslice_dummy_var_179 := zd_usb_iowrite16v_async_end($p0, 0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb3;
}



const zd_rf_should_update_pwr_int: ref;

axiom zd_rf_should_update_pwr_int == $sub.ref(0, 598728);

procedure zd_rf_should_update_pwr_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation zd_rf_should_update_pwr_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, 1);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const update_pwr_int: ref;

axiom update_pwr_int == $sub.ref(0, 599760);

procedure update_pwr_int($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.30, $M.29, $M.0, $CurrAddr;



implementation update_pwr_int($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} {:cexpr "update_pwr_int:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11520, 1)), $mul.ref($i4, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    call {:si_unique_call 1126} {:cexpr "value"} boogie_si_record_i8($i7);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i10 := zd_iowrite16_locked($p0, $i9, $sub.i16(0, 28548));
    call {:si_unique_call 1128} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const update_ofdm_cal: ref;

axiom update_ofdm_cal == $sub.ref(0, 600792);

procedure update_ofdm_cal($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation update_ofdm_cal($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i16;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i16;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i16;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 1130} {:cexpr "update_ofdm_cal:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p4, $sub.i16(0, 28404));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1)), $mul.ref(0, 14)), $mul.ref($i7, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i16($i11);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p14, $i12);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p16, $sub.i16(0, 28408));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i1);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, $sub.i32(0, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1)), $mul.ref(1, 14)), $mul.ref($i19, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i16($i23);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p26, $i24);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p28, $sub.i16(0, 28412));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i1);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, $sub.i32(0, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1)), $mul.ref(2, 14)), $mul.ref($i31, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i16($i35);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p38, $i36);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i40 := zd_iowrite16a_locked($p0, $p39, 3);
    call {:si_unique_call 1132} {:cexpr "tmp"} boogie_si_record_i32($i40);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;
}



const update_pwr_cal: ref;

axiom update_pwr_cal == $sub.ref(0, 601824);

procedure update_pwr_cal($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.30, $M.29, $M.0, $CurrAddr;



implementation update_pwr_cal($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} {:cexpr "update_pwr_cal:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11506, 1)), $mul.ref($i4, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    call {:si_unique_call 1134} {:cexpr "value"} boogie_si_record_i8($i7);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i10 := zd_iowrite16_locked($p0, $i9, $sub.i16(0, 28400));
    call {:si_unique_call 1136} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const zd_iowrite16a_locked: ref;

axiom zd_iowrite16a_locked == $sub.ref(0, 602856);

procedure zd_iowrite16a_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_iowrite16a_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i37: i32;
  var $i38: i64;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i47: i32;
  var $i48: i1;
  var $i36: i32;
  var $i49: i32;
  var $i35: i32;
  var $i45: i32;
  var $i46: i32;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i30: i32;
  var $p67: ref;
  var $i68: i32;
  var $i63: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1138} {:cexpr "zd_iowrite16a_locked:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 1140} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1142} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} zd_usb_iowrite16v_async_start($p28);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32(0, $i2);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $i68 := zd_usb_iowrite16v_async_end($p67, 50);
    call {:si_unique_call 1156} {:cexpr "tmp___2"} boogie_si_record_i32($i68);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i63 := $i68;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $r := $i63;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb10;

  $bb10:
    call $i31, $i32, $i33, $i34, $i37, $i38, $p40, $i41, $i42, $i43, $i44, $i47, $i48, $i36, $i49, $i35, $i45, $i46, $p50, $i51, $p52, $i53, $i54, $i55, $i64, $i65, $i66, $i30 := zd_iowrite16a_locked_loop_$bb10($p0, $p1, $i2, $i31, $i32, $i33, $i34, $i37, $i38, $p40, $i41, $i42, $i43, $i44, $i47, $i48, $i36, $i49, $i35, $i45, $i46, $p50, $i51, $p52, $i53, $i54, $i55, $i64, $i65, $i66, $i30);
    goto $bb10_last;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i2, $i30);
    call {:si_unique_call 1148} {:cexpr "max"} boogie_si_record_i32($i31);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i31, 15);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i34 := $ult.i32(0, $i33);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i35 := 0;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i35, 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i30);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p1, $mul.ref($i51, 4));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i53 := zd_usb_iowrite16v_async($p50, $p52, $i45);
    call {:si_unique_call 1150} {:cexpr "r"} boogie_si_record_i32($i53);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i45, $i46);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, $i30);
    call {:si_unique_call 1154} {:cexpr "i"} boogie_si_record_i32($i65);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i66 := $ult.i32($i65, $i2);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i66 == 1);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb31:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i65;
    goto $bb31_dummy;

  $bb27:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} vslice_dummy_var_181 := zd_usb_iowrite16v_async_end($p56, 0);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} vslice_dummy_var_182 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p61, .str.11, .str.9, $i55);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i63 := $i55;
    goto $bb29;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb18;

  $bb18:
    call $i37, $i38, $p40, $i41, $i42, $i43, $i44, $i47, $i48, $i36, $i49 := zd_iowrite16a_locked_loop_$bb18($p1, $i33, $i37, $i38, $p40, $i41, $i42, $i43, $i44, $i47, $i48, $i36, $i49, $i30);
    goto $bb18_last;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i30, $i36);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($i38, 4)), $mul.ref(0, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.30, $p40);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i44 := $i36;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i36, 1);
    call {:si_unique_call 1151} {:cexpr "j"} boogie_si_record_i32($i47);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32($i47, $i33);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i35 := $i49;
    goto $bb17;

  $bb24:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i36 := $i47;
    goto $bb24_dummy;

  $bb20:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i44, 1;
    goto $bb22;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i33 := 15;
    goto $bb14;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.1);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.9);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.3);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.4);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 243);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 1);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1144} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} dump_stack();
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} vslice_dummy_var_180 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.3, 243, .str.10);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4672;

  $bb31_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4660;
}



const zd_rf_to_chip: ref;

axiom zd_rf_to_chip == $sub.ref(0, 603888);

procedure zd_rf_to_chip($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_rf_to_chip($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 11272), 11584));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const zd_write_mac_addr: ref;

axiom zd_write_mac_addr == $sub.ref(0, 604920);

procedure zd_write_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $CurrAddr, $M.26, assertsPassed;



implementation zd_write_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 27120));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27116));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i12 := zd_write_mac_addr_common($p0, $p1, $p11, .str.14);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 1159} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const zd_mac_free_cur_beacon: ref;

axiom zd_mac_free_cur_beacon == $sub.ref(0, 605952);

procedure zd_mac_free_cur_beacon($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.26, assertsPassed, $CurrAddr;



implementation zd_mac_free_cur_beacon($p0: ref)
{
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(11336, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} ldv_mutex_lock_114($p2);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} zd_mac_free_cur_beacon_locked($p0);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(11336, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} ldv_mutex_unlock_115($p4);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_114: ref;

axiom ldv_mutex_lock_114 == $sub.ref(0, 606984);

procedure ldv_mutex_lock_114($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} mutex_lock($p0);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_115: ref;

axiom ldv_mutex_unlock_115 == $sub.ref(0, 608016);

procedure ldv_mutex_unlock_115($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_115($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} mutex_unlock($p0);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const zd_write_mac_addr_common: ref;

axiom zd_write_mac_addr_common == $sub.ref(0, 609048);

procedure zd_write_mac_addr_common($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $M.26, $CurrAddr, assertsPassed;



implementation zd_write_mac_addr_common($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 1168} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p6, $p7, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 1169} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p10, $p11, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} vslice_dummy_var_184 := dev_printk.ref.ref.ref.ref.ref(.str.6, $p51, .str.108, .str.107, $p3);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} ldv_mutex_lock_20($p53);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p4);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $i55 := zd_iowrite32a_locked($p0, $p54, 2);
    call {:si_unique_call 1174} {:cexpr "r"} boogie_si_record_i32($i55);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} ldv_mutex_unlock_21($p56);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 24);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 16);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i17, $i21);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 8);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i22, $i26);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p1);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i27, $i29);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i36 := $shl.i32($i35, 8);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i36, $i39);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i40);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} vslice_dummy_var_183 := dev_printk.ref.ref.ref.ref.ref.ref(.str.6, $p46, .str.106, .str.107, $p3, $p1);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_20: ref;

axiom ldv_mutex_lock_20 == $sub.ref(0, 610080);

procedure ldv_mutex_lock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} mutex_lock($p0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_21: ref;

axiom ldv_mutex_unlock_21 == $sub.ref(0, 611112);

procedure ldv_mutex_unlock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} mutex_unlock($p0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const set_mac_and_bssid: ref;

axiom set_mac_and_bssid == $sub.ref(0, 612144);

procedure set_mac_and_bssid($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $CurrAddr, $M.26, assertsPassed;



implementation set_mac_and_bssid($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11736, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11736, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 208)), $mul.ref(176, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i11 := zd_write_mac_addr($p6, $p10);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 1181} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(12436, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 3);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11736, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 208)), $mul.ref(176, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i22 := zd_write_bssid($p17, $p21);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 1185} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i5 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i16 := set_rx_filter($p0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 1183} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i5 := $i16;
    goto $bb3;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb3;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;
}



const zd_write_bssid: ref;

axiom zd_write_bssid == $sub.ref(0, 613176);

procedure zd_write_bssid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $M.26, $CurrAddr, assertsPassed;



implementation zd_write_bssid($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 27112));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27108));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i12 := zd_write_mac_addr_common($p0, $p1, $p11, .str.15);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 1188} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 614208);

procedure clear_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 1190} devirtbounce.5(0, $p1, $i0, $p1);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    return;
}



const zd_chip_disable_rxtx: ref;

axiom zd_chip_disable_rxtx == $sub.ref(0, 615240);

procedure zd_chip_disable_rxtx($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.0, assertsPassed, $M.8;



implementation zd_chip_disable_rxtx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} ldv_mutex_lock_50($p1);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} zd_tx_watchdog_disable($p2);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} zd_usb_disable_rx($p3);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} zd_usb_disable_tx($p4);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} ldv_mutex_unlock_51($p5);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const beacon_disable: ref;

axiom beacon_disable == $sub.ref(0, 616272);

procedure beacon_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.26, assertsPassed, $CurrAddr;



implementation beacon_disable($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} vslice_dummy_var_185 := dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.168);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} vslice_dummy_var_186 := cancel_delayed_work_sync($p8);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} zd_mac_free_cur_beacon($p0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const housekeeping_disable: ref;

axiom housekeeping_disable == $sub.ref(0, 617304);

procedure housekeeping_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.26, $M.27, $CurrAddr, assertsPassed;



implementation housekeeping_disable($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p10: ref;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i1;
  var vslice_dummy_var_189: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} vslice_dummy_var_187 := dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.174);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} vslice_dummy_var_188 := cancel_delayed_work_sync($p8);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} vslice_dummy_var_189 := zd_chip_control_leds($p10, 0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 618336);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    return;
}



const zd_chip_switch_radio_off: ref;

axiom zd_chip_switch_radio_off == $sub.ref(0, 619368);

procedure zd_chip_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, assertsPassed, $M.30, $M.29, $M.54, $M.62, $CurrAddr, $M.27, $M.19, $M.20, $M.57, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.41, $M.8, $M.45, $M.48, $M.49, $M.46, $M.42, $M.37, $M.53;



implementation zd_chip_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} ldv_mutex_lock_42($p1);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11272, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $i3 := zd_switch_radio_off($p2);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    call {:si_unique_call 1204} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} ldv_mutex_unlock_43($p4);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const zd_chip_disable_int: ref;

axiom zd_chip_disable_int == $sub.ref(0, 620400);

procedure zd_chip_disable_int($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.0, assertsPassed;



implementation zd_chip_disable_int($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var vslice_dummy_var_190: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} ldv_mutex_lock_46($p1);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} zd_usb_disable_int($p2);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} ldv_mutex_unlock_47($p3);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $p4 := zd_chip_to_mac($p0);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 13336)), $mul.ref(12280, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} vslice_dummy_var_190 := cancel_work_sync($p5);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 621432);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    return;
}



const skb_dequeue: ref;

axiom skb_dequeue == $sub.ref(0, 622464);

procedure skb_dequeue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_dequeue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $p1 := external_alloc();
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_46: ref;

axiom ldv_mutex_lock_46 == $sub.ref(0, 623496);

procedure ldv_mutex_lock_46($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_46($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} mutex_lock($p0);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const zd_usb_disable_int: ref;

axiom zd_usb_disable_int == $sub.ref(0, 624528);

procedure zd_usb_disable_int($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_usb_disable_int($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i22: i64;
  var $i23: i1;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $p1 := zd_usb_to_usbdev($p0);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $p4 := spinlock_check($p3);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 1217} {:cexpr "flags"} boogie_si_record_i64($i5);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    call {:si_unique_call 1219} {:cexpr "buffer_dma"} boogie_si_record_i64($i15);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} spin_unlock_irqrestore($p17, $i5);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} usb_kill_urb($p7);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} vslice_dummy_var_191 := dev_printk.ref.ref.ref.ref.ref(.str.6, $p20, .str.64, .str.65, $p7);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} usb_free_urb($p7);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p13);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} usb_free_coherent($p1, 64, $p13, $i15);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} spin_unlock_irqrestore($p10, $i5);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_47: ref;

axiom ldv_mutex_unlock_47 == $sub.ref(0, 625560);

procedure ldv_mutex_unlock_47($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_47($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} mutex_unlock($p0);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 626592);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1227} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1228} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_42: ref;

axiom ldv_mutex_lock_42 == $sub.ref(0, 627624);

procedure ldv_mutex_lock_42($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_42($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} mutex_lock($p0);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const zd_switch_radio_off: ref;

axiom zd_switch_radio_off == $sub.ref(0, 628656);

procedure zd_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $M.30, $M.29, $M.54, $M.62, $CurrAddr, $M.27, $M.19, $M.20, $M.57, $M.26, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.41, $M.8, assertsPassed, $M.45, $M.48, $M.49, $M.46, $M.42, $M.37, $M.53;



implementation zd_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i29: i32;
  var vslice_dummy_var_192: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 1234} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1236} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $i27 := zd_chip_lock_phy_regs($p2);
    call {:si_unique_call 1242} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 1243} $i32 := devirtbounce.6($p31, $p0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    call {:si_unique_call 1244} {:cexpr "t"} boogie_si_record_i32($i32);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i33 := zd_chip_unlock_phy_regs($p2);
    call {:si_unique_call 1246} {:cexpr "r"} boogie_si_record_i32($i33);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i32, 0);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i33;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i29 := $i35;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i35 := $i32;
    goto $bb13;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.1);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.56);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.49);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.4);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 198);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 1);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1238} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} dump_stack();
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} vslice_dummy_var_192 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.49, 198, .str.10);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_mutex_unlock_43: ref;

axiom ldv_mutex_unlock_43 == $sub.ref(0, 629688);

procedure ldv_mutex_unlock_43($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} mutex_unlock($p0);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 630720);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1249} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1250} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const zd_chip_control_leds: ref;

axiom zd_chip_control_leds == $sub.ref(0, 631752);

procedure zd_chip_control_leds($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.26, $M.27, $CurrAddr, assertsPassed;



implementation zd_chip_control_leds($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i16;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $i39: i16;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $p67: ref;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $i76: i16;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i16;
  var $p89: ref;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i98: i16;
  var $p100: ref;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i16;
  var $i111: i32;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $i22: i32;
  var $p120: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1254} {:cexpr "zd_chip_control_leds:arg:status"} boogie_si_record_i32($i1);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i5 := fw_reg_addr($p0, 3);
    call {:si_unique_call 1256} {:cexpr "tmp"} boogie_si_record_i16($i5);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 2));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $M.24 := $store.i16($M.24, $p6, $i5);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $M.24 := $store.i16($M.24, $p7, $sub.i16(0, 27068));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $i8 := fw_reg_addr($p0, 3);
    call {:si_unique_call 1258} {:cexpr "tmp___0"} boogie_si_record_i16($i8);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p10, $i8);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p12, 0);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p14, $sub.i16(0, 27068));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p16, 0);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} ldv_mutex_lock_36($p17);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $i20 := zd_ioread16v_locked($p0, $p18, $p19, 2);
    call {:si_unique_call 1261} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 256);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then 512 else 256);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    call {:si_unique_call 1263} {:cexpr "other_led"} boogie_si_record_i16($i28);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} ldv_mutex_unlock_37($p120);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p80, 1);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.25, $p81);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i83 := $sext.i16.i32($i82);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i84 := $sext.i16.i32($i28);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i85 := $xor.i32($i84, $sub.i32(0, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i83, $i85);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i16($i86);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p89, $i87);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.29, $p91);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i93, $i96);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p100, $i98);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 2));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.25, $p101);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.29, $p105);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i103, $i107);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i108 == 1);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.25, $p109);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.29, $p113);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i111, $i115);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p4);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i118 := zd_iowrite16a_locked($p0, $p117, 2);
    call {:si_unique_call 1267} {:cexpr "r"} boogie_si_record_i32($i118);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i119 == 1;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i22 := $i118;
    goto $bb3;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb21;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p43, 0);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.25, $p44);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i46 := $sext.i16.i32($i45);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i47 := $sext.i16.i32($i28);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i48 := $xor.i32($i47, $sub.i32(0, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i46, $i48);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p52, $i50);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i53 := get_seconds();
    call {:si_unique_call 1265} {:cexpr "tmp___1"} boogie_si_record_i64($i53);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i54 := $urem.i64($i53, 3);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.29, $p69);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i71, $i74);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p78, $i76);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.29, $p57);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i59 := $sext.i16.i32($i58);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i62 := $sext.i16.i32($i61);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i63 := $xor.i32($i62, $sub.i32(0, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i59, $i63);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p67, $i65);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb6:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb12;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p34, 0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.25, $p35);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 64767);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p41, $i39);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb3;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const fw_reg_addr: ref;

axiom fw_reg_addr == $sub.ref(0, 632784);

procedure fw_reg_addr($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;



implementation fw_reg_addr($p0: ref, $i1: i16) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} {:cexpr "fw_reg_addr:arg:offset"} boogie_si_record_i16($i1);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11504, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, $i5);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_mutex_lock_36: ref;

axiom ldv_mutex_lock_36 == $sub.ref(0, 633816);

procedure ldv_mutex_lock_36($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_36($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} mutex_lock($p0);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const get_seconds: ref;

axiom get_seconds == $sub.ref(0, 634848);

procedure get_seconds() returns ($r: i64);
  free requires assertsPassed;



implementation get_seconds() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1271} $i0 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1272} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i0);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mutex_unlock_37: ref;

axiom ldv_mutex_unlock_37 == $sub.ref(0, 635880);

procedure ldv_mutex_unlock_37($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_37($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} mutex_unlock($p0);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_50: ref;

axiom ldv_mutex_lock_50 == $sub.ref(0, 636912);

procedure ldv_mutex_lock_50($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_50($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} mutex_lock($p0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const zd_tx_watchdog_disable: ref;

axiom zd_tx_watchdog_disable == $sub.ref(0, 637944);

procedure zd_tx_watchdog_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_tx_watchdog_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i8;
  var $p14: ref;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(580, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} vslice_dummy_var_193 := dev_printk.ref.ref.ref.ref(.str.6, $p9, .str.26, .str.69);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(580, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i13 := $and.i8($i12, $sub.i8(0, 3));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i13);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} vslice_dummy_var_194 := cancel_delayed_work_sync($p14);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_usb_disable_rx: ref;

axiom zd_usb_disable_rx == $sub.ref(0, 638976);

procedure zd_usb_disable_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, assertsPassed;



implementation zd_usb_disable_rx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var vslice_dummy_var_195: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} ldv_mutex_lock_214($p2);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} __zd_usb_disable_rx($p0);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} ldv_mutex_unlock_215($p3);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(456, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} tasklet_kill($p4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(240, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} vslice_dummy_var_195 := cancel_delayed_work_sync($p5);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const zd_usb_disable_tx: ref;

axiom zd_usb_disable_tx == $sub.ref(0, 640008);

procedure zd_usb_disable_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_usb_disable_tx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var vslice_dummy_var_196: i64;
  var vslice_dummy_var_197: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(0, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} atomic_set($p2, 0);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(392, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} usb_kill_anchored_urbs($p3);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p5 := spinlock_check($p4);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 1288} {:cexpr "flags"} boogie_si_record_i64($i6);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(296, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $i8 := skb_queue_empty($p7);
    call {:si_unique_call 1290} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1291} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i10);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 1293} {:cexpr "tmp___1"} boogie_si_record_i64($i14);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vslice_dummy_var_196 := ldv__builtin_expect($i18, 0);
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(576, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    call {:si_unique_call 1296} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i23);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1298} {:cexpr "tmp___2"} boogie_si_record_i64($i27);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i23, 0);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} vslice_dummy_var_197 := ldv__builtin_expect($i31, 0);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(576, 1));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} spin_unlock_irqrestore($p34, $i6);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} warn_slowpath_null(.str.60, 946);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} warn_slowpath_null(.str.60, 945);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_51: ref;

axiom ldv_mutex_unlock_51 == $sub.ref(0, 641040);

procedure ldv_mutex_unlock_51($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_51($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} mutex_unlock($p0);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const skb_queue_empty: ref;

axiom skb_queue_empty == $sub.ref(0, 642072);

procedure skb_queue_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 643104);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_214: ref;

axiom ldv_mutex_lock_214 == $sub.ref(0, 644136);

procedure ldv_mutex_lock_214($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_214($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} ldv_mutex_lock_setup_mutex($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} mutex_lock($p0);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_215: ref;

axiom ldv_mutex_unlock_215 == $sub.ref(0, 645168);

procedure ldv_mutex_unlock_215($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_215($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} ldv_mutex_unlock_setup_mutex($p0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} mutex_unlock($p0);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const tasklet_kill: ref;

axiom tasklet_kill == $sub.ref(0, 646200);

procedure tasklet_kill($p0: ref);
  free requires assertsPassed;



implementation tasklet_kill($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_init_hw: ref;

axiom zd_usb_init_hw == $sub.ref(0, 647232);

procedure zd_usb_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.26, $M.22, $M.24, $M.23, $M.45, $M.48, $M.49, $CurrAddr, assertsPassed, $M.46, $M.42, $M.29, $M.30, $M.37, $M.54, $M.62, $M.27, $M.53, $M.19, $M.20, $M.57, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.8;



implementation zd_usb_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i8;
  var $i31: i8;
  var $i12: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p1 := zd_usb_to_mac($p0);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} vslice_dummy_var_198 := dev_printk.ref.ref.ref.ref(.str.6, $p4, .str.26, .str.70);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i6 := upload_firmware($p0);
    call {:si_unique_call 1312} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p13 := zd_usb_to_usbdev($p0);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i14 := usb_reset_configuration($p13);
    call {:si_unique_call 1316} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.39, $p20);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i22 := zd_mac_init_hw($p21);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    call {:si_unique_call 1319} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11268, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i30 := $and.i8($i29, $sub.i8(0, 3));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i31 := $or.i8($i30, 2);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i31);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} vslice_dummy_var_201 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p26, .str.73, .str.70, $i22);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i12 := $i22;
    goto $bb3;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} vslice_dummy_var_200 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p18, .str.72, .str.70, $i14);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} vslice_dummy_var_199 := dev_err.ref.ref.i32($p10, .str.71, $i6);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i12 := $i6;
    goto $bb3;
}



const zd_chip_enable_int: ref;

axiom zd_chip_enable_int == $sub.ref(0, 648264);

procedure zd_chip_enable_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, assertsPassed, $CurrAddr;



implementation zd_chip_enable_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} ldv_mutex_lock_44($p1);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i3 := zd_usb_enable_int($p2);
    call {:si_unique_call 1323} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} ldv_mutex_unlock_45($p4);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const zd_chip_set_basic_rates: ref;

axiom zd_chip_set_basic_rates == $sub.ref(0, 649296);

procedure zd_chip_set_basic_rates($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30;



implementation zd_chip_set_basic_rates($p0: ref, $i1: i16) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} {:cexpr "zd_chip_set_basic_rates:arg:cr_rates"} boogie_si_record_i16($i1);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 65296));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} ldv_mutex_lock_38($p6);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i1);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $i8 := zd_iowrite32_locked($p0, $i7, $sub.i16(0, 27088));
    call {:si_unique_call 1328} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} ldv_mutex_unlock_39($p9);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const set_mc_hash: ref;

axiom set_mc_hash == $sub.ref(0, 650328);

procedure set_mc_hash($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.0, $CurrAddr, $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, assertsPassed;



implementation set_mc_hash($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} zd_mc_clear($p1);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i3 := zd_chip_set_multicast_hash($p2, $p1);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 1333} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const zd_chip_switch_radio_on: ref;

axiom zd_chip_switch_radio_on == $sub.ref(0, 651360);

procedure zd_chip_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, assertsPassed, $M.30, $M.29, $M.54, $M.62, $CurrAddr, $M.27, $M.19, $M.20, $M.57, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.41, $M.8, $M.45, $M.48, $M.49, $M.46, $M.42, $M.37, $M.53;



implementation zd_chip_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} ldv_mutex_lock_40($p1);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11272, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $i3 := zd_switch_radio_on($p2);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 1336} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} ldv_mutex_unlock_41($p4);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const zd_chip_enable_rxtx: ref;

axiom zd_chip_enable_rxtx == $sub.ref(0, 652392);

procedure zd_chip_enable_rxtx($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, assertsPassed, $M.8, $CurrAddr;



implementation zd_chip_enable_rxtx($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ldv_mutex_lock_48($p1);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} zd_usb_enable_tx($p2);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $i4 := zd_usb_enable_rx($p3);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    call {:si_unique_call 1341} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} zd_tx_watchdog_enable($p5);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} ldv_mutex_unlock_49($p6);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const housekeeping_enable: ref;

axiom housekeeping_enable == $sub.ref(0, 653424);

procedure housekeeping_enable($p0: ref);
  free requires assertsPassed;



implementation housekeeping_enable($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} vslice_dummy_var_202 := dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.173);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p7 := $M.7;
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1));
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} vslice_dummy_var_203 := queue_delayed_work($p7, $p9, 0);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    return;
}



const beacon_enable: ref;

axiom beacon_enable == $sub.ref(0, 654456);

procedure beacon_enable($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation beacon_enable($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p13: ref;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} vslice_dummy_var_204 := dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.167);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.9, jiffies);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(224, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i7);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i10 := round_jiffies_relative(250);
    call {:si_unique_call 1348} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p11 := $M.7;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} vslice_dummy_var_205 := queue_delayed_work($p11, $p13, $i10);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 655488);

procedure set_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} {:cexpr "set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 1351} devirtbounce.5(0, $p1, $i0, $p1);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_48: ref;

axiom ldv_mutex_lock_48 == $sub.ref(0, 656520);

procedure ldv_mutex_lock_48($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_48($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} mutex_lock($p0);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const zd_usb_enable_tx: ref;

axiom zd_usb_enable_tx == $sub.ref(0, 657552);

procedure zd_usb_enable_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_usb_enable_tx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i8;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $p3 := spinlock_check($p2);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 1356} {:cexpr "flags"} boogie_si_record_i64($i4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(0, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} atomic_set($p5, 1);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(576, 1));
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $p7 := zd_usb_to_hw($p0);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} ieee80211_wake_queues($p7);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(580, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i10 := $and.i8($i9, $sub.i8(0, 2));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i10);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} spin_unlock_irqrestore($p11, $i4);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_enable_rx: ref;

axiom zd_usb_enable_rx == $sub.ref(0, 658584);

procedure zd_usb_enable_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, assertsPassed, $CurrAddr;



implementation zd_usb_enable_rx($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} ldv_mutex_lock_212($p2);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i3 := __zd_usb_enable_rx($p0);
    call {:si_unique_call 1363} {:cexpr "r"} boogie_si_record_i32($i3);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} ldv_mutex_unlock_213($p4);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} zd_usb_reset_rx_idle_timer($p0);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const zd_tx_watchdog_enable: ref;

axiom zd_tx_watchdog_enable == $sub.ref(0, 659616);

procedure zd_tx_watchdog_enable($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_tx_watchdog_enable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $i18: i8;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(580, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} vslice_dummy_var_206 := dev_printk.ref.ref.ref.ref(.str.6, $p9, .str.26, .str.68);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $i11 := round_jiffies_relative(250);
    call {:si_unique_call 1368} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p12 := $M.7;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(80, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} vslice_dummy_var_207 := queue_delayed_work($p12, $p13, $i11);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(580, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, $sub.i8(0, 3));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i18 := $or.i8($i17, 2);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i18);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_49: ref;

axiom ldv_mutex_unlock_49 == $sub.ref(0, 660648);

procedure ldv_mutex_unlock_49($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_49($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} mutex_unlock($p0);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_212: ref;

axiom ldv_mutex_lock_212 == $sub.ref(0, 661680);

procedure ldv_mutex_lock_212($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_212($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} ldv_mutex_lock_setup_mutex($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} mutex_lock($p0);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_213: ref;

axiom ldv_mutex_unlock_213 == $sub.ref(0, 662712);

procedure ldv_mutex_unlock_213($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_213($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} ldv_mutex_unlock_setup_mutex($p0);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} mutex_unlock($p0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const ieee80211_wake_queues: ref;

axiom ieee80211_wake_queues == $sub.ref(0, 663744);

procedure ieee80211_wake_queues($p0: ref);
  free requires assertsPassed;



implementation ieee80211_wake_queues($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_40: ref;

axiom ldv_mutex_lock_40 == $sub.ref(0, 664776);

procedure ldv_mutex_lock_40($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_40($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} mutex_lock($p0);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const zd_switch_radio_on: ref;

axiom zd_switch_radio_on == $sub.ref(0, 665808);

procedure zd_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $M.30, $M.29, $M.54, $M.62, $CurrAddr, $M.27, $M.19, $M.20, $M.57, $M.26, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.41, $M.8, assertsPassed, $M.45, $M.48, $M.49, $M.46, $M.42, $M.37, $M.53;



implementation zd_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i29: i32;
  var vslice_dummy_var_208: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 1381} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1383} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i27 := zd_chip_lock_phy_regs($p2);
    call {:si_unique_call 1389} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 1390} $i32 := devirtbounce.6($p31, $p0);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 1391} {:cexpr "t"} boogie_si_record_i32($i32);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i33 := zd_chip_unlock_phy_regs($p2);
    call {:si_unique_call 1393} {:cexpr "r"} boogie_si_record_i32($i33);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i32, 0);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i33;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i29 := $i35;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i35 := $i32;
    goto $bb13;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.1);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.55);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.49);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.4);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 181);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 1);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1385} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} dump_stack();
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} vslice_dummy_var_208 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.49, 181, .str.10);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_mutex_unlock_41: ref;

axiom ldv_mutex_unlock_41 == $sub.ref(0, 666840);

procedure ldv_mutex_unlock_41($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} mutex_unlock($p0);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_38: ref;

axiom ldv_mutex_lock_38 == $sub.ref(0, 667872);

procedure ldv_mutex_lock_38($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_38($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} mutex_lock($p0);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_39: ref;

axiom ldv_mutex_unlock_39 == $sub.ref(0, 668904);

procedure ldv_mutex_unlock_39($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_39($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} mutex_unlock($p0);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_44: ref;

axiom ldv_mutex_lock_44 == $sub.ref(0, 669936);

procedure ldv_mutex_lock_44($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_44($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} mutex_lock($p0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;
}



const zd_usb_enable_int: ref;

axiom zd_usb_enable_int == $sub.ref(0, 670968);

procedure zd_usb_enable_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_usb_enable_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i64;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i56: i32;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i42: i32;
  var $i11: i32;
  var $i83: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $p2 := zd_usb_to_usbdev($p0);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} vslice_dummy_var_209 := dev_printk.ref.ref.ref.ref(.str.6, $p6, .str.26, .str.59);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $p8 := usb_alloc_urb(0, 208);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $i12 := arch_local_save_flags();
    call {:si_unique_call 1407} {:cexpr "_flags"} boogie_si_record_i64($i12);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i13 := arch_irqs_disabled_flags($i12);
    call {:si_unique_call 1409} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1411} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} spin_lock_irq($p36);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p8);
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} spin_unlock_irq($p44);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p46 := usb_alloc_coherent($p2, 64, 208, $p45);
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $p46);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $i57 := __create_pipe($p2, 3);
    call {:si_unique_call 1425} {:cexpr "tmp___3"} boogie_si_record_i32($i57);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i57, 1073741952);
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p0);
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} usb_fill_int_urb($p8, $p2, $i58, $p60, 64, int_urb_complete, $p61, $i63);
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i65);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, 4);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i69);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 1288)), $mul.ref(48, 1));
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} vslice_dummy_var_212 := dev_printk.ref.ref.ref.ref.ref(.str.6, $p73, .str.62, .str.59, $p75);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i77 := usb_submit_urb($p8, 208);
    call {:si_unique_call 1429} {:cexpr "r"} boogie_si_record_i32($i77);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i83 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $r := $i83;
    return;

  $bb19:
    assume $i78 == 1;
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} vslice_dummy_var_213 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p81, .str.63, .str.59, $i77);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p86);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} usb_free_coherent($p2, 64, $p85, $i87);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i56 := $i77;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} spin_lock_irq($p88);
    $p89 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $0.ref);
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} spin_unlock_irq($p90);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i42 := $i56;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} usb_free_urb($p8);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i11 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i83 := $i11;
    goto $bb23;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} vslice_dummy_var_211 := dev_printk.ref.ref.ref.ref(.str.6, $p54, .str.61, .str.59);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 12);
    goto $bb17;

  $bb11:
    assume $i40 == 1;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} spin_unlock_irq($p41);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb13;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, .str.1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p20, .str.59);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p21, .str.60);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p22, .str.4);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.5, $p24);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 582);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p24, $i27);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p28, 1);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.6, $p29);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 1413} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} dump_stack();
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} vslice_dummy_var_210 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.60, 582, .str.32);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_mutex_unlock_45: ref;

axiom ldv_mutex_unlock_45 == $sub.ref(0, 672000);

procedure ldv_mutex_unlock_45($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} mutex_unlock($p0);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const int_urb_complete: ref;

axiom int_urb_complete == $sub.ref(0, 673032);

procedure int_urb_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation int_urb_complete($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_215 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p24, .str.206, .str.207, $p0, $i26);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i70 := usb_submit_urb($p0, 32);
    call {:si_unique_call 1437} {:cexpr "r"} boogie_si_record_i32($i70);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    return;

  $bb60:
    assume $i71 == 1;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} vslice_dummy_var_219 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p74, .str.211, .str.207, $p0, $i70);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i30 := $ule.i32($i29, 7);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 1);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p37, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 144);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p37, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 160);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i59, 160);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p37, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} vslice_dummy_var_218 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p65, .str.210, .str.207, $p0, $i68);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb53:
    assume $i61 == 1;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} zd_mac_tx_failed($p0);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb51:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i59, 144);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb55;

  $bb56:
    assume $i62 == 1;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} handle_regs_int($p0);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb44:
    assume $i53 == 1;
    $p54 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $i55 := atomic_read($p54);
    call {:si_unique_call 1441} {:cexpr "tmp"} boogie_si_record_i32($i55);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i56 == 1;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} handle_regs_int_override($p0);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb41:
    assume $i41 == 1;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_217 := dev_printk.ref.ref.ref.ref.ref(.str.6, $p44, .str.209, .str.207, $p0);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38:
    assume $i30 == 1;
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} vslice_dummy_var_216 := dev_printk.ref.ref.ref.ref.ref(.str.6, $p33, .str.208, .str.207, $p0);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb6:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} vslice_dummy_var_214 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p18, .str.206, .str.207, $p0, $i20);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i2, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i2, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb27;

  $bb24:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i2, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb30;

  $bb22:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i2, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb32:
    assume $i15 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    goto $bb20;
}



const handle_regs_int_override: ref;

axiom handle_regs_int_override == $sub.ref(0, 674064);

procedure handle_regs_int_override($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation handle_regs_int_override($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i8;
  var $i13: i8;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} spin_lock($p5);
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i7 := atomic_read($p6);
    call {:si_unique_call 1449} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} spin_unlock($p16);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} atomic_set($p9, 0);
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i11, $sub.i8(0, 2));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i13 := $or.i8($i12, 1);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i13);
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} complete_($p15);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const handle_regs_int: ref;

axiom handle_regs_int == $sub.ref(0, 675096);

procedure handle_regs_int($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation handle_regs_int($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $p67: ref;
  var $i68: i1;
  var $i69: i32;
  var $i70: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i8;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i8;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $p6 := current_thread_info();
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.9, $p7);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, 134217472);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 1456} {:cexpr "tmp___1"} boogie_si_record_i64($i14);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p33 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} spin_lock($p33);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(2, 2));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    call {:si_unique_call 1462} {:cexpr "int_num"} boogie_si_record_i16($i38);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 38160);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    $p59 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $i60 := atomic_read($p59);
    call {:si_unique_call 1467} {:cexpr "tmp___6"} boogie_si_record_i32($i60);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $p93 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} spin_unlock($p93);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i38);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 38160);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i95 == 1;
    $p96 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $i97 := atomic_read($p96);
    call {:si_unique_call 1481} {:cexpr "tmp___7"} boogie_si_record_i32($i97);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i98 == 1;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} handle_regs_int_override($p0);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb13:
    assume $i61 == 1;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    call {:si_unique_call 1472} {:cexpr "len"} boogie_si_record_i32($i63);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    $p67 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(172, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i65);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i68 := $ugt.i32($i63, 64);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $i63;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    call {:si_unique_call 1473} {:cexpr "__len___0"} boogie_si_record_i64($i70);
    $p72 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 1474} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p73, $p75, $i70, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    $p80 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $i82 := check_read_regs($p4, $p78, $i81);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i8($i82);
    call {:si_unique_call 1476} {:cexpr "tmp___4"} boogie_si_record_i8($i83);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i83);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p87 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} atomic_set($p87, 0);
    $p88 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i90 := $and.i8($i89, $sub.i8(0, 2));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, $i90);
    $p92 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} complete_($p92);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume $i86 == 1;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i84 == 1;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i85 := 0;
    goto $bb20;

  $bb15:
    assume $i68 == 1;
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i69 := 64;
    goto $bb17;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $p44 := zd_usb_to_hw($p43);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $p45 := zd_hw_mac($p44);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} spin_lock($p46);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i64(64, 63);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i47 == 1);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p45, $mul.ref(0, 13336)), $mul.ref(12368, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 1469} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p53, $p55, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p45, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} spin_unlock($p56);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p45, $mul.ref(0, 13336)), $mul.ref(12280, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} vslice_dummy_var_221 := schedule_work($p57);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i47 == 1;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p45, $mul.ref(0, 13336)), $mul.ref(12368, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 1468} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p49, $p51, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, .str.1);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, .str.212);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p18, .str.60);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p19, .str.4);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.5, $p21);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 433);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p21, $i24);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p25, 1);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.6, $p26);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1458} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} dump_stack();
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i31 == 1;
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} vslice_dummy_var_220 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.60, 433, .str.213);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_mac_tx_failed: ref;

axiom zd_mac_tx_failed == $sub.ref(0, 676128);

procedure zd_mac_tx_failed($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_mac_tx_failed($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i8;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i24;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i94: i64;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i64;
  var $p103: ref;
  var $i104: i32;
  var $i105: i64;
  var $p107: ref;
  var $i108: i16;
  var $i109: i8;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $p45: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $i30: i32;
  var $p31: ref;
  var $i122: i32;
  var $i29: i32;
  var $i116: i32;
  var $i117: i32;
  var $i123: i1;
  var $i124: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i8;
  var $i140: i32;
  var $i141: i1;
  var $i125: i32;
  var $p142: ref;
  var vslice_dummy_var_222: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $p5 := zd_usb_to_hw($p4);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p6 := zd_hw_mac($p5);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(11, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 1486} {:cexpr "success"} boogie_si_record_i32($i14);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, $i14);
    call {:si_unique_call 1487} {:cexpr "retry"} boogie_si_record_i32($i18);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 13336)), $mul.ref(12456, 1));
    $p20 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 13336)), $mul.ref(12456, 1)), $mul.ref(24, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $p21 := spinlock_check($p20);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i22 := _raw_spin_lock_irqsave($p21);
    call {:si_unique_call 1490} {:cexpr "flags"} boogie_si_record_i64($i22);
    $p23 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 13336)), $mul.ref(12456, 1)), $mul.ref(0, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p19);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i25, $i27);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i29 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i116, $i117 := 0, $i29;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i116, 0);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    $p142 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 13336)), $mul.ref(12456, 1)), $mul.ref(24, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} spin_unlock_irqrestore($p142, $i22);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    return;

  $bb42:
    assume $i123 == 1;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i124 := $sle.i32(1, $i117);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb44:
    assume $i124 == 1;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i125 := 1;
    goto $bb47;

  $bb47:
    call $p126, $p127, $p128, $i129, $i130, $i131, $p132, $i133, $i134, $i135, $p136, $p137, $i138, $i139, $i140, $i141, $i125 := zd_mac_tx_failed_loop_$bb47($p5, $p6, $p8, $p19, $i117, $p126, $p127, $p128, $i129, $i130, $i131, $p132, $i133, $i134, $i135, $p136, $p137, $i138, $i139, $i140, $i141, $i125);
    goto $bb47_last;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p126 := __skb_dequeue($p19);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p6);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p127, $mul.ref(13328, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.0, $p128);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i131 == 1);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i134 := 0;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i125, $i117);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i135 == 1);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p136 := $0.ref;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} zd_mac_tx_status($p5, $p126, $i134, $p136);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p6, $mul.ref(0, 13336)), $mul.ref(13328, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i139 := $and.i8($i138, $sub.i8(0, 9));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p137, $i139);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i125, 1);
    call {:si_unique_call 1512} {:cexpr "i"} boogie_si_record_i32($i140);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i141 := $sle.i32($i140, $i117);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i141 == 1);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb55:
    assume $i141 == 1;
    assume {:verifier.code 0} true;
    $i125 := $i140;
    goto $bb55_dummy;

  $bb52:
    assume $i135 == 1;
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p136 := $p8;
    goto $bb54;

  $bb49:
    assume $i131 == 1;
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 13336)), $mul.ref(13332, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i134 := $i133;
    goto $bb51;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i30, $p31 := 0, $p24;
    goto $bb4;

  $bb4:
    call $i32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p46, $p47, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $i85, $p86, $p87, $i88, $i89, $i90, $i91, $i92, $i94, $i96, $p97, $i98, $i99, $i100, $i101, $p103, $i104, $i105, $p107, $i108, $i109, $p110, $i111, $i112, $i113, $i114, $i115, $p45, $p118, $p119, $i120, $i121, $i30, $p31, $i122, vslice_dummy_var_222 := zd_mac_tx_failed_loop_$bb4($p1, $p6, $p9, $i18, $p19, $i27, $i32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p46, $p47, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $i85, $p86, $p87, $i88, $i89, $i90, $i91, $i92, $i94, $i96, $p97, $i98, $i99, $i100, $i101, $p103, $i104, $i105, $p107, $i108, $i109, $p110, $i111, $i112, $i113, $i114, $i115, $p45, $p118, $p119, $i120, $i121, $i30, $p31, $i122, vslice_dummy_var_222);
    goto $bb4_last;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i30, 1);
    call {:si_unique_call 1491} {:cexpr "position"} boogie_si_record_i32($i32);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(11, 1));
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p31, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i53 := memcmp($p50, $p52, 6);
    call {:si_unique_call 1495} {:cexpr "tmp___3"} boogie_si_record_i32($i53);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 1497} {:cexpr "tmp___4"} boogie_si_record_i64($i57);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $p59 := IEEE80211_SKB_CB($p31);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p61, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i66 := $sext.i8.i32($i65);
    call {:si_unique_call 1499} {:cexpr "first_idx"} boogie_si_record_i32($i66);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 1501} {:cexpr "tmp___6"} boogie_si_record_i64($i70);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i71 == 1);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i72 := $ugt.i32($i66, 11);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 1503} {:cexpr "tmp___7"} boogie_si_record_i64($i75);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i66);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i96 := $sle.i32($i18, 0);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i96 == 1);
    $p97 := $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i94, 44)), $mul.ref(0, 1));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.10, $p97);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i98, $i18);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i18, $sub.i32(0, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i100);
    $p103 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i94, 44)), $mul.ref(4, 1)), $mul.ref($i101, 4));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.10, $p103);
    call {:si_unique_call 1508} {:cexpr "final_idx"} boogie_si_record_i32($i104);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i104);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref($i105, 12)), $mul.ref(6, 1));
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p107);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i16.i8($i108);
    call {:si_unique_call 1509} {:cexpr "final_rate"} boogie_si_record_i8($i109);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(2, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i109);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i112, $i113);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i115 := $i32;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i116, $i117 := 1, $i115;
    goto $bb38;

  $bb35:
    assume $i114 == 1;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p45 := $p31;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p45, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, $i27);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i122 := $i32;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i29 := $i122;
    goto $bb3;

  $bb39:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i30, $p31 := $i32, $p119;
    goto $bb39_dummy;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p45 := $p31;
    goto $bb13;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb30;

  $bb22:
    assume $i76 == 1;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p77, .str.1);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p78, .str.41);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p79, .str.31);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p80, .str.4);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.5, $p82);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 262144));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i85 := $or.i24($i84, 584);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p82, $i85);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p86, 1);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.6, $p87);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 1505} {:cexpr "tmp___5"} boogie_si_record_i64($i91);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} dump_stack();
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i92 == 1;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} vslice_dummy_var_222 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.31, 584, .str.42);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb19:
    assume $i71 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p45 := $p31;
    goto $bb13;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p6);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(13328, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb8;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $i42 := skb_queue_is_first($p19, $p31);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i8($i42);
    call {:si_unique_call 1493} {:cexpr "tmp___2"} boogie_si_record_i8($i43);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p45 := $p31;
    goto $bb13;

  $bb55_dummy:
    assume false;
    return;

  $bb47_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6046;

  $bb39_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5919;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 677160);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1514} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1515} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 678192);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    return;
}



const upload_firmware: ref;

axiom upload_firmware == $sub.ref(0, 679224);

procedure upload_firmware($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $CurrAddr;



implementation upload_firmware($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i11: i32;
  var $p48: ref;
  var $p49: ref;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p3 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $p4 := zd_usb_to_usbdev($p0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p1, $0.ref);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p2, $0.ref);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $i5 := get_bcdDevice($p4);
    call {:si_unique_call 1521} {:cexpr "bcdDevice"} boogie_si_record_i16($i5);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $p7 := get_fw_name($p0, $p6, 128, .str.249);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $i9 := request_fw_file($p1, $p7, $p8);
    call {:si_unique_call 1524} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.41, $p1);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.43, $p13);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $i15 := get_word($p14, 23);
    call {:si_unique_call 1528} {:cexpr "fw_bcdDevice"} boogie_si_record_i16($i15);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i5);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i16, $i17);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i15);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} vslice_dummy_var_224 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p30, .str.252, .str.253, $i31);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p3);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $p34 := get_fw_name($p0, $p33, 128, .str.254);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} $i36 := request_fw_file($p2, $p34, $p35);
    call {:si_unique_call 1536} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.41, $p2);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.43, $p39);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.41, $p2);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.44, $p42);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $i44 := upload_code($p4, $p40, $i43, $sub.i16(0, 4608), 1);
    call {:si_unique_call 1538} {:cexpr "r"} boogie_si_record_i32($i44);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i11 := $i44;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.41, $p1);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} release_firmware($p48);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.41, $p2);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} release_firmware($p49);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_226 := dev_err.ref.ref.i32($p46, .str.255, $i44);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i11 := $i36;
    goto $bb3;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i15);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i5);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} vslice_dummy_var_223 := _dev_info.ref.ref.i32.i32($p19, .str.250, $i20, $i21);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i5);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i24 := $ule.i32($i23, 17171);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.41, $p1);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $i28 := handle_version_mismatch($p0, $p27);
    call {:si_unique_call 1533} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i11 := $i28;
    goto $bb3;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_225 := dev_warn.ref.ref($p25, .str.251);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const usb_reset_configuration: ref;

axiom usb_reset_configuration == $sub.ref(0, 680256);

procedure usb_reset_configuration($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_configuration($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1540} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1541} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const zd_mac_init_hw: ref;

axiom zd_mac_init_hw == $sub.ref(0, 681288);

procedure zd_mac_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.26, $M.22, $M.24, $M.23, $M.45, $M.48, $M.49, $CurrAddr, assertsPassed, $M.46, $M.42, $M.29, $M.30, $M.37, $M.54, $M.62, $M.27, $M.53, $M.19, $M.20, $M.57, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.41, $M.8;



implementation zd_mac_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i12: i64;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i11: i32;
  var $i8: i32;
  var vslice_dummy_var_227: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $p4 := zd_hw_mac($p0);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} $i6 := zd_chip_enable_int($p5);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 1547} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i9 := zd_chip_init_hw($p5);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    call {:si_unique_call 1549} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $i12 := arch_local_save_flags();
    call {:si_unique_call 1552} {:cexpr "_flags"} boogie_si_record_i64($i12);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $i13 := arch_irqs_disabled_flags($i12);
    call {:si_unique_call 1554} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1556} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $i36 := zd_read_regdomain($p5, $p2);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    call {:si_unique_call 1562} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} spin_lock_irq($p38);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.45, $p2);
    call {:si_unique_call 1564} {:cexpr "tmp___3"} boogie_si_record_i8($i39);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 13336)), $mul.ref(12433, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $i39);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 13336)), $mul.ref(12432, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i39);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} spin_unlock_irq($p42);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $i43 := zd_set_encryption_type($p5, 8);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    call {:si_unique_call 1567} {:cexpr "r"} boogie_si_record_i32($i43);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 13336)), $mul.ref(12432, 1));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p1);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $i50 := zd_reg2alpha2($i48, $p49);
    call {:si_unique_call 1569} {:cexpr "r"} boogie_si_record_i32($i50);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p1);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $i55 := regulatory_hint($p53, $p54);
    call {:si_unique_call 1571} {:cexpr "r"} boogie_si_record_i32($i55);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i11 := $i55;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} zd_chip_disable_int($p5);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i51 == 1;
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i11 := $i50;
    goto $bb7;

  $bb18:
    assume $i44 == 1;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i11 := $i43;
    goto $bb7;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i11 := $i36;
    goto $bb7;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, .str.1);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p20, .str.30);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p21, .str.31);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p22, .str.4);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.5, $p24);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 249);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p24, $i27);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p28, 1);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.6, $p29);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 1558} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} dump_stack();
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} vslice_dummy_var_227 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.31, 249, .str.32);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb7;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const zd_chip_init_hw: ref;

axiom zd_chip_init_hw == $sub.ref(0, 682320);

procedure zd_chip_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.46, $M.42, $CurrAddr, assertsPassed, $M.29, $M.30, $M.37, $M.54, $M.62, $M.27, $M.53, $M.19, $M.20, $M.57, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.41, $M.8, $M.45, $M.48, $M.49;



implementation zd_chip_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i10: i32;
  var $p39: ref;
  var vslice_dummy_var_228: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} vslice_dummy_var_228 := dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.28);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} ldv_mutex_lock_30($p7);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} $i8 := test_init($p0);
    call {:si_unique_call 1576} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $i11 := zd_iowrite32_locked($p0, 1, $sub.i16(0, 27064));
    call {:si_unique_call 1579} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $i13 := read_fw_regs_offset($p0);
    call {:si_unique_call 1581} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $i15 := zd_iowrite32_locked($p0, 0, $sub.i16(0, 27624));
    call {:si_unique_call 1583} {:cexpr "r"} boogie_si_record_i32($i15);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $i17 := zd_iowrite32_locked($p0, 8324159, $sub.i16(0, 26896));
    call {:si_unique_call 1585} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $i19 := set_mandatory_rates($p0, 1);
    call {:si_unique_call 1587} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} $i21 := disable_hwint($p0);
    call {:si_unique_call 1589} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $i23 := read_pod($p0, $p1);
    call {:si_unique_call 1591} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $i25 := hw_init($p0);
    call {:si_unique_call 1593} {:cexpr "r"} boogie_si_record_i32($i25);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11272, 1));
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.46, $p1);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} $i31 := zd_rf_init_hw($p27, $i30);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    call {:si_unique_call 1595} {:cexpr "r"} boogie_si_record_i32($i31);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $i33 := print_fw_version($p0);
    call {:si_unique_call 1597} {:cexpr "r"} boogie_si_record_i32($i33);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} dump_fw_registers($p0);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $i35 := test_init($p0);
    call {:si_unique_call 1600} {:cexpr "r"} boogie_si_record_i32($i35);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $i37 := read_cal_int_tables($p0);
    call {:si_unique_call 1602} {:cexpr "r"} boogie_si_record_i32($i37);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} print_id($p0);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i10 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} ldv_mutex_unlock_31($p39);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i38 == 1;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i10 := $i37;
    goto $bb3;

  $bb35:
    assume $i36 == 1;
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i10 := $i35;
    goto $bb3;

  $bb32:
    assume $i34 == 1;
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i10 := $i33;
    goto $bb3;

  $bb29:
    assume $i32 == 1;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i10 := $i31;
    goto $bb3;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i26 == 1;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i10 := $i25;
    goto $bb3;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i10 := $i23;
    goto $bb3;

  $bb20:
    assume $i22 == 1;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i10 := $i21;
    goto $bb3;

  $bb17:
    assume $i20 == 1;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb3;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i10 := $i15;
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  SeqInstr_412:
    assume !assertsPassed;
    return;
}



const zd_read_regdomain: ref;

axiom zd_read_regdomain == $sub.ref(0, 683352);

procedure zd_read_regdomain($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.23, $M.45, $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed, $M.27, $M.0;



implementation zd_read_regdomain($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i7: i32;
  var vslice_dummy_var_229: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} ldv_mutex_lock_22($p3);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $i4 := zd_ioread32_locked($p0, $p2, $sub.i16(0, 2025));
    call {:si_unique_call 1607} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} ldv_mutex_unlock_23($p5);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i4, 0);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.23, $p2);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i8, 16);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $M.45 := $store.i8($M.45, $p1, $i10);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.45, $p1);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} vslice_dummy_var_229 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p14, .str.16, .str.17, $i16);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const zd_set_encryption_type: ref;

axiom zd_set_encryption_type == $sub.ref(0, 684384);

procedure zd_set_encryption_type($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.0, assertsPassed, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30;



implementation zd_set_encryption_type($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} {:cexpr "zd_set_encryption_type:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $i2 := zd_iowrite32($p0, $sub.i16(0, 27016), $i1);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    call {:si_unique_call 1612} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;
}



const zd_reg2alpha2: ref;

axiom zd_reg2alpha2 == $sub.ref(0, 685416);

procedure zd_reg2alpha2($i0: i8, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.48, $M.49;



implementation zd_reg2alpha2($i0: i8, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} {:cexpr "zd_reg2alpha2:arg:regdomain"} boogie_si_record_i8($i0);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i0);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.47, reg_alpha2_map);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, $i3);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p5 := reg_alpha2_map;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i0);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i14, $i15);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(1, 8));
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i0);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i17, $i18);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(2, 8));
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i0);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i20, $i21);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(3, 8));
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i0);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i23, $i24);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(4, 8));
    assume {:branchcond $i25} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i0);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i26, $i27);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(5, 8));
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i0);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i29, $i30);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(6, 8));
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i0);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i32, $i33);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(7, 8));
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.47, $p7);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $p1, $i8);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.47, $p10);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p12, $i11);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb4;
}



const regulatory_hint: ref;

axiom regulatory_hint == $sub.ref(0, 686448);

procedure regulatory_hint($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation regulatory_hint($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1614} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1615} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_22: ref;

axiom ldv_mutex_lock_22 == $sub.ref(0, 687480);

procedure ldv_mutex_lock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} mutex_lock($p0);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 688512);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} mutex_unlock($p0);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_30: ref;

axiom ldv_mutex_lock_30 == $sub.ref(0, 689544);

procedure ldv_mutex_lock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} mutex_lock($p0);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;
}



const test_init: ref;

axiom test_init == $sub.ref(0, 690576);

procedure test_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.27, $M.0;



implementation test_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $i1 := dump_cr($p0, $sub.i16(0, 27064), .str.110);
    call {:si_unique_call 1623} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $i4 := dump_cr($p0, $sub.i16(0, 27624), .str.111);
    call {:si_unique_call 1625} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $i6 := dump_cr($p0, $sub.i16(0, 27376), .str.112);
    call {:si_unique_call 1627} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const read_fw_regs_offset: ref;

axiom read_fw_regs_offset == $sub.ref(0, 691608);

procedure read_fw_regs_offset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.24, $M.27, $M.0;



implementation read_fw_regs_offset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i29: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} $i3 := mutex_is_locked($p2);
    call {:si_unique_call 1630} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1632} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11504, 1));
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $i27 := zd_ioread16_locked($p0, $p26, $sub.i16(0, 4579));
    call {:si_unique_call 1638} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11504, 1));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} vslice_dummy_var_231 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p33, .str.117, .str.116, $i36);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str.1);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.116);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.3);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.4);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.5, $p14);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 1147);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p14, $i17);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 1);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 1634} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} dump_stack();
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} vslice_dummy_var_230 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.3, 1147, .str.10);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const set_mandatory_rates: ref;

axiom set_mandatory_rates == $sub.ref(0, 692640);

procedure set_mandatory_rates($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.29, $M.30;



implementation set_mandatory_rates($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var vslice_dummy_var_232: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1641} {:cexpr "set_mandatory_rates:arg:gmode"} boogie_si_record_i32($i1);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 1643} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1645} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i1, 0);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := 5391;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $i29 := zd_iowrite32_locked($p0, $i28, $sub.i16(0, 27084));
    call {:si_unique_call 1651} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i28 := 15;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.1);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.118);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.3);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.4);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 1086);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 1);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1647} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} dump_stack();
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} vslice_dummy_var_232 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 1086, .str.10);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const read_pod: ref;

axiom read_pod == $sub.ref(0, 693672);

procedure read_pod($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.46, $M.0, $CurrAddr, $M.27;



implementation read_pod($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $i48: i16;
  var $i49: i16;
  var $i50: i16;
  var $i51: i16;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $p59: ref;
  var $i60: i16;
  var $i61: i16;
  var $i62: i16;
  var $i63: i16;
  var $i64: i16;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $p72: ref;
  var $i73: i16;
  var $i74: i16;
  var $i75: i16;
  var $i76: i16;
  var $i77: i16;
  var $i78: i16;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i8;
  var $p85: ref;
  var $i86: i16;
  var $i87: i16;
  var $i88: i16;
  var $i89: i16;
  var $i90: i16;
  var $i91: i16;
  var $i92: i32;
  var $i93: i32;
  var $i94: i8;
  var $p95: ref;
  var $i96: i16;
  var $i97: i16;
  var $i98: i16;
  var $i99: i16;
  var $i100: i16;
  var $i101: i16;
  var $i102: i32;
  var $i103: i32;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $i107: i8;
  var $p108: ref;
  var $i109: i16;
  var $i110: i16;
  var $i111: i16;
  var $i112: i16;
  var $i113: i16;
  var $i114: i16;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i16;
  var $p120: ref;
  var $p121: ref;
  var $i122: i16;
  var $i123: i16;
  var $i124: i16;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i16;
  var $i133: i16;
  var $i134: i8;
  var $i135: i32;
  var $i136: i8;
  var $p137: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i8;
  var $i143: i32;
  var $p144: ref;
  var $i145: i16;
  var $i146: i16;
  var $i147: i8;
  var $i148: i32;
  var $p149: ref;
  var $i150: i16;
  var $i151: i16;
  var $i152: i16;
  var $i153: i8;
  var $i154: i32;
  var $p155: ref;
  var $i156: i16;
  var $i157: i16;
  var $i158: i16;
  var $i159: i8;
  var $i160: i32;
  var $p161: ref;
  var $i162: i16;
  var $i163: i16;
  var $i164: i16;
  var $i165: i8;
  var $i166: i32;
  var $p167: ref;
  var $i168: i16;
  var $i169: i16;
  var $i170: i16;
  var $i171: i8;
  var $i172: i32;
  var $p173: ref;
  var $i174: i16;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $p178: ref;
  var $i179: i16;
  var $i180: i16;
  var $i181: i16;
  var $i182: i8;
  var $i183: i32;
  var $p186: ref;
  var $i187: i16;
  var $i188: i16;
  var $p189: ref;
  var $i190: i16;
  var $i191: i16;
  var $p192: ref;
  var $i193: i16;
  var $i194: i16;
  var $p195: ref;
  var $i196: i16;
  var $i197: i16;
  var $p198: ref;
  var $i199: i16;
  var $i200: i16;
  var $i185: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 1655} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1657} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $i28 := zd_ioread32_locked($p0, $p2, $sub.i16(0, 2023));
    call {:si_unique_call 1663} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.23, $p2);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} vslice_dummy_var_234 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p33, .str.120, .str.119, $i34);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.23, $p2);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 15);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p1, $i40);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.23, $p2);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i42 := $lshr.i32($i41, 16);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 15);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i16($i46);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p47);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i50 := $and.i16($i48, 15);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i51 := $and.i16($i49, $sub.i16(0, 16));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i52 := $or.i16($i51, $i50);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $i52);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.23, $p2);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i54 := $lshr.i32($i53, 8);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 1);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i16($i58);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p59);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i62 := $and.i16($i60, 1);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i63 := $shl.i16($i62, 4);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i64 := $and.i16($i61, $sub.i16(0, 17));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i65 := $or.i16($i64, $i63);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $i65);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.23, $p2);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i67 := $lshr.i32($i66, 13);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 1);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i16($i71);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.0, $p72);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i75 := $and.i16($i73, 1);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i76 := $shl.i16($i75, 5);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i77 := $and.i16($i74, $sub.i16(0, 33));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i78 := $or.i16($i77, $i76);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $i78);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.23, $p2);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i80 := $lshr.i32($i79, 21);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 1);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i16($i84);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p85);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i88 := $and.i16($i86, 1);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i89 := $shl.i16($i88, 6);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i90 := $and.i16($i87, $sub.i16(0, 65));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i91 := $or.i16($i90, $i89);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, $i91);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.23, $p2);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i93 := $lshr.i32($i92, 31);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i8($i93);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i16($i94);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.0, $p95);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i98 := $and.i16($i96, 1);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i99 := $shl.i16($i98, 7);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i100 := $and.i16($i97, $sub.i16(0, 129));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i101 := $or.i16($i100, $i99);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, $i101);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.23, $p2);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i103 := $lshr.i32($i102, 7);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 1);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i16($i107);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.0, $p108);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i111 := $and.i16($i109, 1);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i112 := $shl.i16($i111, 8);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i113 := $and.i16($i110, $sub.i16(0, 257));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i114 := $or.i16($i113, $i112);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p108, $i114);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.23, $p2);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 16);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i118 := (if $i117 == 1 then 256 else 512);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i118);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p120, $i119);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.0, $p121);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i123 := $and.i16($i122, $sub.i16(0, 513));
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i124 := $or.i16($i123, 512);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p121, $i124);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.23, $p2);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 16777216);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.46, $p1);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i134);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i8($i135);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} $p137 := zd_rf_name($i136);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p140, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.46, $p1);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i142);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i145 := $load.i16($M.0, $p144);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i146 := $and.i16($i145, 15);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i16.i8($i146);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i150 := $load.i16($M.0, $p149);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i151 := $lshr.i16($i150, 4);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i152 := $and.i16($i151, 1);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i16.i8($i152);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i156 := $load.i16($M.0, $p155);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i157 := $lshr.i16($i156, 5);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i158 := $and.i16($i157, 1);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i16.i8($i158);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i162 := $load.i16($M.0, $p161);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i163 := $lshr.i16($i162, 6);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i164 := $and.i16($i163, 1);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i16.i8($i164);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i32($i165);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i168 := $load.i16($M.0, $p167);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i169 := $lshr.i16($i168, 7);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i170 := $and.i16($i169, 1);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i16.i8($i170);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i174 := $load.i16($M.0, $p173);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i175 := $zext.i16.i32($i174);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 256);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i177 := (if $i176 == 1 then 1 else 2);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i179 := $load.i16($M.0, $p178);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i180 := $lshr.i16($i179, 9);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i181 := $and.i16($i180, 1);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i16.i8($i181);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i182);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} vslice_dummy_var_235 := dev_printk.ref.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32(.str.6, $p141, .str.121, .str.119, $p137, $i143, $i148, $i154, $i160, $i166, $i172, $i177, $i183);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i185 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $r := $i185;
    return;

  $bb11:
    assume $i127 == 1;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.23, $p2);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 536870912);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i130 == 1;
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i132 := $load.i16($M.0, $p131);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i133 := $and.i16($i132, $sub.i16(0, 513));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p131, $i133);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p1, 0);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i187 := $load.i16($M.0, $p186);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i188 := $and.i16($i187, $sub.i16(0, 16));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p186, $i188);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i190 := $load.i16($M.0, $p189);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i191 := $and.i16($i190, $sub.i16(0, 17));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p189, $i191);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i193 := $load.i16($M.0, $p192);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i194 := $and.i16($i193, $sub.i16(0, 33));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p192, $i194);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i196 := $load.i16($M.0, $p195);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i197 := $and.i16($i196, $sub.i16(0, 65));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p195, $i197);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i199 := $load.i16($M.0, $p198);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i200 := $and.i16($i199, $sub.i16(0, 129));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p198, $i200);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i185 := $i28;
    goto $bb17;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.1);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.119);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.3);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.4);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 375);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 1);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1659} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} dump_stack();
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} vslice_dummy_var_233 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.3, 375, .str.10);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const hw_init: ref;

axiom hw_init == $sub.ref(0, 694704);

procedure hw_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.29, $M.30, $M.22, $M.24, $M.23, $M.37, $CurrAddr, $M.27;



implementation hw_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i33: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} vslice_dummy_var_236 := dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.122);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $i8 := mutex_is_locked($p7);
    call {:si_unique_call 1670} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1672} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $i31 := hw_reset_phy($p0);
    call {:si_unique_call 1678} {:cexpr "r"} boogie_si_record_i32($i31);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} $i34 := hw_init_hmac($p0);
    call {:si_unique_call 1680} {:cexpr "r"} boogie_si_record_i32($i34);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} $i36 := set_beacon_interval($p0, 100, 0, 0);
    call {:si_unique_call 1682} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i33 := $i36;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i33 := $i34;
    goto $bb9;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, .str.1);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p15, .str.122);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p16, .str.3);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p17, .str.4);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.5, $p19);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 988);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p19, $i22);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p23, 1);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.6, $p24);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 1674} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} dump_stack();
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i29 == 1;
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} vslice_dummy_var_237 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.3, 988, .str.10);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_rf_init_hw: ref;

axiom zd_rf_init_hw == $sub.ref(0, 695736);

procedure zd_rf_init_hw($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.22, $M.24, $M.23, $M.30, $M.29, $M.54, $M.62, $CurrAddr, $M.27, $M.19, $M.20, $M.57, $M.26, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.41, $M.8, assertsPassed, $M.45, $M.48, $M.49, $M.46, $M.42, $M.37, $M.53;



implementation zd_rf_init_hw($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p52: ref;
  var $i39: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i53: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1684} {:cexpr "zd_rf_init_hw:arg:type"} boogie_si_record_i8($i1);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} $p3 := zd_rf_to_chip($p0);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 1687} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1689} {:cexpr "tmp___2"} boogie_si_record_i64($i9);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i28, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i28, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i28, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i1);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} $p45 := zd_rf_name($i44);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i1);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} vslice_dummy_var_239 := dev_err.ref.ref.ref.i32($p49, .str.50, $p45, $i50);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 0);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 19);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} $i38 := zd_rf_init_rf2959($p0);
    call {:si_unique_call 1697} {:cexpr "r"} boogie_si_record_i32($i38);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i39, 0);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i1);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} $i56 := zd_chip_lock_phy_regs($p3);
    call {:si_unique_call 1705} {:cexpr "r"} boogie_si_record_i32($i56);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    call {:si_unique_call 1706} $i60 := devirtbounce.6($p59, $p0);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    call {:si_unique_call 1707} {:cexpr "t"} boogie_si_record_i32($i60);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} $i61 := zd_chip_unlock_phy_regs($p3);
    call {:si_unique_call 1709} {:cexpr "r"} boogie_si_record_i32($i61);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i60, 0);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $i61;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i53 := $i63;
    goto $bb31;

  $bb38:
    assume $i62 == 1;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i63 := $i60;
    goto $bb40;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i57 == 1;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i53 := $i56;
    goto $bb31;

  $bb32:
    assume $i54 == 1;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i53 := $i39;
    goto $bb31;

  $bb13:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i28, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb18, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $i40 := zd_rf_init_al2230($p0);
    call {:si_unique_call 1699} {:cexpr "r"} boogie_si_record_i32($i40);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb29;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} $i42 := zd_rf_init_uw2453($p0);
    call {:si_unique_call 1695} {:cexpr "r"} boogie_si_record_i32($i42);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i39 := $i42;
    goto $bb29;

  $bb8:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i28, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i28, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb23:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i28, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb17;

  $bb25:
    assume $i36 == 1;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} $i41 := zd_rf_init_al7230b($p0);
    call {:si_unique_call 1701} {:cexpr "r"} boogie_si_record_i32($i41);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i39 := $i41;
    goto $bb29;

  $bb21:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i28, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb17;

  $bb27:
    assume $i37 == 1;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.1);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.48);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.49);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.4);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 116);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 1);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1691} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} dump_stack();
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} vslice_dummy_var_238 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.49, 116, .str.10);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const print_fw_version: ref;

axiom print_fw_version == $sub.ref(0, 696768);

procedure print_fw_version($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.24, $M.27, $M.0;



implementation print_fw_version($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i12: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} $p2 := zd_chip_to_mac($p0);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} $i7 := fw_reg_addr($p0, 0);
    call {:si_unique_call 1713} {:cexpr "tmp___0"} boogie_si_record_i16($i7);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} $i10 := zd_ioread16_locked($p0, $p1, $i9);
    call {:si_unique_call 1715} {:cexpr "r"} boogie_si_record_i32($i10);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.50, $p1);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} vslice_dummy_var_240 := _dev_info.ref.ref.i32($p16, .str.130, $i18);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 1416)), $mul.ref(109, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.50, $p1);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} vslice_dummy_var_241 := snprintf.ref.i64.ref.i32($p21, 32, .str.131, $i23);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;
}



const dump_fw_registers: ref;

axiom dump_fw_registers == $sub.ref(0, 697800);

procedure dump_fw_registers($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.27, $M.0, $CurrAddr;



implementation dump_fw_registers($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i16;
  var $i5: i16;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $i3 := fw_reg_addr($p0, 0);
    call {:si_unique_call 1721} {:cexpr "tmp"} boogie_si_record_i16($i3);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $i4 := fw_reg_addr($p0, 1);
    call {:si_unique_call 1723} {:cexpr "tmp___0"} boogie_si_record_i16($i4);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} $i5 := fw_reg_addr($p0, 2);
    call {:si_unique_call 1725} {:cexpr "tmp___1"} boogie_si_record_i16($i5);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} $i6 := fw_reg_addr($p0, 3);
    call {:si_unique_call 1727} {:cexpr "tmp___2"} boogie_si_record_i16($i6);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 2));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $M.24 := $store.i16($M.24, $p7, $i3);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 2));
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $M.24 := $store.i16($M.24, $p8, $i4);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(2, 2));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $M.24 := $store.i16($M.24, $p9, $i5);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(3, 2));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.24 := $store.i16($M.24, $p10, $i6);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} $i13 := zd_ioread16v_locked($p0, $p11, $p12, 4);
    call {:si_unique_call 1729} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 2));
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.25, $p24);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} vslice_dummy_var_243 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p23, .str.134, .str.133, $i26);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 2));
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.25, $p32);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} vslice_dummy_var_244 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p31, .str.135, .str.133, $i34);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 2));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.25, $p40);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} vslice_dummy_var_245 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p39, .str.136, .str.133, $i42);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(3, 2));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.25, $p48);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} vslice_dummy_var_246 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p47, .str.137, .str.133, $i50);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} vslice_dummy_var_242 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p18, .str.132, .str.133, $i13);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const read_cal_int_tables: ref;

axiom read_cal_int_tables == $sub.ref(0, 698832);

procedure read_cal_int_tables($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $CurrAddr, $M.27;



implementation read_cal_int_tables($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} $i1 := read_pwr_cal_values($p0);
    call {:si_unique_call 1736} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $i4 := read_pwr_int_values($p0);
    call {:si_unique_call 1738} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $i6 := read_ofdm_cal_values($p0);
    call {:si_unique_call 1740} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const print_id: ref;

axiom print_id == $sub.ref(0, 699864);

procedure print_id($p0: ref);
  free requires assertsPassed;
  modifies $M.42, $CurrAddr;



implementation print_id($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $p1 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} vslice_dummy_var_247 := scnprint_id($p0, $p2, 80);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(79, 1));
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p4, 0);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} vslice_dummy_var_248 := _dev_info.ref.ref.ref($p8, .str.139, $p9);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_31: ref;

axiom ldv_mutex_unlock_31 == $sub.ref(0, 700896);

procedure ldv_mutex_unlock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} mutex_unlock($p0);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;
}



const scnprint_id: ref;

axiom scnprint_id == $sub.ref(0, 701928);

procedure scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i16;
  var $i45: i16;
  var $i46: i8;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} {:cexpr "scnprint_id:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} $i3 := zd_chip_is_zd1211b($p0);
    call {:si_unique_call 1748} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p5 := (if $i4 == 1 then .str.141 else .str.142);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $i6 := scnprintf.ref.i64.ref.ref($p1, $i2, .str.140, $p5);
    call {:si_unique_call 1750} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref($i8, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i6);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i2, $i10);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} $i12 := zd_usb_scnprint_id($p7, $p9, $i11);
    call {:si_unique_call 1752} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i6);
    call {:si_unique_call 1753} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref($i14, 1));
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i13);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64($i2, $i16);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} $i18 := scnprintf.ref.i64.ref($p15, $i17, .str.143);
    call {:si_unique_call 1755} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, $i13);
    call {:si_unique_call 1756} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p1, $mul.ref($i20, 1));
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i19);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($i2, $i22);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} $i24 := scnprint_mac_oui($p0, $p21, $i23);
    call {:si_unique_call 1758} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, $i19);
    call {:si_unique_call 1759} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p1, $mul.ref($i26, 1));
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i25);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i29 := $sub.i64($i2, $i28);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} $i30 := scnprintf.ref.i64.ref($p27, $i29, .str.143);
    call {:si_unique_call 1761} {:cexpr "tmp___3"} boogie_si_record_i32($i30);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, $i25);
    call {:si_unique_call 1762} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11272, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i31);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p1, $mul.ref($i33, 1));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i31);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i36 := $sub.i64($i2, $i35);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} $i37 := zd_rf_scnprint_id($p32, $p34, $i36);
    call {:si_unique_call 1764} {:cexpr "tmp___4"} boogie_si_record_i32($i37);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, $i31);
    call {:si_unique_call 1765} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p1, $mul.ref($i39, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i38);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i42 := $sub.i64($i2, $i41);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i45 := $and.i16($i44, 15);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i16.i8($i45);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(11578, 1));
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i53 := (if $i52 == 1 then 103 else 45);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p0);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(11578, 1));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i59 := (if $i58 == 1 then 55 else 45);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p0);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(11578, 1));
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i65 := (if $i64 == 1 then 54 else 45);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(11578, 1));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i71 := (if $i70 == 1 then 78 else 45);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p0);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(11579, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i77 := (if $i76 == 1 then 83 else 45);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} $i78 := scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32($p40, $i42, .str.144, $i47, $i53, $i59, $i65, $i71, $i77);
    call {:si_unique_call 1767} {:cexpr "tmp___5"} boogie_si_record_i32($i78);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, $i38);
    call {:si_unique_call 1768} {:cexpr "i"} boogie_si_record_i32($i79);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $r := $i79;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 702960);

procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1769} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1770} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1771} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1772} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1773} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1774} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1775} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1776} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const scnprintf: ref;

axiom scnprintf == $sub.ref(0, 703992);

procedure scnprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1777} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1778} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1779} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.i32.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1780} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1781} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1782} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1783} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1784} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1785} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1786} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1787} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1788} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1789} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1790} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1791} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1792} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1793} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1794} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const zd_usb_scnprint_id: ref;

axiom zd_usb_scnprint_id == $sub.ref(0, 705024);

procedure zd_usb_scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation zd_usb_scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} {:cexpr "zd_usb_scnprint_id:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} $p5 := interface_to_usbdev($p4);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} $i6 := scnprint_id___0($p5, $p1, $i2);
    call {:si_unique_call 1798} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const scnprint_mac_oui: ref;

axiom scnprint_mac_oui == $sub.ref(0, 706056);

procedure scnprint_mac_oui($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprint_mac_oui($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} {:cexpr "scnprint_mac_oui:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $p3 := zd_chip_to_mac($p0);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} $p4 := zd_mac_get_perm_addr($p3);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.9, $p4);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p4, $mul.ref(1, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.9, $p7);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p4, $mul.ref(2, 1));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.9, $p10);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} $i13 := scnprintf.ref.i64.ref.i32.i32.i32($p1, $i2, .str.145, $i6, $i9, $i12);
    call {:si_unique_call 1803} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const zd_rf_scnprint_id: ref;

axiom zd_rf_scnprint_id == $sub.ref(0, 707088);

procedure zd_rf_scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation zd_rf_scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} {:cexpr "zd_rf_scnprint_id:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} $p7 := zd_rf_name($i6);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} $i8 := scnprintf.ref.i64.ref.ref($p1, $i2, .str.51, $p7);
    call {:si_unique_call 1807} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const zd_rf_name: ref;

axiom zd_rf_name == $sub.ref(0, 708120);

procedure zd_rf_name($i0: i8) returns ($r: ref);
  free requires assertsPassed;



implementation zd_rf_name($i0: i8) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i8;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} {:cexpr "zd_rf_name:arg:type"} boogie_si_record_i8($i0);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 240);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref($i6, 8));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.51, $p7);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const zd_mac_get_perm_addr: ref;

axiom zd_mac_get_perm_addr == $sub.ref(0, 709152);

procedure zd_mac_get_perm_addr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_mac_get_perm_addr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.9, $p3);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1416)), $mul.ref(0, 1));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const scnprint_id___0: ref;

axiom scnprint_id___0 == $sub.ref(0, 710184);

procedure scnprint_id___0($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprint_id___0($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} {:cexpr "scnprint_id___0:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(28, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} $p5 := speed($i4);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} $i6 := get_bcdDevice($p0);
    call {:si_unique_call 1812} {:cexpr "tmp___0"} boogie_si_record_i16($i6);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(10, 1));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i6);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $i16 := scnprintf.ref.i64.ref.i32.i32.i32.ref($p1, $i2, .str.244, $i10, $i14, $i15, $p5);
    call {:si_unique_call 1814} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const speed: ref;

axiom speed == $sub.ref(0, 711216);

procedure speed($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation speed($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    call {:si_unique_call 1815} {:cexpr "speed:arg:speed___0"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p5 := .str.248;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p5 := .str.247;
    goto $bb11;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p5 := .str.246;
    goto $bb11;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p5 := .str.245;
    goto $bb11;
}



const get_bcdDevice: ref;

axiom get_bcdDevice == $sub.ref(0, 712248);

procedure get_bcdDevice($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation get_bcdDevice($p0: ref) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(12, 1));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const read_pwr_cal_values: ref;

axiom read_pwr_cal_values == $sub.ref(0, 713280);

procedure read_pwr_cal_values($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $CurrAddr, $M.27;



implementation read_pwr_cal_values($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11506, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} $i3 := read_values($p0, $p2, 14, $sub.i16(0, 2017), 0);
    call {:si_unique_call 1817} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const read_pwr_int_values: ref;

axiom read_pwr_int_values == $sub.ref(0, 714312);

procedure read_pwr_int_values($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $CurrAddr, $M.27;



implementation read_pwr_int_values($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11520, 1));
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} $i3 := read_values($p0, $p2, 14, $sub.i16(0, 2009), 8);
    call {:si_unique_call 1819} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const read_ofdm_cal_values: ref;

axiom read_ofdm_cal_values == $sub.ref(0, 715344);

procedure read_ofdm_cal_values($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $CurrAddr, $M.27;



implementation read_ofdm_cal_values($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 2));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $M.53 := $store.i16($M.53, $p2, $sub.i16(0, 1985));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 2));
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $M.53 := $store.i16($M.53, $p3, $sub.i16(0, 1969));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 2));
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $M.53 := $store.i16($M.53, $p4, $sub.i16(0, 1953));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 2));
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.53, $p7);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} $i11 := read_values($p0, $p6, 14, $i10, 0);
    call {:si_unique_call 1822} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1));
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(1, 1));
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 2));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.53, $p18);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} $i22 := read_values($p0, $p17, 14, $i21, 0);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i13 := $i22;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1));
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(2, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 2));
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.53, $p27);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} $i31 := read_values($p0, $p26, 14, $i30, 0);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i13 := $i31;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb4;
}



const read_values: ref;

axiom read_values == $sub.ref(0, 716376);

procedure read_values($p0: ref, $p1: ref, $i2: i64, $i3: i16, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $CurrAddr, $M.27;



implementation read_values($p0: ref, $p1: ref, $i2: i64, $i3: i16, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $i37: i32;
  var $i35: i32;
  var $i36: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i64;
  var $i43: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i8;
  var $i66: i64;
  var $p67: ref;
  var $i44: i32;
  var $i68: i64;
  var $i69: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i8;
  var $i76: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $i80: i1;
  var $i70: i32;
  var $i81: i32;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i16;
  var $i86: i32;
  var $i87: i1;
  var $i38: i32;
  var vslice_dummy_var_249: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1827} {:cexpr "read_values:arg:count"} boogie_si_record_i64($i2);
    call {:si_unique_call 1828} {:cexpr "read_values:arg:e2p_addr"} boogie_si_record_i16($i3);
    call {:si_unique_call 1829} {:cexpr "read_values:arg:guard"} boogie_si_record_i32($i4);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} $i8 := mutex_is_locked($p7);
    call {:si_unique_call 1831} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1833} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i3);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} $i33 := zd_ioread32_locked($p0, $p5, $i32);
    call {:si_unique_call 1839} {:cexpr "r"} boogie_si_record_i32($i33);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i35 := $i33;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i34 == 1);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb10;

  $bb10:
    call $i37, $i36, $i39, $i40, $i41, $i42, $i43, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i66, $p67, $i44, $i81, $i82, $i83, $i84, $i85, $i86, $i87 := read_values_loop_$bb10($p0, $p1, $i2, $i4, $p5, $i31, $i37, $i36, $i39, $i40, $i41, $i42, $i43, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i66, $p67, $i44, $i81, $i82, $i83, $i84, $i85, $i86, $i87);
    goto $bb10_last;

  $bb13:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.23, $p5);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, $i4);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p5, $i40);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i36, 4);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i43 := $ult.i64($i42, $i2);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i44 := $i36;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i44);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i69 := $ult.i64($i68, $i2);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb18:
    assume $i69 == 1;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i70 := $i44;
    goto $bb21;

  $bb21:
    call $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i70 := read_values_loop_$bb21($p1, $i2, $p5, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i70);
    goto $bb21_last;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.23, $p5);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i72 := $srem.i32($i70, 3);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i73 := $mul.i32($i72, 8);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i74 := $lshr.i32($i71, $i73);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i70);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p1, $mul.ref($i76, 1));
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $i75);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i70, 1);
    call {:si_unique_call 1846} {:cexpr "i"} boogie_si_record_i32($i78);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i78);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i80 := $ult.i64($i79, $i2);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i80 == 1);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i70 := $i78;
    goto $bb23_dummy;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i36, 1);
    call {:si_unique_call 1840} {:cexpr "i"} boogie_si_record_i32($i45);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.23, $p5);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i36);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p1, $mul.ref($i48, 1));
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i47);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i45, 1);
    call {:si_unique_call 1841} {:cexpr "i"} boogie_si_record_i32($i50);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.23, $p5);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i52 := $lshr.i32($i51, 8);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i45);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p1, $mul.ref($i54, 1));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i53);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i50, 1);
    call {:si_unique_call 1842} {:cexpr "i"} boogie_si_record_i32($i56);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.23, $p5);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i58 := $lshr.i32($i57, 16);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i50);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p1, $mul.ref($i60, 1));
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i59);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i56, 1);
    call {:si_unique_call 1843} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.23, $p5);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i64 := $lshr.i32($i63, 24);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i56);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p1, $mul.ref($i66, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i65);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i81 := $sdiv.i32($i62, 2);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, $i31);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} $i86 := zd_ioread32_locked($p0, $p5, $i85);
    call {:si_unique_call 1845} {:cexpr "r"} boogie_si_record_i32($i86);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i37 := $i86;
    assume true;
    goto $bb11, $bb26;

  $bb26:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i62;
    goto $bb26_dummy;

  $bb11:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i35 := $i37;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i38 := $i35;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb8;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, .str.1);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p15, .str.138);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p16, .str.3);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p17, .str.4);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.5, $p19);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 488);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p19, $i22);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p23, 1);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.6, $p24);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 1835} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} dump_stack();
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i29 == 1;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} vslice_dummy_var_249 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p6, .str.4, .str.3, 488, .str.10);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7359;

  $bb26_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;
}



const zd_ioread16_locked: ref;

axiom zd_ioread16_locked == $sub.ref(0, 717408);

procedure zd_ioread16_locked($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.27, $M.0, $CurrAddr;



implementation zd_ioread16_locked($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var vslice_dummy_var_250: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1848} {:cexpr "zd_ioread16_locked:arg:addr"} boogie_si_record_i16($i2);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 1850} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1852} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i2);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} $i31 := zd_usb_ioread16($p28, $p1, $i30);
    call {:si_unique_call 1858} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.1);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.104);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.101);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.4);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 820);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 1);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1854} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} dump_stack();
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} vslice_dummy_var_250 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.101, 820, .str.10);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 718440);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const zd_usb_ioread16: ref;

axiom zd_usb_ioread16 == $sub.ref(0, 719472);

procedure zd_usb_ioread16($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.27, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_usb_ioread16($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.24 := $store.i16($M.24, $p3, $i2);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} $i4 := zd_usb_ioread16v($p0, $p1, $p3, 1);
    call {:si_unique_call 1861} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const zd_rf_init_rf2959: ref;

axiom zd_rf_init_rf2959 == $sub.ref(0, 720504);

procedure zd_rf_init_rf2959($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_rf_init_rf2959($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i9: i32;
  var vslice_dummy_var_251: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} $p1 := zd_rf_to_chip($p0);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $i2 := zd_chip_is_zd1211b($p1);
    call {:si_unique_call 1864} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, rf2959_init_hw);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, rf2959_set_channel);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, rf2959_switch_radio_on);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, rf2959_switch_radio_off);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} vslice_dummy_var_251 := dev_err.ref.ref($p7, .str.47);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;
}



const zd_rf_init_al2230: ref;

axiom zd_rf_init_al2230 == $sub.ref(0, 721536);

procedure zd_rf_init_al2230($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_rf_init_al2230($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} $p1 := zd_rf_to_chip($p0);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, al2230_switch_radio_off);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $i3 := zd_chip_is_zd1211b($p1);
    call {:si_unique_call 1868} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, zd1211_al2230_init_hw);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, zd1211_al2230_set_channel);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, zd1211_al2230_switch_radio_on);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, zd_rf_generic_patch_6m);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, $sub.i8(0, 3));
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i15 := $or.i8($i14, 2);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i15);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, zd1211b_al2230_init_hw);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, zd1211b_al2230_set_channel);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, zd1211b_al2230_switch_radio_on);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_rf_init_al7230b: ref;

axiom zd_rf_init_al7230b == $sub.ref(0, 722568);

procedure zd_rf_init_al7230b($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_rf_init_al7230b($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} $p1 := zd_rf_to_chip($p0);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} $i2 := zd_chip_is_zd1211b($p1);
    call {:si_unique_call 1871} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, zd1211_al7230b_init_hw);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, zd1211_al7230b_switch_radio_on);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, zd1211_al7230b_set_channel);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, zd_rf_generic_patch_6m);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, $sub.i8(0, 3));
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i15 := $or.i8($i14, 2);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i15);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, al7230b_switch_radio_off);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, zd1211b_al7230b_init_hw);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, zd1211b_al7230b_switch_radio_on);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, zd1211b_al7230b_set_channel);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, zd1211b_al7230b_patch_6m);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_rf_init_uw2453: ref;

axiom zd_rf_init_uw2453 == $sub.ref(0, 723600);

procedure zd_rf_init_uw2453($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation zd_rf_init_uw2453($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, uw2453_init_hw);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, uw2453_set_channel);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, uw2453_switch_radio_on);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, uw2453_switch_radio_off);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, zd_rf_generic_patch_6m);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, uw2453_clear);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i9 := $and.i8($i8, $sub.i8(0, 2));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i9);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} $p10 := kmalloc(4, 208);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p10);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;
}



const uw2453_init_hw: ref;

axiom uw2453_init_hw == $sub.ref(0, 724632);

procedure uw2453_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.54, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.24, $M.27, $CurrAddr, $M.57;



implementation uw2453_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p110: ref;
  var $p112: ref;
  var $p114: ref;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $p136: ref;
  var $p138: ref;
  var $p140: ref;
  var $p142: ref;
  var $p144: ref;
  var $p146: ref;
  var $p148: ref;
  var $p150: ref;
  var $p152: ref;
  var $p154: ref;
  var $p156: ref;
  var $p158: ref;
  var $p160: ref;
  var $p162: ref;
  var $p164: ref;
  var $p166: ref;
  var $p168: ref;
  var $p170: ref;
  var $p172: ref;
  var $p174: ref;
  var $p176: ref;
  var $p178: ref;
  var $p180: ref;
  var $p182: ref;
  var $p184: ref;
  var $p186: ref;
  var $p188: ref;
  var $p190: ref;
  var $p192: ref;
  var $p194: ref;
  var $p196: ref;
  var $p198: ref;
  var $p200: ref;
  var $p202: ref;
  var $p204: ref;
  var $p206: ref;
  var $p208: ref;
  var $p210: ref;
  var $p212: ref;
  var $p214: ref;
  var $p216: ref;
  var $p218: ref;
  var $p220: ref;
  var $p222: ref;
  var $p224: ref;
  var $p226: ref;
  var $p228: ref;
  var $p230: ref;
  var $p232: ref;
  var $p234: ref;
  var $p236: ref;
  var $p238: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i32;
  var $i252: i1;
  var $p254: ref;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i32;
  var $i263: i1;
  var $i264: i32;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i32;
  var $i269: i1;
  var $i270: i32;
  var $i271: i16;
  var $i272: i32;
  var $i273: i32;
  var $i274: i1;
  var $i275: i32;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i281: i32;
  var $i282: i1;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $i288: i32;
  var $i289: i1;
  var $i290: i32;
  var $i291: i1;
  var $i292: i32;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $i297: i32;
  var $i253: i32;
  var $i298: i32;
  var $i299: i1;
  var $i300: i32;
  var $i301: i1;
  var $i302: i32;
  var $i303: i1;
  var $i304: i32;
  var $i305: i1;
  var $i306: i16;
  var $i307: i32;
  var $i308: i32;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i312: i32;
  var $i313: i1;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $i318: i16;
  var $i319: i32;
  var $i320: i32;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $i324: i32;
  var $i325: i1;
  var $i326: i32;
  var $i327: i1;
  var $i328: i32;
  var $i329: i1;
  var $i330: i16;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $i334: i32;
  var $i335: i1;
  var $i336: i32;
  var $i337: i1;
  var $i338: i32;
  var $i339: i1;
  var $i340: i32;
  var $i341: i1;
  var $i342: i16;
  var $i343: i32;
  var $i344: i32;
  var $i345: i1;
  var $i346: i32;
  var $i347: i1;
  var $i348: i32;
  var $i349: i1;
  var $i350: i32;
  var $i351: i1;
  var $i352: i32;
  var $i353: i1;
  var $i354: i16;
  var $i355: i32;
  var $i356: i32;
  var $i357: i1;
  var $i358: i32;
  var $i359: i1;
  var $i360: i32;
  var $i361: i1;
  var $i362: i32;
  var $i363: i1;
  var $i364: i32;
  var $i365: i1;
  var $i366: i16;
  var $i367: i32;
  var $i368: i32;
  var $i369: i1;
  var $i370: i32;
  var $i371: i1;
  var $i372: i32;
  var $i373: i1;
  var $i374: i32;
  var $i375: i1;
  var $i376: i32;
  var $i377: i1;
  var $i378: i16;
  var $i379: i32;
  var $i380: i32;
  var $i381: i1;
  var $i382: i32;
  var $i383: i1;
  var $i384: i32;
  var $i385: i1;
  var $i386: i32;
  var $i387: i1;
  var $i388: i32;
  var $i389: i1;
  var $i390: i16;
  var $i391: i32;
  var $i392: i32;
  var $i393: i1;
  var $i394: i32;
  var $i395: i1;
  var $i396: i32;
  var $i397: i1;
  var $i398: i32;
  var $i399: i1;
  var $i400: i32;
  var $i401: i1;
  var $i402: i16;
  var $i403: i32;
  var $i404: i32;
  var $i405: i1;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} $p2 := $alloc($mul.ref(236, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $p3 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} $p4 := zd_rf_to_chip($p0);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p6, $sub.i16(0, 28632));
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p8, 137);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p10, $sub.i16(0, 28612));
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p12, 32);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p14, $sub.i16(0, 28604));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p16, 40);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p18, $sub.i16(0, 28580));
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p20, 56);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p22, $sub.i16(0, 28576));
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p24, 32);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p26, $sub.i16(0, 28568));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p28, 147);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p30, $sub.i16(0, 28564));
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p32, 21);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p34, $sub.i16(0, 28560));
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p36, 62);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p38, $sub.i16(0, 28556));
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p40, 0);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p42, $sub.i16(0, 28540));
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p44, 40);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p46, $sub.i16(0, 28536));
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p48, 48);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p50, $sub.i16(0, 28532));
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p52, 67);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p54, $sub.i16(0, 28508));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p56, 36);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p58, $sub.i16(0, 28496));
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p60, 50);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p62, $sub.i16(0, 28488));
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p64, 146);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p66, $sub.i16(0, 28484));
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p68, 30);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p70, $sub.i16(0, 28480));
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p72, 4);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p74, $sub.i16(0, 28476));
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p76, 250);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p78, $sub.i16(0, 28356));
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p80, 88);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p82, $sub.i16(0, 28352));
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p84, 48);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p86, $sub.i16(0, 28348));
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p88, 48);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p90, $sub.i16(0, 28324));
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p92, 10);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p94, $sub.i16(0, 28316));
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p96, 4);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p98, $sub.i16(0, 28308));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p100, 0);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p102, $sub.i16(0, 28304));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p104, 10);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p106, $sub.i16(0, 28280));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p108, 141);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p110, $sub.i16(0, 28276));
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p112, 40);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p114, $sub.i16(0, 28272));
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p116, 2);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p118, $sub.i16(0, 28268));
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p120, 9);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p122, $sub.i16(0, 28264));
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p124, 39);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p126, $sub.i16(0, 28248));
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p128, 28);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p130, $sub.i16(0, 28244));
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p132, 28);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p134, $sub.i16(0, 28236));
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p136, 19);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p138, $sub.i16(0, 28232));
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p140, 31);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p142, $sub.i16(0, 28228));
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p144, 19);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p146, $sub.i16(0, 28224));
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p148, 31);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p150, $sub.i16(0, 28220));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p152, 39);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p154, $sub.i16(0, 28216));
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p156, 35);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p158, $sub.i16(0, 28212));
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p160, 36);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p162, $sub.i16(0, 28208));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p164, 36);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p166, $sub.i16(0, 28204));
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p168, 250);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p170, $sub.i16(0, 28200));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p172, 240);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p174, $sub.i16(0, 28196));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p176, 26);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p178, $sub.i16(0, 28192));
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p180, 79);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p182, $sub.i16(0, 28188));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p184, 31);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p186, $sub.i16(0, 28184));
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p188, 240);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p190, $sub.i16(0, 28180));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p192, 87);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p194, $sub.i16(0, 28172));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p196, 173);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p198, $sub.i16(0, 28168));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p200, 108);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p202, $sub.i16(0, 28164));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p204, 3);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p206, $sub.i16(0, 28160));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p208, 20);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p210, $sub.i16(0, 28156));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p212, 18);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p214, $sub.i16(0, 28152));
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p216, 16);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p218, $sub.i16(0, 28124));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p220, 80);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p222, $sub.i16(0, 28120));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p224, 168);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p226, $sub.i16(0, 28096));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p228, 172);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(56, 4)), $mul.ref(0, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p230, $sub.i16(0, 28088));
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(56, 4)), $mul.ref(2, 1));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p232, 32);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(57, 4)), $mul.ref(0, 1));
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p234, $sub.i16(0, 27664));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(57, 4)), $mul.ref(2, 1));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p236, 255);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(58, 4)), $mul.ref(0, 1));
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p238, $sub.i16(0, 27660));
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(58, 4)), $mul.ref(2, 1));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p240, 255);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(0, 4));
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p241, 4194347);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(1, 4));
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p242, 5348943);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(2, 4));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p243, 7307693);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(3, 4));
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p244, 7602174);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(4, 4));
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p245, 155548);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(5, 4));
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p246, 1048647);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(6, 4));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p247, 2099609);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(7, 4));
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p248, 3175938);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(8, 4));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p249, 3432547);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p250 := $bitcast.ref.ref($p2);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} $i251 := zd_iowrite16a_locked($p4, $p250, 59);
    call {:si_unique_call 1878} {:cexpr "r"} boogie_si_record_i32($i251);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i251, 0);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p3);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} $i255 := zd_rfwritev_locked($p4, $p254, 9, 24);
    call {:si_unique_call 1880} {:cexpr "r"} boogie_si_record_i32($i255);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $i257 := uw2453_init_mode($p4);
    call {:si_unique_call 1882} {:cexpr "r"} boogie_si_record_i32($i257);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} $i259 := uw2453_synth_set_channel($p4, 1, 0);
    call {:si_unique_call 1884} {:cexpr "r"} boogie_si_record_i32($i259);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i261 := $i259;
    assume {:branchcond $i260} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $i262 := uw2453_write_vco_cfg($p4, 26189);
    call {:si_unique_call 1886} {:cexpr "r"} boogie_si_record_i32($i262);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i264 := $i262;
    assume {:branchcond $i263} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} $i265 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    call {:si_unique_call 1888} {:cexpr "r"} boogie_si_record_i32($i265);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 0);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i267 := $i265;
    assume {:branchcond $i266} true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} $i268 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    call {:si_unique_call 1890} {:cexpr "r"} boogie_si_record_i32($i268);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i269 := $ne.i32($i268, 0);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i270 := $i268;
    assume {:branchcond $i269} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i271 := $load.i16($M.55, $p1);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i272 := $zext.i16.i32($i271);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i273 := $and.i32($i272, 15);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 0);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i275 := 0;
    assume {:branchcond $i274} true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} $i298 := uw2453_synth_set_channel($p4, 1, 0);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i261 := $i298;
    assume {:branchcond $i299} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} $i300 := uw2453_write_vco_cfg($p4, 26221);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i301 := $ne.i32($i300, 0);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i264 := $i300;
    assume {:branchcond $i301} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} $i302 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i303 := $ne.i32($i302, 0);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i267 := $i302;
    assume {:branchcond $i303} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} $i304 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i305 := $ne.i32($i304, 0);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i270 := $i304;
    assume {:branchcond $i305} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i306 := $load.i16($M.55, $p1);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i307 := $zext.i16.i32($i306);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i308 := $and.i32($i307, 15);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 0);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i275 := 1;
    assume {:branchcond $i309} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} $i310 := uw2453_synth_set_channel($p4, 1, 0);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i311 := $ne.i32($i310, 0);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i261 := $i310;
    assume {:branchcond $i311} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} $i312 := uw2453_write_vco_cfg($p4, 26205);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i313 := $ne.i32($i312, 0);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i264 := $i312;
    assume {:branchcond $i313} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} $i314 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 0);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i267 := $i314;
    assume {:branchcond $i315} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} $i316 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i317 := $ne.i32($i316, 0);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i270 := $i316;
    assume {:branchcond $i317} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i318 := $load.i16($M.55, $p1);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i319 := $zext.i16.i32($i318);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i320 := $and.i32($i319, 15);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i320, 0);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i275 := 2;
    assume {:branchcond $i321} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} $i322 := uw2453_synth_set_channel($p4, 1, 0);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i261 := $i322;
    assume {:branchcond $i323} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} $i324 := uw2453_write_vco_cfg($p4, 26237);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i325 := $ne.i32($i324, 0);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i264 := $i324;
    assume {:branchcond $i325} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} $i326 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i327 := $ne.i32($i326, 0);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i267 := $i326;
    assume {:branchcond $i327} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} $i328 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i329 := $ne.i32($i328, 0);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i270 := $i328;
    assume {:branchcond $i329} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i330 := $load.i16($M.55, $p1);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i331 := $zext.i16.i32($i330);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i332 := $and.i32($i331, 15);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 0);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i275 := 3;
    assume {:branchcond $i333} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} $i334 := uw2453_synth_set_channel($p4, 1, 0);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i335 := $ne.i32($i334, 0);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i261 := $i334;
    assume {:branchcond $i335} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} $i336 := uw2453_write_vco_cfg($p4, 26179);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i337 := $ne.i32($i336, 0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i264 := $i336;
    assume {:branchcond $i337} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} $i338 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i339 := $ne.i32($i338, 0);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i267 := $i338;
    assume {:branchcond $i339} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} $i340 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i341 := $ne.i32($i340, 0);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i270 := $i340;
    assume {:branchcond $i341} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i342 := $load.i16($M.55, $p1);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i343 := $zext.i16.i32($i342);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i344 := $and.i32($i343, 15);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i344, 0);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i275 := 4;
    assume {:branchcond $i345} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} $i346 := uw2453_synth_set_channel($p4, 1, 0);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i347 := $ne.i32($i346, 0);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i261 := $i346;
    assume {:branchcond $i347} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} $i348 := uw2453_write_vco_cfg($p4, 26211);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i349 := $ne.i32($i348, 0);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i264 := $i348;
    assume {:branchcond $i349} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} $i350 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i351 := $ne.i32($i350, 0);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i267 := $i350;
    assume {:branchcond $i351} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $i352 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i353 := $ne.i32($i352, 0);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i270 := $i352;
    assume {:branchcond $i353} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i354 := $load.i16($M.55, $p1);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i355 := $zext.i16.i32($i354);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i356 := $and.i32($i355, 15);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i356, 0);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i275 := 5;
    assume {:branchcond $i357} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} $i358 := uw2453_synth_set_channel($p4, 1, 0);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i359 := $ne.i32($i358, 0);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i261 := $i358;
    assume {:branchcond $i359} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} $i360 := uw2453_write_vco_cfg($p4, 26195);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i361 := $ne.i32($i360, 0);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i264 := $i360;
    assume {:branchcond $i361} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} $i362 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i363 := $ne.i32($i362, 0);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i267 := $i362;
    assume {:branchcond $i363} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} $i364 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i364, 0);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i270 := $i364;
    assume {:branchcond $i365} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i366 := $load.i16($M.55, $p1);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i367 := $zext.i16.i32($i366);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i368 := $and.i32($i367, 15);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 0);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i275 := 6;
    assume {:branchcond $i369} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $i370 := uw2453_synth_set_channel($p4, 1, 0);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i371 := $ne.i32($i370, 0);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i261 := $i370;
    assume {:branchcond $i371} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} $i372 := uw2453_write_vco_cfg($p4, 26227);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i373 := $ne.i32($i372, 0);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i264 := $i372;
    assume {:branchcond $i373} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} $i374 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i375 := $ne.i32($i374, 0);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i267 := $i374;
    assume {:branchcond $i375} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} $i376 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i377 := $ne.i32($i376, 0);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i270 := $i376;
    assume {:branchcond $i377} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i378 := $load.i16($M.55, $p1);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i379 := $zext.i16.i32($i378);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i380 := $and.i32($i379, 15);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i380, 0);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i275 := 7;
    assume {:branchcond $i381} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} $i382 := uw2453_synth_set_channel($p4, 1, 0);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i383 := $ne.i32($i382, 0);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $i261 := $i382;
    assume {:branchcond $i383} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} $i384 := uw2453_write_vco_cfg($p4, 26187);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i385 := $ne.i32($i384, 0);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i264 := $i384;
    assume {:branchcond $i385} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $i386 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i387 := $ne.i32($i386, 0);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i267 := $i386;
    assume {:branchcond $i387} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} $i388 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i389 := $ne.i32($i388, 0);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i270 := $i388;
    assume {:branchcond $i389} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i390 := $load.i16($M.55, $p1);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i391 := $zext.i16.i32($i390);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i392 := $and.i32($i391, 15);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, 0);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i275 := 8;
    assume {:branchcond $i393} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} $i394 := uw2453_synth_set_channel($p4, 1, 0);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i395 := $ne.i32($i394, 0);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i261 := $i394;
    assume {:branchcond $i395} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} $i396 := uw2453_write_vco_cfg($p4, 26219);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i397 := $ne.i32($i396, 0);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i264 := $i396;
    assume {:branchcond $i397} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $i398 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i399 := $ne.i32($i398, 0);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i267 := $i398;
    assume {:branchcond $i399} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} $i400 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i401 := $ne.i32($i400, 0);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i270 := $i400;
    assume {:branchcond $i401} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i402 := $load.i16($M.55, $p1);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i403 := $zext.i16.i32($i402);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i404 := $and.i32($i403, 15);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i405 := $eq.i32($i404, 0);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i275 := 9;
    assume {:branchcond $i405} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i281 := $sub.i32(0, 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, $sub.i32(0, 1));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i292 := $add.i32($i281, 1);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.0, $p293);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p295 := $bitcast.ref.ref($p294);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p295, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p296, $i292);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} $i297 := zd_iowrite16_locked($p4, 6, $sub.i16(0, 27860));
    call {:si_unique_call 1899} {:cexpr "tmp___0"} boogie_si_record_i32($i297);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i253 := $i297;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $r := $i253;
    return;

  $bb36:
    assume $i282 == 1;
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.0, $p284);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p285, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} vslice_dummy_var_253 := dev_printk.ref.ref.ref.ref(.str.6, $p286, .str.187, .str.186);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} $i288 := uw2453_synth_set_channel($p4, 1, 1);
    call {:si_unique_call 1895} {:cexpr "r"} boogie_si_record_i32($i288);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i289 := $ne.i32($i288, 0);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i289} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} $i290 := uw2453_write_vco_cfg($p4, 26210);
    call {:si_unique_call 1897} {:cexpr "r"} boogie_si_record_i32($i290);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i291 := $ne.i32($i290, 0);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i291 == 1;
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i253 := $i290;
    goto $bb3;

  $bb38:
    assume $i289 == 1;
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i253 := $i288;
    goto $bb3;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i405 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.0, $p277);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p278, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} vslice_dummy_var_252 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p279, .str.185, .str.186, $i275);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i281 := $i275;
    goto $bb32;

  $bb182:
    assume {:verifier.code 0} true;
    assume $i401 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i253 := $i270;
    goto $bb3;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i253 := $i267;
    goto $bb3;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i397 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i253 := $i264;
    goto $bb3;

  $bb173:
    assume {:verifier.code 0} true;
    assume $i395 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i253 := $i261;
    goto $bb3;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i393 == 1;
    goto $bb30;

  $bb166:
    assume {:verifier.code 0} true;
    assume $i389 == 1;
    goto $bb26;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i387 == 1;
    goto $bb22;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i385 == 1;
    goto $bb18;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i383 == 1;
    goto $bb14;

  $bb153:
    assume {:verifier.code 0} true;
    assume $i381 == 1;
    goto $bb30;

  $bb150:
    assume {:verifier.code 0} true;
    assume $i377 == 1;
    goto $bb26;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i375 == 1;
    goto $bb22;

  $bb144:
    assume {:verifier.code 0} true;
    assume $i373 == 1;
    goto $bb18;

  $bb141:
    assume {:verifier.code 0} true;
    assume $i371 == 1;
    goto $bb14;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i369 == 1;
    goto $bb30;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i365 == 1;
    goto $bb26;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i363 == 1;
    goto $bb22;

  $bb128:
    assume {:verifier.code 0} true;
    assume $i361 == 1;
    goto $bb18;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i359 == 1;
    goto $bb14;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i357 == 1;
    goto $bb30;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i353 == 1;
    goto $bb26;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i351 == 1;
    goto $bb22;

  $bb112:
    assume {:verifier.code 0} true;
    assume $i349 == 1;
    goto $bb18;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i347 == 1;
    goto $bb14;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i345 == 1;
    goto $bb30;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i341 == 1;
    goto $bb26;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb22;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i337 == 1;
    goto $bb18;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i335 == 1;
    goto $bb14;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i333 == 1;
    goto $bb30;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i329 == 1;
    goto $bb26;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i327 == 1;
    goto $bb22;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i325 == 1;
    goto $bb18;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb14;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i321 == 1;
    goto $bb30;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i317 == 1;
    goto $bb26;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb22;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i313 == 1;
    goto $bb18;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i311 == 1;
    goto $bb14;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i309 == 1;
    goto $bb30;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i305 == 1;
    goto $bb26;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i303 == 1;
    goto $bb22;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb18;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i299 == 1;
    goto $bb14;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i274 == 1;
    goto $bb30;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i269 == 1;
    goto $bb26;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb14;

  $bb8:
    assume $i258 == 1;
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i253 := $i257;
    goto $bb3;

  $bb5:
    assume $i256 == 1;
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i253 := $i255;
    goto $bb3;

  $bb1:
    assume $i252 == 1;
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i253 := $i251;
    goto $bb3;
}



const uw2453_set_channel: ref;

axiom uw2453_set_channel == $sub.ref(0, 725664);

procedure uw2453_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.54, $CurrAddr, $M.24, $M.27, $M.57;



implementation uw2453_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i8;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i40: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $p48: ref;
  var $i49: i16;
  var $i41: i16;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1936} {:cexpr "uw2453_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 1937} {:cexpr "config"} boogie_si_record_i32($i7);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1938} {:cexpr "autocal"} boogie_si_record_i8($i9);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} $p10 := zd_rf_to_chip($p0);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p12, $sub.i16(0, 28352));
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p14, 48);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p16, $sub.i16(0, 28348));
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p18, 48);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p20, $sub.i16(0, 28356));
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p22, 88);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p24, $sub.i16(0, 28624));
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p26, 240);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p28, $sub.i16(0, 28364));
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p30, 27);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p32, $sub.i16(0, 28360));
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p34, 88);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i1);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i9);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} $i37 := uw2453_synth_set_channel($p10, $i35, $i36);
    call {:si_unique_call 1941} {:cexpr "r"} boogie_si_record_i32($i37);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i9);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i1);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, $sub.i32(0, 1));
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i44 := $sdiv.i32($i43, 2);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i7);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref($i46, 14)), $mul.ref($i45, 2));
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.56, $p48);
    call {:si_unique_call 1942} {:cexpr "vco_cfg"} boogie_si_record_i16($i49);
    assume {:verifier.code 0} true;
    $i41 := $i49;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i41);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} $i52 := uw2453_write_vco_cfg($p10, $i51);
    call {:si_unique_call 1944} {:cexpr "r"} boogie_si_record_i32($i52);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $i54 := uw2453_init_mode($p10);
    call {:si_unique_call 1946} {:cexpr "r"} boogie_si_record_i32($i54);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p2);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} $i57 := zd_iowrite16a_locked($p10, $p56, 6);
    call {:si_unique_call 1948} {:cexpr "r"} boogie_si_record_i32($i57);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i1);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $i60 := uw2453_set_tx_gain_level($p10, $i59);
    call {:si_unique_call 1950} {:cexpr "r"} boogie_si_record_i32($i60);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} $i62 := zd_iowrite16_locked($p10, 6, $sub.i16(0, 27860));
    call {:si_unique_call 1952} {:cexpr "tmp___0"} boogie_si_record_i32($i62);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i39 := $i62;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb17:
    assume $i61 == 1;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i39 := $i60;
    goto $bb3;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i39 := $i57;
    goto $bb3;

  $bb11:
    assume $i55 == 1;
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i39 := $i54;
    goto $bb3;

  $bb8:
    assume $i53 == 1;
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i39 := $i52;
    goto $bb3;

  $bb5:
    assume $i40 == 1;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i41 := 26210;
    goto $bb7;

  $bb1:
    assume $i38 == 1;
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    goto $bb3;
}



const uw2453_switch_radio_on: ref;

axiom uw2453_switch_radio_on == $sub.ref(0, 726696);

procedure uw2453_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.24, $M.27, $M.57;



implementation uw2453_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p4, $sub.i16(0, 28628));
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p6, 0);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 27668));
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 63);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} $i11 := zd_rfwrite_locked($p2, 155540, 24);
    call {:si_unique_call 1956} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $i14 := zd_chip_is_zd1211b($p2);
    call {:si_unique_call 1958} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} $i19 := zd_iowrite16a_locked($p2, $p18, 2);
    call {:si_unique_call 1960} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i13 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p17, 127);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;
}



const uw2453_switch_radio_off: ref;

axiom uw2453_switch_radio_off == $sub.ref(0, 727728);

procedure uw2453_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.24, $M.27, $M.57;



implementation uw2453_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p4, $sub.i16(0, 28628));
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p6, 4);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 27668));
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 47);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} $i11 := zd_rfwrite_locked($p2, 155536, 24);
    call {:si_unique_call 1964} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} $i15 := zd_iowrite16a_locked($p2, $p14, 2);
    call {:si_unique_call 1966} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;
}



const zd_rf_generic_patch_6m: ref;

axiom zd_rf_generic_patch_6m == $sub.ref(0, 728760);

procedure zd_rf_generic_patch_6m($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_rf_generic_patch_6m($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} {:cexpr "zd_rf_generic_patch_6m:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} $i4 := zd_chip_generic_patch_6m_band($p2, $i3);
    call {:si_unique_call 1970} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const uw2453_clear: ref;

axiom uw2453_clear == $sub.ref(0, 729792);

procedure uw2453_clear($p0: ref);
  free requires assertsPassed;



implementation uw2453_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} kfree($p2);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    return;
}



const zd_chip_generic_patch_6m_band: ref;

axiom zd_chip_generic_patch_6m_band == $sub.ref(0, 730824);

procedure zd_chip_generic_patch_6m_band($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_chip_generic_patch_6m_band($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var vslice_dummy_var_254: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1973} {:cexpr "zd_chip_generic_patch_6m_band:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p4, $sub.i16(0, 28160));
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p6, 20);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 28156));
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 18);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p12, $sub.i16(0, 28152));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p14, 16);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p16, $sub.i16(0, 28484));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p18, 30);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i1, 1);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i19 == 1);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 11);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} vslice_dummy_var_254 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p26, .str.22, .str.23, $i1);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} $i29 := zd_iowrite16a_locked($p0, $p28, 4);
    call {:si_unique_call 1976} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p22, 18);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;
}



const zd_rfwrite_locked: ref;

axiom zd_rfwrite_locked == $sub.ref(0, 731856);

procedure zd_rfwrite_locked($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.27, $M.0, $M.57, $CurrAddr;



implementation zd_rfwrite_locked($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var vslice_dummy_var_255: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1978} {:cexpr "zd_rfwrite_locked:arg:value"} boogie_si_record_i32($i1);
    call {:si_unique_call 1979} {:cexpr "zd_rfwrite_locked:arg:bits"} boogie_si_record_i8($i2);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 1981} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1983} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i2);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $i31 := zd_usb_rfwrite($p28, $i1, $i30);
    call {:si_unique_call 1989} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.1);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.148);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.101);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.4);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 867);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 1);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1985} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} dump_stack();
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} vslice_dummy_var_255 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.101, 867, .str.10);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_usb_rfwrite: ref;

axiom zd_usb_rfwrite == $sub.ref(0, 732888);

procedure zd_usb_rfwrite($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.27, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.57, $CurrAddr;



implementation zd_usb_rfwrite($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i30: i64;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i24;
  var $i71: i24;
  var $i72: i24;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $i84: i1;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $i89: i64;
  var $i90: i64;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i16;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $i102: i16;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i32;
  var $i111: i16;
  var $i112: i16;
  var $i113: i64;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i101: i32;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i126: i32;
  var $i15: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1993} {:cexpr "zd_usb_rfwrite:arg:value"} boogie_si_record_i32($i1);
    call {:si_unique_call 1994} {:cexpr "zd_usb_rfwrite:arg:bits"} boogie_si_record_i8($i2);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $p6 := current_thread_info();
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.9, $p7);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $sub.i32(0, 268435457));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i2);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i17 := $ule.i32($i16, 15);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i2);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i32($i23, 28);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i1);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i2);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i33 := $shl.i64($sub.i64(0, 1), $i32);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i30, $i33);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i2);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} vslice_dummy_var_260 := dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p43, .str.97, .str.93, $i1, $i44);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $i46 := zd_usb_ioread16($p0, $p4, $sub.i16(0, 27860));
    call {:si_unique_call 2002} {:cexpr "r"} boogie_si_record_i32($i46);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.57, $p4);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 65521);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $M.57 := $store.i16($M.57, $p4, $i55);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} $p56 := zd_usb_to_chip($p0);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} $i58 := mutex_is_locked($p57);
    call {:si_unique_call 2006} {:cexpr "tmp___2"} boogie_si_record_i32($i58);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i60);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} $i62 := ldv__builtin_expect($i61, 0);
    call {:si_unique_call 2008} {:cexpr "tmp___3"} boogie_si_record_i64($i62);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i64($i2);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 3);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i83 := $mul.i64($i82, 2);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i84 := $ugt.i64($i83, 64);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i32($i84);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 2014} {:cexpr "tmp___4"} boogie_si_record_i64($i87);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i2);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 3);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i32($i90);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i92 := $mul.i32($i91, 2);
    call {:si_unique_call 2016} {:cexpr "req_len"} boogie_si_record_i32($i92);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11204, 1));
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, 35);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p94, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p96, 2);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i16($i2);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p94, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p98, $i97);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i2);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i100 := $sgt.i32($i99, 0);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} $p118 := zd_usb_to_usbdev($p0);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p94);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} $i120 := zd_ep_regs_out_msg($p118, $p119, $i92, $p3, 50);
    call {:si_unique_call 2022} {:cexpr "r"} boogie_si_record_i32($i120);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.28, $p3);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i92, $i127);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i126 := $i120;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i15 := $i126;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb42:
    assume $i128 == 1;
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.28, $p3);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} vslice_dummy_var_264 := dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p131, .str.99, .str.93, $i92, $i132);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i126 := $sub.i32(0, 5);
    goto $bb40;

  $bb38:
    assume $i121 == 1;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} vslice_dummy_var_263 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p124, .str.80, .str.93, $i120);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i126 := $i120;
    goto $bb40;

  $bb27:
    assume $i100 == 1;
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i101 := 0;
    goto $bb30;

  $bb30:
    call $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $p115, $i116, $i117, $i101 := zd_usb_rfwrite_loop_$bb30($i1, $i2, $p4, $p94, $i99, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $p115, $i116, $i117, $i101);
    goto $bb30_last;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.57, $p4);
    call {:si_unique_call 2017} {:cexpr "bv"} boogie_si_record_i16($i102);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i2);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, $sub.i32(0, 1));
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32($i104, $i101);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i106 := $shl.i32(1, $i105);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, $i1);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i112 := $i102;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i101);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref($i113, 2));
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, $i112);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i101, 1);
    call {:si_unique_call 2019} {:cexpr "i"} boogie_si_record_i32($i116);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i117 := $sgt.i32($i99, $i116);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i117 == 1);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb35:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $i101 := $i116;
    goto $bb35_dummy;

  $bb32:
    assume $i108 == 1;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i102);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i110 := $or.i32($i109, 8);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    call {:si_unique_call 2018} {:cexpr "bv"} boogie_si_record_i16($i111);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i112 := $i111;
    goto $bb34;

  $bb23:
    assume $i88 == 1;
    call {:si_unique_call 2015} devirtbounce(0, .str.60, 2067, 12);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call zd_usb_rfwrite_loop_$bb25();
    goto $bb25_last;

  $bb17:
    assume $i63 == 1;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p64, .str.1);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p65, .str.93);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p66, .str.60);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p67, .str.4);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i70 := $load.i24($M.5, $p69);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i71 := $and.i24($i70, $sub.i24(0, 262144));
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i72 := $or.i24($i71, 2062);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p69, $i72);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p73, 1);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.6, $p74);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i64($i75);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 1);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 2010} {:cexpr "tmp___0"} boogie_si_record_i64($i78);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} dump_stack();
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i79 == 1;
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} vslice_dummy_var_262 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p5, .str.4, .str.60, 2062, .str.79);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} vslice_dummy_var_261 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p50, .str.98, .str.93, $i46);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i15 := $i46;
    goto $bb3;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i2);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} vslice_dummy_var_259 := dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p38, .str.96, .str.93, $i1, $i39);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i2);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} vslice_dummy_var_258 := dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p27, .str.95, .str.93, $i28, 28);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i2);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} vslice_dummy_var_257 := dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p20, .str.94, .str.93, $i21, 16);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} vslice_dummy_var_256 := dev_printk.ref.ref.ref.ref(.str.6, $p13, .str.77, .str.93);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 11);
    goto $bb3;

  $bb35_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8367;

  $bb25_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;
}



const uw2453_synth_set_channel: ref;

axiom uw2453_synth_set_channel == $sub.ref(0, 733920);

procedure uw2453_synth_set_channel($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.27, $M.0, $M.57, $CurrAddr;



implementation uw2453_synth_set_channel($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i11: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i64;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} {:cexpr "uw2453_synth_set_channel:arg:channel"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2026} {:cexpr "uw2453_synth_set_channel:arg:autocal"} boogie_si_record_i1($i2);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i1, $sub.i32(0, 1));
    call {:si_unique_call 2027} {:cexpr "idx"} boogie_si_record_i32($i4);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i3);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i4);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref($i12, 1));
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.59, $p13);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 1048576);
    call {:si_unique_call 2029} {:cexpr "val"} boogie_si_record_i32($i16);
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} $i17 := zd_rfwrite_locked($p0, $i11, 24);
    call {:si_unique_call 2031} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i4);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref($i20, 2));
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.60, $p21);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 2097152);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} $i25 := zd_rfwrite_locked($p0, $i24, 24);
    call {:si_unique_call 2033} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i19 := $i25;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref($i6, 2));
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.58, $p7);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 1048576);
    call {:si_unique_call 2028} {:cexpr "val"} boogie_si_record_i32($i10);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const uw2453_write_vco_cfg: ref;

axiom uw2453_write_vco_cfg == $sub.ref(0, 734952);

procedure uw2453_write_vco_cfg($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.27, $M.0, $M.57, $CurrAddr;



implementation uw2453_write_vco_cfg($p0: ref, $i1: i16) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} {:cexpr "uw2453_write_vco_cfg:arg:value"} boogie_si_record_i16($i1);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 262144);
    call {:si_unique_call 2035} {:cexpr "val"} boogie_si_record_i32($i3);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1048575);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 3145728);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} $i6 := zd_rfwrite_locked($p0, $i5, 24);
    call {:si_unique_call 2037} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const uw2453_init_mode: ref;

axiom uw2453_init_mode == $sub.ref(0, 735984);

procedure uw2453_init_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.54, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.24, $M.27, $M.0, $M.57;



implementation uw2453_init_mode($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p2, 155544);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p3, 155546);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p4, 155540);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p5, 163796);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} $i7 := zd_rfwritev_locked($p0, $p6, 4, 24);
    call {:si_unique_call 2040} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const uw2453_set_tx_gain_level: ref;

axiom uw2453_set_tx_gain_level == $sub.ref(0, 737016);

procedure uw2453_set_tx_gain_level($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.27, $M.0, $M.57, $CurrAddr;



implementation uw2453_set_tx_gain_level($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i15: i32;
  var vslice_dummy_var_265: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} {:cexpr "uw2453_set_tx_gain_level:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11520, 1)), $mul.ref($i3, 1));
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    call {:si_unique_call 2042} {:cexpr "int_value"} boogie_si_record_i8($i6);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 18);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i6);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref($i17, 4));
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.61, $p18);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1048575);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, 7340032);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} $i22 := zd_rfwrite_locked($p0, $i21, 24);
    call {:si_unique_call 2045} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i15 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i6);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} vslice_dummy_var_265 := dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p12, .str.188, .str.189, $i13, $i1);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;
}



const zd_rfwritev_locked: ref;

axiom zd_rfwritev_locked == $sub.ref(0, 738048);

procedure zd_rfwritev_locked($p0: ref, $p1: ref, $i2: i32, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.27, $M.0, $M.57, $CurrAddr;



implementation zd_rfwritev_locked($p0: ref, $p1: ref, $i2: i32, $i3: i8) returns ($r: i32)
{
  var $i4: i1;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i15: i32;
  var $i16: i1;
  var $i5: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} {:cexpr "zd_rfwritev_locked:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 2047} {:cexpr "zd_rfwritev_locked:arg:bits"} boogie_si_record_i8($i3);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i4 := $ult.i32(0, $i2);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i5 := zd_rfwritev_locked_loop_$bb4($p0, $p1, $i2, $i3, $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i5);
    goto $bb4_last;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref($i6, 4));
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.54, $p7);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i3);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} $i11 := zd_rfwrite_locked($p0, $i8, $i10);
    call {:si_unique_call 2049} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i5, 1);
    call {:si_unique_call 2050} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i16 := $ult.i32($i15, $i2);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i15;
    goto $bb10_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8495;
}



const zd1211b_al7230b_init_hw: ref;

axiom zd1211b_al7230b_init_hw == $sub.ref(0, 739080);

procedure zd1211b_al7230b_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd1211b_al7230b_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p110: ref;
  var $p112: ref;
  var $p114: ref;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $p136: ref;
  var $p138: ref;
  var $p140: ref;
  var $p142: ref;
  var $p144: ref;
  var $p146: ref;
  var $p148: ref;
  var $p150: ref;
  var $p152: ref;
  var $p154: ref;
  var $p156: ref;
  var $p158: ref;
  var $p160: ref;
  var $p162: ref;
  var $p164: ref;
  var $p166: ref;
  var $p168: ref;
  var $p170: ref;
  var $p172: ref;
  var $p174: ref;
  var $p176: ref;
  var $p178: ref;
  var $p180: ref;
  var $p182: ref;
  var $p184: ref;
  var $p186: ref;
  var $p188: ref;
  var $p190: ref;
  var $p192: ref;
  var $p194: ref;
  var $p196: ref;
  var $p198: ref;
  var $p200: ref;
  var $p202: ref;
  var $p204: ref;
  var $p206: ref;
  var $p208: ref;
  var $p210: ref;
  var $p212: ref;
  var $p214: ref;
  var $p216: ref;
  var $p218: ref;
  var $p220: ref;
  var $p222: ref;
  var $p224: ref;
  var $p226: ref;
  var $p228: ref;
  var $p230: ref;
  var $p232: ref;
  var $p234: ref;
  var $p236: ref;
  var $p238: ref;
  var $p240: ref;
  var $p242: ref;
  var $p244: ref;
  var $p246: ref;
  var $p248: ref;
  var $p250: ref;
  var $p252: ref;
  var $p254: ref;
  var $p256: ref;
  var $p258: ref;
  var $p260: ref;
  var $p262: ref;
  var $p264: ref;
  var $p266: ref;
  var $p268: ref;
  var $p270: ref;
  var $p272: ref;
  var $p274: ref;
  var $p276: ref;
  var $p278: ref;
  var $p280: ref;
  var $p282: ref;
  var $p284: ref;
  var $p286: ref;
  var $p288: ref;
  var $p290: ref;
  var $p292: ref;
  var $p294: ref;
  var $p296: ref;
  var $p298: ref;
  var $p300: ref;
  var $p302: ref;
  var $p304: ref;
  var $p306: ref;
  var $p308: ref;
  var $p310: ref;
  var $p312: ref;
  var $p314: ref;
  var $p316: ref;
  var $p318: ref;
  var $p320: ref;
  var $p322: ref;
  var $p324: ref;
  var $p326: ref;
  var $p328: ref;
  var $p330: ref;
  var $p332: ref;
  var $p334: ref;
  var $p336: ref;
  var $p338: ref;
  var $p340: ref;
  var $p342: ref;
  var $p344: ref;
  var $p346: ref;
  var $p348: ref;
  var $p350: ref;
  var $p351: ref;
  var $i352: i32;
  var $i353: i1;
  var $p355: ref;
  var $p356: ref;
  var $i357: i8;
  var $i358: i32;
  var $i359: i1;
  var $p360: ref;
  var $i361: i32;
  var $p363: ref;
  var $i364: i32;
  var $i362: i32;
  var $i365: i1;
  var $p366: ref;
  var $i367: i32;
  var $i368: i1;
  var $i369: i32;
  var $i370: i1;
  var $i371: i32;
  var $i372: i1;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $i376: i32;
  var $i377: i1;
  var $i378: i32;
  var $i379: i1;
  var $i380: i32;
  var $i354: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} $p1 := $alloc($mul.ref(180, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} $p2 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} $p3 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} $p4 := $alloc($mul.ref(84, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} $p6 := zd_rf_to_chip($p0);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 27712));
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 87);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p12, $sub.i16(0, 28636));
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p14, 9);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p16, 0);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p18, 0);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p20, $sub.i16(0, 28632));
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p22, 139);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p24, $sub.i16(0, 28612));
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p26, 32);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p28, $sub.i16(0, 28604));
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p30, 43);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p32, $sub.i16(0, 28592));
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p34, 16);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p36, $sub.i16(0, 28580));
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p38, 64);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p40, $sub.i16(0, 28576));
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p42, 32);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p44, $sub.i16(0, 28568));
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p46, 147);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p48, $sub.i16(0, 28560));
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p50, 62);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p52, $sub.i16(0, 28556));
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p54, 0);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p56, $sub.i16(0, 28540));
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p58, 40);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p60, $sub.i16(0, 28536));
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p62, 48);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p64, $sub.i16(0, 28532));
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p66, 62);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p68, $sub.i16(0, 28508));
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p70, 36);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p72, $sub.i16(0, 28496));
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p74, 50);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p76, $sub.i16(0, 28488));
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p78, 153);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p80, $sub.i16(0, 28484));
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p82, 30);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p84, $sub.i16(0, 28480));
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p86, 0);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p88, $sub.i16(0, 28476));
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p90, 0);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p92, $sub.i16(0, 28468));
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p94, 1);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p96, $sub.i16(0, 28464));
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p98, 128);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p100, $sub.i16(0, 28460));
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p102, 126);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p104, $sub.i16(0, 28412));
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p106, 0);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p108, $sub.i16(0, 28408));
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p110, 0);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p112, $sub.i16(0, 28404));
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p114, 0);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p116, $sub.i16(0, 28400));
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p118, 0);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p120, $sub.i16(0, 28396));
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p122, 40);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p124, $sub.i16(0, 28356));
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p126, 88);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p128, $sub.i16(0, 28352));
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p130, 48);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p132, $sub.i16(0, 28348));
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p134, 48);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p136, $sub.i16(0, 28324));
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p138, 10);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p140, $sub.i16(0, 28316));
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p142, 4);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p144, $sub.i16(0, 28312));
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p146, 88);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p148, $sub.i16(0, 28308));
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p150, 0);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p152, $sub.i16(0, 28304));
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p154, 10);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p156, $sub.i16(0, 28280));
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p158, 141);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p160, $sub.i16(0, 28276));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p162, 0);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p164, $sub.i16(0, 28272));
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p166, 2);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p168, $sub.i16(0, 28268));
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p170, 19);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p172, $sub.i16(0, 28264));
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p174, 39);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p176, $sub.i16(0, 28248));
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p178, 32);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p180, $sub.i16(0, 28236));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p182, 19);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p184, $sub.i16(0, 28224));
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p186, 31);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p188, $sub.i16(0, 28244));
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p190, 40);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p192, $sub.i16(0, 28232));
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p194, 31);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p196, $sub.i16(0, 28228));
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p198, 31);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p200, $sub.i16(0, 28208));
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p202, 42);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p204, $sub.i16(0, 28200));
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p206, 250);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p208, $sub.i16(0, 28196));
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p210, 18);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p212, $sub.i16(0, 28188));
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p214, 108);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p216, $sub.i16(0, 28244));
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p218, 36);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p220, $sub.i16(0, 28232));
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p222, 19);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p224, $sub.i16(0, 28228));
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p226, 19);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p228, $sub.i16(0, 28208));
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p230, 36);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p232, $sub.i16(0, 28200));
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p234, 252);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p236, $sub.i16(0, 28196));
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p238, 17);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p240, $sub.i16(0, 28188));
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p242, 106);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p244, $sub.i16(0, 28220));
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p246, 39);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p248, $sub.i16(0, 28216));
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p250, 39);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p252, $sub.i16(0, 28212));
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p254, 36);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p256, $sub.i16(0, 28204));
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p258, 250);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p260, $sub.i16(0, 28192));
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p262, 79);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p264, $sub.i16(0, 28184));
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p266, 252);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p268, $sub.i16(0, 28180));
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p270, 87);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p272, $sub.i16(0, 28172));
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p274, 173);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p276, $sub.i16(0, 28168));
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p278, 108);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p280, $sub.i16(0, 28164));
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p282, 3);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p284, $sub.i16(0, 28152));
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p286, 16);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p288, $sub.i16(0, 28148));
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p290, 0);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p292, $sub.i16(0, 28124));
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p294, 80);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p296, $sub.i16(0, 28120));
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p298, 168);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p300, $sub.i16(0, 28096));
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p302, 172);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p304, $sub.i16(0, 28080));
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p306, 64);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p308, $sub.i16(0, 28076));
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p310, 64);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p312, $sub.i16(0, 28072));
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p314, 26);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p316, $sub.i16(0, 27664));
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p318, 52);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p320, $sub.i16(0, 27660));
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p322, 52);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p324, $sub.i16(0, 27668));
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p326, 47);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p328, $sub.i16(0, 27668));
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p330, 127);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p332, $sub.i16(0, 28160));
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p334, 20);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p336, $sub.i16(0, 28156));
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p338, 18);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p340, $sub.i16(0, 28152));
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p342, 16);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p344, $sub.i16(0, 28520));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p346, 56);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p348, $sub.i16(0, 28128));
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p350, 223);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $p351 := $bitcast.ref.ref($p1);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} $i352 := zd_iowrite16a_locked($p6, $p351, 45);
    call {:si_unique_call 2058} {:cexpr "r"} boogie_si_record_i32($i352);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $i353 := $ne.i32($i352, 0);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p355 := $bitcast.ref.ref($p6);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($p355, $mul.ref(11578, 1));
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i357 := $load.i8($M.0, $p356);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i358 := $zext.i8.i32($i357);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i359 := $ne.i32($i358, 0);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i359 == 1);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p3);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $i364 := zd_iowrite16a_locked($p6, $p363, 7);
    call {:si_unique_call 2062} {:cexpr "r"} boogie_si_record_i32($i364);
    assume {:verifier.code 0} true;
    $i362 := $i364;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i362, 0);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p366 := $bitcast.ref.ref($p4);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} $i367 := zd_iowrite16a_locked($p6, $p366, 21);
    call {:si_unique_call 2064} {:cexpr "r"} boogie_si_record_i32($i367);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i368 := $ne.i32($i367, 0);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $i369 := zd_rfwritev_cr_locked($p6, chan_rv, 2);
    call {:si_unique_call 2066} {:cexpr "r"} boogie_si_record_i32($i369);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i370 := $ne.i32($i369, 0);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} $i371 := zd_rfwritev_cr_locked($p6, std_rv, 10);
    call {:si_unique_call 2068} {:cexpr "r"} boogie_si_record_i32($i371);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i372 := $ne.i32($i371, 0);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i372} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} $i373 := zd_rfwritev_cr_locked($p6, rv_init1, 4);
    call {:si_unique_call 2070} {:cexpr "r"} boogie_si_record_i32($i373);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i373, 0);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p375 := $bitcast.ref.ref($p5);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} $i376 := zd_iowrite16a_locked($p6, $p375, 6);
    call {:si_unique_call 2072} {:cexpr "r"} boogie_si_record_i32($i376);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i377 := $ne.i32($i376, 0);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i377} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $i378 := zd_rfwritev_cr_locked($p6, rv_init2, 3);
    call {:si_unique_call 2074} {:cexpr "r"} boogie_si_record_i32($i378);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $i379 := $ne.i32($i378, 0);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} $i380 := zd1211b_al7230b_finalize($p6);
    call {:si_unique_call 2076} {:cexpr "tmp___0"} boogie_si_record_i32($i380);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i354 := $i380;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $r := $i354;
    return;

  $bb26:
    assume $i379 == 1;
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i354 := $i378;
    goto $bb3;

  $bb23:
    assume $i377 == 1;
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i354 := $i376;
    goto $bb3;

  $bb20:
    assume $i374 == 1;
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i354 := $i373;
    goto $bb3;

  $bb17:
    assume $i372 == 1;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i354 := $i371;
    goto $bb3;

  $bb14:
    assume $i370 == 1;
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i354 := $i369;
    goto $bb3;

  $bb11:
    assume $i368 == 1;
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i354 := $i367;
    goto $bb3;

  $bb8:
    assume $i365 == 1;
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i354 := $i362;
    goto $bb3;

  $bb5:
    assume $i359 == 1;
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p2);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} $i361 := zd_iowrite16a_locked($p6, $p360, 7);
    call {:si_unique_call 2060} {:cexpr "r"} boogie_si_record_i32($i361);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i362 := $i361;
    goto $bb7;

  $bb1:
    assume $i353 == 1;
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i354 := $i352;
    goto $bb3;
}



const zd1211b_al7230b_switch_radio_on: ref;

axiom zd1211b_al7230b_switch_radio_on == $sub.ref(0, 740112);

procedure zd1211b_al7230b_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd1211b_al7230b_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p4, $sub.i16(0, 28628));
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p6, 0);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 27668));
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 127);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    call {:si_unique_call 2080} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const zd1211b_al7230b_set_channel: ref;

axiom zd1211b_al7230b_set_channel == $sub.ref(0, 741144);

procedure zd1211b_al7230b_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.30, $M.29, $M.0, $CurrAddr;



implementation zd1211b_al7230b_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} {:cexpr "zd1211b_al7230b_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i64($i1);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, $sub.i64(0, 1));
    $p4 := $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref($i3, 4));
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} $p5 := zd_rf_to_chip($p0);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} $i6 := zd_iowrite16_locked($p5, 87, $sub.i16(0, 27712));
    call {:si_unique_call 2084} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} $i9 := zd_iowrite16_locked($p5, 228, $sub.i16(0, 28636));
    call {:si_unique_call 2086} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} $i11 := zd_iowrite16_locked($p5, 47, $sub.i16(0, 27668));
    call {:si_unique_call 2088} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} $i13 := zd_rfwritev_cr_locked($p5, std_rv, 10);
    call {:si_unique_call 2090} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} $i15 := zd_rfwrite_cr_locked($p5, 3969024);
    call {:si_unique_call 2092} {:cexpr "r"} boogie_si_record_i32($i15);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} $i17 := zd_rfwrite_cr_locked($p5, 15818072);
    call {:si_unique_call 2094} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} $i19 := zd_iowrite16a_locked($p5, ioreqs_sw, 5);
    call {:si_unique_call 2096} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} $i21 := zd_rfwritev_cr_locked($p5, $p4, 2);
    call {:si_unique_call 2098} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} $i23 := zd_rfwrite_cr_locked($p5, 3969024);
    call {:si_unique_call 2100} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} $i25 := zd_iowrite16_locked($p5, 127, $sub.i16(0, 27668));
    call {:si_unique_call 2102} {:cexpr "r"} boogie_si_record_i32($i25);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} $i27 := zd1211b_al7230b_finalize($p5);
    call {:si_unique_call 2104} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb29:
    assume $i26 == 1;
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i8 := $i25;
    goto $bb3;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i8 := $i23;
    goto $bb3;

  $bb23:
    assume $i22 == 1;
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i8 := $i21;
    goto $bb3;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb3;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  $bb14:
    assume $i16 == 1;
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const zd1211b_al7230b_patch_6m: ref;

axiom zd1211b_al7230b_patch_6m == $sub.ref(0, 742176);

procedure zd1211b_al7230b_patch_6m($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd1211b_al7230b_patch_6m($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var vslice_dummy_var_266: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2106} {:cexpr "zd1211b_al7230b_patch_6m:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} $p3 := zd_rf_to_chip($p0);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p5, $sub.i16(0, 28160));
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p7, 20);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p9, $sub.i16(0, 28156));
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p11, 18);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 11);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i1);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} vslice_dummy_var_266 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p27, .str.22, .str.184, $i28);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p2);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $i31 := zd_iowrite16a_locked($p3, $p30, 2);
    call {:si_unique_call 2110} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p21, 16);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p23, 16);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p15, 14);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p17, 16);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd1211_al7230b_init_hw: ref;

axiom zd1211_al7230b_init_hw == $sub.ref(0, 743208);

procedure zd1211_al7230b_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd1211_al7230b_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p203: ref;
  var $p205: ref;
  var $p207: ref;
  var $p209: ref;
  var $p211: ref;
  var $p213: ref;
  var $p215: ref;
  var $p217: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p225: ref;
  var $p227: ref;
  var $p229: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $p245: ref;
  var $p247: ref;
  var $p249: ref;
  var $p251: ref;
  var $p252: ref;
  var $i253: i32;
  var $i254: i1;
  var $i256: i32;
  var $i257: i1;
  var $i258: i32;
  var $i259: i1;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i1;
  var $i255: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} $p1 := $alloc($mul.ref(224, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} $p3 := zd_rf_to_chip($p0);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p5, $sub.i16(0, 27712));
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p7, 87);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p9, 0);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p11, 0);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p13, $sub.i16(0, 28612));
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p15, 32);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p17, $sub.i16(0, 28580));
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p19, 64);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p21, $sub.i16(0, 28576));
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p23, 32);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p25, $sub.i16(0, 28568));
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p27, 17);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p29, $sub.i16(0, 28560));
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p31, 62);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p33, $sub.i16(0, 28556));
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p35, 0);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p37, $sub.i16(0, 28496));
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p39, 51);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p41, $sub.i16(0, 28248));
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p43, 34);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p45, $sub.i16(0, 28244));
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p47, 26);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p49, $sub.i16(0, 28236));
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p51, 9);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p53, $sub.i16(0, 28232));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p55, 39);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p57, $sub.i16(0, 28228));
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p59, 43);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p61, $sub.i16(0, 28224));
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p63, 43);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p65, $sub.i16(0, 28196));
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p67, 10);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p69, $sub.i16(0, 28184));
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p71, 252);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p73, $sub.i16(0, 28632));
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p75, 137);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p77, $sub.i16(0, 28604));
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p79, 40);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p81, $sub.i16(0, 28568));
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p83, 147);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p85, $sub.i16(0, 28536));
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p87, 48);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p89, $sub.i16(0, 28532));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p91, 62);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p93, $sub.i16(0, 28508));
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p95, 36);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p97, $sub.i16(0, 28496));
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p99, 50);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p101, $sub.i16(0, 28488));
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p103, 150);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p105, $sub.i16(0, 28484));
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p107, 30);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p109, $sub.i16(0, 28356));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p111, 88);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p113, $sub.i16(0, 28352));
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p115, 48);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p117, $sub.i16(0, 28348));
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p119, 48);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p121, $sub.i16(0, 28324));
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p123, 10);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p125, $sub.i16(0, 28316));
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p127, 4);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p129, $sub.i16(0, 28304));
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p131, 10);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p133, $sub.i16(0, 28276));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p135, 40);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p137, $sub.i16(0, 28272));
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p139, 2);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p141, $sub.i16(0, 28268));
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p143, 19);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p145, $sub.i16(0, 28264));
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p147, 39);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p149, $sub.i16(0, 28248));
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p151, 34);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p153, $sub.i16(0, 28244));
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p155, 63);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p157, $sub.i16(0, 28236));
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p159, 9);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p161, $sub.i16(0, 28232));
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p163, 31);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p165, $sub.i16(0, 28228));
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p167, 31);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p169, $sub.i16(0, 28224));
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p171, 31);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p173, $sub.i16(0, 28220));
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p175, 39);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p177, $sub.i16(0, 28216));
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p179, 39);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p181, $sub.i16(0, 28212));
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p183, 36);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p185, $sub.i16(0, 28208));
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p187, 63);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p189, $sub.i16(0, 28204));
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p191, 250);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p193, $sub.i16(0, 28200));
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p195, 252);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p197, $sub.i16(0, 28196));
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p199, 16);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p201, $sub.i16(0, 28192));
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p203, 79);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p205, $sub.i16(0, 28188));
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p207, 119);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p209, $sub.i16(0, 28124));
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p211, 136);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p213, $sub.i16(0, 28120));
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p215, 168);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p217, $sub.i16(0, 27664));
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p219, 52);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p221, $sub.i16(0, 27660));
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p223, 52);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p225, $sub.i16(0, 27668));
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p227, 47);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p229, $sub.i16(0, 27668));
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p231, 63);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p233, $sub.i16(0, 28160));
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p235, 20);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p237, $sub.i16(0, 28156));
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p239, 18);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p241, $sub.i16(0, 28152));
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p243, 16);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p245, $sub.i16(0, 28520));
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p247, 56);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p249, $sub.i16(0, 28128));
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p251, 223);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p1);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} $i253 := zd_iowrite16a_locked($p3, $p252, 56);
    call {:si_unique_call 2115} {:cexpr "r"} boogie_si_record_i32($i253);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 0);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} $i256 := zd_rfwritev_cr_locked($p3, chan_rv, 2);
    call {:si_unique_call 2117} {:cexpr "r"} boogie_si_record_i32($i256);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 0);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} $i258 := zd_rfwritev_cr_locked($p3, std_rv, 10);
    call {:si_unique_call 2119} {:cexpr "r"} boogie_si_record_i32($i258);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i259 := $ne.i32($i258, 0);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} $i260 := zd_rfwritev_cr_locked($p3, rv_init1, 4);
    call {:si_unique_call 2121} {:cexpr "r"} boogie_si_record_i32($i260);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i260, 0);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p262 := $bitcast.ref.ref($p2);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} $i263 := zd_iowrite16a_locked($p3, $p262, 6);
    call {:si_unique_call 2123} {:cexpr "r"} boogie_si_record_i32($i263);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} $i265 := zd_rfwritev_cr_locked($p3, rv_init2, 3);
    call {:si_unique_call 2125} {:cexpr "r"} boogie_si_record_i32($i265);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 0);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} $i267 := zd_iowrite16_locked($p3, 6, $sub.i16(0, 27860));
    call {:si_unique_call 2127} {:cexpr "r"} boogie_si_record_i32($i267);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} $i269 := zd_iowrite16_locked($p3, 128, $sub.i16(0, 27712));
    call {:si_unique_call 2129} {:cexpr "r"} boogie_si_record_i32($i269);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i269, 0);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i255 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $r := $i255;
    return;

  $bb23:
    assume $i270 == 1;
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i255 := $i269;
    goto $bb3;

  $bb20:
    assume $i268 == 1;
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $i255 := $i267;
    goto $bb3;

  $bb17:
    assume $i266 == 1;
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $i255 := $i265;
    goto $bb3;

  $bb14:
    assume $i264 == 1;
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i255 := $i263;
    goto $bb3;

  $bb11:
    assume $i261 == 1;
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $i255 := $i260;
    goto $bb3;

  $bb8:
    assume $i259 == 1;
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $i255 := $i258;
    goto $bb3;

  $bb5:
    assume $i257 == 1;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i255 := $i256;
    goto $bb3;

  $bb1:
    assume $i254 == 1;
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $i255 := $i253;
    goto $bb3;
}



const zd1211_al7230b_switch_radio_on: ref;

axiom zd1211_al7230b_switch_radio_on == $sub.ref(0, 744240);

procedure zd1211_al7230b_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd1211_al7230b_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p4, $sub.i16(0, 28628));
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p6, 0);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 27668));
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 63);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    call {:si_unique_call 2133} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const zd1211_al7230b_set_channel: ref;

axiom zd1211_al7230b_set_channel == $sub.ref(0, 745272);

procedure zd1211_al7230b_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd1211_al7230b_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 2135} {:cexpr "zd1211_al7230b_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i64($i1);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, $sub.i64(0, 1));
    $p5 := $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref($i4, 4));
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} $p6 := zd_rf_to_chip($p0);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 27668));
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 63);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p12, $sub.i16(0, 27860));
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p14, 6);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p16, $sub.i16(0, 27712));
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p18, 8);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} $i19 := zd_iowrite16_locked($p6, 87, $sub.i16(0, 27712));
    call {:si_unique_call 2138} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} $i22 := zd_iowrite16_locked($p6, 47, $sub.i16(0, 27668));
    call {:si_unique_call 2140} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} $i24 := zd_rfwritev_cr_locked($p6, std_rv, 10);
    call {:si_unique_call 2142} {:cexpr "r"} boogie_si_record_i32($i24);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} $i26 := zd_rfwrite_cr_locked($p6, 3969024);
    call {:si_unique_call 2144} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} $i28 := zd_rfwrite_cr_locked($p6, 15818072);
    call {:si_unique_call 2146} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} $i30 := zd_iowrite16a_locked($p6, ioreqs_sw, 5);
    call {:si_unique_call 2148} {:cexpr "r"} boogie_si_record_i32($i30);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} $i32 := zd_rfwritev_cr_locked($p6, $p5, 2);
    call {:si_unique_call 2150} {:cexpr "r"} boogie_si_record_i32($i32);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} $i34 := zd_rfwrite_cr_locked($p6, 3969024);
    call {:si_unique_call 2152} {:cexpr "r"} boogie_si_record_i32($i34);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} $i37 := zd_iowrite16a_locked($p6, $p36, 3);
    call {:si_unique_call 2154} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i21 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i21 := $i34;
    goto $bb3;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i21 := $i32;
    goto $bb3;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $i21 := $i30;
    goto $bb3;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i21 := $i28;
    goto $bb3;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $i21 := $i26;
    goto $bb3;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb3;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $i21 := $i22;
    goto $bb3;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb3;
}



const al7230b_switch_radio_off: ref;

axiom al7230b_switch_radio_off == $sub.ref(0, 746304);

procedure al7230b_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation al7230b_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p4, $sub.i16(0, 28628));
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p6, 4);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 27668));
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 47);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    call {:si_unique_call 2158} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const zd_rfwritev_cr_locked: ref;

axiom zd_rfwritev_cr_locked == $sub.ref(0, 747336);

procedure zd_rfwritev_cr_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_rfwritev_cr_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i12: i32;
  var $i13: i1;
  var $i4: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} {:cexpr "zd_rfwritev_cr_locked:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i3 := $ult.i32(0, $i2);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i5, $p6, $i7, $i8, $i9, $i10, $i12, $i13, $i4 := zd_rfwritev_cr_locked_loop_$bb4($p0, $p1, $i2, $i5, $p6, $i7, $i8, $i9, $i10, $i12, $i13, $i4);
    goto $bb4_last;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p1, $mul.ref($i5, 4));
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.62, $p6);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} $i8 := zd_rfwrite_cr_locked($p0, $i7);
    call {:si_unique_call 2161} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i4, 1);
    call {:si_unique_call 2162} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i13 := $ult.i32($i12, $i2);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i12;
    goto $bb10_dummy;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9414;
}



const zd_rfwrite_cr_locked: ref;

axiom zd_rfwrite_cr_locked == $sub.ref(0, 748368);

procedure zd_rfwrite_cr_locked($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_rfwrite_cr_locked($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $p21: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $i55: i32;
  var vslice_dummy_var_267: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 2165} {:cexpr "zd_rfwrite_cr_locked:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p5, $sub.i16(0, 27696));
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i1, 16);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 255);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p12, $i10);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p14, $sub.i16(0, 27700));
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i1, 8);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 255);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p21, $i19);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p23, $sub.i16(0, 27704));
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i1);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 255);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p29, $i27);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} $i31 := mutex_is_locked($p30);
    call {:si_unique_call 2167} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 2169} {:cexpr "tmp___1"} boogie_si_record_i64($i35);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p2);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} $i55 := zd_iowrite16a_locked($p0, $p54, 3);
    call {:si_unique_call 2175} {:cexpr "tmp___2"} boogie_si_record_i32($i55);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb1:
    assume $i36 == 1;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, .str.1);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, .str.29);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p39, .str.3);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str.4);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.5, $p42);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 1551);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p42, $i45);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p46, 1);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 2171} {:cexpr "tmp"} boogie_si_record_i64($i51);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} dump_stack();
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i52 == 1;
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} vslice_dummy_var_267 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.3, 1551, .str.10);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd1211b_al7230b_finalize: ref;

axiom zd1211b_al7230b_finalize == $sub.ref(0, 749400);

procedure zd1211b_al7230b_finalize($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd1211b_al7230b_finalize($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} $p1 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p3, $sub.i16(0, 28352));
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p5, 48);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p7, $sub.i16(0, 28348));
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p9, 48);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p11, $sub.i16(0, 28356));
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p13, 88);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p15, $sub.i16(0, 28624));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p17, 240);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p19, $sub.i16(0, 28364));
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p21, 27);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p23, $sub.i16(0, 28360));
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p25, 88);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p27, $sub.i16(0, 27860));
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p29, 4);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p31, 0);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p33, 0);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p35, $sub.i16(0, 27712));
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p37, 128);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} $i39 := zd_iowrite16a_locked($p0, $p38, 9);
    call {:si_unique_call 2178} {:cexpr "r"} boogie_si_record_i32($i39);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p0);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(11578, 1));
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} $i49 := zd_iowrite16_locked($p0, 4, $sub.i16(0, 27860));
    call {:si_unique_call 2182} {:cexpr "tmp"} boogie_si_record_i32($i49);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i41 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb5:
    assume $i46 == 1;
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} $i47 := zd_iowrite16_locked($p0, 229, $sub.i16(0, 28636));
    call {:si_unique_call 2180} {:cexpr "r"} boogie_si_record_i32($i47);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i41 := $i47;
    goto $bb3;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    goto $bb3;
}



const al2230_switch_radio_off: ref;

axiom al2230_switch_radio_off == $sub.ref(0, 750432);

procedure al2230_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation al2230_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p4, $sub.i16(0, 28628));
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p6, 4);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 27668));
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 47);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    call {:si_unique_call 2186} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const zd1211b_al2230_init_hw: ref;

axiom zd1211b_al2230_init_hw == $sub.ref(0, 751464);

procedure zd1211b_al2230_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.62, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.24, $M.27, $M.57, $CurrAddr;



implementation zd1211b_al2230_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p203: ref;
  var $p205: ref;
  var $p207: ref;
  var $p209: ref;
  var $p211: ref;
  var $p213: ref;
  var $p215: ref;
  var $p217: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p225: ref;
  var $p227: ref;
  var $p229: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $p245: ref;
  var $p247: ref;
  var $p249: ref;
  var $p251: ref;
  var $p253: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p272: ref;
  var $p274: ref;
  var $p276: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p283: ref;
  var $p285: ref;
  var $p287: ref;
  var $p289: ref;
  var $p291: ref;
  var $p293: ref;
  var $i294: i32;
  var $i295: i1;
  var $p297: ref;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $p301: ref;
  var $i302: i8;
  var $i303: i32;
  var $i304: i1;
  var $p306: ref;
  var $i307: i8;
  var $i308: i32;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $i315: i32;
  var $i316: i1;
  var $p317: ref;
  var $p318: ref;
  var $i319: i8;
  var $i320: i32;
  var $i321: i1;
  var $p323: ref;
  var $i324: i8;
  var $i325: i32;
  var $i326: i1;
  var $i327: i32;
  var $i329: i32;
  var $i328: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $i338: i32;
  var $i339: i1;
  var $p340: ref;
  var $i341: i32;
  var $i342: i1;
  var $i343: i32;
  var $i296: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} $p1 := $alloc($mul.ref(248, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} $p5 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} $p6 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} $p7 := zd_rf_to_chip($p0);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p9, $sub.i16(0, 28632));
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p11, 137);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p13, $sub.i16(0, 28612));
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p15, 32);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p17, $sub.i16(0, 28604));
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p19, 43);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p21, $sub.i16(0, 28580));
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p23, 64);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p25, $sub.i16(0, 28576));
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p27, 32);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p29, $sub.i16(0, 28568));
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p31, 147);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p33, $sub.i16(0, 28560));
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p35, 62);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p37, $sub.i16(0, 28556));
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p39, 0);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p41, $sub.i16(0, 28540));
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p43, 40);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p45, $sub.i16(0, 28536));
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p47, 48);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p49, $sub.i16(0, 28532));
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p51, 62);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p53, $sub.i16(0, 28508));
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p55, 36);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p57, $sub.i16(0, 28496));
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p59, 50);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p61, $sub.i16(0, 28488));
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p63, 153);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p65, $sub.i16(0, 28484));
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p67, 30);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p69, $sub.i16(0, 28480));
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p71, 6);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p73, $sub.i16(0, 28476));
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p75, 249);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p77, $sub.i16(0, 28468));
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p79, 1);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p81, $sub.i16(0, 28464));
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p83, 128);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p85, $sub.i16(0, 28460));
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p87, 126);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p89, $sub.i16(0, 28412));
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p91, 0);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p93, $sub.i16(0, 28408));
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p95, 0);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p97, $sub.i16(0, 28404));
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p99, 0);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p101, $sub.i16(0, 28400));
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p103, 0);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p105, $sub.i16(0, 28396));
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p107, 40);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p109, $sub.i16(0, 28356));
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p111, 88);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p113, $sub.i16(0, 28352));
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p115, 48);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p117, $sub.i16(0, 28348));
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p119, 48);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p121, $sub.i16(0, 28324));
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p123, 10);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p125, $sub.i16(0, 28316));
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p127, 4);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p129, $sub.i16(0, 28308));
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p131, 0);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p133, $sub.i16(0, 28304));
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p135, 10);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p137, $sub.i16(0, 28280));
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p139, 141);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p141, $sub.i16(0, 28276));
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p143, 0);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p145, $sub.i16(0, 28268));
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p147, 19);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p149, $sub.i16(0, 28264));
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p151, 39);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p153, $sub.i16(0, 28248));
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p155, 36);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p157, $sub.i16(0, 28244));
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p159, 42);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p161, $sub.i16(0, 28236));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p163, 19);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p165, $sub.i16(0, 28232));
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p167, 31);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p169, $sub.i16(0, 28228));
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p171, 31);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p173, $sub.i16(0, 28224));
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p175, 31);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p177, $sub.i16(0, 28220));
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p179, 39);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p181, $sub.i16(0, 28216));
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p183, 39);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p185, $sub.i16(0, 28212));
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p187, 38);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p189, $sub.i16(0, 28208));
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p191, 36);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p193, $sub.i16(0, 28204));
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p195, 250);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p197, $sub.i16(0, 28200));
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p199, 250);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p201, $sub.i16(0, 28196));
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p203, 16);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p205, $sub.i16(0, 28192));
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p207, 79);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p209, $sub.i16(0, 28188));
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p211, 108);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p213, $sub.i16(0, 28184));
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p215, 252);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p217, $sub.i16(0, 28180));
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p219, 87);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p221, $sub.i16(0, 28172));
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p223, 173);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p225, $sub.i16(0, 28168));
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p227, 108);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p229, $sub.i16(0, 28164));
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p231, 3);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(56, 4)), $mul.ref(0, 1));
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p233, $sub.i16(0, 28124));
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(56, 4)), $mul.ref(2, 1));
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p235, 80);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(57, 4)), $mul.ref(0, 1));
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p237, $sub.i16(0, 28120));
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(57, 4)), $mul.ref(2, 1));
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p239, 168);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(58, 4)), $mul.ref(0, 1));
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p241, $sub.i16(0, 28096));
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(58, 4)), $mul.ref(2, 1));
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p243, 172);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(59, 4)), $mul.ref(0, 1));
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p245, $sub.i16(0, 28072));
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(59, 4)), $mul.ref(2, 1));
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p247, 13);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(60, 4)), $mul.ref(0, 1));
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p249, $sub.i16(0, 27664));
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(60, 4)), $mul.ref(2, 1));
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p251, 52);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(61, 4)), $mul.ref(0, 1));
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p253, $sub.i16(0, 27660));
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(61, 4)), $mul.ref(2, 1));
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p255, 52);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p256, 9227472);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p257, 4726208);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p258, 13631232);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p259, 2465792);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 4));
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p260, 2465792);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(1, 4));
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p261, 10728176);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(2, 4));
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p262, 7184400);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(3, 4));
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p263, 14901888);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 4));
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p264, 1138688);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(5, 4));
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p265, 10338336);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(6, 4));
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p266, 6150912);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(7, 4));
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p267, 14258176);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 4));
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p268, 4193232);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(9, 4));
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p269, 11534336);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(10, 4));
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p270, 15735296);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p272, $sub.i16(0, 27668));
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p274, 47);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p276, $sub.i16(0, 27668));
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p278, 127);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p279, 15735552);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p280, 15736320);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p281, 15735296);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p283, $sub.i16(0, 28160));
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p285, 20);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p287, $sub.i16(0, 28156));
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p289, 18);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p291, $sub.i16(0, 28152));
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p293, 16);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} $i294 := zd_iowrite16a_locked($p7, zd1211b_ioreqs_shared_1, 2);
    call {:si_unique_call 2195} {:cexpr "r"} boogie_si_record_i32($i294);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 0);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p1);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} $i298 := zd_iowrite16a_locked($p7, $p297, 62);
    call {:si_unique_call 2197} {:cexpr "r"} boogie_si_record_i32($i298);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p300 := $bitcast.ref.ref($p7);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($p300, $mul.ref(11579, 1));
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $i302 := $load.i8($M.0, $p301);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i303 := $zext.i8.i32($i302);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $i304 := $ne.i32($i303, 0);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i304 == 1);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11584)), $mul.ref(11272, 1)), $mul.ref(0, 1));
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i307 := $load.i8($M.0, $p306);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $i308 := $zext.i8.i32($i307);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 10);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} $i312 := zd_rfwritev_cr_locked($p7, zd1211b_al2230_table, 3);
    call {:si_unique_call 2201} {:cexpr "r"} boogie_si_record_i32($i312);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $i313 := $ne.i32($i312, 0);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p314 := $bitcast.ref.ref($p2);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} $i315 := zd_rfwritev_cr_locked($p7, $p314, 4);
    call {:si_unique_call 2203} {:cexpr "r"} boogie_si_record_i32($i315);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p317 := $bitcast.ref.ref($p7);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($p317, $mul.ref(11579, 1));
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.0, $p318);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i32($i319);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i321 == 1);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11584)), $mul.ref(11272, 1)), $mul.ref(0, 1));
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i324 := $load.i8($M.0, $p323);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $i325 := $zext.i8.i32($i324);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 10);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i326 == 1);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} $i329 := zd_rfwrite_locked($p7, 2465792, 24);
    call {:si_unique_call 2207} {:cexpr "r"} boogie_si_record_i32($i329);
    assume {:verifier.code 0} true;
    $i328 := $i329;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $i330 := $ne.i32($i328, 0);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p331 := $bitcast.ref.ref($p3);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} $i332 := zd_rfwritev_cr_locked($p7, $p331, 11);
    call {:si_unique_call 2209} {:cexpr "r"} boogie_si_record_i32($i332);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $i333 := $ne.i32($i332, 0);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p4);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} $i335 := zd_iowrite16a_locked($p7, $p334, 2);
    call {:si_unique_call 2211} {:cexpr "r"} boogie_si_record_i32($i335);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i336 := $ne.i32($i335, 0);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p5);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} $i338 := zd_rfwritev_cr_locked($p7, $p337, 3);
    call {:si_unique_call 2213} {:cexpr "r"} boogie_si_record_i32($i338);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i339 := $ne.i32($i338, 0);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p340 := $bitcast.ref.ref($p6);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} $i341 := zd_iowrite16a_locked($p7, $p340, 3);
    call {:si_unique_call 2215} {:cexpr "r"} boogie_si_record_i32($i341);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $i342 := $ne.i32($i341, 0);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} $i343 := zd1211b_al2230_finalize_rf($p7);
    call {:si_unique_call 2217} {:cexpr "tmp___0"} boogie_si_record_i32($i343);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i296 := $i343;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $r := $i296;
    return;

  $bb41:
    assume $i342 == 1;
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $i296 := $i341;
    goto $bb3;

  $bb38:
    assume $i339 == 1;
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $i296 := $i338;
    goto $bb3;

  $bb35:
    assume $i336 == 1;
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $i296 := $i335;
    goto $bb3;

  $bb32:
    assume $i333 == 1;
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $i296 := $i332;
    goto $bb3;

  $bb29:
    assume $i330 == 1;
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $i296 := $i328;
    goto $bb3;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i326 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} $i327 := zd_rfwrite_locked($p7, 2363392, 24);
    call {:si_unique_call 2205} {:cexpr "r"} boogie_si_record_i32($i327);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $i328 := $i327;
    goto $bb28;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i321 == 1;
    goto $bb24;

  $bb20:
    assume $i316 == 1;
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $i296 := $i315;
    goto $bb3;

  $bb17:
    assume $i313 == 1;
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $i296 := $i312;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i309 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} $i310 := zd_iowrite16a_locked($p7, ioreqs_init_al2230s, 10);
    call {:si_unique_call 2199} {:cexpr "r"} boogie_si_record_i32($i310);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $i311 := $ne.i32($i310, 0);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i311 == 1;
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i296 := $i310;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i304 == 1;
    goto $bb9;

  $bb5:
    assume $i299 == 1;
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i296 := $i298;
    goto $bb3;

  $bb1:
    assume $i295 == 1;
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $i296 := $i294;
    goto $bb3;
}



const zd1211b_al2230_set_channel: ref;

axiom zd1211b_al2230_set_channel == $sub.ref(0, 752496);

procedure zd1211b_al2230_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.30, $M.29, $CurrAddr;



implementation zd1211b_al2230_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} {:cexpr "zd1211b_al2230_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i64($i1);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, $sub.i64(0, 1));
    $p4 := $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref($i3, 4));
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} $p5 := zd_rf_to_chip($p0);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} $i6 := zd_iowrite16a_locked($p5, zd1211b_ioreqs_shared_1, 2);
    call {:si_unique_call 2221} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} $i9 := zd_rfwritev_cr_locked($p5, $p4, 3);
    call {:si_unique_call 2223} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} $i11 := zd1211b_al2230_finalize_rf($p5);
    call {:si_unique_call 2225} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const zd1211b_al2230_switch_radio_on: ref;

axiom zd1211b_al2230_switch_radio_on == $sub.ref(0, 753528);

procedure zd1211b_al2230_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd1211b_al2230_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p4, $sub.i16(0, 28628));
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p6, 0);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 27668));
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 127);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    call {:si_unique_call 2229} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const zd1211_al2230_init_hw: ref;

axiom zd1211_al2230_init_hw == $sub.ref(0, 754560);

procedure zd1211_al2230_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.54, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.24, $M.27, $M.57, $CurrAddr;



implementation zd1211_al2230_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p110: ref;
  var $p112: ref;
  var $p114: ref;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $p136: ref;
  var $p138: ref;
  var $p140: ref;
  var $p142: ref;
  var $p144: ref;
  var $p146: ref;
  var $p148: ref;
  var $p150: ref;
  var $p152: ref;
  var $p154: ref;
  var $p156: ref;
  var $p158: ref;
  var $p160: ref;
  var $p162: ref;
  var $p164: ref;
  var $p166: ref;
  var $p168: ref;
  var $p170: ref;
  var $p172: ref;
  var $p174: ref;
  var $p176: ref;
  var $p178: ref;
  var $p180: ref;
  var $p182: ref;
  var $p184: ref;
  var $p186: ref;
  var $p188: ref;
  var $p190: ref;
  var $p192: ref;
  var $p194: ref;
  var $p196: ref;
  var $p198: ref;
  var $p200: ref;
  var $p202: ref;
  var $p204: ref;
  var $p206: ref;
  var $p208: ref;
  var $p210: ref;
  var $p212: ref;
  var $p214: ref;
  var $p216: ref;
  var $p218: ref;
  var $p220: ref;
  var $p222: ref;
  var $p224: ref;
  var $p226: ref;
  var $p228: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $i254: i32;
  var $i255: i1;
  var $p257: ref;
  var $p258: ref;
  var $i259: i8;
  var $i260: i32;
  var $i261: i1;
  var $p263: ref;
  var $i264: i8;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $i274: i8;
  var $i275: i32;
  var $i276: i1;
  var $p278: ref;
  var $i279: i8;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $i284: i32;
  var $i283: i32;
  var $i285: i1;
  var $p286: ref;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $i290: i32;
  var $i291: i1;
  var $p292: ref;
  var $i293: i32;
  var $i294: i1;
  var $i256: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} $p1 := $alloc($mul.ref(208, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $p4 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} $p5 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} $p6 := zd_rf_to_chip($p0);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 28612));
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 32);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p12, $sub.i16(0, 28580));
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p14, 64);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p16, $sub.i16(0, 28576));
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p18, 32);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p20, $sub.i16(0, 28568));
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p22, 17);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p24, $sub.i16(0, 28560));
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p26, 62);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p28, $sub.i16(0, 28556));
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p30, 0);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p32, $sub.i16(0, 28496));
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p34, 51);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p36, $sub.i16(0, 28248));
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p38, 42);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p40, $sub.i16(0, 28244));
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p42, 26);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p44, $sub.i16(0, 28236));
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p46, 9);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p48, $sub.i16(0, 28232));
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p50, 39);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p52, $sub.i16(0, 28228));
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p54, 43);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p56, $sub.i16(0, 28224));
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p58, 43);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p60, $sub.i16(0, 28196));
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p62, 10);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p64, $sub.i16(0, 28632));
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p66, 137);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p68, $sub.i16(0, 28604));
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p70, 40);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p72, $sub.i16(0, 28568));
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p74, 147);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p76, $sub.i16(0, 28536));
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p78, 48);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p80, $sub.i16(0, 28532));
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p82, 62);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p84, $sub.i16(0, 28508));
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p86, 36);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p88, $sub.i16(0, 28496));
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p90, 50);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p92, $sub.i16(0, 28488));
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p94, 150);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p96, $sub.i16(0, 28484));
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p98, 30);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p100, $sub.i16(0, 28356));
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p102, 88);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p104, $sub.i16(0, 28352));
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p106, 48);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p108, $sub.i16(0, 28348));
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p110, 48);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p112, $sub.i16(0, 28324));
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p114, 10);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p116, $sub.i16(0, 28316));
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p118, 4);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p120, $sub.i16(0, 28304));
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p122, 10);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p124, $sub.i16(0, 28276));
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p126, 40);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p128, $sub.i16(0, 28272));
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p130, 0);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p132, $sub.i16(0, 28268));
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p134, 19);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p136, $sub.i16(0, 28264));
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p138, 39);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p140, $sub.i16(0, 28248));
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p142, 36);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p144, $sub.i16(0, 28244));
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p146, 42);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p148, $sub.i16(0, 28236));
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p150, 9);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p152, $sub.i16(0, 28232));
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p154, 19);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p156, $sub.i16(0, 28228));
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p158, 31);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p160, $sub.i16(0, 28224));
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p162, 31);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p164, $sub.i16(0, 28220));
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p166, 39);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p168, $sub.i16(0, 28216));
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p170, 39);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p172, $sub.i16(0, 28212));
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p174, 36);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p176, $sub.i16(0, 28208));
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p178, 36);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p180, $sub.i16(0, 28204));
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p182, 244);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p184, $sub.i16(0, 28200));
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p186, 252);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p188, $sub.i16(0, 28196));
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p190, 16);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p192, $sub.i16(0, 28192));
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p194, 79);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p196, $sub.i16(0, 28188));
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p198, 119);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p200, $sub.i16(0, 28184));
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p202, 224);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p204, $sub.i16(0, 28124));
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p206, 136);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p208, $sub.i16(0, 27664));
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p210, 255);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p212, $sub.i16(0, 27660));
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p214, 255);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p216, $sub.i16(0, 27668));
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p218, 47);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p220, $sub.i16(0, 27668));
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p222, 63);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p224, $sub.i16(0, 28120));
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p226, 40);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p228, $sub.i16(0, 27860));
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p230, 6);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 4));
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p231, 259984);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(1, 4));
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p232, 209713);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(2, 4));
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p233, 13);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(3, 4));
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p234, 734001);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(4, 4));
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p235, 243730);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(5, 4));
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p236, 65523);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(0, 4));
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p237, 3492);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(1, 4));
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p238, 1002949);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(2, 4));
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p239, 525750);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(3, 4));
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p240, 71303);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(4, 4));
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p241, 1672);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(5, 4));
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p242, 263097);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(6, 4));
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p243, 56250);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(7, 4));
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p244, 2459);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(8, 4));
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p245, 778236);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(9, 4));
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p246, 13);
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(10, 4));
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p247, 20495);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(0, 4));
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p248, 53263);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(1, 4));
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p249, 19471);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(2, 4));
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p250, 21519);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(3, 4));
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p251, 28687);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(4, 4));
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p252, 20495);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $p253 := $bitcast.ref.ref($p1);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} $i254 := zd_iowrite16a_locked($p6, $p253, 52);
    call {:si_unique_call 2237} {:cexpr "r"} boogie_si_record_i32($i254);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $i255 := $ne.i32($i254, 0);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p257 := $bitcast.ref.ref($p6);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($p257, $mul.ref(11579, 1));
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.0, $p258);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $i260 := $zext.i8.i32($i259);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i260, 0);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i261 == 1);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11584)), $mul.ref(11272, 1)), $mul.ref(0, 1));
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.0, $p263);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $i265 := $zext.i8.i32($i264);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 10);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p3);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} $i270 := zd_rfwritev_locked($p6, $p269, 6, 24);
    call {:si_unique_call 2241} {:cexpr "r"} boogie_si_record_i32($i270);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 0);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p272 := $bitcast.ref.ref($p6);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($p272, $mul.ref(11579, 1));
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $i274 := $load.i8($M.0, $p273);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i275 := $zext.i8.i32($i274);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i276 == 1);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11584)), $mul.ref(11272, 1)), $mul.ref(0, 1));
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $i279 := $load.i8($M.0, $p278);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $i280 := $zext.i8.i32($i279);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 10);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i281 == 1);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} $i284 := zd_rfwrite_locked($p6, 1444, 24);
    call {:si_unique_call 2245} {:cexpr "r"} boogie_si_record_i32($i284);
    assume {:verifier.code 0} true;
    $i283 := $i284;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $i285 := $ne.i32($i283, 0);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p4);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} $i287 := zd_rfwritev_locked($p6, $p286, 11, 24);
    call {:si_unique_call 2247} {:cexpr "r"} boogie_si_record_i32($i287);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p2);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} $i290 := zd_iowrite16a_locked($p6, $p289, 4);
    call {:si_unique_call 2249} {:cexpr "r"} boogie_si_record_i32($i290);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $i291 := $ne.i32($i290, 0);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p292 := $bitcast.ref.ref($p5);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} $i293 := zd_rfwritev_locked($p6, $p292, 5, 24);
    call {:si_unique_call 2251} {:cexpr "r"} boogie_si_record_i32($i293);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i256 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $r := $i256;
    return;

  $bb32:
    assume $i294 == 1;
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $i256 := $i293;
    goto $bb3;

  $bb29:
    assume $i291 == 1;
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $i256 := $i290;
    goto $bb3;

  $bb26:
    assume $i288 == 1;
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $i256 := $i287;
    goto $bb3;

  $bb23:
    assume $i285 == 1;
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i256 := $i283;
    goto $bb3;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i281 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} $i282 := zd_rfwrite_locked($p6, 2084, 24);
    call {:si_unique_call 2243} {:cexpr "r"} boogie_si_record_i32($i282);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i283 := $i282;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i276 == 1;
    goto $bb18;

  $bb14:
    assume $i271 == 1;
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $i256 := $i270;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} $i267 := zd_iowrite16a_locked($p6, ioreqs_init_al2230s, 10);
    call {:si_unique_call 2239} {:cexpr "r"} boogie_si_record_i32($i267);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i268 == 1;
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $i256 := $i267;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i261 == 1;
    goto $bb6;

  $bb1:
    assume $i255 == 1;
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $i256 := $i254;
    goto $bb3;
}



const zd1211_al2230_set_channel: ref;

axiom zd1211_al2230_set_channel == $sub.ref(0, 755592);

procedure zd1211_al2230_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.24, $M.27, $M.57, $CurrAddr;



implementation zd1211_al2230_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2253} {:cexpr "zd1211_al2230_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i64($i1);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, $sub.i64(0, 1));
    $p5 := $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref($i4, 4));
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} $p6 := zd_rf_to_chip($p0);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 28120));
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 40);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p12, $sub.i16(0, 27860));
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p14, 6);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} $i15 := zd_rfwritev_locked($p6, $p5, 3, 24);
    call {:si_unique_call 2256} {:cexpr "r"} boogie_si_record_i32($i15);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} $i19 := zd_iowrite16a_locked($p6, $p18, 2);
    call {:si_unique_call 2258} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb3;
}



const zd1211_al2230_switch_radio_on: ref;

axiom zd1211_al2230_switch_radio_on == $sub.ref(0, 756624);

procedure zd1211_al2230_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd1211_al2230_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p4, $sub.i16(0, 28628));
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p6, 0);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p8, $sub.i16(0, 27668));
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p10, 63);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    call {:si_unique_call 2262} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const zd1211b_al2230_finalize_rf: ref;

axiom zd1211b_al2230_finalize_rf == $sub.ref(0, 757656);

procedure zd1211b_al2230_finalize_rf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd1211b_al2230_finalize_rf($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} $p1 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p3, $sub.i16(0, 28352));
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p5, 48);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p7, $sub.i16(0, 28348));
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p9, 48);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p11, $sub.i16(0, 28356));
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p13, 88);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p15, $sub.i16(0, 28624));
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p17, 240);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p19, $sub.i16(0, 28364));
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p21, 27);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p23, $sub.i16(0, 28360));
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p25, 88);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p27, $sub.i16(0, 27860));
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p29, 6);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p31, 0);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p33, 0);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p35, $sub.i16(0, 27712));
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p37, 128);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $i39 := zd_iowrite16a_locked($p0, $p38, 9);
    call {:si_unique_call 2265} {:cexpr "r"} boogie_si_record_i32($i39);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p0);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(11578, 1));
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} $i49 := zd_iowrite16_locked($p0, 6, $sub.i16(0, 27860));
    call {:si_unique_call 2269} {:cexpr "tmp"} boogie_si_record_i32($i49);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $i41 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb5:
    assume $i46 == 1;
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} $i47 := zd_iowrite16_locked($p0, 225, $sub.i16(0, 28636));
    call {:si_unique_call 2267} {:cexpr "r"} boogie_si_record_i32($i47);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $i41 := $i47;
    goto $bb3;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    goto $bb3;
}



const rf2959_init_hw: ref;

axiom rf2959_init_hw == $sub.ref(0, 758688);

procedure rf2959_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.54, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.24, $M.27, $M.57, $CurrAddr;



implementation rf2959_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p203: ref;
  var $p205: ref;
  var $p207: ref;
  var $p209: ref;
  var $p211: ref;
  var $p213: ref;
  var $p215: ref;
  var $p217: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p225: ref;
  var $p227: ref;
  var $p229: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $p245: ref;
  var $p247: ref;
  var $p249: ref;
  var $p251: ref;
  var $p253: ref;
  var $p255: ref;
  var $p257: ref;
  var $p259: ref;
  var $p261: ref;
  var $p263: ref;
  var $p265: ref;
  var $p267: ref;
  var $p269: ref;
  var $p271: ref;
  var $p273: ref;
  var $p275: ref;
  var $p277: ref;
  var $p279: ref;
  var $p281: ref;
  var $p283: ref;
  var $p285: ref;
  var $p287: ref;
  var $p289: ref;
  var $p291: ref;
  var $p293: ref;
  var $p295: ref;
  var $p297: ref;
  var $p299: ref;
  var $p301: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i32;
  var $i323: i1;
  var $p325: ref;
  var $i326: i32;
  var $i324: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} $p1 := $alloc($mul.ref(300, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} $p2 := $alloc($mul.ref(68, $zext.i32.i64(1)));
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} $p3 := zd_rf_to_chip($p0);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p5, $sub.i16(0, 28664));
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p7, 30);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p9, $sub.i16(0, 28636));
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p11, 32);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p13, $sub.i16(0, 28632));
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p15, 137);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p17, $sub.i16(0, 28628));
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p19, 0);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p21, $sub.i16(0, 28612));
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p23, 208);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p25, $sub.i16(0, 28604));
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p27, 104);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p29, $sub.i16(0, 28596));
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p31, 74);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p33, $sub.i16(0, 28592));
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p35, 12);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p37, $sub.i16(0, 28588));
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p39, 14);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p41, $sub.i16(0, 28580));
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p43, 72);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p45, $sub.i16(0, 28576));
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p47, 20);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p49, $sub.i16(0, 28568));
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p51, 144);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p53, $sub.i16(0, 28564));
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p55, 48);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p57, $sub.i16(0, 28556));
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p59, 32);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p61, $sub.i16(0, 28548));
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p63, 178);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p65, $sub.i16(0, 28544));
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p67, 67);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p69, $sub.i16(0, 28540));
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p71, 40);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p73, $sub.i16(0, 28520));
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p75, 48);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p77, $sub.i16(0, 28536));
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p79, 15);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p81, $sub.i16(0, 28532));
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p83, 240);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p85, $sub.i16(0, 28508));
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p87, 42);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p89, $sub.i16(0, 28488));
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p91, 127);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p93, $sub.i16(0, 28484));
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p95, 30);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p97, $sub.i16(0, 28468));
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p99, 197);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p101, $sub.i16(0, 28464));
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p103, 197);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p105, $sub.i16(0, 28460));
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p107, 197);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p109, $sub.i16(0, 28356));
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p111, 88);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p113, $sub.i16(0, 28352));
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p115, 48);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p117, $sub.i16(0, 28348));
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p119, 48);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p121, $sub.i16(0, 28344));
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p123, 0);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p125, $sub.i16(0, 28340));
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p127, 36);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p129, $sub.i16(0, 28336));
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p131, 4);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p133, $sub.i16(0, 28332));
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p135, 0);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p137, $sub.i16(0, 28328));
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p139, 16);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p141, $sub.i16(0, 28324));
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p143, 42);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p145, $sub.i16(0, 28320));
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p147, 16);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p149, $sub.i16(0, 28316));
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p151, 36);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p153, $sub.i16(0, 28312));
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p155, 24);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p157, $sub.i16(0, 28308));
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p159, 0);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p161, $sub.i16(0, 28304));
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p163, 10);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p165, $sub.i16(0, 28300));
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p167, 0);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p169, $sub.i16(0, 28296));
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p171, 1);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p173, $sub.i16(0, 28292));
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p175, 0);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p177, $sub.i16(0, 28288));
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p179, 64);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p181, $sub.i16(0, 28284));
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p183, 55);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p185, $sub.i16(0, 28280));
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p187, 5);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p189, $sub.i16(0, 28276));
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p191, 40);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p193, $sub.i16(0, 28272));
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p195, 0);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p197, $sub.i16(0, 28268));
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p199, 19);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p201, $sub.i16(0, 28264));
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p203, 39);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p205, $sub.i16(0, 28260));
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p207, 39);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p209, $sub.i16(0, 28256));
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p211, 24);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p213, $sub.i16(0, 28252));
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p215, 18);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p217, $sub.i16(0, 28248));
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p219, 26);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p221, $sub.i16(0, 28244));
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p223, 36);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p225, $sub.i16(0, 28240));
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p227, 10);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(56, 4)), $mul.ref(0, 1));
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p229, $sub.i16(0, 28236));
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(56, 4)), $mul.ref(2, 1));
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p231, 19);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(57, 4)), $mul.ref(0, 1));
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p233, $sub.i16(0, 28232));
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(57, 4)), $mul.ref(2, 1));
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p235, 47);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(58, 4)), $mul.ref(0, 1));
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p237, $sub.i16(0, 28228));
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(58, 4)), $mul.ref(2, 1));
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p239, 39);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(59, 4)), $mul.ref(0, 1));
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p241, $sub.i16(0, 28224));
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(59, 4)), $mul.ref(2, 1));
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p243, 39);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(60, 4)), $mul.ref(0, 1));
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p245, $sub.i16(0, 28220));
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(60, 4)), $mul.ref(2, 1));
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p247, 39);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(61, 4)), $mul.ref(0, 1));
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p249, $sub.i16(0, 28216));
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(61, 4)), $mul.ref(2, 1));
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p251, 39);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(62, 4)), $mul.ref(0, 1));
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p253, $sub.i16(0, 28212));
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(62, 4)), $mul.ref(2, 1));
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p255, 64);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(63, 4)), $mul.ref(0, 1));
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p257, $sub.i16(0, 28208));
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(63, 4)), $mul.ref(2, 1));
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p259, 64);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(64, 4)), $mul.ref(0, 1));
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p261, $sub.i16(0, 28204));
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(64, 4)), $mul.ref(2, 1));
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p263, 240);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(65, 4)), $mul.ref(0, 1));
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p265, $sub.i16(0, 28200));
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(65, 4)), $mul.ref(2, 1));
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p267, 240);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(66, 4)), $mul.ref(0, 1));
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p269, $sub.i16(0, 28196));
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(66, 4)), $mul.ref(2, 1));
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p271, 22);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(67, 4)), $mul.ref(0, 1));
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p273, $sub.i16(0, 28184));
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(67, 4)), $mul.ref(2, 1));
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p275, 0);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(68, 4)), $mul.ref(0, 1));
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p277, $sub.i16(0, 28164));
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(68, 4)), $mul.ref(2, 1));
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p279, 3);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(69, 4)), $mul.ref(0, 1));
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p281, $sub.i16(0, 28148));
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(69, 4)), $mul.ref(2, 1));
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p283, 8);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(70, 4)), $mul.ref(0, 1));
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p285, $sub.i16(0, 28120));
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(70, 4)), $mul.ref(2, 1));
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p287, 40);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(71, 4)), $mul.ref(0, 1));
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p289, $sub.i16(0, 28080));
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(71, 4)), $mul.ref(2, 1));
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p291, 68);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(72, 4)), $mul.ref(0, 1));
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p293, $sub.i16(0, 28072));
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(72, 4)), $mul.ref(2, 1));
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p295, 16);
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(73, 4)), $mul.ref(0, 1));
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p297, $sub.i16(0, 27996));
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(73, 4)), $mul.ref(2, 1));
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p299, 187);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(74, 4)), $mul.ref(0, 1));
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p301, $sub.i16(0, 27992));
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(74, 4)), $mul.ref(2, 1));
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p303, 187);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 4));
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p304, 7);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(1, 4));
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p305, 515395);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(2, 4));
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p306, 526681);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(3, 4));
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p307, 943718);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(4, 4));
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p308, 1141335);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(5, 4));
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p309, 1563971);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(6, 4));
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p310, 1579513);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(7, 4));
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p311, 1992294);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(8, 4));
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p312, 2180436);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(9, 4));
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p313, 2484218);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(10, 4));
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p314, 2621434);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(11, 4));
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p315, 2703656);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(12, 4));
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p316, 2883584);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(13, 4));
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p317, 3145728);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(14, 4));
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p318, 3407872);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(15, 4));
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p319, 3677711);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(16, 4));
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p320, 7084047);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p1);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} $i322 := zd_iowrite16a_locked($p3, $p321, 75);
    call {:si_unique_call 2274} {:cexpr "r"} boogie_si_record_i32($i322);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p325 := $bitcast.ref.ref($p2);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} $i326 := zd_rfwritev_locked($p3, $p325, 17, 24);
    call {:si_unique_call 2276} {:cexpr "tmp___0"} boogie_si_record_i32($i326);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $i324 := $i326;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $r := $i324;
    return;

  $bb1:
    assume $i323 == 1;
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $i324 := $i322;
    goto $bb3;
}



const rf2959_set_channel: ref;

axiom rf2959_set_channel == $sub.ref(0, 759720);

procedure rf2959_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.27, $M.0, $M.57, $CurrAddr;



implementation rf2959_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} {:cexpr "rf2959_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i64($i1);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, $sub.i64(0, 1));
    $p4 := $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref($i3, 4));
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} $p5 := zd_rf_to_chip($p0);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.63, $p4);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} $i7 := zd_rfwrite_locked($p5, $i6, 24);
    call {:si_unique_call 2280} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $i11 := $add.i64($i3, 1);
    $p12 := $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref($i11, 4));
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.63, $p12);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} $i14 := zd_rfwrite_locked($p5, $i13, 24);
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb6;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const rf2959_switch_radio_on: ref;

axiom rf2959_switch_radio_on == $sub.ref(0, 760752);

procedure rf2959_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation rf2959_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p3, $sub.i16(0, 28632));
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p5, 137);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p7, $sub.i16(0, 28628));
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p9, 0);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} $p10 := zd_rf_to_chip($p0);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} $i12 := zd_iowrite16a_locked($p10, $p11, 2);
    call {:si_unique_call 2285} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const rf2959_switch_radio_off: ref;

axiom rf2959_switch_radio_off == $sub.ref(0, 761784);

procedure rf2959_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation rf2959_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p3, $sub.i16(0, 28632));
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p5, 21);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p7, $sub.i16(0, 28628));
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p9, 129);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} $p10 := zd_rf_to_chip($p0);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} $i12 := zd_iowrite16a_locked($p10, $p11, 2);
    call {:si_unique_call 2289} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const hw_reset_phy: ref;

axiom hw_reset_phy == $sub.ref(0, 762816);

procedure hw_reset_phy($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $CurrAddr, $M.27;



implementation hw_reset_phy($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i5: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} $i1 := zd_chip_is_zd1211b($p0);
    call {:si_unique_call 2291} {:cexpr "tmp___3"} boogie_si_record_i32($i1);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} $i5 := zd1211_hw_reset_phy($p0);
    call {:si_unique_call 2295} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} $i3 := zd1211b_hw_reset_phy($p0);
    call {:si_unique_call 2293} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb3;
}



const hw_init_hmac: ref;

axiom hw_init_hmac == $sub.ref(0, 763848);

procedure hw_init_hmac($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $CurrAddr;



implementation hw_init_hmac($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i24;
  var $i97: i24;
  var $i98: i24;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i115: i32;
  var $i114: i32;
  var $i110: i32;
  var vslice_dummy_var_268: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} $p1 := $alloc($mul.ref(160, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 26992));
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 32);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27384));
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 805308424);
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $sub.i16(0, 27020));
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $sub.i16(0, 26996));
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 604045311);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $sub.i16(0, 27100));
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $sub.i16(0, 27096));
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $sub.i32(0, 2147483648));
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $sub.i16(0, 27008));
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 164);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $sub.i16(0, 27388));
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 127);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $sub.i16(0, 27104));
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 15729665);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, $sub.i16(0, 27028));
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $sub.i16(0, 26992));
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 128);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p48, $sub.i16(0, 27388));
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $sub.i16(0, 27048));
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 256);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(13, 8)), $mul.ref(0, 1));
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, $sub.i16(0, 27524));
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(13, 8)), $mul.ref(4, 1));
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 112);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(14, 8)), $mul.ref(0, 1));
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, $sub.i16(0, 27392));
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(14, 8)), $mul.ref(4, 1));
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 268435456);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(15, 8)), $mul.ref(0, 1));
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p64, $sub.i16(0, 27080));
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(15, 8)), $mul.ref(4, 1));
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 33751555);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 8)), $mul.ref(0, 1));
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, $sub.i16(0, 27064));
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 8)), $mul.ref(4, 1));
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 1);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(17, 8)), $mul.ref(0, 1));
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $sub.i16(0, 27076));
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(17, 8)), $mul.ref(4, 1));
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 276);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(18, 8)), $mul.ref(0, 1));
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p76, $sub.i16(0, 26984));
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(18, 8)), $mul.ref(4, 1));
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 172474418);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(19, 8)), $mul.ref(0, 1));
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, $sub.i16(0, 26880));
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(19, 8)), $mul.ref(4, 1));
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 3);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} $i84 := mutex_is_locked($p83);
    call {:si_unique_call 2299} {:cexpr "tmp___0"} boogie_si_record_i32($i84);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i32($i85);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 2301} {:cexpr "tmp___1"} boogie_si_record_i64($i88);
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p1);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} $i108 := zd_iowrite32a_locked($p0, $p107, 20);
    call {:si_unique_call 2307} {:cexpr "r"} boogie_si_record_i32($i108);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} $i111 := zd_chip_is_zd1211b($p0);
    call {:si_unique_call 2309} {:cexpr "tmp___6"} boogie_si_record_i32($i111);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i112 == 1);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} $i115 := zd1211_hw_init_hmac($p0);
    call {:si_unique_call 2313} {:cexpr "tmp___4"} boogie_si_record_i32($i115);
    assume {:verifier.code 0} true;
    $i114 := $i115;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i110 := $i114;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $r := $i110;
    return;

  $bb11:
    assume $i112 == 1;
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} $i113 := zd1211b_hw_init_hmac($p0);
    call {:si_unique_call 2311} {:cexpr "tmp___3"} boogie_si_record_i32($i113);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $i114 := $i113;
    goto $bb13;

  $bb7:
    assume $i109 == 1;
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $i110 := $i108;
    goto $bb9;

  $bb1:
    assume $i89 == 1;
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p90, .str.1);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p91, .str.127);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p92, .str.3);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p93, .str.4);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $i96 := $load.i24($M.5, $p95);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $i97 := $and.i24($i96, $sub.i24(0, 262144));
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $i98 := $or.i24($i97, 876);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p95, $i98);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p99, 1);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.6, $p100);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i64($i101);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $i103 := $and.i64($i102, 1);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 2303} {:cexpr "tmp"} boogie_si_record_i64($i104);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} dump_stack();
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i105 == 1;
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} vslice_dummy_var_268 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 876, .str.10);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd1211b_hw_init_hmac: ref;

axiom zd1211b_hw_init_hmac == $sub.ref(0, 764880);

procedure zd1211b_hw_init_hmac($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $CurrAddr;



implementation zd1211b_hw_init_hmac($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i24;
  var $i58: i24;
  var $i59: i24;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $p68: ref;
  var $i69: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} $p1 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 25816));
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 25856));
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 8323135);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $sub.i16(0, 25852));
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 8323135);
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $sub.i16(0, 25848));
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 4128799);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $sub.i16(0, 25844));
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 2031631);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $sub.i16(0, 25840));
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 2621480);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $sub.i16(0, 25836));
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 9175100);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $sub.i16(0, 25824));
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 25167908);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $sub.i16(0, 27072));
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 790271);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} vslice_dummy_var_269 := dev_printk.ref.ref.ref.ref(.str.6, $p42, .str.26, .str.128);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} $i45 := mutex_is_locked($p44);
    call {:si_unique_call 2318} {:cexpr "tmp___0"} boogie_si_record_i32($i45);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 2320} {:cexpr "tmp___1"} boogie_si_record_i64($i49);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p1);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} $i69 := zd_iowrite32a_locked($p0, $p68, 9);
    call {:si_unique_call 2326} {:cexpr "tmp___2"} boogie_si_record_i32($i69);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $r := $i69;
    return;

  $bb1:
    assume $i50 == 1;
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p51, .str.1);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p52, .str.128);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p53, .str.3);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p54, .str.4);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $i57 := $load.i24($M.5, $p56);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $i58 := $and.i24($i57, $sub.i24(0, 262144));
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $i59 := $or.i24($i58, 846);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p56, $i59);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p60, 1);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.6, $p61);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i64($i62);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i63, 1);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 2322} {:cexpr "tmp"} boogie_si_record_i64($i65);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} dump_stack();
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i66 == 1;
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} vslice_dummy_var_270 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 846, .str.10);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd1211_hw_init_hmac: ref;

axiom zd1211_hw_init_hmac == $sub.ref(0, 765912);

procedure zd1211_hw_init_hmac($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $CurrAddr;



implementation zd1211_hw_init_hmac($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $i41: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 27012));
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27072));
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 788032);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} vslice_dummy_var_271 := dev_printk.ref.ref.ref.ref(.str.6, $p14, .str.26, .str.129);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} $i17 := mutex_is_locked($p16);
    call {:si_unique_call 2331} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 2333} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p1);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} $i41 := zd_iowrite32a_locked($p0, $p40, 2);
    call {:si_unique_call 2339} {:cexpr "tmp___2"} boogie_si_record_i32($i41);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, .str.1);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p24, .str.129);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p25, .str.3);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p26, .str.4);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.5, $p28);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 827);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p28, $i31);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, 1);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.6, $p33);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 2335} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} dump_stack();
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i38 == 1;
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} vslice_dummy_var_272 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 827, .str.10);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd1211b_hw_reset_phy: ref;

axiom zd1211b_hw_reset_phy == $sub.ref(0, 766944);

procedure zd1211b_hw_reset_phy($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $CurrAddr, $M.27;



implementation zd1211b_hw_reset_phy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p203: ref;
  var $p205: ref;
  var $p207: ref;
  var $p209: ref;
  var $p211: ref;
  var $p213: ref;
  var $p215: ref;
  var $p217: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p225: ref;
  var $p227: ref;
  var $p229: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $p245: ref;
  var $p247: ref;
  var $p249: ref;
  var $p251: ref;
  var $p253: ref;
  var $p255: ref;
  var $p257: ref;
  var $p259: ref;
  var $p261: ref;
  var $p263: ref;
  var $p265: ref;
  var $p267: ref;
  var $p269: ref;
  var $p271: ref;
  var $p273: ref;
  var $p275: ref;
  var $p277: ref;
  var $p279: ref;
  var $p281: ref;
  var $p283: ref;
  var $p285: ref;
  var $p287: ref;
  var $p289: ref;
  var $p291: ref;
  var $p293: ref;
  var $p295: ref;
  var $p297: ref;
  var $p299: ref;
  var $p301: ref;
  var $p303: ref;
  var $p305: ref;
  var $p307: ref;
  var $p309: ref;
  var $p311: ref;
  var $p313: ref;
  var $p315: ref;
  var $p317: ref;
  var $p319: ref;
  var $p321: ref;
  var $p323: ref;
  var $p325: ref;
  var $p327: ref;
  var $p329: ref;
  var $p331: ref;
  var $p333: ref;
  var $p335: ref;
  var $p337: ref;
  var $p339: ref;
  var $p341: ref;
  var $p343: ref;
  var $p345: ref;
  var $p347: ref;
  var $p349: ref;
  var $p351: ref;
  var $p353: ref;
  var $p355: ref;
  var $p357: ref;
  var $p359: ref;
  var $p361: ref;
  var $p363: ref;
  var $p365: ref;
  var $p367: ref;
  var $p369: ref;
  var $p371: ref;
  var $p373: ref;
  var $p375: ref;
  var $p377: ref;
  var $p379: ref;
  var $p381: ref;
  var $p383: ref;
  var $p385: ref;
  var $p387: ref;
  var $p389: ref;
  var $p391: ref;
  var $p393: ref;
  var $p395: ref;
  var $p397: ref;
  var $p399: ref;
  var $p401: ref;
  var $p403: ref;
  var $p405: ref;
  var $p407: ref;
  var $p409: ref;
  var $p411: ref;
  var $p413: ref;
  var $p415: ref;
  var $p417: ref;
  var $p419: ref;
  var $p421: ref;
  var $p423: ref;
  var $p425: ref;
  var $p427: ref;
  var $p429: ref;
  var $p431: ref;
  var $p433: ref;
  var $p435: ref;
  var $p437: ref;
  var $p439: ref;
  var $p441: ref;
  var $p443: ref;
  var $p445: ref;
  var $p447: ref;
  var $p449: ref;
  var $p451: ref;
  var $p453: ref;
  var $p455: ref;
  var $p457: ref;
  var $p459: ref;
  var $p461: ref;
  var $p463: ref;
  var $p465: ref;
  var $p467: ref;
  var $p469: ref;
  var $p471: ref;
  var $p473: ref;
  var $p475: ref;
  var $p477: ref;
  var $p479: ref;
  var $p481: ref;
  var $p483: ref;
  var $p485: ref;
  var $p487: ref;
  var $p489: ref;
  var $p491: ref;
  var $p493: ref;
  var $p495: ref;
  var $p497: ref;
  var $p499: ref;
  var $p501: ref;
  var $p503: ref;
  var $p505: ref;
  var $p507: ref;
  var $p509: ref;
  var $p511: ref;
  var $p513: ref;
  var $p515: ref;
  var $p517: ref;
  var $p519: ref;
  var $p521: ref;
  var $p523: ref;
  var $p525: ref;
  var $p527: ref;
  var $p529: ref;
  var $p531: ref;
  var $p533: ref;
  var $p535: ref;
  var $p537: ref;
  var $p539: ref;
  var $p541: ref;
  var $p543: ref;
  var $p545: ref;
  var $p547: ref;
  var $p549: ref;
  var $p551: ref;
  var $p553: ref;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $i559: i32;
  var $i560: i1;
  var $p562: ref;
  var $i563: i32;
  var $i564: i32;
  var $i565: i1;
  var $i566: i1;
  var $i567: i32;
  var $i561: i32;
  var vslice_dummy_var_273: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} $p1 := $alloc($mul.ref(552, $zext.i32.i64(1)));
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p3, $sub.i16(0, 28672));
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p5, 20);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p7, $sub.i16(0, 28668));
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p9, 6);
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p11, $sub.i16(0, 28664));
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p13, 38);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p15, $sub.i16(0, 28660));
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p17, 56);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p19, $sub.i16(0, 28640));
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p21, 128);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p23, $sub.i16(0, 28636));
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p25, 224);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p27, $sub.i16(0, 28632));
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p29, 129);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p31, $sub.i16(0, 28628));
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p33, 0);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p35, $sub.i16(0, 28624));
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p37, 240);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p39, $sub.i16(0, 28620));
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p41, 140);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p43, $sub.i16(0, 28616));
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p45, 128);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p47, $sub.i16(0, 28612));
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p49, 61);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p51, $sub.i16(0, 28608));
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p53, 32);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p55, $sub.i16(0, 28604));
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p57, 30);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p59, $sub.i16(0, 28600));
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p61, 10);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p63, $sub.i16(0, 28596));
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p65, 72);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p67, $sub.i16(0, 28592));
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p69, 16);
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p71, $sub.i16(0, 28588));
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p73, 14);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p75, $sub.i16(0, 28584));
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p77, 35);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p79, $sub.i16(0, 28580));
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p81, 144);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p83, $sub.i16(0, 28576));
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p85, 20);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p87, $sub.i16(0, 28572));
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p89, 64);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p91, $sub.i16(0, 28568));
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p93, 16);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p95, $sub.i16(0, 28564));
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p97, 16);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p99, $sub.i16(0, 28560));
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p101, 127);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p103, $sub.i16(0, 28556));
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p105, 128);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p107, $sub.i16(0, 28552));
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p109, 75);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p111, $sub.i16(0, 28548));
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p113, 96);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p115, $sub.i16(0, 28544));
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p117, 67);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p119, $sub.i16(0, 28540));
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p121, 8);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p123, $sub.i16(0, 28536));
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p125, 6);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p127, $sub.i16(0, 28532));
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p129, 10);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p131, $sub.i16(0, 28528));
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p133, 0);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p135, $sub.i16(0, 28524));
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p137, 0);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p139, $sub.i16(0, 28520));
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p141, 56);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p143, $sub.i16(0, 28516));
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p145, 12);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p147, $sub.i16(0, 28512));
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p149, 132);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p151, $sub.i16(0, 28508));
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p153, 42);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p155, $sub.i16(0, 28504));
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p157, 128);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p159, $sub.i16(0, 28500));
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p161, 16);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p163, $sub.i16(0, 28496));
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p165, 51);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p167, $sub.i16(0, 28488));
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p169, 255);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p171, $sub.i16(0, 28484));
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p173, 30);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p175, $sub.i16(0, 28480));
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p177, 38);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p179, $sub.i16(0, 28476));
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p181, 91);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p183, $sub.i16(0, 28416));
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p185, 208);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p187, $sub.i16(0, 28412));
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p189, 4);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p191, $sub.i16(0, 28408));
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p193, 88);
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p195, $sub.i16(0, 28404));
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p197, 201);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p199, $sub.i16(0, 28400));
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p201, 136);
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p203, $sub.i16(0, 28396));
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p205, 65);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p207, $sub.i16(0, 28392));
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p209, 35);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p211, $sub.i16(0, 28388));
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p213, 16);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p215, $sub.i16(0, 28384));
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p217, 255);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p219, $sub.i16(0, 28380));
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p221, 50);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p223, $sub.i16(0, 28376));
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p225, 48);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(56, 4)), $mul.ref(0, 1));
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p227, $sub.i16(0, 28372));
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(56, 4)), $mul.ref(2, 1));
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p229, 101);
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(57, 4)), $mul.ref(0, 1));
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p231, $sub.i16(0, 28368));
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(57, 4)), $mul.ref(2, 1));
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p233, 65);
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(58, 4)), $mul.ref(0, 1));
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p235, $sub.i16(0, 28364));
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(58, 4)), $mul.ref(2, 1));
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p237, 27);
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(59, 4)), $mul.ref(0, 1));
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p239, $sub.i16(0, 28360));
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(59, 4)), $mul.ref(2, 1));
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p241, 48);
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(60, 4)), $mul.ref(0, 1));
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p243, $sub.i16(0, 28356));
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(60, 4)), $mul.ref(2, 1));
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p245, 240);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(61, 4)), $mul.ref(0, 1));
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p247, $sub.i16(0, 28352));
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(61, 4)), $mul.ref(2, 1));
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p249, 100);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(62, 4)), $mul.ref(0, 1));
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p251, $sub.i16(0, 28348));
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(62, 4)), $mul.ref(2, 1));
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p253, 100);
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(63, 4)), $mul.ref(0, 1));
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p255, $sub.i16(0, 28344));
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(63, 4)), $mul.ref(2, 1));
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p257, 0);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(64, 4)), $mul.ref(0, 1));
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p259, $sub.i16(0, 28340));
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(64, 4)), $mul.ref(2, 1));
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p261, 36);
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(65, 4)), $mul.ref(0, 1));
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p263, $sub.i16(0, 28336));
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(65, 4)), $mul.ref(2, 1));
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p265, 4);
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(66, 4)), $mul.ref(0, 1));
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p267, $sub.i16(0, 28332));
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(66, 4)), $mul.ref(2, 1));
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p269, 0);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(67, 4)), $mul.ref(0, 1));
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p271, $sub.i16(0, 28328));
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(67, 4)), $mul.ref(2, 1));
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p273, 12);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(68, 4)), $mul.ref(0, 1));
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p275, $sub.i16(0, 28324));
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(68, 4)), $mul.ref(2, 1));
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p277, 18);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(69, 4)), $mul.ref(0, 1));
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p279, $sub.i16(0, 28320));
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(69, 4)), $mul.ref(2, 1));
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p281, 12);
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(70, 4)), $mul.ref(0, 1));
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p283, $sub.i16(0, 28316));
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(70, 4)), $mul.ref(2, 1));
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p285, 0);
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(71, 4)), $mul.ref(0, 1));
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p287, $sub.i16(0, 28312));
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(71, 4)), $mul.ref(2, 1));
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p289, 88);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(72, 4)), $mul.ref(0, 1));
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p291, $sub.i16(0, 28308));
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(72, 4)), $mul.ref(2, 1));
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p293, 4);
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(73, 4)), $mul.ref(0, 1));
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p295, $sub.i16(0, 28304));
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(73, 4)), $mul.ref(2, 1));
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p297, 0);
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(74, 4)), $mul.ref(0, 1));
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p299, $sub.i16(0, 28300));
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(74, 4)), $mul.ref(2, 1));
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p301, 0);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(75, 4)), $mul.ref(0, 1));
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p303, $sub.i16(0, 28296));
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(75, 4)), $mul.ref(2, 1));
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p305, 1);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(76, 4)), $mul.ref(0, 1));
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p307, $sub.i16(0, 28292));
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(76, 4)), $mul.ref(2, 1));
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p309, 32);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(77, 4)), $mul.ref(0, 1));
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p311, $sub.i16(0, 28288));
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(77, 4)), $mul.ref(2, 1));
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p313, 80);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(78, 4)), $mul.ref(0, 1));
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p315, $sub.i16(0, 28284));
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(78, 4)), $mul.ref(2, 1));
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p317, 55);
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(79, 4)), $mul.ref(0, 1));
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p319, $sub.i16(0, 28280));
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(79, 4)), $mul.ref(2, 1));
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p321, 53);
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(80, 4)), $mul.ref(0, 1));
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p323, $sub.i16(0, 28276));
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(80, 4)), $mul.ref(2, 1));
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p325, 0);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(81, 4)), $mul.ref(0, 1));
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p327, $sub.i16(0, 28272));
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(81, 4)), $mul.ref(2, 1));
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p329, 1);
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(82, 4)), $mul.ref(0, 1));
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p331, $sub.i16(0, 28268));
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(82, 4)), $mul.ref(2, 1));
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p333, 19);
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(83, 4)), $mul.ref(0, 1));
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p335, $sub.i16(0, 28264));
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(83, 4)), $mul.ref(2, 1));
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p337, 39);
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(84, 4)), $mul.ref(0, 1));
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p339, $sub.i16(0, 28260));
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(84, 4)), $mul.ref(2, 1));
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p341, 39);
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(85, 4)), $mul.ref(0, 1));
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p343, $sub.i16(0, 28256));
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(85, 4)), $mul.ref(2, 1));
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p345, 24);
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(86, 4)), $mul.ref(0, 1));
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p347, $sub.i16(0, 28252));
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(86, 4)), $mul.ref(2, 1));
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p349, 18);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(87, 4)), $mul.ref(0, 1));
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p351, $sub.i16(0, 28248));
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(87, 4)), $mul.ref(2, 1));
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p353, 4);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(88, 4)), $mul.ref(0, 1));
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p355, $sub.i16(0, 28244));
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(88, 4)), $mul.ref(2, 1));
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p357, 0);
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(89, 4)), $mul.ref(0, 1));
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p359, $sub.i16(0, 28240));
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(89, 4)), $mul.ref(2, 1));
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p361, 10);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(90, 4)), $mul.ref(0, 1));
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p363, $sub.i16(0, 28236));
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(90, 4)), $mul.ref(2, 1));
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p365, 39);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(91, 4)), $mul.ref(0, 1));
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p367, $sub.i16(0, 28232));
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(91, 4)), $mul.ref(2, 1));
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p369, 39);
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(92, 4)), $mul.ref(0, 1));
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p371, $sub.i16(0, 28228));
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(92, 4)), $mul.ref(2, 1));
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p373, 39);
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(93, 4)), $mul.ref(0, 1));
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p375, $sub.i16(0, 28224));
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(93, 4)), $mul.ref(2, 1));
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p377, 39);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(94, 4)), $mul.ref(0, 1));
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p379, $sub.i16(0, 28220));
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(94, 4)), $mul.ref(2, 1));
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p381, 39);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(95, 4)), $mul.ref(0, 1));
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p383, $sub.i16(0, 28216));
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(95, 4)), $mul.ref(2, 1));
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p385, 39);
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(96, 4)), $mul.ref(0, 1));
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p387, $sub.i16(0, 28212));
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(96, 4)), $mul.ref(2, 1));
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p389, 38);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(97, 4)), $mul.ref(0, 1));
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p391, $sub.i16(0, 28208));
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(97, 4)), $mul.ref(2, 1));
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p393, 36);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(98, 4)), $mul.ref(0, 1));
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p395, $sub.i16(0, 28204));
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(98, 4)), $mul.ref(2, 1));
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p397, 252);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(99, 4)), $mul.ref(0, 1));
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p399, $sub.i16(0, 28200));
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(99, 4)), $mul.ref(2, 1));
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p401, 250);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(100, 4)), $mul.ref(0, 1));
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p403, $sub.i16(0, 28196));
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(100, 4)), $mul.ref(2, 1));
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p405, 30);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(101, 4)), $mul.ref(0, 1));
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p407, $sub.i16(0, 28172));
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(101, 4)), $mul.ref(2, 1));
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p409, 144);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(102, 4)), $mul.ref(0, 1));
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p411, $sub.i16(0, 28168));
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(102, 4)), $mul.ref(2, 1));
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p413, 0);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(103, 4)), $mul.ref(0, 1));
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p415, $sub.i16(0, 28164));
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(103, 4)), $mul.ref(2, 1));
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p417, 0);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(104, 4)), $mul.ref(0, 1));
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p419, $sub.i16(0, 28160));
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(104, 4)), $mul.ref(2, 1));
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p421, 20);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(105, 4)), $mul.ref(0, 1));
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p423, $sub.i16(0, 28156));
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(105, 4)), $mul.ref(2, 1));
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p425, 18);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(106, 4)), $mul.ref(0, 1));
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p427, $sub.i16(0, 28152));
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(106, 4)), $mul.ref(2, 1));
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p429, 16);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(107, 4)), $mul.ref(0, 1));
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p431, $sub.i16(0, 28148));
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(107, 4)), $mul.ref(2, 1));
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p433, 12);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(108, 4)), $mul.ref(0, 1));
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p435, $sub.i16(0, 28128));
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(108, 4)), $mul.ref(2, 1));
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p437, 223);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(109, 4)), $mul.ref(0, 1));
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p439, $sub.i16(0, 28124));
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(109, 4)), $mul.ref(2, 1));
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p441, 160);
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(110, 4)), $mul.ref(0, 1));
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p443, $sub.i16(0, 28120));
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(110, 4)), $mul.ref(2, 1));
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p445, 168);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(111, 4)), $mul.ref(0, 1));
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p447, $sub.i16(0, 28116));
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(111, 4)), $mul.ref(2, 1));
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p449, 180);
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(112, 4)), $mul.ref(0, 1));
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p451, $sub.i16(0, 28112));
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(112, 4)), $mul.ref(2, 1));
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p453, 152);
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(113, 4)), $mul.ref(0, 1));
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p455, $sub.i16(0, 28108));
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(113, 4)), $mul.ref(2, 1));
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p457, 130);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(114, 4)), $mul.ref(0, 1));
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p459, $sub.i16(0, 28104));
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(114, 4)), $mul.ref(2, 1));
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p461, 83);
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(115, 4)), $mul.ref(0, 1));
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p463, $sub.i16(0, 28100));
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(115, 4)), $mul.ref(2, 1));
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p465, 28);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(116, 4)), $mul.ref(0, 1));
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p467, $sub.i16(0, 28096));
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(116, 4)), $mul.ref(2, 1));
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p469, 108);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(117, 4)), $mul.ref(0, 1));
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p471, $sub.i16(0, 28084));
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(117, 4)), $mul.ref(2, 1));
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p473, 7);
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(118, 4)), $mul.ref(0, 1));
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p475, $sub.i16(0, 28080));
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(118, 4)), $mul.ref(2, 1));
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p477, 64);
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(119, 4)), $mul.ref(0, 1));
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p479, $sub.i16(0, 28076));
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(119, 4)), $mul.ref(2, 1));
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p481, 64);
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(120, 4)), $mul.ref(0, 1));
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p483, $sub.i16(0, 28072));
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(120, 4)), $mul.ref(2, 1));
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p485, 20);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(121, 4)), $mul.ref(0, 1));
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p487, $sub.i16(0, 28068));
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(121, 4)), $mul.ref(2, 1));
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p489, 24);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(122, 4)), $mul.ref(0, 1));
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p491, $sub.i16(0, 28036));
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(122, 4)), $mul.ref(2, 1));
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p493, 112);
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(123, 4)), $mul.ref(0, 1));
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p495, $sub.i16(0, 28032));
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(123, 4)), $mul.ref(2, 1));
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p497, 254);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(124, 4)), $mul.ref(0, 1));
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p499, $sub.i16(0, 28028));
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(124, 4)), $mul.ref(2, 1));
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p501, 238);
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(125, 4)), $mul.ref(0, 1));
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p503, $sub.i16(0, 28024));
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(125, 4)), $mul.ref(2, 1));
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p505, 170);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(126, 4)), $mul.ref(0, 1));
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p507, $sub.i16(0, 28020));
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(126, 4)), $mul.ref(2, 1));
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p509, 250);
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(127, 4)), $mul.ref(0, 1));
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p511, $sub.i16(0, 28016));
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(127, 4)), $mul.ref(2, 1));
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p513, 250);
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(128, 4)), $mul.ref(0, 1));
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p515, $sub.i16(0, 28012));
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(128, 4)), $mul.ref(2, 1));
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p517, 234);
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(129, 4)), $mul.ref(0, 1));
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p519, $sub.i16(0, 28008));
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(129, 4)), $mul.ref(2, 1));
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p521, 190);
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(130, 4)), $mul.ref(0, 1));
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p523, $sub.i16(0, 28004));
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(130, 4)), $mul.ref(2, 1));
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p525, 190);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(131, 4)), $mul.ref(0, 1));
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p527, $sub.i16(0, 28000));
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(131, 4)), $mul.ref(2, 1));
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p529, 106);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(132, 4)), $mul.ref(0, 1));
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p531, $sub.i16(0, 27996));
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(132, 4)), $mul.ref(2, 1));
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p533, 186);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(133, 4)), $mul.ref(0, 1));
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p535, $sub.i16(0, 27992));
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(133, 4)), $mul.ref(2, 1));
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p537, 186);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(134, 4)), $mul.ref(0, 1));
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p539, $sub.i16(0, 27988));
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(134, 4)), $mul.ref(2, 1));
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p541, 186);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(135, 4)), $mul.ref(0, 1));
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p543, $sub.i16(0, 27856));
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(135, 4)), $mul.ref(2, 1));
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p545, 125);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(136, 4)), $mul.ref(0, 1));
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p547, 0);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(136, 4)), $mul.ref(2, 1));
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p549, 0);
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(137, 4)), $mul.ref(0, 1));
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p551, $sub.i16(0, 27860));
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(137, 4)), $mul.ref(2, 1));
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p553, 48);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    $p556 := $load.ref($M.0, $p555);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p556, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} vslice_dummy_var_273 := dev_printk.ref.ref.ref.ref(.str.6, $p557, .str.26, .str.123);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} $i559 := zd_chip_lock_phy_regs($p0);
    call {:si_unique_call 2343} {:cexpr "r"} boogie_si_record_i32($i559);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    $i560 := $ne.i32($i559, 0);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i560 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p562 := $bitcast.ref.ref($p1);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} $i563 := zd_iowrite16a_locked($p0, $p562, 138);
    call {:si_unique_call 2345} {:cexpr "r"} boogie_si_record_i32($i563);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} $i564 := zd_chip_unlock_phy_regs($p0);
    call {:si_unique_call 2347} {:cexpr "t"} boogie_si_record_i32($i564);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $i565 := $ne.i32($i564, 0);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i565} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i565 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i567 := $i563;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    $i561 := $i567;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $r := $i561;
    return;

  $bb5:
    assume $i565 == 1;
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    $i566 := $eq.i32($i563, 0);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i566} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i566 == 1);
    goto $bb7;

  $bb8:
    assume $i566 == 1;
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    $i567 := $i564;
    goto $bb10;

  $bb1:
    assume $i560 == 1;
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $i561 := $i559;
    goto $bb3;
}



const zd1211_hw_reset_phy: ref;

axiom zd1211_hw_reset_phy == $sub.ref(0, 767976);

procedure zd1211_hw_reset_phy($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.24, $M.23, $M.0, $CurrAddr, $M.27;



implementation zd1211_hw_reset_phy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p203: ref;
  var $p205: ref;
  var $p207: ref;
  var $p209: ref;
  var $p211: ref;
  var $p213: ref;
  var $p215: ref;
  var $p217: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p225: ref;
  var $p227: ref;
  var $p229: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $p245: ref;
  var $p247: ref;
  var $p249: ref;
  var $p251: ref;
  var $p253: ref;
  var $p255: ref;
  var $p257: ref;
  var $p259: ref;
  var $p261: ref;
  var $p263: ref;
  var $p265: ref;
  var $p267: ref;
  var $p269: ref;
  var $p271: ref;
  var $p273: ref;
  var $p275: ref;
  var $p277: ref;
  var $p279: ref;
  var $p281: ref;
  var $p283: ref;
  var $p285: ref;
  var $p287: ref;
  var $p289: ref;
  var $p291: ref;
  var $p293: ref;
  var $p295: ref;
  var $p297: ref;
  var $p299: ref;
  var $p301: ref;
  var $p303: ref;
  var $p305: ref;
  var $p307: ref;
  var $p309: ref;
  var $p311: ref;
  var $p313: ref;
  var $p315: ref;
  var $p317: ref;
  var $p319: ref;
  var $p321: ref;
  var $p323: ref;
  var $p325: ref;
  var $p327: ref;
  var $p329: ref;
  var $p331: ref;
  var $p333: ref;
  var $p335: ref;
  var $p337: ref;
  var $p339: ref;
  var $p341: ref;
  var $p343: ref;
  var $p345: ref;
  var $p347: ref;
  var $p349: ref;
  var $p351: ref;
  var $p353: ref;
  var $p355: ref;
  var $p357: ref;
  var $p359: ref;
  var $p361: ref;
  var $p363: ref;
  var $p365: ref;
  var $p367: ref;
  var $p369: ref;
  var $p371: ref;
  var $p373: ref;
  var $p375: ref;
  var $p377: ref;
  var $p379: ref;
  var $p381: ref;
  var $p383: ref;
  var $p385: ref;
  var $p387: ref;
  var $p389: ref;
  var $p391: ref;
  var $p393: ref;
  var $p395: ref;
  var $p397: ref;
  var $p399: ref;
  var $p401: ref;
  var $p403: ref;
  var $p405: ref;
  var $p407: ref;
  var $p409: ref;
  var $p411: ref;
  var $p413: ref;
  var $p415: ref;
  var $p417: ref;
  var $p419: ref;
  var $p421: ref;
  var $p423: ref;
  var $p425: ref;
  var $p427: ref;
  var $p429: ref;
  var $p431: ref;
  var $p433: ref;
  var $p435: ref;
  var $p437: ref;
  var $p439: ref;
  var $p441: ref;
  var $p443: ref;
  var $p445: ref;
  var $p447: ref;
  var $p449: ref;
  var $p451: ref;
  var $p453: ref;
  var $p455: ref;
  var $p457: ref;
  var $p459: ref;
  var $p461: ref;
  var $p463: ref;
  var $p465: ref;
  var $p467: ref;
  var $p469: ref;
  var $p471: ref;
  var $p473: ref;
  var $p475: ref;
  var $p477: ref;
  var $p479: ref;
  var $p481: ref;
  var $p483: ref;
  var $p485: ref;
  var $p487: ref;
  var $p489: ref;
  var $p491: ref;
  var $p493: ref;
  var $p495: ref;
  var $p497: ref;
  var $p499: ref;
  var $p501: ref;
  var $p503: ref;
  var $p505: ref;
  var $p507: ref;
  var $p509: ref;
  var $p511: ref;
  var $p513: ref;
  var $p515: ref;
  var $p517: ref;
  var $p519: ref;
  var $p521: ref;
  var $p523: ref;
  var $p525: ref;
  var $p527: ref;
  var $p529: ref;
  var $p531: ref;
  var $p533: ref;
  var $p535: ref;
  var $p537: ref;
  var $p539: ref;
  var $p541: ref;
  var $p543: ref;
  var $p545: ref;
  var $p547: ref;
  var $p549: ref;
  var $p551: ref;
  var $p553: ref;
  var $p555: ref;
  var $p557: ref;
  var $p559: ref;
  var $p561: ref;
  var $p563: ref;
  var $p565: ref;
  var $p567: ref;
  var $p569: ref;
  var $p571: ref;
  var $p573: ref;
  var $p575: ref;
  var $p577: ref;
  var $p579: ref;
  var $p581: ref;
  var $p583: ref;
  var $p585: ref;
  var $p587: ref;
  var $p589: ref;
  var $p591: ref;
  var $p593: ref;
  var $p595: ref;
  var $p597: ref;
  var $p599: ref;
  var $p601: ref;
  var $p603: ref;
  var $p605: ref;
  var $p607: ref;
  var $p609: ref;
  var $p611: ref;
  var $p613: ref;
  var $p615: ref;
  var $p617: ref;
  var $p619: ref;
  var $p621: ref;
  var $p623: ref;
  var $p625: ref;
  var $p627: ref;
  var $p629: ref;
  var $p631: ref;
  var $p633: ref;
  var $p635: ref;
  var $p637: ref;
  var $p639: ref;
  var $p641: ref;
  var $p643: ref;
  var $p645: ref;
  var $p647: ref;
  var $p649: ref;
  var $p651: ref;
  var $p653: ref;
  var $p655: ref;
  var $p657: ref;
  var $p659: ref;
  var $p661: ref;
  var $p663: ref;
  var $p665: ref;
  var $p667: ref;
  var $p669: ref;
  var $p671: ref;
  var $p673: ref;
  var $p675: ref;
  var $p677: ref;
  var $p679: ref;
  var $p681: ref;
  var $p683: ref;
  var $p685: ref;
  var $p687: ref;
  var $p689: ref;
  var $p691: ref;
  var $p693: ref;
  var $p695: ref;
  var $p697: ref;
  var $p699: ref;
  var $p701: ref;
  var $p703: ref;
  var $p705: ref;
  var $p707: ref;
  var $p709: ref;
  var $p711: ref;
  var $p712: ref;
  var $p713: ref;
  var $i715: i32;
  var $i716: i1;
  var $p718: ref;
  var $i719: i32;
  var $i720: i1;
  var $i722: i32;
  var $i721: i32;
  var $i723: i32;
  var $i724: i1;
  var $i725: i1;
  var $i726: i32;
  var $i717: i32;
  var vslice_dummy_var_274: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} $p1 := $alloc($mul.ref(708, $zext.i32.i64(1)));
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p3, $sub.i16(0, 28672));
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p5, 10);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p7, $sub.i16(0, 28668));
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p9, 6);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p11, $sub.i16(0, 28664));
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p13, 38);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p15, $sub.i16(0, 28660));
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p17, 56);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p19, $sub.i16(0, 28640));
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p21, 128);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p23, $sub.i16(0, 28636));
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p25, 160);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p27, $sub.i16(0, 28632));
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p29, 129);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p31, $sub.i16(0, 28628));
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p33, 0);
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p35, $sub.i16(0, 28624));
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p37, 127);
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p39, $sub.i16(0, 28620));
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p41, 140);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p43, $sub.i16(0, 28616));
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p45, 128);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p47, $sub.i16(0, 28612));
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p49, 61);
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p51, $sub.i16(0, 28608));
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p53, 32);
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p55, $sub.i16(0, 28604));
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p57, 30);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p59, $sub.i16(0, 28600));
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p61, 10);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p63, $sub.i16(0, 28596));
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p65, 72);
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p67, $sub.i16(0, 28592));
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p69, 12);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p71, $sub.i16(0, 28588));
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p73, 12);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p75, $sub.i16(0, 28584));
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p77, 35);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p79, $sub.i16(0, 28580));
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p81, 144);
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p83, $sub.i16(0, 28576));
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p85, 20);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p87, $sub.i16(0, 28572));
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p89, 64);
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p91, $sub.i16(0, 28568));
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p93, 16);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p95, $sub.i16(0, 28564));
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p97, 25);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p99, $sub.i16(0, 28560));
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p101, 127);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p103, $sub.i16(0, 28556));
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p105, 128);
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p107, $sub.i16(0, 28552));
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p109, 75);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p111, $sub.i16(0, 28548));
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p113, 96);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p115, $sub.i16(0, 28544));
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p117, 67);
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p119, $sub.i16(0, 28540));
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p121, 8);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p123, $sub.i16(0, 28536));
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p125, 6);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p127, $sub.i16(0, 28532));
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p129, 10);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p131, $sub.i16(0, 28528));
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p133, 0);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p135, $sub.i16(0, 28524));
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p137, 0);
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p139, $sub.i16(0, 28520));
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p141, 56);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p143, $sub.i16(0, 28516));
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p145, 12);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p147, $sub.i16(0, 28512));
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p149, 132);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p151, $sub.i16(0, 28508));
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p153, 42);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p155, $sub.i16(0, 28504));
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p157, 128);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p159, $sub.i16(0, 28500));
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p161, 16);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p163, $sub.i16(0, 28496));
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p165, 18);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p167, $sub.i16(0, 28488));
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p169, 255);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p171, $sub.i16(0, 28484));
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p173, 30);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p175, $sub.i16(0, 28480));
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p177, 38);
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p179, $sub.i16(0, 28476));
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p181, 91);
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p183, $sub.i16(0, 28416));
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p185, 208);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p187, $sub.i16(0, 28412));
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p189, 4);
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p191, $sub.i16(0, 28408));
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p193, 88);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p195, $sub.i16(0, 28404));
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p197, 201);
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p199, $sub.i16(0, 28400));
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p201, 136);
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p203, $sub.i16(0, 28396));
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p205, 65);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p207, $sub.i16(0, 28392));
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p209, 35);
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p211, $sub.i16(0, 28388));
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p213, 16);
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p215, $sub.i16(0, 28384));
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p217, 255);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p219, $sub.i16(0, 28380));
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p221, 50);
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p223, $sub.i16(0, 28376));
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p225, 48);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(56, 4)), $mul.ref(0, 1));
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p227, $sub.i16(0, 28372));
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(56, 4)), $mul.ref(2, 1));
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p229, 101);
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(57, 4)), $mul.ref(0, 1));
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p231, $sub.i16(0, 28368));
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(57, 4)), $mul.ref(2, 1));
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p233, 65);
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(58, 4)), $mul.ref(0, 1));
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p235, $sub.i16(0, 28364));
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(58, 4)), $mul.ref(2, 1));
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p237, 27);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(59, 4)), $mul.ref(0, 1));
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p239, $sub.i16(0, 28360));
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(59, 4)), $mul.ref(2, 1));
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p241, 48);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(60, 4)), $mul.ref(0, 1));
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p243, $sub.i16(0, 28356));
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(60, 4)), $mul.ref(2, 1));
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p245, 104);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(61, 4)), $mul.ref(0, 1));
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p247, $sub.i16(0, 28352));
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(61, 4)), $mul.ref(2, 1));
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p249, 100);
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(62, 4)), $mul.ref(0, 1));
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p251, $sub.i16(0, 28348));
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(62, 4)), $mul.ref(2, 1));
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p253, 100);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(63, 4)), $mul.ref(0, 1));
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p255, $sub.i16(0, 28344));
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(63, 4)), $mul.ref(2, 1));
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p257, 0);
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(64, 4)), $mul.ref(0, 1));
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p259, $sub.i16(0, 28340));
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(64, 4)), $mul.ref(2, 1));
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p261, 0);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(65, 4)), $mul.ref(0, 1));
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p263, $sub.i16(0, 28336));
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(65, 4)), $mul.ref(2, 1));
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p265, 0);
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(66, 4)), $mul.ref(0, 1));
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p267, $sub.i16(0, 28332));
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(66, 4)), $mul.ref(2, 1));
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p269, 2);
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(67, 4)), $mul.ref(0, 1));
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p271, $sub.i16(0, 28328));
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(67, 4)), $mul.ref(2, 1));
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p273, 0);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(68, 4)), $mul.ref(0, 1));
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p275, $sub.i16(0, 28324));
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(68, 4)), $mul.ref(2, 1));
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p277, 0);
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(69, 4)), $mul.ref(0, 1));
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p279, $sub.i16(0, 28320));
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(69, 4)), $mul.ref(2, 1));
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p281, 255);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(70, 4)), $mul.ref(0, 1));
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p283, $sub.i16(0, 28316));
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(70, 4)), $mul.ref(2, 1));
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p285, 252);
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(71, 4)), $mul.ref(0, 1));
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p287, $sub.i16(0, 28312));
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(71, 4)), $mul.ref(2, 1));
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p289, 0);
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(72, 4)), $mul.ref(0, 1));
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p291, $sub.i16(0, 28308));
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(72, 4)), $mul.ref(2, 1));
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p293, 0);
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(73, 4)), $mul.ref(0, 1));
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p295, $sub.i16(0, 28304));
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(73, 4)), $mul.ref(2, 1));
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p297, 0);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(74, 4)), $mul.ref(0, 1));
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p299, $sub.i16(0, 28300));
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(74, 4)), $mul.ref(2, 1));
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p301, 8);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(75, 4)), $mul.ref(0, 1));
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p303, $sub.i16(0, 28296));
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(75, 4)), $mul.ref(2, 1));
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p305, 0);
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(76, 4)), $mul.ref(0, 1));
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p307, $sub.i16(0, 28292));
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(76, 4)), $mul.ref(2, 1));
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p309, 0);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(77, 4)), $mul.ref(0, 1));
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p311, $sub.i16(0, 28288));
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(77, 4)), $mul.ref(2, 1));
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p313, 255);
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(78, 4)), $mul.ref(0, 1));
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p315, $sub.i16(0, 28284));
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(78, 4)), $mul.ref(2, 1));
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p317, 231);
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(79, 4)), $mul.ref(0, 1));
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p319, $sub.i16(0, 28280));
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(79, 4)), $mul.ref(2, 1));
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p321, 0);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(80, 4)), $mul.ref(0, 1));
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p323, $sub.i16(0, 28276));
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(80, 4)), $mul.ref(2, 1));
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p325, 0);
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(81, 4)), $mul.ref(0, 1));
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p327, $sub.i16(0, 28272));
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(81, 4)), $mul.ref(2, 1));
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p329, 0);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(82, 4)), $mul.ref(0, 1));
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p331, $sub.i16(0, 28268));
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(82, 4)), $mul.ref(2, 1));
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p333, 174);
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(83, 4)), $mul.ref(0, 1));
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p335, $sub.i16(0, 28264));
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(83, 4)), $mul.ref(2, 1));
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p337, 2);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(84, 4)), $mul.ref(0, 1));
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p339, $sub.i16(0, 28260));
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(84, 4)), $mul.ref(2, 1));
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p341, 0);
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(85, 4)), $mul.ref(0, 1));
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p343, $sub.i16(0, 28256));
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(85, 4)), $mul.ref(2, 1));
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p345, 3);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(86, 4)), $mul.ref(0, 1));
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p347, $sub.i16(0, 28252));
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(86, 4)), $mul.ref(2, 1));
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p349, 101);
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(87, 4)), $mul.ref(0, 1));
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p351, $sub.i16(0, 28248));
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(87, 4)), $mul.ref(2, 1));
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p353, 4);
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(88, 4)), $mul.ref(0, 1));
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p355, $sub.i16(0, 28244));
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(88, 4)), $mul.ref(2, 1));
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p357, 0);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(89, 4)), $mul.ref(0, 1));
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p359, $sub.i16(0, 28240));
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(89, 4)), $mul.ref(2, 1));
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p361, 10);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(90, 4)), $mul.ref(0, 1));
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p363, $sub.i16(0, 28236));
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(90, 4)), $mul.ref(2, 1));
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p365, 170);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(91, 4)), $mul.ref(0, 1));
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p367, $sub.i16(0, 28232));
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(91, 4)), $mul.ref(2, 1));
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p369, 170);
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(92, 4)), $mul.ref(0, 1));
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p371, $sub.i16(0, 28228));
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(92, 4)), $mul.ref(2, 1));
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p373, 37);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(93, 4)), $mul.ref(0, 1));
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p375, $sub.i16(0, 28224));
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(93, 4)), $mul.ref(2, 1));
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p377, 37);
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(94, 4)), $mul.ref(0, 1));
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p379, $sub.i16(0, 28220));
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(94, 4)), $mul.ref(2, 1));
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p381, 0);
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(95, 4)), $mul.ref(0, 1));
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p383, $sub.i16(0, 28196));
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(95, 4)), $mul.ref(2, 1));
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p385, 30);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(96, 4)), $mul.ref(0, 1));
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p387, $sub.i16(0, 28172));
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(96, 4)), $mul.ref(2, 1));
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p389, 144);
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(97, 4)), $mul.ref(0, 1));
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p391, $sub.i16(0, 28168));
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(97, 4)), $mul.ref(2, 1));
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p393, 0);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(98, 4)), $mul.ref(0, 1));
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p395, $sub.i16(0, 28164));
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(98, 4)), $mul.ref(2, 1));
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p397, 0);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(99, 4)), $mul.ref(0, 1));
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p399, 0);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(99, 4)), $mul.ref(2, 1));
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p401, 0);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(100, 4)), $mul.ref(0, 1));
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p403, $sub.i16(0, 28656));
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(100, 4)), $mul.ref(2, 1));
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p405, 0);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(101, 4)), $mul.ref(0, 1));
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p407, $sub.i16(0, 28652));
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(101, 4)), $mul.ref(2, 1));
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p409, 0);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(102, 4)), $mul.ref(0, 1));
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p411, $sub.i16(0, 28648));
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(102, 4)), $mul.ref(2, 1));
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p413, 0);
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(103, 4)), $mul.ref(0, 1));
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p415, $sub.i16(0, 28644));
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(103, 4)), $mul.ref(2, 1));
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p417, 0);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(104, 4)), $mul.ref(0, 1));
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p419, $sub.i16(0, 28636));
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(104, 4)), $mul.ref(2, 1));
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p421, 32);
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(105, 4)), $mul.ref(0, 1));
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p423, $sub.i16(0, 28624));
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(105, 4)), $mul.ref(2, 1));
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p425, 240);
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(106, 4)), $mul.ref(0, 1));
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p427, $sub.i16(0, 28592));
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(106, 4)), $mul.ref(2, 1));
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p429, 14);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(107, 4)), $mul.ref(0, 1));
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p431, $sub.i16(0, 28588));
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(107, 4)), $mul.ref(2, 1));
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p433, 14);
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(108, 4)), $mul.ref(0, 1));
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p435, $sub.i16(0, 28564));
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(108, 4)), $mul.ref(2, 1));
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p437, 16);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(109, 4)), $mul.ref(0, 1));
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p439, $sub.i16(0, 28496));
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(109, 4)), $mul.ref(2, 1));
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p441, 51);
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(110, 4)), $mul.ref(0, 1));
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p443, $sub.i16(0, 28484));
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(110, 4)), $mul.ref(2, 1));
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p445, 30);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(111, 4)), $mul.ref(0, 1));
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p447, $sub.i16(0, 28340));
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(111, 4)), $mul.ref(2, 1));
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p449, 36);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(112, 4)), $mul.ref(0, 1));
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p451, $sub.i16(0, 28336));
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(112, 4)), $mul.ref(2, 1));
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p453, 4);
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(113, 4)), $mul.ref(0, 1));
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p455, $sub.i16(0, 28332));
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(113, 4)), $mul.ref(2, 1));
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p457, 0);
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(114, 4)), $mul.ref(0, 1));
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p459, $sub.i16(0, 28328));
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(114, 4)), $mul.ref(2, 1));
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p461, 12);
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(115, 4)), $mul.ref(0, 1));
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p463, $sub.i16(0, 28324));
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(115, 4)), $mul.ref(2, 1));
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p465, 18);
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(116, 4)), $mul.ref(0, 1));
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p467, $sub.i16(0, 28320));
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(116, 4)), $mul.ref(2, 1));
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p469, 12);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(117, 4)), $mul.ref(0, 1));
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p471, $sub.i16(0, 28316));
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(117, 4)), $mul.ref(2, 1));
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p473, 0);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(118, 4)), $mul.ref(0, 1));
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p475, $sub.i16(0, 28312));
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(118, 4)), $mul.ref(2, 1));
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p477, 16);
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(119, 4)), $mul.ref(0, 1));
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p479, $sub.i16(0, 28308));
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(119, 4)), $mul.ref(2, 1));
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p481, 8);
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(120, 4)), $mul.ref(0, 1));
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p483, $sub.i16(0, 28300));
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(120, 4)), $mul.ref(2, 1));
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p485, 0);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(121, 4)), $mul.ref(0, 1));
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p487, $sub.i16(0, 28296));
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(121, 4)), $mul.ref(2, 1));
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p489, 1);
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(122, 4)), $mul.ref(0, 1));
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p491, $sub.i16(0, 28292));
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(122, 4)), $mul.ref(2, 1));
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p493, 0);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(123, 4)), $mul.ref(0, 1));
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p495, $sub.i16(0, 28288));
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(123, 4)), $mul.ref(2, 1));
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p497, 80);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(124, 4)), $mul.ref(0, 1));
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p499, $sub.i16(0, 28284));
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(124, 4)), $mul.ref(2, 1));
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p501, 55);
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(125, 4)), $mul.ref(0, 1));
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p503, $sub.i16(0, 28280));
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(125, 4)), $mul.ref(2, 1));
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p505, 53);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(126, 4)), $mul.ref(0, 1));
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p507, $sub.i16(0, 28268));
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(126, 4)), $mul.ref(2, 1));
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p509, 19);
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(127, 4)), $mul.ref(0, 1));
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p511, $sub.i16(0, 28264));
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(127, 4)), $mul.ref(2, 1));
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p513, 39);
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(128, 4)), $mul.ref(0, 1));
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p515, $sub.i16(0, 28260));
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(128, 4)), $mul.ref(2, 1));
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p517, 39);
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(129, 4)), $mul.ref(0, 1));
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p519, $sub.i16(0, 28256));
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(129, 4)), $mul.ref(2, 1));
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p521, 24);
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(130, 4)), $mul.ref(0, 1));
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p523, $sub.i16(0, 28252));
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(130, 4)), $mul.ref(2, 1));
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p525, 18);
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(131, 4)), $mul.ref(0, 1));
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p527, $sub.i16(0, 28236));
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(131, 4)), $mul.ref(2, 1));
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p529, 39);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(132, 4)), $mul.ref(0, 1));
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p531, $sub.i16(0, 28232));
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(132, 4)), $mul.ref(2, 1));
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p533, 39);
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(133, 4)), $mul.ref(0, 1));
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p535, $sub.i16(0, 28228));
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(133, 4)), $mul.ref(2, 1));
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p537, 39);
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(134, 4)), $mul.ref(0, 1));
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p539, $sub.i16(0, 28224));
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(134, 4)), $mul.ref(2, 1));
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p541, 39);
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(135, 4)), $mul.ref(0, 1));
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p543, $sub.i16(0, 28220));
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(135, 4)), $mul.ref(2, 1));
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p545, 39);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(136, 4)), $mul.ref(0, 1));
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p547, $sub.i16(0, 28216));
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(136, 4)), $mul.ref(2, 1));
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p549, 39);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(137, 4)), $mul.ref(0, 1));
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p551, $sub.i16(0, 28212));
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(137, 4)), $mul.ref(2, 1));
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p553, 38);
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(138, 4)), $mul.ref(0, 1));
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p555, $sub.i16(0, 28208));
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(138, 4)), $mul.ref(2, 1));
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p557, 36);
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(139, 4)), $mul.ref(0, 1));
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p559, $sub.i16(0, 28204));
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(139, 4)), $mul.ref(2, 1));
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p561, 252);
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(140, 4)), $mul.ref(0, 1));
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p563, $sub.i16(0, 28200));
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(140, 4)), $mul.ref(2, 1));
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p565, 250);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(141, 4)), $mul.ref(0, 1));
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p567, $sub.i16(0, 28192));
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(141, 4)), $mul.ref(2, 1));
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p569, 79);
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(142, 4)), $mul.ref(0, 1));
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p571, $sub.i16(0, 28172));
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(142, 4)), $mul.ref(2, 1));
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p573, 170);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(143, 4)), $mul.ref(0, 1));
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p575, $sub.i16(0, 28164));
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(143, 4)), $mul.ref(2, 1));
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p577, 3);
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(144, 4)), $mul.ref(0, 1));
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p579, $sub.i16(0, 28160));
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(144, 4)), $mul.ref(2, 1));
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p581, 20);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(145, 4)), $mul.ref(0, 1));
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p583, $sub.i16(0, 28156));
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(145, 4)), $mul.ref(2, 1));
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p585, 18);
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(146, 4)), $mul.ref(0, 1));
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p587, $sub.i16(0, 28152));
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(146, 4)), $mul.ref(2, 1));
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p589, 16);
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(147, 4)), $mul.ref(0, 1));
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p591, $sub.i16(0, 28148));
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(147, 4)), $mul.ref(2, 1));
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p593, 12);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(148, 4)), $mul.ref(0, 1));
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p595, $sub.i16(0, 28128));
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(148, 4)), $mul.ref(2, 1));
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p597, 223);
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(149, 4)), $mul.ref(0, 1));
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p599, $sub.i16(0, 28124));
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(149, 4)), $mul.ref(2, 1));
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p601, 64);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(150, 4)), $mul.ref(0, 1));
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p603, $sub.i16(0, 28120));
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(150, 4)), $mul.ref(2, 1));
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p605, 160);
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(151, 4)), $mul.ref(0, 1));
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p607, $sub.i16(0, 28116));
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(151, 4)), $mul.ref(2, 1));
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p609, 176);
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(152, 4)), $mul.ref(0, 1));
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p611, $sub.i16(0, 28112));
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(152, 4)), $mul.ref(2, 1));
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p613, 153);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(153, 4)), $mul.ref(0, 1));
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p615, $sub.i16(0, 28108));
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(153, 4)), $mul.ref(2, 1));
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p617, 130);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(154, 4)), $mul.ref(0, 1));
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p619, $sub.i16(0, 28104));
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(154, 4)), $mul.ref(2, 1));
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p621, 84);
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(155, 4)), $mul.ref(0, 1));
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p623, $sub.i16(0, 28100));
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(155, 4)), $mul.ref(2, 1));
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p625, 28);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(156, 4)), $mul.ref(0, 1));
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p627, $sub.i16(0, 28096));
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(156, 4)), $mul.ref(2, 1));
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p629, 108);
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(157, 4)), $mul.ref(0, 1));
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p631, $sub.i16(0, 28084));
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(157, 4)), $mul.ref(2, 1));
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p633, 7);
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(158, 4)), $mul.ref(0, 1));
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p635, $sub.i16(0, 28080));
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(158, 4)), $mul.ref(2, 1));
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p637, 76);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(159, 4)), $mul.ref(0, 1));
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p639, $sub.i16(0, 28076));
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(159, 4)), $mul.ref(2, 1));
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p641, 80);
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(160, 4)), $mul.ref(0, 1));
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p643, $sub.i16(0, 28072));
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(160, 4)), $mul.ref(2, 1));
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p645, 14);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(161, 4)), $mul.ref(0, 1));
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p647, $sub.i16(0, 28068));
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(161, 4)), $mul.ref(2, 1));
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p649, 24);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(162, 4)), $mul.ref(0, 1));
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p651, $sub.i16(0, 28032));
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(162, 4)), $mul.ref(2, 1));
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p653, 254);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(163, 4)), $mul.ref(0, 1));
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p655, $sub.i16(0, 28028));
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(163, 4)), $mul.ref(2, 1));
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p657, 238);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(164, 4)), $mul.ref(0, 1));
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p659, $sub.i16(0, 28024));
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(164, 4)), $mul.ref(2, 1));
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p661, 170);
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(165, 4)), $mul.ref(0, 1));
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p663, $sub.i16(0, 28020));
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(165, 4)), $mul.ref(2, 1));
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p665, 250);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(166, 4)), $mul.ref(0, 1));
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p667, $sub.i16(0, 28016));
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(166, 4)), $mul.ref(2, 1));
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p669, 250);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(167, 4)), $mul.ref(0, 1));
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p671, $sub.i16(0, 28012));
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(167, 4)), $mul.ref(2, 1));
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p673, 234);
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(168, 4)), $mul.ref(0, 1));
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p675, $sub.i16(0, 28008));
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(168, 4)), $mul.ref(2, 1));
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p677, 190);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(169, 4)), $mul.ref(0, 1));
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p679, $sub.i16(0, 28004));
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(169, 4)), $mul.ref(2, 1));
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p681, 190);
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(170, 4)), $mul.ref(0, 1));
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p683, $sub.i16(0, 28000));
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(170, 4)), $mul.ref(2, 1));
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p685, 106);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(171, 4)), $mul.ref(0, 1));
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p687, $sub.i16(0, 27996));
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(171, 4)), $mul.ref(2, 1));
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p689, 186);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(172, 4)), $mul.ref(0, 1));
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p691, $sub.i16(0, 27992));
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(172, 4)), $mul.ref(2, 1));
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p693, 186);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(173, 4)), $mul.ref(0, 1));
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p695, $sub.i16(0, 27988));
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(173, 4)), $mul.ref(2, 1));
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p697, 186);
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(174, 4)), $mul.ref(0, 1));
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p699, $sub.i16(0, 27856));
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(174, 4)), $mul.ref(2, 1));
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p701, 125);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(175, 4)), $mul.ref(0, 1));
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p703, 0);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(175, 4)), $mul.ref(2, 1));
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p705, 0);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(176, 4)), $mul.ref(0, 1));
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p707, $sub.i16(0, 27860));
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(176, 4)), $mul.ref(2, 1));
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p709, 48);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    $p712 := $load.ref($M.0, $p711);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($p712, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} vslice_dummy_var_274 := dev_printk.ref.ref.ref.ref(.str.6, $p713, .str.26, .str.124);
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} $i715 := zd_chip_lock_phy_regs($p0);
    call {:si_unique_call 2351} {:cexpr "r"} boogie_si_record_i32($i715);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $i716 := $ne.i32($i715, 0);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i716} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i716 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p718 := $bitcast.ref.ref($p1);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} $i719 := zd_iowrite16a_locked($p0, $p718, 177);
    call {:si_unique_call 2353} {:cexpr "r"} boogie_si_record_i32($i719);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $i720 := $ne.i32($i719, 0);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i720} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i720 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} $i722 := patch_cr157($p0);
    call {:si_unique_call 2357} {:cexpr "r"} boogie_si_record_i32($i722);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    $i721 := $i722;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} $i723 := zd_chip_unlock_phy_regs($p0);
    call {:si_unique_call 2355} {:cexpr "t"} boogie_si_record_i32($i723);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    $i724 := $ne.i32($i723, 0);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i724} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i724 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i726 := $i721;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $i717 := $i726;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $r := $i717;
    return;

  $bb9:
    assume $i724 == 1;
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    $i725 := $eq.i32($i721, 0);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i725} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i725 == 1);
    goto $bb11;

  $bb12:
    assume $i725 == 1;
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    $i726 := $i723;
    goto $bb14;

  $bb5:
    assume $i720 == 1;
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    $i721 := $i719;
    goto $bb7;

  $bb1:
    assume $i716 == 1;
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    $i717 := $i715;
    goto $bb3;
}



const patch_cr157: ref;

axiom patch_cr157 == $sub.ref(0, 769008);

procedure patch_cr157($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.24, $M.27, $CurrAddr, $M.29, $M.30;



implementation patch_cr157($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i7: i32;
  var vslice_dummy_var_275: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(11578, 1));
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} $i8 := zd_ioread16_locked($p0, $p1, $sub.i16(0, 1988));
    call {:si_unique_call 2360} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.64, $p1);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i32($i15, 8);
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} vslice_dummy_var_275 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p13, .str.125, .str.126, $i16);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.64, $p1);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $i20 := $ashr.i32($i19, 8);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} $i21 := zd_iowrite32_locked($p0, $i20, $sub.i16(0, 28044));
    call {:si_unique_call 2363} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const dump_cr: ref;

axiom dump_cr == $sub.ref(0, 770040);

procedure dump_cr($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.27, $M.0;



implementation dump_cr($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i13: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 2365} {:cexpr "dump_cr:arg:addr"} boogie_si_record_i16($i1);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} $i6 := zd_ioread32_locked($p0, $p3, $i5);
    call {:si_unique_call 2367} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.23, $p3);
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} vslice_dummy_var_277 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p17, .str.115, .str.114, $p2, $i18);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} vslice_dummy_var_276 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p11, .str.113, .str.114, $p2, $i6);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $i13 := $i6;
    goto $bb3;
}



const get_fw_name: ref;

axiom get_fw_name == $sub.ref(0, 771072);

procedure get_fw_name($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_fw_name($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var vslice_dummy_var_278: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} {:cexpr "get_fw_name:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(11268, 1));
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    $p9 := (if $i8 == 1 then .str.257 else .str.258);
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} vslice_dummy_var_278 := scnprintf.ref.i64.ref.ref.ref($p1, $i2, .str.256, $p9, $p3);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const request_fw_file: ref;

axiom request_fw_file == $sub.ref(0, 772104);

procedure request_fw_file($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_fw_file($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} vslice_dummy_var_279 := dev_printk.ref.ref.ref.ref.ref(.str.6, $p2, .str.259, .str.260, $p1);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} $i4 := request_firmware($p0, $p1, $p2);
    call {:si_unique_call 2374} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} vslice_dummy_var_280 := dev_err.ref.ref.ref.i32($p2, .str.261, $p1, $i4);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_word: ref;

axiom get_word == $sub.ref(0, 773136);

procedure get_word($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;



implementation get_word($p0: ref, $i1: i16) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} {:cexpr "get_word:arg:offset"} boogie_si_record_i16($i1);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i64($i1);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 2));
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const handle_version_mismatch: ref;

axiom handle_version_mismatch == $sub.ref(0, 774168);

procedure handle_version_mismatch($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $CurrAddr;



implementation handle_version_mismatch($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i10: i32;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} $p3 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} $p4 := zd_usb_to_usbdev($p0);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p2, $0.ref);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} $p6 := get_fw_name($p0, $p5, 128, .str.262);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} $i8 := request_fw_file($p2, $p6, $p7);
    call {:si_unique_call 2382} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.41, $p2);
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.43, $p12);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.41, $p2);
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.44, $p15);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} $i17 := upload_code($p4, $p13, $i16, $sub.i16(0, 4608), 1);
    call {:si_unique_call 2385} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.43, $p19);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64(298);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p20, $mul.ref($i21, 1));
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.44, $p23);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64(298);
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64($i24, $i25);
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} $i27 := upload_code($p4, $p22, $i26, $sub.i16(0, 1899), 1);
    call {:si_unique_call 2387} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    $i10 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.41, $p2);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} release_firmware($p28);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const upload_code: ref;

axiom upload_code == $sub.ref(0, 775200);

procedure upload_code($p0: ref, $p1: ref, $i2: i64, $i3: i16, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation upload_code($p0: ref, $p1: ref, $i2: i64, $i3: i16, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i11: i64;
  var $i12: i1;
  var $i16: i1;
  var $i17: i64;
  var $p18: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $i24: i16;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i16;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i51: i1;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i10: i32;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} {:cexpr "upload_code:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 2389} {:cexpr "upload_code:arg:code_offset"} boogie_si_record_i16($i3);
    call {:si_unique_call 2390} {:cexpr "upload_code:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} $p5 := kmalloc(4096, 208);
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i2, $sub.i64(0, 2));
    call {:si_unique_call 2394} {:cexpr "size"} boogie_si_record_i64($i11);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i4, 1);
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} kfree($p5);
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} $i45 := __create_pipe($p0, 0);
    call {:si_unique_call 2406} {:cexpr "tmp___1"} boogie_si_record_i32($i45);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, $sub.i32(0, 2147483520));
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} $i47 := usb_control_msg($p0, $i46, 49, $sub.i8(0, 64), 0, 0, $p5, 1, 5000);
    call {:si_unique_call 2408} {:cexpr "r"} boogie_si_record_i32($i47);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 1);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p5);
    call {:si_unique_call 2410} {:cexpr "ret"} boogie_si_record_i8($i53);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $i54 := $sext.i8.i32($i53);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 0);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i53);
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} vslice_dummy_var_286 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p59, .str.269, .str.265, $i60);
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i55 == 1;
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i53);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} vslice_dummy_var_285 := dev_err.ref.ref.i32($p56, .str.268, $i57);
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb3;

  $bb21:
    assume $i48 == 1;
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} vslice_dummy_var_284 := dev_err.ref.ref.i32($p49, .str.267, $i47);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    $i51 := $sge.i32($i47, 0);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $i47;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    $i10 := $i52;
    goto $bb3;

  $bb23:
    assume $i51 == 1;
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 19);
    goto $bb25;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    $p13, $i14, $i15 := $p1, $i11, $i3;
    goto $bb8;

  $bb8:
    call $i16, $i17, $p18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $p13, $i14, $i15, cmdloc_dummy_var_48, cmdloc_dummy_var_49, cmdloc_dummy_var_50, vslice_dummy_var_282 := upload_code_loop_$bb8($p0, $p5, $i16, $i17, $p18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $p13, $i14, $i15, cmdloc_dummy_var_48, cmdloc_dummy_var_49, cmdloc_dummy_var_50, vslice_dummy_var_282);
    goto $bb8_last;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $ult.i64(4096, $i14);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    $i17 := $i14;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} vslice_dummy_var_282 := dev_printk.ref.ref.ref.ref.i64(.str.6, $p18, .str.264, .str.265, $i17);
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 2396} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p5, $p13, $i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} $i20 := __create_pipe($p0, 0);
    call {:si_unique_call 2398} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, $sub.i32(0, 2147483648));
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i15);
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i16($i17);
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} $i27 := usb_control_msg($p0, $i21, 48, 64, $i23, 0, $p5, $i26, 1000);
    call {:si_unique_call 2400} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i27, $sub.i32(0, 2));
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    call {:si_unique_call 2402} {:cexpr "transfer_size"} boogie_si_record_i64($i33);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $i34 := $sub.i64($i14, $i33);
    call {:si_unique_call 2403} {:cexpr "size"} boogie_si_record_i64($i34);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p13, $mul.ref($i33, 1));
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $i36 := $udiv.i64($i33, 2);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i16($i36);
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i15);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i38, $i39);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    call {:si_unique_call 2404} {:cexpr "code_offset"} boogie_si_record_i16($i41);
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i34, 0);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb16:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $p13, $i14, $i15 := $p35, $i34, $i41;
    goto $bb16_dummy;

  $bb13:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} vslice_dummy_var_283 := dev_err.ref.ref.i32($p30, .str.266, $i29);
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    $i10 := $i29;
    goto $bb3;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $i17 := 4096;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} vslice_dummy_var_281 := dev_err.ref.ref($p8, .str.263);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12540;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 776232);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 777264);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2413} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2414} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 2415} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 2416} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 2417} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 2418} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 2419} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2420} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 2421} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 778296);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2422} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2423} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fill_ctrlset: ref;

axiom fill_ctrlset == $sub.ref(0, 779328);

procedure fill_ctrlset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.65, $CurrAddr;



implementation fill_ctrlset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i8;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p55: ref;
  var $i56: i16;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i16;
  var $i63: i8;
  var $p64: ref;
  var $i65: i16;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i24;
  var $i80: i24;
  var $i81: i24;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $i93: i16;
  var $i94: i32;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i99: i16;
  var $i100: i32;
  var $i98: i32;
  var $i101: i16;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i8;
  var $p110: ref;
  var $i111: i16;
  var $i112: i32;
  var $i113: i16;
  var $i114: i32;
  var $i115: i1;
  var $i117: i16;
  var $p118: ref;
  var $p119: ref;
  var $i116: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 4);
    call {:si_unique_call 2426} {:cexpr "frag_len"} boogie_si_record_i32($i9);
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} $p10 := skb_push($p1, 11);
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} $p12 := IEEE80211_SKB_CB($p1);
    goto corral_source_split_12628;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i9, 65535);
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 2430} {:cexpr "tmp___2"} boogie_si_record_i64($i16);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $i39 := ieee80211_is_pspoll($i38);
    call {:si_unique_call 2436} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} $p44 := ieee80211_get_tx_rate($p43, $p12);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i16.i8($i46);
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i47);
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p52, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $i57 := $and.i16($i56, 2047);
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 4);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i9);
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(2, 1));
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p66, $i65);
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} cs_set_control($p0, $p11, $p6, $p12);
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i9, 21);
    call {:si_unique_call 2439} {:cexpr "packet_length"} boogie_si_record_i32($i67);
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    $i68 := $ugt.i32($i67, 65535);
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 2441} {:cexpr "tmp___5"} boogie_si_record_i64($i71);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} $i91 := zd_chip_is_zd1211b($p90);
    call {:si_unique_call 2447} {:cexpr "tmp___6"} boogie_si_record_i32($i91);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i92 == 1);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i67);
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    $i98 := $i100;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i98);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(6, 1));
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p102, $i101);
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(10, 1));
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, 0);
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(10, 1));
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 31);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(2, 1));
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $i111 := $load.i16($M.0, $p110);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i16($i112);
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} $i114 := zd_calc_tx_length_us($p104, $i109, $i113);
    call {:si_unique_call 2449} {:cexpr "r"} boogie_si_record_i32($i114);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 0);
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i114);
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(8, 1));
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, $i117);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p119, 0);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    $i116 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    $r := $i116;
    return;

  $bb22:
    assume $i115 == 1;
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    $i116 := $i114;
    goto $bb24;

  $bb19:
    assume $i92 == 1;
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i16($i67);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i9);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32($i94, $i96);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    $i98 := $i97;
    goto $bb21;

  $bb13:
    assume $i72 == 1;
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p73, .str.1);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p74, .str.175);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p75, .str.31);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p76, .str.4);
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $i79 := $load.i24($M.5, $p78);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    $i80 := $and.i24($i79, $sub.i24(0, 262144));
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    $i81 := $or.i24($i80, 938);
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p78, $i81);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p82, 1);
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.6, $p83);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i64($i84);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    $i86 := $and.i64($i85, 1);
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 2443} {:cexpr "tmp___4"} boogie_si_record_i64($i87);
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} dump_stack();
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i88 == 1;
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} vslice_dummy_var_288 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.31, 938, .str.177);
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i60 == 1;
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p44, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i16.i8($i62);
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $i63);
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(2, 1));
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, 0);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, .str.1);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, .str.175);
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str.31);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.4);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.5, $p23);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 917);
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p23, $i26);
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 1);
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.6, $p28);
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 2432} {:cexpr "tmp___1"} boogie_si_record_i64($i32);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} dump_stack();
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i33 == 1;
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} vslice_dummy_var_287 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.31, 917, .str.176);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_usb_tx: ref;

axiom zd_usb_tx == $sub.ref(0, 780360);

procedure zd_usb_tx($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_usb_tx($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i8: i32;
  var $i34: i32;
  var vslice_dummy_var_289: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} $p2 := IEEE80211_SKB_CB($p1);
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} $p3 := zd_usb_to_usbdev($p0);
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(0, 1));
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} $i6 := atomic_read($p5);
    call {:si_unique_call 2453} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} $p9 := usb_alloc_urb(0, 32);
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} $i12 := __create_pipe($p3, 1);
    call {:si_unique_call 2456} {:cexpr "tmp___2"} boogie_si_record_i32($i12);
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, $sub.i32(0, 1073741824));
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} usb_fill_bulk_urb($p9, $p3, $i13, $p15, $i17, tx_urb_complete, $p18);
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.9, jiffies);
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(1, 8));
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p20);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(296, 1));
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} skb_queue_tail($p25, $p1);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(392, 1));
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} usb_anchor_urb($p9, $p26);
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} $i27 := usb_submit_urb($p9, 32);
    call {:si_unique_call 2461} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} tx_inc_submitted_urbs($p0);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} vslice_dummy_var_289 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p31, .str.66, .str.67, $p9, $i27);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} usb_unanchor_urb($p9);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(296, 1));
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} skb_unlink($p1, $p33);
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} usb_free_urb($p9);
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $i34 := $i8;
    goto $bb12;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 2);
    goto $bb3;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 781392);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    return;
}



const tx_urb_complete: ref;

axiom tx_urb_complete == $sub.ref(0, 782424);

procedure tx_urb_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation tx_urb_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} $p4 := IEEE80211_SKB_CB($p3);
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(0, 8));
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} $p11 := zd_hw_mac($p10);
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i16, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i16, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i16, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} vslice_dummy_var_291 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p38, .str.206, .str.227, $p0, $i40);
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    $p46 := $add.ref($add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10416, 1)), $mul.ref(392, 1));
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} usb_anchor_urb($p0, $p46);
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} $i47 := usb_submit_urb($p0, 32);
    call {:si_unique_call 2473} {:cexpr "r"} boogie_si_record_i32($i47);
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb39:
    assume $i48 == 1;
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} usb_unanchor_urb($p0);
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} vslice_dummy_var_292 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p51, .str.228, .str.227, $p0, $i47);
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    $p43 := $add.ref($add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10416, 1)), $mul.ref(296, 1));
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} skb_unlink($p3, $p43);
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} zd_mac_tx_to_dev($p3, $i45);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} usb_free_urb($p0);
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} tx_dec_submitted_urbs($p13);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i16, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} vslice_dummy_var_290 := dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p32, .str.206, .str.227, $p0, $i34);
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb4:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i16, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i16, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i16, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i16, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i16, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i16, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb10;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb27;

  $bb24:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i16, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb22:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i16, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb10;

  $bb32:
    assume $i29 == 1;
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    goto $bb20;
}



const skb_queue_tail: ref;

axiom skb_queue_tail == $sub.ref(0, 783456);

procedure skb_queue_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_queue_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    return;
}



const skb_unlink: ref;

axiom skb_unlink == $sub.ref(0, 784488);

procedure skb_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_unlink($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    return;
}



const tx_inc_submitted_urbs: ref;

axiom tx_inc_submitted_urbs == $sub.ref(0, 785520);

procedure tx_inc_submitted_urbs($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation tx_inc_submitted_urbs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $i21: i8;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} $p3 := spinlock_check($p2);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 2482} {:cexpr "flags"} boogie_si_record_i64($i4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(576, 1));
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(576, 1));
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(580, 1));
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} spin_unlock_irqrestore($p22, $i4);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(576, 1));
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 5);
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} $p17 := zd_usb_to_hw($p0);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} ieee80211_stop_queues($p17);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(580, 1));
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, $sub.i8(0, 2));
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    $i21 := $or.i8($i20, 1);
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i21);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ieee80211_stop_queues: ref;

axiom ieee80211_stop_queues == $sub.ref(0, 786552);

procedure ieee80211_stop_queues($p0: ref);
  free requires assertsPassed;



implementation ieee80211_stop_queues($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    return;
}



const zd_mac_tx_to_dev: ref;

axiom zd_mac_tx_to_dev == $sub.ref(0, 787584);

procedure zd_mac_tx_to_dev($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation zd_mac_tx_to_dev($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var vslice_dummy_var_293: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} {:cexpr "zd_mac_tx_to_dev:arg:error"} boogie_si_record_i32($i1);
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} $p2 := IEEE80211_SKB_CB($p0);
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(0, 8));
    goto corral_source_split_12927;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} $p9 := zd_hw_mac($p8);
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} ieee80211_tx_info_clear_status($p2);
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} vslice_dummy_var_293 := skb_pull($p0, 11);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i1, 0);
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 2492} {:cexpr "tmp___3"} boogie_si_record_i64($i14);
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 4);
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 2495} {:cexpr "tmp___4"} boogie_si_record_i64($i22);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref(0, 13336)), $mul.ref(12456, 1));
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} skb_queue_tail($p24, $p0);
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} $i25 := skb_queue_len($p24);
    call {:si_unique_call 2499} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i25, 50);
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p27, $p28, $p29, $i30, $i31, $i32, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $i40 := zd_mac_tx_to_dev_loop_$bb10($p8, $p9, $p24, $p27, $p28, $p29, $i30, $i31, $i32, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $i40);
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} $p27 := skb_dequeue($p24);
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p9);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(13328, 1));
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} zd_mac_tx_status($p8, $p27, $i35, $0.ref);
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p9, $mul.ref(0, 13336)), $mul.ref(13328, 1));
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    $i38 := $and.i8($i37, $sub.i8(0, 9));
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i38);
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} $i39 := skb_queue_len($p24);
    call {:si_unique_call 2503} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i32($i39, 50);
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb15_dummy;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 13336)), $mul.ref(13332, 1));
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb14;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} ieee80211_tx_status_irqsafe($p8, $p0);
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} ieee80211_tx_status_irqsafe($p8, $p0);
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const tx_dec_submitted_urbs: ref;

axiom tx_dec_submitted_urbs == $sub.ref(0, 788616);

procedure tx_dec_submitted_urbs($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation tx_dec_submitted_urbs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} $p3 := spinlock_check($p2);
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 2506} {:cexpr "flags"} boogie_si_record_i64($i4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(576, 1));
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(576, 1));
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(580, 1));
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} spin_unlock_irqrestore($p21, $i4);
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(576, 1));
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i15, 2);
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} $p17 := zd_usb_to_hw($p0);
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} ieee80211_wake_queues($p17);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(10416, 1)), $mul.ref(580, 1));
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, $sub.i8(0, 2));
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i20);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 789648);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} $p2 := external_alloc();
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_queue_len: ref;

axiom skb_queue_len == $sub.ref(0, 790680);

procedure skb_queue_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_push: ref;

axiom skb_push == $sub.ref(0, 791712);

procedure skb_push($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_push($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} {:cexpr "skb_push:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} $p2 := external_alloc();
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_is_pspoll: ref;

axiom ieee80211_is_pspoll == $sub.ref(0, 792744);

procedure ieee80211_is_pspoll($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_pspoll($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} {:cexpr "ieee80211_is_pspoll:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 252);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 164);
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_get_tx_rate: ref;

axiom ieee80211_get_tx_rate == $sub.ref(0, 793776);

procedure ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $p57: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 2515} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i12);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 2517} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i12, 0);
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 2525} {:cexpr "tmp___2"} boogie_si_record_i64($i34);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 1416)), $mul.ref(192, 1)), $mul.ref($i40, 8));
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13089;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p51, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i64($i55);
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p47, $mul.ref($i56, 12));
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    $p36 := $p57;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    $r := $p36;
    return;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    $p36 := $0.ref;
    goto $bb12;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1(1);
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    $i19 := $xor.i1($i18, 1);
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 2518} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i20);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 2520} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 2523} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} warn_slowpath_null(.str.178, 1554);
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const cs_set_control: ref;

axiom cs_set_control == $sub.ref(0, 794808);

procedure cs_set_control($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cs_set_control($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $i62: i16;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $p72: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 16);
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 4);
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} $i29 := ieee80211_is_pspoll($i28);
    call {:si_unique_call 2527} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p40, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    $i45 := $and.i16($i44, 2047);
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1);
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p58, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    $i63 := $and.i16($i62, 2047);
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 2);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i66 == 1;
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13175;

  corral_source_split_13175:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i69, 128);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $i71);
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i48 == 1;
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, 32);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, $i53);
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13135;

  corral_source_split_13135:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 4);
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 2);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i23);
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 1);
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_calc_tx_length_us: ref;

axiom zd_calc_tx_length_us == $sub.ref(0, 795840);

procedure zd_calc_tx_length_us($p0: ref, $i1: i8, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, $M.0, $CurrAddr;



implementation zd_calc_tx_length_us($p0: ref, $i1: i8, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $i44: i1;
  var $i45: i1;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i36: i32;
  var $i51: i32;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 2529} {:cexpr "zd_calc_tx_length_us:arg:zd_rate"} boogie_si_record_i8($i1);
    call {:si_unique_call 2530} {:cexpr "zd_calc_tx_length_us:arg:tx_length"} boogie_si_record_i16($i2);
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p4, 1);
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p5, 2);
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p6, 11);
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p7, 11);
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p8, 0);
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p9, 0);
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p10, 0);
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p11, 0);
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p12, 48);
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(9, 1));
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p13, 24);
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p14, 12);
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(11, 1));
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p15, 6);
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p16, 54);
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(13, 1));
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p17, 36);
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p18, 18);
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(15, 1));
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p19, 9);
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i2);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i20, 8);
    call {:si_unique_call 2531} {:cexpr "bits"} boogie_si_record_i32($i21);
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 15);
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref($i24, 1));
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.65, $p25);
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    call {:si_unique_call 2532} {:cexpr "divisor"} boogie_si_record_i32($i27);
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i30, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i36 := $i21;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    $i51 := $udiv.i32($i36, $i27);
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    $i29 := $i51;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i21, 10);
    call {:si_unique_call 2535} {:cexpr "bits"} boogie_si_record_i32($i50);
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $i36 := $i50;
    goto $bb13;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $i39 := $urem.i32($i21, 11);
    call {:si_unique_call 2534} {:cexpr "t"} boogie_si_record_i32($i39);
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p0);
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 127);
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i43);
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i39, 0);
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    $i45 := $ule.i32($i39, 3);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb18;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p0);
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 128);
    goto corral_source_split_13256;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i49);
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb6:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i30, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb10;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i21, 5);
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    $i35 := $mul.i32($i34, 2);
    call {:si_unique_call 2533} {:cexpr "bits"} boogie_si_record_i32($i35);
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb13;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb3;
}



const probe: ref;

axiom probe == $sub.ref(0, 796872);

procedure probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.29, $M.30, $M.24, $M.8, $M.26, $M.22, $M.23, $M.27, assertsPassed, $M.37, $M.54, $M.62, $M.65, $M.19, $M.20, $M.57, $M.41, $M.45, $M.48, $M.49, $M.46, $M.53;



implementation probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $i35: i8;
  var $i36: i8;
  var $i37: i8;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i17: i32;
  var $p18: ref;
  var $p54: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $i8: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} $p2 := interface_to_usbdev($p0);
    goto corral_source_split_13263;

  corral_source_split_13263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} print_id___0($p2);
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.9, $p3);
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 2);
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1744)), $mul.ref(28, 1));
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} vslice_dummy_var_294 := dev_printk.ref.ref.ref.ref(.str.6, $p15, .str.280, .str.281);
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i32(0, 19), $0.ref;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} $p54 := interface_to_usbdev($p0);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} vslice_dummy_var_295 := usb_reset_device($p54);
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p18);
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb32:
    assume $i57 == 1;
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} $p58 := zd_hw_mac($p18);
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} zd_mac_clear($p58);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} ieee80211_free_hw($p18);
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} $i19 := usb_reset_device($p2);
    call {:si_unique_call 2541} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_13280;

  corral_source_split_13280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} $p23 := zd_mac_alloc_hw($p0);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} $p26 := zd_hw_mac($p23);
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.9, $p29);
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 1);
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    $p34 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11268, 1));
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_13308;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    $i36 := $and.i8($i33, 1);
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    $i37 := $and.i8($i35, $sub.i8(0, 2));
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $i38 := $or.i8($i37, $i36);
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i38);
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} $i39 := zd_mac_preinit_hw($p23);
    call {:si_unique_call 2549} {:cexpr "r"} boogie_si_record_i32($i39);
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} $i43 := ieee80211_register_hw($p23);
    call {:si_unique_call 2552} {:cexpr "r"} boogie_si_record_i32($i43);
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} vslice_dummy_var_299 := dev_printk.ref.ref.ref.ref(.str.6, $p47, .str.284, .str.281);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p23, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_13329;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} $p51 := wiphy_name($p50);
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} vslice_dummy_var_300 := _dev_info.ref.ref.ref($p52, .str.139, $p51);
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} vslice_dummy_var_298 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p45, .str.283, .str.281, $i43);
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i43, $p23;
    goto $bb19;

  $bb26:
    assume $i40 == 1;
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} vslice_dummy_var_297 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p41, .str.73, .str.281, $i39);
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i39, $p23;
    goto $bb19;

  $bb23:
    assume $i25 == 1;
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i32(0, 12), $p23;
    goto $bb19;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} vslice_dummy_var_296 := dev_err.ref.ref.i32($p21, .str.282, $i19);
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i19, $0.ref;
    goto $bb19;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb14;

  $bb15:
    assume $i14 == 1;
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} $i7 := eject_installer($p0);
    call {:si_unique_call 2539} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_13271;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const disconnect: ref;

axiom disconnect == $sub.ref(0, 797904);

procedure disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed, $M.29, $M.30, $M.24, $M.26, $M.22, $M.23, $M.27, $M.37, $M.54, $M.62, $M.65, $M.19, $M.20, $M.57, $M.41, $M.45, $M.48, $M.49, $M.46, $M.42, $M.53;



implementation disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} $p2 := zd_intf_to_hw($p0);
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} $p5 := zd_hw_mac($p2);
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1));
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} vslice_dummy_var_301 := dev_printk.ref.ref.ref.ref(.str.6, $p10, .str.26, .str.293);
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} ieee80211_unregister_hw($p2);
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} zd_usb_disable_tx($p7);
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} zd_usb_disable_rx($p7);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} zd_usb_disable_int($p7);
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} $p12 := interface_to_usbdev($p0);
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} vslice_dummy_var_302 := usb_reset_device($p12);
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} zd_mac_clear($p5);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} ieee80211_free_hw($p2);
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    $M.66 := $store.ref($M.66, $p14, .str.1);
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    $M.67 := $store.ref($M.67, $p15, .str.293);
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    $M.68 := $store.ref($M.68, $p16, .str.60);
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p17, .str.294);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.70, $p19);
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 1495);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    $M.70 := $store.i24($M.70, $p19, $i22);
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    $M.71 := $store.i8($M.71, $p23, 1);
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.71, $p24);
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 2573} {:cexpr "tmp___1"} boogie_si_record_i64($i28);
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} vslice_dummy_var_303 := __dynamic_dev_dbg.ref.ref.ref($p1, $p30, .str.294);
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pre_reset: ref;

axiom pre_reset == $sub.ref(0, 798936);

procedure pre_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, assertsPassed, $M.24, $M.30, $M.29, $M.22, $M.23, $CurrAddr, $M.27, $M.54, $M.62, $M.19, $M.20, $M.57, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.41, $M.45, $M.48, $M.49, $M.46, $M.42, $M.37, $M.53;



implementation pre_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $i18: i8;
  var $i19: i8;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(36, 1));
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 2);
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} $p8 := zd_hw_mac($p2);
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 13336)), $mul.ref(12448, 1));
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} $i12 := constant_test_bit(0, $p11);
    call {:si_unique_call 2578} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11268, 1));
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i13, 1);
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    $i17 := $shl.i8($i16, 2);
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i15, $sub.i8(0, 5));
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    $i19 := $or.i8($i18, $i17);
    goto corral_source_split_13407;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i19);
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} zd_usb_stop($p10);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(11336, 1));
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} ldv_mutex_lock_218($p21);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const post_reset: ref;

axiom post_reset == $sub.ref(0, 799968);

procedure post_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, assertsPassed, $M.0, $M.19, $M.20, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $CurrAddr, $M.41, $M.22, $M.24, $M.23, $M.45, $M.48, $M.49, $M.54, $M.62, $M.8, $M.37, $M.46, $M.42, $M.27, $M.57, $M.53;



implementation post_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13415;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(36, 1));
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 2);
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} $p8 := zd_hw_mac($p2);
    goto corral_source_split_13424;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(11336, 1));
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} ldv_mutex_unlock_219($p12);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p10);
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(11268, 1));
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_13432;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} zd_usb_resume($p10);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const ldv_mutex_unlock_219: ref;

axiom ldv_mutex_unlock_219 == $sub.ref(0, 801000);

procedure ldv_mutex_unlock_219($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_219($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} mutex_unlock($p0);
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;
}



const zd_usb_resume: ref;

axiom zd_usb_resume == $sub.ref(0, 802032);

procedure zd_usb_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.0, $M.19, $M.20, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $CurrAddr, $M.41, $M.26, $M.22, $M.24, $M.23, $M.45, $M.48, $M.49, assertsPassed, $M.54, $M.62, $M.8, $M.37, $M.46, $M.42, $M.27, $M.57, $M.53;



implementation zd_usb_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13441;

  corral_source_split_13441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} $p2 := zd_usb_to_mac($p0);
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_13443;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} vslice_dummy_var_304 := dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.290);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} $p7 := zd_usb_to_hw($p0);
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} $i8 := zd_op_start($p7);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    call {:si_unique_call 2592} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_13449;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 13336)), $mul.ref(12436, 1));
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} $i25 := zd_restore_settings($p2);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    call {:si_unique_call 2597} {:cexpr "r"} boogie_si_record_i32($i25);
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    $M.66 := $store.ref($M.66, $p27, .str.1);
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    $M.67 := $store.ref($M.67, $p28, .str.290);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    $M.68 := $store.ref($M.68, $p29, .str.60);
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p30, .str.292);
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.70, $p32);
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 1519);
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    $M.70 := $store.i24($M.70, $p32, $i35);
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    $M.71 := $store.i8($M.71, $p36, 1);
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.71, $p37);
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 2599} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_13504;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} vslice_dummy_var_306 := __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p45, .str.292, $i25);
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_13453;

  corral_source_split_13453:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} vslice_dummy_var_305 := dev_warn.ref.ref.i32($p12, .str.291, $i8);
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(11268, 1));
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_13460;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} usb_queue_reset_device($p21);
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 13336)), $mul.ref(12448, 1));
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} set_bit(0, $p19);
    goto corral_source_split_13464;

  corral_source_split_13464:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_469:
    assume !assertsPassed;
    return;
}



const zd_restore_settings: ref;

axiom zd_restore_settings == $sub.ref(0, 803064);

procedure zd_restore_settings($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $M.26, $M.22, $M.24, $M.23, $CurrAddr, assertsPassed, $M.37, $M.27, $M.54, $M.57;



implementation zd_restore_settings($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i32;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i16;
  var $i83: i8;
  var $i84: i32;
  var $i85: i8;
  var $p86: ref;
  var $i87: i32;
  var $p89: ref;
  var $i90: i64;
  var $p92: ref;
  var $p93: ref;
  var $i35: i32;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13508;

  corral_source_split_13508:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} vslice_dummy_var_307 := dev_printk.ref.ref.ref.ref(.str.6, $p6, .str.26, .str.37);
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} spin_lock_irq($p8);
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(12360, 1));
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_13516;

  corral_source_split_13516:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    cmdloc_dummy_var_52 := $M.0;
    call {:si_unique_call 2604} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p10, $p11, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_53;
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(13328, 1));
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, 1);
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    call {:si_unique_call 2605} {:cexpr "short_preamble"} boogie_si_record_i32($i15);
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(232, 1));
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    call {:si_unique_call 2606} {:cexpr "beacon_interval"} boogie_si_record_i32($i19);
    goto corral_source_split_13525;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(234, 1));
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    call {:si_unique_call 2607} {:cexpr "beacon_period"} boogie_si_record_i32($i23);
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(12434, 1));
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    call {:si_unique_call 2608} {:cexpr "channel"} boogie_si_record_i8($i25);
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} spin_unlock_irq($p26);
    goto corral_source_split_13532;

  corral_source_split_13532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} $i27 := set_mac_and_bssid($p0);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    call {:si_unique_call 2611} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i25);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} $i39 := zd_chip_set_channel($p36, $i38);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    call {:si_unique_call 2614} {:cexpr "r"} boogie_si_record_i32($i39);
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} set_rts_cts($p0, $i15);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} $i48 := zd_chip_set_multicast_hash($p47, $p1);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    call {:si_unique_call 2618} {:cexpr "r"} boogie_si_record_i32($i48);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_13559;

  corral_source_split_13559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(12436, 1));
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_13568;

  corral_source_split_13568:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 7);
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i58 == 1);
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(12436, 1));
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i61 == 1);
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(12436, 1));
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 3);
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11736, 1));
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i19);
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i23);
    goto corral_source_split_13604;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(12436, 1));
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_13608;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} vslice_dummy_var_312 := zd_set_beacon_interval($p79, $i82, $i85, $i87);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} spin_lock_irq($p89);
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.9, jiffies);
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(224, 1));
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p92, $i90);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} spin_unlock_irq($p93);
    goto corral_source_split_13616;

  corral_source_split_13616:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i68 == 1;
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_13587;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_13588;

  corral_source_split_13588:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11736, 1));
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} $p73 := ieee80211_beacon_get($p70, $p72);
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i75 == 1;
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} vslice_dummy_var_311 := zd_mac_config_beacon($p77, $p73, 0);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb12;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} vslice_dummy_var_310 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p54, .str.40, .str.37, $i48);
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    $i35 := $i48;
    goto $bb3;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i40 == 1;
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} vslice_dummy_var_309 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p45, .str.39, .str.37, $i39);
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    $i35 := $i39;
    goto $bb3;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} vslice_dummy_var_308 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p33, .str.38, .str.37, $i27);
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    $i35 := $i27;
    goto $bb3;

  SeqInstr_475:
    assume !assertsPassed;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 804096);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2625} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2626} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2627} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const zd_usb_stop: ref;

axiom zd_usb_stop == $sub.ref(0, 805128);

procedure zd_usb_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.26, $M.24, $M.30, $M.29, $M.22, $M.23, assertsPassed, $CurrAddr, $M.27, $M.54, $M.62, $M.19, $M.20, $M.57, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.41, $M.45, $M.48, $M.49, $M.46, $M.42, $M.37, $M.53;



implementation zd_usb_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i8;
  var vslice_dummy_var_313: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} vslice_dummy_var_313 := dev_printk.ref.ref.ref.ref(.str.6, $p3, .str.26, .str.289);
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} $p5 := zd_usb_to_hw($p0);
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} zd_op_stop($p5);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} zd_usb_disable_tx($p0);
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} zd_usb_disable_rx($p0);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} zd_usb_disable_int($p0);
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11268, 1));
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, $sub.i8(0, 3));
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i8);
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_218: ref;

axiom ldv_mutex_lock_218 == $sub.ref(0, 806160);

procedure ldv_mutex_lock_218($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_218($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} mutex_lock($p0);
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;
}



const ieee80211_unregister_hw: ref;

axiom ieee80211_unregister_hw == $sub.ref(0, 807192);

procedure ieee80211_unregister_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_unregister_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    return;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 808224);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2637} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2638} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const zd_mac_clear: ref;

axiom zd_mac_clear == $sub.ref(0, 809256);

procedure zd_mac_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.29, $M.30, $M.24, $M.8, $M.26, $M.22, $M.23, $M.27, assertsPassed, $M.37, $M.54, $M.62, $M.65, $M.19, $M.20, $M.57, $M.41, $M.45, $M.48, $M.49, $M.46, $M.42, $M.53;



implementation zd_mac_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var vslice_dummy_var_314: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    $p2 := $M.7;
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} flush_workqueue($p2);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} zd_chip_clear($p3);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} $i5 := spin_is_locked($p4);
    call {:si_unique_call 2643} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 2645} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_13658;

  corral_source_split_13658:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p0);
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 2650} cmdloc_dummy_var_55 := $memset.i8(cmdloc_dummy_var_54, $p28, $sub.i8(0, 1), 13336, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.1);
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.33);
    goto corral_source_split_13665;

  corral_source_split_13665:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.31);
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.4);
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_13672;

  corral_source_split_13672:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 279);
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 1);
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 2647} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_13682;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} dump_stack();
    goto corral_source_split_13688;

  corral_source_split_13688:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} vslice_dummy_var_314 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.31, 279, .str.34);
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_502:
    assume !assertsPassed;
    return;
}



const ieee80211_free_hw: ref;

axiom ieee80211_free_hw == $sub.ref(0, 810288);

procedure ieee80211_free_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_free_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    return;
}



const zd_chip_clear: ref;

axiom zd_chip_clear == $sub.ref(0, 811320);

procedure zd_chip_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.29, $M.30, $M.24, $M.8, $M.26, $M.22, $M.23, $M.27, assertsPassed, $M.37, $M.54, $M.62, $M.65, $M.19, $M.20, $M.57, $M.41, $M.45, $M.48, $M.49, $M.46, $M.42, $M.53;



implementation zd_chip_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var vslice_dummy_var_315: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} $i3 := mutex_is_locked($p2);
    call {:si_unique_call 2653} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 2655} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} zd_usb_clear($p26);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11272, 1));
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} zd_rf_clear($p27);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11336, 1));
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} mutex_destroy($p28);
    goto corral_source_split_13738;

  corral_source_split_13738:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p0);
    goto corral_source_split_13739;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    call {:si_unique_call 2663} cmdloc_dummy_var_57 := $memset.i8(cmdloc_dummy_var_56, $p29, $sub.i8(0, 1), 11584, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_57;
    goto corral_source_split_13740;

  corral_source_split_13740:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_13704;

  corral_source_split_13704:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str.1);
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.2);
    goto corral_source_split_13708;

  corral_source_split_13708:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.3);
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.4);
    goto corral_source_split_13712;

  corral_source_split_13712:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.5, $p14);
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_13716;

  corral_source_split_13716:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 86);
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p14, $i17);
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 1);
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13721;

  corral_source_split_13721:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 2657} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} dump_stack();
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} vslice_dummy_var_315 := __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.3, 86, .str.5);
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const spin_is_locked: ref;

axiom spin_is_locked == $sub.ref(0, 812352);

procedure spin_is_locked($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation spin_is_locked($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13742;

  corral_source_split_13742:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} $i4 := arch_spin_is_locked($p3);
    call {:si_unique_call 2665} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_13746;

  corral_source_split_13746:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const arch_spin_is_locked: ref;

axiom arch_spin_is_locked == $sub.ref(0, 813384);

procedure arch_spin_is_locked($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation arch_spin_is_locked($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.9, pv_lock_ops);
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_13753;

  corral_source_split_13753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 2667} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 2669} $p9 := devirtbounce.7(0, 95, pv_lock_ops, 511, $i8);
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    $i10 := $extractvalue($p9, 4);
    call {:si_unique_call 2670} {:cexpr "__eax"} boogie_si_record_i64($i10);
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    call {:si_unique_call 2671} {:cexpr "__ret"} boogie_si_record_i32($i11);
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 2668} devirtbounce(0, .str.149, 718, 12);
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_spin_is_locked_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const zd_usb_clear: ref;

axiom zd_usb_clear == $sub.ref(0, 814416);

procedure zd_usb_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_usb_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_13764;

  corral_source_split_13764:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} usb_set_intfdata($p2, $0.ref);
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} usb_put_intf($p4);
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_13770;

  corral_source_split_13770:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.0;
    call {:si_unique_call 2674} cmdloc_dummy_var_59 := $memset.i8(cmdloc_dummy_var_58, $p5, $sub.i8(0, 1), 11272, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_59;
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    return;
}



const zd_rf_clear: ref;

axiom zd_rf_clear == $sub.ref(0, 815448);

procedure zd_rf_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.29, $M.30, $M.24, $M.8, $M.26, $M.22, $M.23, $M.27, $CurrAddr, assertsPassed, $M.37, $M.54, $M.62, $M.65, $M.19, $M.20, $M.57, $M.41, $M.45, $M.48, $M.49, $M.46, $M.42, $M.53;



implementation zd_rf_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13776;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 2676} cmdloc_dummy_var_61 := $memset.i8(cmdloc_dummy_var_60, $p7, $sub.i8(0, 1), 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 2675} devirtbounce.8($p6, $p0);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_508:
    assume !assertsPassed;
    return;
}



const mutex_destroy: ref;

axiom mutex_destroy == $sub.ref(0, 816480);

procedure mutex_destroy($p0: ref);
  free requires assertsPassed;



implementation mutex_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_intf: ref;

axiom usb_put_intf == $sub.ref(0, 817512);

procedure usb_put_intf($p0: ref);
  free requires assertsPassed;



implementation usb_put_intf($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    return;
}



const print_id___0: ref;

axiom print_id___0 == $sub.ref(0, 818544);

procedure print_id___0($p0: ref);
  free requires assertsPassed;
  modifies $M.42, $CurrAddr;



implementation print_id___0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} vslice_dummy_var_316 := scnprint_id___0($p0, $p2, 40);
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(39, 1));
    goto corral_source_split_13793;

  corral_source_split_13793:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p4, 0);
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} vslice_dummy_var_317 := dev_printk.ref.ref.ref.ref.ref(.str.6, $p5, .str.285, .str.286, $p6);
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    return;
}



const eject_installer: ref;

axiom eject_installer == $sub.ref(0, 819576);

procedure eject_installer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation eject_installer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i20: i32;
  var $i21: i1;
  var $i4: i32;
  var $i22: i32;
  var $i18: i32;
  var $i19: i8;
  var $i23: i1;
  var $p24: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i26: i32;
  var vslice_dummy_var_318: i32;
  var vslice_dummy_var_319: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} $p1 := interface_to_usbdev($p0);
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(0, 1));
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_13802;

  corral_source_split_13802:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb1;

  $bb1:
    call $p5, $p6, $i7, $p9, $i10, $i11, $i12, $i13, $i14, $p15, $i20, $i21, $i4, $i22 := eject_installer_loop_$bb1($p3, $p5, $p6, $i7, $p9, $i10, $i11, $i12, $i13, $i14, $p15, $i20, $i21, $i4, $i22);
    goto $bb1_last;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i4);
    goto corral_source_split_13808;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 64)), $mul.ref(0, 1));
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} $i10 := usb_endpoint_dir_out($p9);
    call {:si_unique_call 2682} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_13812;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i4, 1);
    call {:si_unique_call 2686} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    $i21 := $sge.i32($i20, 0);
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i22, $u0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i18, $sub.i32(0, 1));
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} $p27 := kzalloc(31, 208);
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_13835;

  corral_source_split_13835:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 85);
    goto corral_source_split_13840;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p27, $mul.ref(1, 1));
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 83);
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p27, $mul.ref(2, 1));
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 66);
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p27, $mul.ref(3, 1));
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 67);
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p27, $mul.ref(14, 1));
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 6);
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p27, $mul.ref(15, 1));
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 27);
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p27, $mul.ref(19, 1));
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 2);
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} vslice_dummy_var_319 := _dev_info.ref.ref($p36, .str.288);
    goto corral_source_split_13854;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i19);
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} $i39 := __create_pipe($p1, $i38);
    call {:si_unique_call 2691} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_13856;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, $sub.i32(0, 1073741824));
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} $i41 := usb_bulk_msg($p1, $i40, $p27, 31, $0.ref, 2000);
    call {:si_unique_call 2693} {:cexpr "r"} boogie_si_record_i32($i41);
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} kfree($p27);
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_13860;

  corral_source_split_13860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2695} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    $i26 := $i41;
    goto $bb15;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 19);
    goto $bb15;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_13828;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} vslice_dummy_var_318 := dev_err.ref.ref($p24, .str.287);
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 19);
    goto $bb15;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i20;
    goto $bb10_dummy;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} $i12 := usb_endpoint_xfer_bulk($p9);
    call {:si_unique_call 2684} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_13815;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    $i14, $p15 := $i4, $p9;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13818;

  corral_source_split_13818:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    call {:si_unique_call 2685} {:cexpr "bulk_out_ep"} boogie_si_record_i8($i17);
    goto corral_source_split_13820;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i14, $i17;
    goto $bb7;

  $bb10_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13804;
}



const zd_mac_alloc_hw: ref;

axiom zd_mac_alloc_hw == $sub.ref(0, 820608);

procedure zd_mac_alloc_hw($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation zd_mac_alloc_hw($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p9: ref;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var vslice_dummy_var_320: i32;
  var vslice_dummy_var_321: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} $p4 := ieee80211_alloc_hw(13336, zd_ops);
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} $p10 := zd_hw_mac($p4);
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    call {:si_unique_call 2702} cmdloc_dummy_var_63 := $memset.i8(cmdloc_dummy_var_62, $p11, 0, 13336, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_63;
    goto corral_source_split_13879;

  corral_source_split_13879:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} vslice_dummy_var_321 := spinlock_check($p12);
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(11584, 1)), $mul.ref(0, 1));
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} __raw_spin_lock_init($p16, .str.45, $p1);
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p4);
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(12436, 1));
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i64(560, 63);
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(12552, 1));
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.0;
    cmdloc_dummy_var_68 := $M.0;
    call {:si_unique_call 2706} cmdloc_dummy_var_69 := $memcpy.i8(cmdloc_dummy_var_67, cmdloc_dummy_var_68, $p23, zd_channels, 560, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_69;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i64(144, 63);
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(13112, 1));
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.0;
    cmdloc_dummy_var_74 := $M.0;
    call {:si_unique_call 2708} cmdloc_dummy_var_75 := $memcpy.i8(cmdloc_dummy_var_73, cmdloc_dummy_var_74, $p28, zd_rates, 144, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_75;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(13256, 1)), $mul.ref(24, 1));
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 12);
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(13112, 1));
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(13256, 1)), $mul.ref(8, 1));
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p31);
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(13256, 1)), $mul.ref(20, 1));
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 14);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(12552, 1));
    goto corral_source_split_13919;

  corral_source_split_13919:
    assume {:verifier.code 0} true;
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(13256, 1)), $mul.ref(0, 1));
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p37);
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(13256, 1));
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1416)), $mul.ref(192, 1)), $mul.ref(0, 8));
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p41);
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(64, 1));
    goto corral_source_split_13928;

  corral_source_split_13928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 8230);
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_13930;

  corral_source_split_13930:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1416)), $mul.ref(48, 1));
    goto corral_source_split_13932;

  corral_source_split_13932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, 142);
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(96, 1));
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 100);
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(92, 1));
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, 1);
    goto corral_source_split_13937;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(68, 1));
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 11);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(97, 1));
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 4);
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(99, 1));
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 18);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(12456, 1));
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} skb_queue_head_init($p55);
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(13328, 1));
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    $i58 := $and.i8($i57, $sub.i8(0, 9));
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, $i58);
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} zd_chip_init($p59, $p4, $p0);
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} housekeeping_init($p10);
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} beacon_init($p10);
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(12280, 1));
    goto corral_source_split_13954;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} __init_work($p60, 0);
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_13956;

  corral_source_split_13956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, 4195328);
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(12280, 1)), $mul.ref(0, 1));
    goto corral_source_split_13958;

  corral_source_split_13958:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p3);
    goto corral_source_split_13960;

  corral_source_split_13960:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_76 := $M.0;
    cmdloc_dummy_var_77 := $M.0;
    call {:si_unique_call 2714} cmdloc_dummy_var_78 := $memcpy.i8(cmdloc_dummy_var_76, cmdloc_dummy_var_77, $p64, $p65, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_78;
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(12280, 1)), $mul.ref(32, 1));
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} lockdep_init_map($p67, .str.46, $p2, 0);
    goto corral_source_split_13963;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(12280, 1)), $mul.ref(8, 1));
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} INIT_LIST_HEAD($p69);
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(12280, 1)), $mul.ref(24, 1));
    goto corral_source_split_13966;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, zd_process_intr);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} SET_IEEE80211_DEV($p4, $p72);
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    $p9 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(13112, 1));
    goto corral_source_split_13903;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_70 := $M.0;
    cmdloc_dummy_var_71 := $M.0;
    call {:si_unique_call 2707} cmdloc_dummy_var_72 := $memcpy.i8(cmdloc_dummy_var_70, cmdloc_dummy_var_71, $p26, zd_rates, 144, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_72;
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref(0, 13336)), $mul.ref(12552, 1));
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_64 := $M.0;
    cmdloc_dummy_var_65 := $M.0;
    call {:si_unique_call 2705} cmdloc_dummy_var_66 := $memcpy.i8(cmdloc_dummy_var_64, cmdloc_dummy_var_65, $p21, zd_channels, 560, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_66;
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_13871;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} vslice_dummy_var_320 := dev_printk.ref.ref.ref.ref(.str.6, $p7, .str.43, .str.44);
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;
}



const zd_mac_preinit_hw: ref;

axiom zd_mac_preinit_hw == $sub.ref(0, 821640);

procedure zd_mac_preinit_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation zd_mac_preinit_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} $p2 := zd_hw_mac($p0);
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} $i5 := zd_chip_read_mac_addr_fw($p3, $p4);
    call {:si_unique_call 2721} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13982;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} SET_IEEE80211_PERM_ADDR($p0, $p8);
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13980;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const ieee80211_register_hw: ref;

axiom ieee80211_register_hw == $sub.ref(0, 822672);

procedure ieee80211_register_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_register_hw($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2723} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wiphy_name: ref;

axiom wiphy_name == $sub.ref(0, 823704);

procedure wiphy_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation wiphy_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(232, 1));
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} $p2 := dev_name($p1);
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 824736);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} $p9 := kobject_name($p8);
    goto corral_source_split_14005;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_14000;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 825768);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_14008;

  corral_source_split_14008:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const zd_chip_read_mac_addr_fw: ref;

axiom zd_chip_read_mac_addr_fw == $sub.ref(0, 826800);

procedure zd_chip_read_mac_addr_fw($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation zd_chip_read_mac_addr_fw($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var vslice_dummy_var_322: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_14012;

  corral_source_split_14012:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} vslice_dummy_var_322 := dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.27);
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} $i8 := zd_usb_read_fw($p7, $sub.i16(0, 2021), $p1, 6);
    call {:si_unique_call 2729} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const SET_IEEE80211_PERM_ADDR: ref;

axiom SET_IEEE80211_PERM_ADDR == $sub.ref(0, 827832);

procedure SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64(6, 63);
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1416)), $mul.ref(0, 1));
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_82 := $M.0;
    cmdloc_dummy_var_83 := $M.0;
    call {:si_unique_call 2731} cmdloc_dummy_var_84 := $memcpy.i8(cmdloc_dummy_var_82, cmdloc_dummy_var_83, $p10, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_84;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14022;

  corral_source_split_14022:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_14024;

  corral_source_split_14024:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1416)), $mul.ref(0, 1));
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_79 := $M.0;
    cmdloc_dummy_var_80 := $M.0;
    call {:si_unique_call 2730} cmdloc_dummy_var_81 := $memcpy.i8(cmdloc_dummy_var_79, cmdloc_dummy_var_80, $p6, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_81;
    goto corral_source_split_14027;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_usb_read_fw: ref;

axiom zd_usb_read_fw == $sub.ref(0, 828864);

procedure zd_usb_read_fw($p0: ref, $i1: i16, $p2: ref, $i3: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation zd_usb_read_fw($p0: ref, $i1: i16, $p2: ref, $i3: i16) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i26: i64;
  var $i20: i32;
  var $i9: i32;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var vslice_dummy_var_323: i32;
  var vslice_dummy_var_324: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} {:cexpr "zd_usb_read_fw:arg:addr"} boogie_si_record_i16($i1);
    call {:si_unique_call 2733} {:cexpr "zd_usb_read_fw:arg:len"} boogie_si_record_i16($i3);
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} $p4 := zd_usb_to_usbdev($p0);
    goto corral_source_split_14036;

  corral_source_split_14036:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i3);
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} $p6 := kmalloc($i5, 208);
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_14040;

  corral_source_split_14040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} $i10 := __create_pipe($p4, 0);
    call {:si_unique_call 2737} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, $sub.i32(0, 2147483520));
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i1);
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i3);
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} $i16 := usb_control_msg($p4, $i11, 50, $sub.i8(0, 64), $i13, 0, $p6, $i15, 5000);
    call {:si_unique_call 2739} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_14059;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i3);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, $i16);
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i64($i3);
    call {:si_unique_call 2743} {:cexpr "__len"} boogie_si_record_i64($i26);
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_85 := $M.0;
    cmdloc_dummy_var_86 := $M.0;
    call {:si_unique_call 2744} cmdloc_dummy_var_87 := $memcpy.i8(cmdloc_dummy_var_85, cmdloc_dummy_var_86, $p2, $p6, $i26, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_87;
    goto corral_source_split_14072;

  corral_source_split_14072:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} kfree($p6);
    goto corral_source_split_14064;

  corral_source_split_14064:
    assume {:verifier.code 0} true;
    $i9 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i3);
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} vslice_dummy_var_324 := dev_err.ref.ref.i32.i32($p23, .str.58, $i16, $i24);
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 5);
    goto $bb7;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} vslice_dummy_var_323 := dev_err.ref.ref.i32($p18, .str.57, $i16);
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    $i20 := $i16;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;
}



const ieee80211_alloc_hw: ref;

axiom ieee80211_alloc_hw == $sub.ref(0, 829896);

procedure ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} {:cexpr "ieee80211_alloc_hw:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} $p2 := external_alloc();
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_14076;

  corral_source_split_14076:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const housekeeping_init: ref;

axiom housekeeping_init == $sub.ref(0, 830928);

procedure housekeeping_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation housekeeping_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p17: ref;
  var $p21: ref;
  var $p25: ref;
  var $p28: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p39: ref;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} __init_work($p6, 0);
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 4195328);
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_14084;

  corral_source_split_14084:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_14085;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_88 := $M.0;
    cmdloc_dummy_var_89 := $M.0;
    call {:si_unique_call 2751} cmdloc_dummy_var_90 := $memcpy.i8(cmdloc_dummy_var_88, cmdloc_dummy_var_89, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_90;
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} lockdep_init_map($p17, .str.169, $p1, 0);
    goto corral_source_split_14088;

  corral_source_split_14088:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} INIT_LIST_HEAD($p21);
    goto corral_source_split_14090;

  corral_source_split_14090:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, link_led_handler);
    goto corral_source_split_14092;

  corral_source_split_14092:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} init_timer_key($p28, 2, .str.170, $p3);
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, delayed_work_timer_fn);
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1));
    goto corral_source_split_14097;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i35);
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    return;
}



const beacon_init: ref;

axiom beacon_init == $sub.ref(0, 831960);

procedure beacon_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation beacon_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p17: ref;
  var $p21: ref;
  var $p25: ref;
  var $p28: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p39: ref;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} __init_work($p6, 0);
    goto corral_source_split_14104;

  corral_source_split_14104:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 4195328);
    goto corral_source_split_14106;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_14108;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_91 := $M.0;
    cmdloc_dummy_var_92 := $M.0;
    call {:si_unique_call 2759} cmdloc_dummy_var_93 := $memcpy.i8(cmdloc_dummy_var_91, cmdloc_dummy_var_92, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_93;
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_14111;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} lockdep_init_map($p17, .str.163, $p1, 0);
    goto corral_source_split_14112;

  corral_source_split_14112:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} INIT_LIST_HEAD($p21);
    goto corral_source_split_14114;

  corral_source_split_14114:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, beacon_watchdog_handler);
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} init_timer_key($p28, 2, .str.164, $p3);
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, delayed_work_timer_fn);
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1));
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i35);
    goto corral_source_split_14124;

  corral_source_split_14124:
    assume {:verifier.code 0} true;
    return;
}



const zd_process_intr: ref;

axiom zd_process_intr == $sub.ref(0, 832992);

procedure zd_process_intr($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $M.26, $M.22, $M.24, $M.23, assertsPassed, $CurrAddr, $M.65, $M.27;



implementation zd_process_intr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var vslice_dummy_var_325: i32;
  var vslice_dummy_var_326: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14126;

  corral_source_split_14126:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 12280), 13336));
    goto corral_source_split_14128;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 12280), 13336)), $mul.ref(11584, 1));
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} $p4 := spinlock_check($p3);
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 2765} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 12280), 13336)), $mul.ref(12368, 1));
    goto corral_source_split_14132;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(4, 2));
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    call {:si_unique_call 2766} {:cexpr "int_status"} boogie_si_record_i16($i9);
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 12280), 13336)), $mul.ref(11584, 1));
    goto corral_source_split_14136;

  corral_source_split_14136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} spin_unlock_irqrestore($p10, $i5);
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i9);
    goto corral_source_split_14138;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 64);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_14140;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 12280), 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} vslice_dummy_var_325 := dev_printk.ref.ref.ref.ref(.str.6, $p18, .str.161, .str.162);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 12280), 13336)), $mul.ref(0, 1));
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} vslice_dummy_var_326 := zd_chip_enable_hwint($p20);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} zd_beacon_done($p2);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_14143;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_511:
    assume !assertsPassed;
    return;
}



const SET_IEEE80211_DEV: ref;

axiom SET_IEEE80211_DEV == $sub.ref(0, 834024);

procedure SET_IEEE80211_DEV($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_DEV($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_14155;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} set_wiphy_dev($p3, $p1);
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    return;
}



const set_wiphy_dev: ref;

axiom set_wiphy_dev == $sub.ref(0, 835056);

procedure set_wiphy_dev($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_wiphy_dev($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(232, 1)), $mul.ref(0, 1));
    goto corral_source_split_14159;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    return;
}



const zd_beacon_done: ref;

axiom zd_beacon_done == $sub.ref(0, 836088);

procedure zd_beacon_done($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $M.26, $M.22, $M.24, $M.23, $M.65, $CurrAddr, assertsPassed, $M.27;



implementation zd_beacon_done($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var vslice_dummy_var_327: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14162;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(12448, 1));
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 2773} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11736, 1));
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_14171;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i7 == 1);
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11736, 1));
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_14176;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 3);
    goto corral_source_split_14179;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_14182;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} $i15 := ieee80211_queue_stopped($p14, 0);
    call {:si_unique_call 2775} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_14184;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_14198;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11736, 1));
    goto corral_source_split_14200;

  corral_source_split_14200:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} $p33 := ieee80211_beacon_get($p30, $p32);
    goto corral_source_split_14202;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} spin_lock_irq($p39);
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.9, jiffies);
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11960, 1)), $mul.ref(224, 1));
    goto corral_source_split_14223;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i40);
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11584, 1));
    goto corral_source_split_14225;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} spin_unlock_irq($p43);
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_14216;

  corral_source_split_14216:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} vslice_dummy_var_327 := zd_mac_config_beacon($p37, $p33, 1);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_14218;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call $p17, $p18, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $i27, $i28 := zd_beacon_done_loop_$bb14($p0, $p13, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $i27, $i28);
    goto $bb14_last;

  $bb15:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_14189;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11736, 1));
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} $p21 := ieee80211_get_buffered_bc($p18, $p20);
    goto corral_source_split_14192;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} zd_op_tx($p25, $0.ref, $p21);
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p13);
    goto corral_source_split_14209;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} $i27 := ieee80211_queue_stopped($p26, 0);
    call {:si_unique_call 2780} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb20_dummy;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ieee80211_get_buffered_bc: ref;

axiom ieee80211_get_buffered_bc == $sub.ref(0, 837120);

procedure ieee80211_get_buffered_bc($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_buffered_bc($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14228;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} $p2 := external_alloc();
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ieee80211_queue_stopped: ref;

axiom ieee80211_queue_stopped == $sub.ref(0, 838152);

procedure ieee80211_queue_stopped($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_queue_stopped($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2785} {:cexpr "ieee80211_queue_stopped:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_14232;

  corral_source_split_14232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2786} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2787} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const beacon_watchdog_handler: ref;

axiom beacon_watchdog_handler == $sub.ref(0, 839184);

procedure beacon_watchdog_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.29, $M.30, $M.26, $M.22, $M.24, $M.23, assertsPassed, $CurrAddr, $M.37, $M.27;



implementation beacon_watchdog_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i1;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i16;
  var $i57: i8;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var $i61: i32;
  var $p63: ref;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $p73: ref;
  var vslice_dummy_var_328: i1;
  var vslice_dummy_var_329: i32;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i32;
  var vslice_dummy_var_332: i32;
  var vslice_dummy_var_333: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14235;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336));
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(12448, 1));
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} $i4 := constant_test_bit(0, $p3);
    call {:si_unique_call 2789} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(12436, 1));
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 3);
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11736, 1));
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11584, 1));
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} spin_lock_irq($p13);
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11960, 1)), $mul.ref(232, 1));
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    call {:si_unique_call 2794} {:cexpr "interval"} boogie_si_record_i32($i17);
    goto corral_source_split_14263;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11960, 1)), $mul.ref(234, 1));
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    call {:si_unique_call 2795} {:cexpr "period"} boogie_si_record_i32($i21);
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i17, 1024);
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    $i23 := $sdiv.i32($i22, 1000);
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} $i24 := msecs_to_jiffies($i23);
    call {:si_unique_call 2797} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11960, 1)), $mul.ref(224, 1));
    goto corral_source_split_14270;

  corral_source_split_14270:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    $i28 := $mul.i64($i24, 3);
    goto corral_source_split_14272;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i27, $i28);
    call {:si_unique_call 2798} {:cexpr "timeout"} boogie_si_record_i64($i29);
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11584, 1));
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} spin_unlock_irq($p30);
    goto corral_source_split_14275;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i17, 0);
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} $i70 := round_jiffies_relative(250);
    call {:si_unique_call 2791} {:cexpr "tmp___1"} boogie_si_record_i64($i70);
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    $p71 := $M.7;
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11960, 1)), $mul.ref(0, 1));
    goto corral_source_split_14246;

  corral_source_split_14246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} vslice_dummy_var_328 := queue_delayed_work($p71, $p73, $i70);
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.9, jiffies);
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64($i29, $i32);
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    $i34 := $slt.i64($i33, 0);
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb13;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} vslice_dummy_var_329 := dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p39, .str.165, .str.166, $i17, $i21);
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(0, 1));
    goto corral_source_split_14288;

  corral_source_split_14288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} vslice_dummy_var_330 := zd_chip_disable_hwint($p41);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11728, 1));
    goto corral_source_split_14290;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11736, 1));
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} $p47 := ieee80211_beacon_get($p44, $p46);
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_14295;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(0, 1));
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i17);
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_14307;

  corral_source_split_14307:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i21);
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(12436, 1));
    goto corral_source_split_14311;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_14312;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} vslice_dummy_var_332 := zd_set_beacon_interval($p53, $i56, $i59, $i61);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(0, 1));
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} vslice_dummy_var_333 := zd_chip_enable_hwint($p63);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_14315;

  corral_source_split_14315:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11584, 1));
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} spin_lock_irq($p65);
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.9, jiffies);
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11960, 1)), $mul.ref(224, 1));
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p68, $i66);
    goto corral_source_split_14320;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11584, 1));
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} spin_unlock_irq($p69);
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} zd_mac_free_cur_beacon($p2);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11960), 13336)), $mul.ref(11728, 1));
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} vslice_dummy_var_331 := zd_mac_config_beacon($p51, $p47, 0);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const link_led_handler: ref;

axiom link_led_handler == $sub.ref(0, 840216);

procedure link_led_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.26, $M.27, $CurrAddr, assertsPassed;



implementation link_led_handler($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var vslice_dummy_var_334: i1;
  var vslice_dummy_var_335: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14324;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13336)), $mul.ref(0, 1));
    goto corral_source_split_14327;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13336)), $mul.ref(12448, 1));
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} $i5 := constant_test_bit(0, $p4);
    call {:si_unique_call 2810} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_14329;

  corral_source_split_14329:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13336)), $mul.ref(11584, 1));
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} spin_lock_irq($p7);
    goto corral_source_split_14339;

  corral_source_split_14339:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13336)), $mul.ref(12440, 1));
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 2813} {:cexpr "is_associated"} boogie_si_record_i32($i9);
    goto corral_source_split_14341;

  corral_source_split_14341:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13336)), $mul.ref(11584, 1));
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} spin_unlock_irq($p10);
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i9, 0);
    goto corral_source_split_14344;

  corral_source_split_14344:
    assume {:verifier.code 0} true;
    $i12 := (if $i11 == 1 then 2 else 1);
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} $i13 := zd_chip_control_leds($p3, $i12);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    call {:si_unique_call 2816} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $M.7;
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13336)), $mul.ref(11744, 1)), $mul.ref(0, 1));
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2811} vslice_dummy_var_334 := queue_delayed_work($p21, $p23, 250);
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_14351;

  corral_source_split_14351:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} vslice_dummy_var_335 := dev_printk.ref.ref.ref.ref.i32(.str.6, $p19, .str.171, .str.172, $i13);
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 841248);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_14360;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 842280);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_14368;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 843312);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 2819} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 844344);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.72, $M.73, $M.26, $M.8;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 2821} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 2822} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_14376;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 2823} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2824} {:cexpr "ldv_mutex_setup_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 845376);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 846408);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    $i0 := $M.72;
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} ldv_error();
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.73;
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} ldv_error();
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.26;
    goto corral_source_split_14397;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} ldv_error();
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.8;
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} ldv_error();
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const main: ref;

axiom main == $sub.ref(0, 847440);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.72, $M.73, $M.26, $M.8, $M.0, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.7, $M.89, $M.75, $M.51, $M.61, $M.56, $M.60, $M.59, $M.58, $M.30, $M.29, $M.62, $M.63, $M.54, $M.10, $M.47, $M.18, $M.162, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, assertsPassed, $M.42, $M.19, $M.20, $M.24, $M.22, $M.23, $M.41, $M.27, $M.45, $M.48, $M.49, $M.37, $M.57, $M.46, $M.53, $M.65;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i14: i32;
  var $i2: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var vslice_dummy_var_336: i32;
  var vslice_dummy_var_337: i32;

  $bb0:
    call {:si_unique_call 2829} $initialize();
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_14412;

  corral_source_split_14412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} ldv_initialize();
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} ldv_handler_precall();
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} $i0 := usb_init();
    call {:si_unique_call 2835} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb5;

  $bb5:
    call $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i14, $i2, $i25, $i26, $i27, vslice_dummy_var_336, vslice_dummy_var_337 := main_loop_$bb5($i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i14, $i2, $i25, $i26, $i27, vslice_dummy_var_336, vslice_dummy_var_337);
    goto $bb5_last;

  corral_source_split_14423:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2837} $i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 2838} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i25);
    call {:si_unique_call 2839} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb39;

  $bb39:
    assume !($i26 == 1);
    goto corral_source_split_14476;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} ldv_handler_precall();
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} usb_exit();
    goto corral_source_split_14448;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} ldv_check_final_state();
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2840} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2841} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 2842} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i14 := $i2;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    $i2 := $i14;
    goto corral_source_split_14454_dummy;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i2, 3);
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i2;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    $i14 := $i24;
    goto $bb26;

  $bb33:
    assume $i23 == 1;
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} ldv_handler_precall();
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} disconnect($u1);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_14472;

  corral_source_split_14472:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb35;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i2, 2);
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    $i14 := $i22;
    goto $bb26;

  $bb30:
    assume $i19 == 1;
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} ldv_handler_precall();
    goto corral_source_split_14464;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} vslice_dummy_var_337 := post_reset($u1);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_14465;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i2, 1);
    call {:si_unique_call 2855} {:cexpr "ldv_s_driver_usb_driver"} boogie_si_record_i32($i21);
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb32;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i7 == 1);
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i2, 1);
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    $i14 := $i18;
    goto $bb26;

  $bb27:
    assume $i15 == 1;
    goto corral_source_split_14456;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} ldv_handler_precall();
    goto corral_source_split_14457;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} vslice_dummy_var_336 := pre_reset($u1);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i2, 1);
    call {:si_unique_call 2852} {:cexpr "ldv_s_driver_usb_driver"} boogie_si_record_i32($i17);
    goto corral_source_split_14459;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb29;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb14;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_14436;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 0);
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_14452;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb26;

  $bb19:
    assume $i9 == 1;
    goto corral_source_split_14439;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} $i10 := probe($u1, $u2);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    call {:si_unique_call 2844} {:cexpr "res_probe_48"} boogie_si_record_i32($i10);
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} ldv_check_return_value($i10);
    goto corral_source_split_14441;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} ldv_check_return_value_probe($i10);
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i2, 1);
    call {:si_unique_call 2849} {:cexpr "ldv_s_driver_usb_driver"} boogie_si_record_i32($i12);
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb25;

  $bb21:
    assume $i11 == 1;
    goto corral_source_split_14445;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb38;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_14454_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_14423;
}



const usb_init: ref;

axiom usb_init == $sub.ref(0, 848472);

procedure usb_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation usb_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i28: i32;
  var vslice_dummy_var_338: i32;
  var vslice_dummy_var_339: i32;
  var vslice_dummy_var_340: i32;
  var vslice_dummy_var_341: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_14480;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.1);
    goto corral_source_split_14481;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.274);
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_14484;

  corral_source_split_14484:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.60);
    goto corral_source_split_14485;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.275);
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_14488;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.5, $p8);
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1593);
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p8, $i11);
    goto corral_source_split_14493;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 1);
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_14496;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_14499;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 2862} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_14501;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.75, driver);
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} $p22 := __alloc_workqueue_key.ref.i32.i32.ref.ref($p21, 10, 1, $p1, .str.276);
    goto corral_source_split_14508;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    $M.7 := $p22;
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    $p23 := $M.7;
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_14512;

  corral_source_split_14512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} $i29 := usb_register_driver(driver, __this_module, .str.1);
    call {:si_unique_call 2867} {:cexpr "r"} boogie_si_record_i32($i29);
    goto corral_source_split_14520;

  corral_source_split_14520:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, .str.1);
    goto corral_source_split_14530;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p35, .str.274);
    goto corral_source_split_14532;

  corral_source_split_14532:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str.60);
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.279);
    goto corral_source_split_14536;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.5, $p39);
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_14540;

  corral_source_split_14540:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 1609);
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p39, $i42);
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p43, 1);
    goto corral_source_split_14544;

  corral_source_split_14544:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.6, $p44);
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_14548;

  corral_source_split_14548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 2871} {:cexpr "tmp___1"} boogie_si_record_i64($i48);
    goto corral_source_split_14549;

  corral_source_split_14549:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb11:
    assume $i49 == 1;
    goto corral_source_split_14552;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.75, driver);
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} vslice_dummy_var_341 := __dynamic_pr_debug.ref.ref.ref($p2, .str.279, $p50);
    goto corral_source_split_14554;

  corral_source_split_14554:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_14523;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    $p31 := $M.7;
    goto corral_source_split_14524;

  corral_source_split_14524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} destroy_workqueue($p31);
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.75, driver);
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} vslice_dummy_var_340 := printk.ref.ref.i32(.str.278, $p32, $i29);
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb6;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.75, driver);
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} vslice_dummy_var_339 := printk.ref.ref(.str.277, $p26);
    goto corral_source_split_14516;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.75, driver);
    goto corral_source_split_14504;

  corral_source_split_14504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} vslice_dummy_var_338 := __dynamic_pr_debug.ref.ref.ref($p0, .str.275, $p19);
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 849504);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_14556;

  corral_source_split_14556:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_return_value_probe: ref;

axiom ldv_check_return_value_probe == $sub.ref(0, 850536);

procedure ldv_check_return_value_probe($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value_probe($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} {:cexpr "ldv_check_return_value_probe:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    return;
}



const usb_exit: ref;

axiom usb_exit == $sub.ref(0, 851568);

procedure usb_exit();
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_exit()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i24;
  var $i8: i24;
  var $i9: i24;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var vslice_dummy_var_342: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, .str.1);
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p2, .str.295);
    goto corral_source_split_14564;

  corral_source_split_14564:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p3, .str.60);
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_14567;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str.296);
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_14570;

  corral_source_split_14570:
    assume {:verifier.code 0} true;
    $i7 := $load.i24($M.5, $p6);
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 0} true;
    $i8 := $and.i24($i7, $sub.i24(0, 262144));
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    $i9 := $or.i24($i8, 1615);
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p6, $i9);
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p10, 1);
    goto corral_source_split_14576;

  corral_source_split_14576:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.6, $p11);
    goto corral_source_split_14578;

  corral_source_split_14578:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i64($i12);
    goto corral_source_split_14579;

  corral_source_split_14579:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 1);
    goto corral_source_split_14580;

  corral_source_split_14580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 2877} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} usb_deregister(driver);
    goto corral_source_split_14588;

  corral_source_split_14588:
    assume {:verifier.code 0} true;
    $p19 := $M.7;
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} destroy_workqueue($p19);
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.75, driver);
    goto corral_source_split_14585;

  corral_source_split_14585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} vslice_dummy_var_342 := __dynamic_pr_debug.ref.ref.ref($p0, .str.296, $p17);
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 852600);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 853632);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14594;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 854664);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2882} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} $p5 := external_alloc();
    goto corral_source_split_14597;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 855696);

procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2884} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2885} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_14601;

  corral_source_split_14601:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_14603;

  corral_source_split_14603:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2886} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2887} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_14604;

  corral_source_split_14604:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 856728);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2888} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2889} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 857760);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2890} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 1} true;
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 858792);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 859824);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 860856);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 861888);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 862920);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 863952);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 864984);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 866016);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 867048);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 868080);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 869112);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 870144);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 871176);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2891} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2892} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2893} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_14617;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_14618;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_14623;

  corral_source_split_14623:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2894} __VERIFIER_assume($i4);
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 872208);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 873240);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 874272);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 875304);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 876336);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 877368);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 878400);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 879432);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 880464);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2895} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2896} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2897} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_14627;

  corral_source_split_14627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2898} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2899} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2900} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2901} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2902} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2903} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_14630;

  corral_source_split_14630:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2904} __VERIFIER_assume($i7);
    goto corral_source_split_14637;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_14644;

  corral_source_split_14644:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_14645;

  corral_source_split_14645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2905} __VERIFIER_assume($i11);
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_14642;

  corral_source_split_14642:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_14640;

  corral_source_split_14640:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 881496);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 882528);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 883560);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 884592);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 885624);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 886656);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 887688);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 888720);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 889752);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14648;

  corral_source_split_14648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2906} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2907} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2908} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_14651;

  corral_source_split_14651:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_14653;

  corral_source_split_14653:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_14662;

  corral_source_split_14662:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_14664;

  corral_source_split_14664:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_14657;

  corral_source_split_14657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2909} __VERIFIER_assume($i10);
    goto corral_source_split_14658;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 890784);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14666;

  corral_source_split_14666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2910} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2911} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2912} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 891816);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14669;

  corral_source_split_14669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2913} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2914} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 892848);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 893880);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2915} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2916} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 894912);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 895944);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14672;

  corral_source_split_14672:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 896976);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 898008);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.7, $M.89, $M.75, $M.51, $M.61, $M.56, $M.60, $M.59, $M.58, $M.30, $M.29, $M.62, $M.63, $M.54, $M.0, $M.10, $M.47, $M.8, $M.26, $M.73, $M.72, $M.18, $M.162;



implementation __SMACK_static_init()
{

  $bb0:
    $M.7 := $0.ref;
    call {:si_unique_call 2917} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.89 := $store.i16($M.89, usb_ids, 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(2, 1)), 261);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(4, 1)), 5215);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1414);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(4, 1)), 13313);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1414);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(4, 1)), 13314);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(2, 1)), 1414);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(4, 1)), 13319);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(2, 1)), 1414);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(4, 1)), 13321);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(2, 1)), 1947);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(4, 1)), 74);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(2, 1)), 1976);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(4, 1)), 24577);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(2, 1)), 2766);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(4, 1)), 4625);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(2, 1)), 2766);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(4, 1)), $sub.i16(0, 24047));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(2, 1)), 2821);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(4, 1)), 5900);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(2, 1)), 2875);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(4, 1)), 5680);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(2, 1)), 2875);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(4, 1)), 22064);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(2, 1)), 3574);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(4, 1)), $sub.i16(0, 28559));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(2, 1)), 3574);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(4, 1)), $sub.i16(0, 28555));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(2, 1)), 4719);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(4, 1)), $sub.i16(0, 24570));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(2, 1)), 4763);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(4, 1)), 5734);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(2, 1)), 5041);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(4, 1)), 30);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(2, 1)), 5173);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(4, 1)), 1809);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(2, 1)), 5354);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(4, 1)), $sub.i16(0, 21744));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(2, 1)), 5354);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(4, 1)), $sub.i16(0, 21741));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(2, 1)), 5502);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(4, 1)), 12298);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(2, 1)), 5502);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(4, 1)), 12299);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(2, 1)), 5502);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(4, 1)), 12804);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(2, 1)), 5502);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(4, 1)), 12807);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(2, 1)), 5952);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(4, 1)), 8192);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(2, 1)), 26769);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(4, 1)), $sub.i16(0, 22745));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(2, 1)), 83);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(4, 1)), 21249);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(2, 1)), 1033);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(4, 1)), 584);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(2, 1)), 1041);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(4, 1)), 218);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(2, 1)), 1137);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(4, 1)), 4662);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(2, 1)), 1137);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(4, 1)), 4663);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(2, 1)), 1293);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(4, 1)), 28764);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(2, 1)), 1356);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(4, 1)), 599);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(2, 1)), 1414);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(4, 1)), 13322);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(2, 1)), 1414);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(4, 1)), 13327);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(2, 1)), 1414);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(4, 1)), 13328);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(2, 1)), 1414);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(4, 1)), 13330);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(2, 1)), 1414);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(4, 1)), 13331);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(2, 1)), 1947);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(4, 1)), 98);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(2, 1)), 1976);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(4, 1)), 24577);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(2, 1)), 2042);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(4, 1)), 4502);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(2, 1)), 2106);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(4, 1)), 17669);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(2, 1)), 2106);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(4, 1)), $sub.i16(0, 6911));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(2, 1)), 2106);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(4, 1)), $sub.i16(0, 6909));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(2, 1)), 2106);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(4, 1)), $sub.i16(0, 6906));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(2, 1)), 2766);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(4, 1)), 4629);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(2, 1)), 2766);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(4, 1)), $sub.i16(0, 19947));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(2, 1)), 2821);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(4, 1)), 5915);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(2, 1)), 2991);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(4, 1)), 289);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(2, 1)), 3294);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(4, 1)), 26);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(2, 1)), 3574);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(4, 1)), 54);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(2, 1)), 4763);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(4, 1)), 5735);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(2, 1)), 5041);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(4, 1)), 36);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(2, 1)), 5502);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(4, 1)), 12301);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(2, 1)), 5506);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(4, 1)), 24579);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(2, 1)), 8217);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(4, 1)), 21251);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(2, 1)), 8217);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(4, 1)), $sub.i16(0, 4863));
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(24, 1)), 1);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(2, 1)), 2766);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(4, 1)), 8209);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(24, 1)), 2);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(0, 1)), 3);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(2, 1)), 2766);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(4, 1)), 8447);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(24, 1)), 2);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(0, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(2, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(4, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(6, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(8, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(10, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(11, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(13, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(15, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(16, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.ref($M.75, driver, .str.1);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(8, 1)), probe);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(16, 1)), disconnect);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(56, 1)), pre_reset);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(64, 1)), post_reset);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(72, 1)), usb_ids);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 4);
    $M.51 := $store.ref($M.51, rfs, .str.190);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(1, 8)), .str.191);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(2, 8)), .str.192);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(3, 8)), .str.193);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(4, 8)), .str.194);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(5, 8)), .str.195);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(6, 8)), .str.196);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(7, 8)), .str.197);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(8, 8)), .str.198);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(9, 8)), .str.199);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(10, 8)), .str.200);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(11, 8)), .str.201);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(12, 8)), .str.202);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(13, 8)), .str.203);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(14, 8)), .str.204);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(15, 8)), .str.205);
    $M.61 := $store.i32($M.61, uw2453_txgain, 58131);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(1, 4)), 64275);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(2, 4)), 57491);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(3, 4)), 63635);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(4, 4)), 60051);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(5, 4)), 127123);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(6, 4)), 128147);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(7, 4)), 128659);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(8, 4)), 127891);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(9, 4)), 127835);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(10, 4)), 124635);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(11, 4)), 130879);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(12, 4)), 131071);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(13, 4)), 221655);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(14, 4)), 229311);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(15, 4)), 262027);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(16, 4)), 261939);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(17, 4)), 260927);
    $M.61 := $store.i32($M.61, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(18, 4)), 262143);
    $M.56 := $store.i16($M.56, uw2453_std_vco_cfg, 26189);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(1, 2)), 24653);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(2, 2)), 26229);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(3, 2)), 25717);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(4, 2)), 26197);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(5, 2)), 25685);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(6, 2)), 26213);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(0, 2)), 26221);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(1, 2)), 24685);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(2, 2)), 26189);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(3, 2)), 25677);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(4, 2)), 26229);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(5, 2)), 25717);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(6, 2)), 26197);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(0, 2)), 26205);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(1, 2)), 24669);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(2, 2)), 26221);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(3, 2)), 25709);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(4, 2)), 26189);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(5, 2)), 25677);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(6, 2)), 26229);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(0, 2)), 26237);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(1, 2)), 24701);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(2, 2)), 26205);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(3, 2)), 25693);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(4, 2)), 26221);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(5, 2)), 25709);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(6, 2)), 26189);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(0, 2)), 26179);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(1, 2)), 24643);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(2, 2)), 26237);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(3, 2)), 25725);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(4, 2)), 26205);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(5, 2)), 25693);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(6, 2)), 26221);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(0, 2)), 26211);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(1, 2)), 24675);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(2, 2)), 26179);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(3, 2)), 25667);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(4, 2)), 26237);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(5, 2)), 25725);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(6, 2)), 26205);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(0, 2)), 26195);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(1, 2)), 24659);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(2, 2)), 26211);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(3, 2)), 25699);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(4, 2)), 26179);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(5, 2)), 25667);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(6, 2)), 26237);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(0, 2)), 26227);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(1, 2)), 24691);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(2, 2)), 26195);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(3, 2)), 25683);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(4, 2)), 26211);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(5, 2)), 25699);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(6, 2)), 26179);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(0, 2)), 26187);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(1, 2)), 24651);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(2, 2)), 26227);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(3, 2)), 25715);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(4, 2)), 26195);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(5, 2)), 25683);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(6, 2)), 26211);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(0, 2)), 26219);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(1, 2)), 24683);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(2, 2)), 26187);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(3, 2)), 25675);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(4, 2)), 26227);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(5, 2)), 25715);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(6, 2)), 26195);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(0, 2)), 26203);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(1, 2)), 24667);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(2, 2)), 26219);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(3, 2)), 25707);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(4, 2)), 26187);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(5, 2)), 25675);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(6, 2)), 26227);
    $M.60 := $store.i16($M.60, uw2453_synth_divide, 2457);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(1, 2)), 2459);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(2, 2)), 2456);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(3, 2)), 2458);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(4, 2)), 2457);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(5, 2)), 2459);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(6, 2)), 2456);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(7, 2)), 2458);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(8, 2)), 2457);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(9, 2)), 2459);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(10, 2)), 2456);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(11, 2)), 2458);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(12, 2)), 2457);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(13, 2)), 3276);
    $M.59 := $store.i8($M.59, uw2453_std_synth, 71);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(1, 1)), 71);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(2, 1)), 103);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(3, 1)), 103);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(4, 1)), 103);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(5, 1)), 103);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(6, 1)), 87);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(7, 1)), 87);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(8, 1)), 87);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(9, 1)), 87);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(10, 1)), 119);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(11, 1)), 119);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(12, 1)), 119);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(13, 1)), 79);
    $M.58 := $store.i16($M.58, uw2453_autocal_synth, 26695);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(1, 2)), 26695);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(2, 2)), 26727);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(3, 2)), 26727);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(4, 2)), 26727);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(5, 2)), 26727);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(6, 2)), 26711);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(7, 2)), 26711);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(8, 2)), 26711);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(9, 2)), 26711);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(10, 2)), 26743);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(11, 2)), 26743);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(12, 2)), 26743);
    $M.58 := $store.i16($M.58, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(13, 2)), 26703);
    $M.30 := $store.i16($M.30, ioreqs_sw, $sub.i16(0, 28160));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(0, 4)), $mul.ref(2, 1)), 20);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(1, 4)), $mul.ref(0, 1)), $sub.i16(0, 28156));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(1, 4)), $mul.ref(2, 1)), 18);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(2, 4)), $mul.ref(0, 1)), $sub.i16(0, 28152));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(2, 4)), $mul.ref(2, 1)), 16);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(3, 4)), $mul.ref(0, 1)), $sub.i16(0, 28520));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(3, 4)), $mul.ref(2, 1)), 56);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(4, 4)), $mul.ref(0, 1)), $sub.i16(0, 28128));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(4, 4)), $mul.ref(2, 1)), 223);
    $M.62 := $store.i32($M.62, rv_init2, 15818073);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(rv_init2, $mul.ref(0, 12)), $mul.ref(1, 4)), 15818076);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(rv_init2, $mul.ref(0, 12)), $mul.ref(2, 4)), 15818072);
    $M.62 := $store.i32($M.62, rv_init1, 3969024);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(rv_init1, $mul.ref(0, 16)), $mul.ref(1, 4)), 12582911);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(rv_init1, $mul.ref(0, 16)), $mul.ref(2, 4)), 7340032);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(rv_init1, $mul.ref(0, 16)), $mul.ref(3, 4)), 15818072);
    $M.62 := $store.i32($M.62, std_rv, 5240865);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(1, 4)), 12975100);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(2, 4)), 2223102);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(3, 4)), 11523073);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(4, 4)), 7140714);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(5, 4)), 14696563);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(6, 4)), 1654134);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(7, 4)), 10344516);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(8, 4)), 5242887);
    $M.62 := $store.i32($M.62, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(9, 4)), 14204944);
    $M.62 := $store.i32($M.62, chan_rv, 650240);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref(1, 4)), 9227464);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(1, 8)), $mul.ref(0, 4)), 650240);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(1, 8)), $mul.ref(1, 4)), 9227480);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(2, 8)), $mul.ref(0, 4)), 650240);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(2, 8)), $mul.ref(1, 4)), 9227456);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(3, 8)), $mul.ref(0, 4)), 650240);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(3, 8)), $mul.ref(1, 4)), 9227472);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(4, 8)), $mul.ref(0, 4)), 388096);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(4, 8)), $mul.ref(1, 4)), 9227464);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(5, 8)), $mul.ref(0, 4)), 388096);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(5, 8)), $mul.ref(1, 4)), 9227480);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(6, 8)), $mul.ref(0, 4)), 388096);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(6, 8)), $mul.ref(1, 4)), 9227456);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(7, 8)), $mul.ref(0, 4)), 388096);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(7, 8)), $mul.ref(1, 4)), 9227472);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(8, 8)), $mul.ref(0, 4)), 912384);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(8, 8)), $mul.ref(1, 4)), 9227464);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(9, 8)), $mul.ref(0, 4)), 912384);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(9, 8)), $mul.ref(1, 4)), 9227480);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(10, 8)), $mul.ref(0, 4)), 912384);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(10, 8)), $mul.ref(1, 4)), 9227456);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(11, 8)), $mul.ref(0, 4)), 912384);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(11, 8)), $mul.ref(1, 4)), 9227472);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(12, 8)), $mul.ref(0, 4)), 257024);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(12, 8)), $mul.ref(1, 4)), 9227464);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(13, 8)), $mul.ref(0, 4)), 257024);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(13, 8)), $mul.ref(1, 4)), 8808032);
    $M.63 := $store.i32($M.63, rf2959_table, 1579385);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(1, 8)), $mul.ref(0, 4)), 1579401);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(1, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(2, 8)), $mul.ref(0, 4)), 1579417);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(2, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(3, 8)), $mul.ref(0, 4)), 1579433);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(3, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(4, 8)), $mul.ref(0, 4)), 1579449);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(4, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(5, 8)), $mul.ref(0, 4)), 1579465);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(5, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(6, 8)), $mul.ref(0, 4)), 1579481);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(6, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(7, 8)), $mul.ref(0, 4)), 1579497);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(7, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(8, 8)), $mul.ref(0, 4)), 1579513);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(8, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(9, 8)), $mul.ref(0, 4)), 1579529);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(9, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(10, 8)), $mul.ref(0, 4)), 1579545);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(10, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(11, 8)), $mul.ref(0, 4)), 1579561);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(11, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(12, 8)), $mul.ref(0, 4)), 1579577);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(12, 8)), $mul.ref(1, 4)), 1992294);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(13, 8)), $mul.ref(0, 4)), 1579616);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(13, 8)), $mul.ref(1, 4)), 1835008);
    $M.54 := $store.i32($M.54, zd1211_al2230_table, 259984);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref(1, 4)), 209713);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(0, 4)), 259984);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(1, 4)), 734001);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(0, 4)), 255888);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(1, 4)), 209713);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(0, 4)), 255888);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(1, 4)), 734001);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(0, 4)), 260000);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(1, 4)), 209713);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(0, 4)), 260000);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(1, 4)), 734001);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(0, 4)), 255904);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(1, 4)), 209713);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(0, 4)), 255904);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(1, 4)), 734001);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(0, 4)), 260016);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(1, 4)), 209713);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(0, 4)), 260016);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(1, 4)), 734001);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(0, 4)), 255920);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(1, 4)), 209713);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(0, 4)), 255920);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(1, 4)), 734001);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(0, 4)), 260032);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(1, 4)), 209713);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(2, 4)), 13);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(0, 4)), 255936);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(1, 4)), 419425);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(2, 4)), 13);
    $M.62 := $store.i32($M.62, zd1211b_al2230_table, 651200);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref(1, 4)), 9227456);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(0, 4)), 651200);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(1, 4)), 9227472);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(0, 4)), 649152);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(1, 4)), 9227456);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(0, 4)), 649152);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(1, 4)), 9227472);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(0, 4)), 389056);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(1, 4)), 9227456);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(0, 4)), 389056);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(1, 4)), 9227472);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(0, 4)), 387008);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(1, 4)), 9227456);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(0, 4)), 387008);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(1, 4)), 9227472);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(0, 4)), 913344);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(1, 4)), 9227456);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(0, 4)), 913344);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(1, 4)), 9227472);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(0, 4)), 911296);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(1, 4)), 9227456);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(0, 4)), 911296);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(1, 4)), 9227472);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(0, 4)), 257984);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(1, 4)), 9227456);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(2, 4)), 11534336);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(0, 4)), 255936);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(1, 4)), 8808032);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(2, 4)), 11534336);
    $M.30 := $store.i16($M.30, ioreqs_init_al2230s, $sub.i16(0, 28484));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(0, 4)), $mul.ref(2, 1)), 30);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(1, 4)), $mul.ref(0, 1)), $sub.i16(0, 28248));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(1, 4)), $mul.ref(2, 1)), 34);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(2, 4)), $mul.ref(0, 1)), $sub.i16(0, 28244));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(2, 4)), $mul.ref(2, 1)), 42);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(3, 4)), $mul.ref(0, 1)), $sub.i16(0, 28236));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(3, 4)), $mul.ref(2, 1)), 19);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(4, 4)), $mul.ref(0, 1)), $sub.i16(0, 28200));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(4, 4)), $mul.ref(2, 1)), 248);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(5, 4)), $mul.ref(0, 1)), $sub.i16(0, 28196));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(5, 4)), $mul.ref(2, 1)), 18);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(6, 4)), $mul.ref(0, 1)), $sub.i16(0, 28184));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(6, 4)), $mul.ref(2, 1)), 224);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(7, 4)), $mul.ref(0, 1)), $sub.i16(0, 28160));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(7, 4)), $mul.ref(2, 1)), 16);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(8, 4)), $mul.ref(0, 1)), $sub.i16(0, 28156));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(8, 4)), $mul.ref(2, 1)), 14);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(9, 4)), $mul.ref(0, 1)), $sub.i16(0, 28152));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(9, 4)), $mul.ref(2, 1)), 16);
    $M.30 := $store.i16($M.30, zd1211b_ioreqs_shared_1, $sub.i16(0, 27712));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(zd1211b_ioreqs_shared_1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1)), 87);
    $M.30 := $store.i16($M.30, $add.ref($add.ref($add.ref(zd1211b_ioreqs_shared_1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1)), $sub.i16(0, 28636));
    $M.29 := $store.i16($M.29, $add.ref($add.ref($add.ref(zd1211b_ioreqs_shared_1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1)), 224);
    $M.0 := $store.i32($M.0, zd_channels, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(0, 40)), $mul.ref(4, 1)), 2412);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(0, 40)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(0, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(0, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(0, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(0, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(0, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(0, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(0, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(0, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(1, 40)), $mul.ref(4, 1)), 2417);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(1, 40)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(1, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(1, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(1, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(1, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(1, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(1, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(1, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(1, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(2, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(2, 40)), $mul.ref(4, 1)), 2422);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(2, 40)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(2, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(2, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(2, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(2, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(2, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(2, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(2, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(2, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(3, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(3, 40)), $mul.ref(4, 1)), 2427);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(3, 40)), $mul.ref(6, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(3, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(3, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(3, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(3, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(3, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(3, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(3, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(3, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(4, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(4, 40)), $mul.ref(4, 1)), 2432);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(4, 40)), $mul.ref(6, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(4, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(4, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(4, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(4, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(4, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(4, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(4, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(4, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(5, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(5, 40)), $mul.ref(4, 1)), 2437);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(5, 40)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(5, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(5, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(5, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(5, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(5, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(5, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(5, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(5, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(6, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(6, 40)), $mul.ref(4, 1)), 2442);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(6, 40)), $mul.ref(6, 1)), 7);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(6, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(6, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(6, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(6, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(6, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(6, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(6, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(6, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(7, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(7, 40)), $mul.ref(4, 1)), 2447);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(7, 40)), $mul.ref(6, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(7, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(7, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(7, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(7, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(7, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(7, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(7, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(7, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(8, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(8, 40)), $mul.ref(4, 1)), 2452);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(8, 40)), $mul.ref(6, 1)), 9);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(8, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(8, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(8, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(8, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(8, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(8, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(8, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(8, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(9, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(9, 40)), $mul.ref(4, 1)), 2457);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(9, 40)), $mul.ref(6, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(9, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(9, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(9, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(9, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(9, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(9, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(9, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(9, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(10, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(10, 40)), $mul.ref(4, 1)), 2462);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(10, 40)), $mul.ref(6, 1)), 11);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(10, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(10, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(10, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(10, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(10, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(10, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(10, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(10, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(11, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(11, 40)), $mul.ref(4, 1)), 2467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(11, 40)), $mul.ref(6, 1)), 12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(11, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(11, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(11, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(11, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(11, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(11, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(11, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(11, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(12, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(12, 40)), $mul.ref(4, 1)), 2472);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(12, 40)), $mul.ref(6, 1)), 13);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(12, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(12, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(12, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(12, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(12, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(12, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(12, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(12, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(13, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(13, 40)), $mul.ref(4, 1)), 2484);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(13, 40)), $mul.ref(6, 1)), 14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(13, 40)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(13, 40)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(13, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(13, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(13, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(13, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(13, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 560)), $mul.ref(13, 40)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, zd_rates, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(4, 1)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(8, 1)), 33);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(8, 1)), 34);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(8, 1)), 35);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(4, 1)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(6, 1)), 27);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(4, 1)), 90);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(6, 1)), 31);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(4, 1)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(6, 1)), 26);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(4, 1)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(6, 1)), 30);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(4, 1)), 240);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(6, 1)), 25);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(4, 1)), 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(6, 1)), 29);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(4, 1)), 480);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(6, 1)), 24);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(4, 1)), 540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(6, 1)), 28);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(8, 1)), 0);
    $M.10 := $store.i32($M.10, zd_retry_rates, 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(0, 1)), 2);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(0, 1)), 3);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 2);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(0, 1)), 4);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 3);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 2);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(0, 1)), 5);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 4);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 3);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 2);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(0, 1)), 6);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 5);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 4);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 3);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 2);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(0, 1)), 5);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 6);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 3);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 2);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(0, 1)), 6);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 7);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 6);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 3);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 2);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(0, 1)), 6);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 8);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 6);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 3);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 2);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(0, 1)), 7);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 9);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 8);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 6);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 3);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 2);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(0, 1)), 8);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 10);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 9);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 8);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 6);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 3);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 2);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(0, 1)), 9);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 11);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 10);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 9);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 8);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 6);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 3);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 2);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 1);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.47 := $store.i32($M.47, reg_alpha2_map, 16);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 85);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 83);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1)), 32);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 67);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 65);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1)), 48);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 68);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 69);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1)), 65);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 74);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 80);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1)), 64);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 74);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 80);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1)), 73);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 74);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 80);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1)), 49);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 69);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 83);
    $M.47 := $store.i32($M.47, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1)), 50);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 70);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 82);
    $M.8 := 0;
    call {:si_unique_call 2918} {:cexpr "ldv_mutex_setup_mutex"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 2919} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 2920} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 2921} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.239, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.239, $mul.ref(0, 12)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.239, $mul.ref(0, 12)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.239, $mul.ref(0, 12)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.239, $mul.ref(0, 12)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.239, $mul.ref(0, 12)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.239, $mul.ref(0, 12)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.239, $mul.ref(0, 12)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.239, $mul.ref(0, 12)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.239, $mul.ref(0, 12)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.239, $mul.ref(0, 12)), $mul.ref(10, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.239, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.218, 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(1, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(2, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(17, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.219, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.219, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.150, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(8, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.100, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(9, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(10, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.75, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(13, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(14, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(15, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(14, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(15, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(16, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(20, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(23, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(26, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.102, 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(1, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(11, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(12, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(13, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(17, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(20, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(24, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(26, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(14, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(15, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(16, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(20, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.84, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(14, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(15, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(16, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(20, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(23, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(25, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(26, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(27, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(28, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.18 := $store.i8($M.18, .str.180, 122);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(1, 1)), 100);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(2, 1)), 95);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(3, 1)), 111);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(4, 1)), 112);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(5, 1)), 95);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(6, 1)), 112);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(7, 1)), 114);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(8, 1)), 101);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(9, 1)), 112);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(10, 1)), 97);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(11, 1)), 114);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(12, 1)), 101);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(13, 1)), 95);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(14, 1)), 109);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(15, 1)), 117);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(16, 1)), 108);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(17, 1)), 116);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(18, 1)), 105);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(19, 1)), 99);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(20, 1)), 97);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(21, 1)), 115);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(.str.180, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.109, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(16, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.156, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(23, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(26, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(28, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(16, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(17, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(21, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.147, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(6, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(16, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.146, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.105, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(10, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(11, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.9, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(10, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(11, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(17, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(11, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.18, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(14, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(15, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.14, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 4)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 4)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.107, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(3, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(21, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(23, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 6)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 6)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.65, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(11, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(17, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(10, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.207, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.207, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(8, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.212, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.212, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(12, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.138, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 12)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 12)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 12)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 12)), $mul.ref(5, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 12)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 12)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 12)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 12)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.162 := $store.i8($M.162, .str.131, 37);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(.str.131, $mul.ref(0, 6)), $mul.ref(1, 1)), 48);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(.str.131, $mul.ref(0, 6)), $mul.ref(2, 1)), 52);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(.str.131, $mul.ref(0, 6)), $mul.ref(3, 1)), 104);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(.str.131, $mul.ref(0, 6)), $mul.ref(4, 1)), 120);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(.str.131, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.104, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(9, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(10, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(15, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(11, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(12, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.148, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(14, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(17, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.122, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 8)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 8)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 8)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 8)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.127, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.129, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(15, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.128, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(16, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.119, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 9)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 9)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 9)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 9)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 9)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 9)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.118, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(12, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.116, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 10)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 10)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 10)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 10)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 10)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 10)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 10)), $mul.ref(8, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.227, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.227, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.175, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.190, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 12)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 12)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 12)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 12)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 12)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 12)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 12)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 12)), $mul.ref(8, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 12)), $mul.ref(9, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 12)), $mul.ref(10, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.191, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.191, $mul.ref(0, 12)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.191, $mul.ref(0, 12)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.191, $mul.ref(0, 12)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.191, $mul.ref(0, 12)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.191, $mul.ref(0, 12)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.191, $mul.ref(0, 12)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.191, $mul.ref(0, 12)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.191, $mul.ref(0, 12)), $mul.ref(8, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.191, $mul.ref(0, 12)), $mul.ref(9, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.191, $mul.ref(0, 12)), $mul.ref(10, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.191, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.192, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 10)), $mul.ref(1, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 10)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 10)), $mul.ref(3, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 10)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 10)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 10)), $mul.ref(7, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 10)), $mul.ref(8, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.193, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 9)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 9)), $mul.ref(2, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 9)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 9)), $mul.ref(4, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 9)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 9)), $mul.ref(6, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 9)), $mul.ref(7, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.194, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 10)), $mul.ref(1, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 10)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 10)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 10)), $mul.ref(4, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 10)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 10)), $mul.ref(7, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 10)), $mul.ref(8, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.195, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 11)), $mul.ref(1, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 11)), $mul.ref(2, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 11)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 11)), $mul.ref(4, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 11)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 11)), $mul.ref(6, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 11)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 11)), $mul.ref(8, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 11)), $mul.ref(9, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.196, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 9)), $mul.ref(1, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 9)), $mul.ref(2, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 9)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 9)), $mul.ref(4, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 9)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 9)), $mul.ref(6, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 9)), $mul.ref(7, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.197, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 10)), $mul.ref(1, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 10)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 10)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 10)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 10)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 10)), $mul.ref(7, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 10)), $mul.ref(8, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.198, 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(1, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(2, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(4, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(6, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(7, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(8, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(10, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(11, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.199, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 10)), $mul.ref(1, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 10)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 10)), $mul.ref(3, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 10)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 10)), $mul.ref(5, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 10)), $mul.ref(7, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 10)), $mul.ref(8, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.200, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 11)), $mul.ref(1, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 11)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 11)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 11)), $mul.ref(4, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 11)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 11)), $mul.ref(6, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 11)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 11)), $mul.ref(8, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 11)), $mul.ref(9, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.201, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.201, $mul.ref(0, 10)), $mul.ref(1, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.201, $mul.ref(0, 10)), $mul.ref(2, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.201, $mul.ref(0, 10)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.201, $mul.ref(0, 10)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.201, $mul.ref(0, 10)), $mul.ref(5, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.201, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.201, $mul.ref(0, 10)), $mul.ref(7, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.201, $mul.ref(0, 10)), $mul.ref(8, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.201, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.202, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.202, $mul.ref(0, 12)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.202, $mul.ref(0, 12)), $mul.ref(2, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.202, $mul.ref(0, 12)), $mul.ref(3, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.202, $mul.ref(0, 12)), $mul.ref(4, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.202, $mul.ref(0, 12)), $mul.ref(5, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.202, $mul.ref(0, 12)), $mul.ref(6, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.202, $mul.ref(0, 12)), $mul.ref(7, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.202, $mul.ref(0, 12)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.202, $mul.ref(0, 12)), $mul.ref(9, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.202, $mul.ref(0, 12)), $mul.ref(10, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.202, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.203, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 10)), $mul.ref(1, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 10)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 10)), $mul.ref(3, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 10)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 10)), $mul.ref(5, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 10)), $mul.ref(7, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 10)), $mul.ref(8, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.204, 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(1, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(2, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(4, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(6, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(7, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(8, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(9, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(11, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(12, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.204, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.205, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.205, $mul.ref(0, 11)), $mul.ref(1, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.205, $mul.ref(0, 11)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.205, $mul.ref(0, 11)), $mul.ref(3, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.205, $mul.ref(0, 11)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.205, $mul.ref(0, 11)), $mul.ref(5, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.205, $mul.ref(0, 11)), $mul.ref(6, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.205, $mul.ref(0, 11)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.205, $mul.ref(0, 11)), $mul.ref(8, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.205, $mul.ref(0, 11)), $mul.ref(9, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.205, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.2, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.295, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.295, $mul.ref(0, 9)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.295, $mul.ref(0, 9)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.295, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.295, $mul.ref(0, 9)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.295, $mul.ref(0, 9)), $mul.ref(5, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.295, $mul.ref(0, 9)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.295, $mul.ref(0, 9)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.295, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.274, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.274, $mul.ref(0, 9)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.274, $mul.ref(0, 9)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.274, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.274, $mul.ref(0, 9)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.274, $mul.ref(0, 9)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.274, $mul.ref(0, 9)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.274, $mul.ref(0, 9)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.274, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    call {:si_unique_call 2922} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 899040);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 900072);

procedure devirtbounce.1(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 901104);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 902136);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 903168);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.54, $M.24, $M.27, $M.57, $M.26, $M.22, $M.23, $CurrAddr, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i8) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(rf2959_set_channel, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i20 == 1);
    $i19 := $eq.ref(zd1211_al2230_set_channel, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i19 == 1);
    $i18 := $eq.ref(zd1211b_al2230_set_channel, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i18 == 1);
    $i17 := $eq.ref(zd1211_al7230b_set_channel, $p0);
    assume {:branchcond $i17} true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i17 == 1);
    $i16 := $eq.ref(zd1211b_al7230b_patch_6m, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i16 == 1);
    $i15 := $eq.ref(zd1211b_al7230b_set_channel, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i15 == 1);
    $i14 := $eq.ref(zd_rf_generic_patch_6m, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i14 == 1);
    $i13 := $eq.ref(uw2453_set_channel, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i13 == 1);
    $i12 := $eq.ref(zd_op_config, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i8.i32(arg1);
    call {:si_unique_call 2923} $i3 := zd_op_config($p1, $i2);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    $r := $i3;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    call {:si_unique_call 2924} $i4 := uw2453_set_channel(arg, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i14 == 1;
    call {:si_unique_call 2925} $i5 := zd_rf_generic_patch_6m(arg, arg1);
    $r := $i5;
    return;

  $bb5:
    assume $i15 == 1;
    call {:si_unique_call 2926} $i6 := zd1211b_al7230b_set_channel(arg, arg1);
    $r := $i6;
    return;

  $bb6:
    assume $i16 == 1;
    call {:si_unique_call 2927} $i7 := zd1211b_al7230b_patch_6m(arg, arg1);
    $r := $i7;
    return;

  $bb7:
    assume $i17 == 1;
    call {:si_unique_call 2928} $i8 := zd1211_al7230b_set_channel(arg, arg1);
    $r := $i8;
    return;

  $bb8:
    assume $i18 == 1;
    call {:si_unique_call 2929} $i9 := zd1211b_al2230_set_channel(arg, arg1);
    $r := $i9;
    return;

  $bb9:
    assume $i19 == 1;
    call {:si_unique_call 2930} $i10 := zd1211_al2230_set_channel(arg, arg1);
    $r := $i10;
    return;

  $bb10:
    assume $i20 == 1;
    call {:si_unique_call 2931} $i11 := rf2959_set_channel(arg, arg1);
    $r := $i11;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 904200);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 905232);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.54, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.62, $M.19, $M.20, $M.24, $M.27, $M.57, $M.26, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.41, $M.22, $M.23, $CurrAddr, $M.8, assertsPassed, $M.45, $M.48, $M.49, $M.46, $M.42, $M.37, $M.53;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i41 := $eq.ref(post_reset, $p0);
    assume true;
    goto $bb20, $bb39;

  $bb39:
    assume !($i41 == 1);
    $i40 := $eq.ref(pre_reset, $p0);
    assume true;
    goto $bb19, $bb38;

  $bb38:
    assume !($i40 == 1);
    $i39 := $eq.ref(rf2959_switch_radio_off, $p0);
    assume true;
    goto $bb18, $bb37;

  $bb37:
    assume !($i39 == 1);
    $i38 := $eq.ref(rf2959_switch_radio_on, $p0);
    assume {:branchcond $i38} true;
    goto $bb17, $bb36;

  $bb36:
    assume !($i38 == 1);
    $i37 := $eq.ref(rf2959_init_hw, $p0);
    assume {:branchcond $i37} true;
    goto $bb16, $bb35;

  $bb35:
    assume !($i37 == 1);
    $i36 := $eq.ref(zd1211_al2230_switch_radio_on, $p0);
    assume true;
    goto $bb15, $bb34;

  $bb34:
    assume !($i36 == 1);
    $i35 := $eq.ref(zd1211_al2230_init_hw, $p0);
    assume {:branchcond $i35} true;
    goto $bb14, $bb33;

  $bb33:
    assume !($i35 == 1);
    $i34 := $eq.ref(zd1211b_al2230_switch_radio_on, $p0);
    assume true;
    goto $bb13, $bb32;

  $bb32:
    assume !($i34 == 1);
    $i33 := $eq.ref(zd1211b_al2230_init_hw, $p0);
    assume {:branchcond $i33} true;
    goto $bb12, $bb31;

  $bb31:
    assume !($i33 == 1);
    $i32 := $eq.ref(al2230_switch_radio_off, $p0);
    assume true;
    goto $bb11, $bb30;

  $bb30:
    assume !($i32 == 1);
    $i31 := $eq.ref(al7230b_switch_radio_off, $p0);
    assume true;
    goto $bb10, $bb29;

  $bb29:
    assume !($i31 == 1);
    $i30 := $eq.ref(zd1211_al7230b_switch_radio_on, $p0);
    assume {:branchcond $i30} true;
    goto $bb9, $bb28;

  $bb28:
    assume !($i30 == 1);
    $i29 := $eq.ref(zd1211_al7230b_init_hw, $p0);
    assume true;
    goto $bb8, $bb27;

  $bb27:
    assume !($i29 == 1);
    $i28 := $eq.ref(zd1211b_al7230b_switch_radio_on, $p0);
    assume true;
    goto $bb7, $bb26;

  $bb26:
    assume !($i28 == 1);
    $i27 := $eq.ref(zd1211b_al7230b_init_hw, $p0);
    assume true;
    goto $bb6, $bb25;

  $bb25:
    assume !($i27 == 1);
    $i26 := $eq.ref(uw2453_switch_radio_off, $p0);
    assume true;
    goto $bb5, $bb24;

  $bb24:
    assume !($i26 == 1);
    $i25 := $eq.ref(uw2453_switch_radio_on, $p0);
    assume {:branchcond $i25} true;
    goto $bb4, $bb23;

  $bb23:
    assume !($i25 == 1);
    $i24 := $eq.ref(uw2453_init_hw, $p0);
    assume {:branchcond $i24} true;
    goto $bb3, $bb22;

  $bb22:
    assume !($i24 == 1);
    $i23 := $eq.ref(zd_op_start, $p0);
    assume true;
    goto $bb2, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume false;
    return;

  $bb2:
    assume $i23 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2932} $i2 := zd_op_start($p1);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    $r := $i2;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i24 == 1;
    call {:si_unique_call 2933} $i3 := uw2453_init_hw(arg);
    $r := $i3;
    return;

  $bb4:
    assume $i25 == 1;
    call {:si_unique_call 2934} $i4 := uw2453_switch_radio_on(arg);
    $r := $i4;
    return;

  $bb5:
    assume $i26 == 1;
    call {:si_unique_call 2935} $i5 := uw2453_switch_radio_off(arg);
    $r := $i5;
    return;

  $bb6:
    assume $i27 == 1;
    call {:si_unique_call 2936} $i6 := zd1211b_al7230b_init_hw(arg);
    $r := $i6;
    return;

  $bb7:
    assume $i28 == 1;
    call {:si_unique_call 2937} $i7 := zd1211b_al7230b_switch_radio_on(arg);
    $r := $i7;
    return;

  $bb8:
    assume $i29 == 1;
    call {:si_unique_call 2938} $i8 := zd1211_al7230b_init_hw(arg);
    $r := $i8;
    return;

  $bb9:
    assume $i30 == 1;
    call {:si_unique_call 2939} $i9 := zd1211_al7230b_switch_radio_on(arg);
    $r := $i9;
    return;

  $bb10:
    assume $i31 == 1;
    call {:si_unique_call 2940} $i10 := al7230b_switch_radio_off(arg);
    $r := $i10;
    return;

  $bb11:
    assume $i32 == 1;
    call {:si_unique_call 2941} $i11 := al2230_switch_radio_off(arg);
    $r := $i11;
    return;

  $bb12:
    assume $i33 == 1;
    call {:si_unique_call 2942} $i12 := zd1211b_al2230_init_hw(arg);
    $r := $i12;
    return;

  $bb13:
    assume $i34 == 1;
    call {:si_unique_call 2943} $i13 := zd1211b_al2230_switch_radio_on(arg);
    $r := $i13;
    return;

  $bb14:
    assume $i35 == 1;
    call {:si_unique_call 2944} $i14 := zd1211_al2230_init_hw(arg);
    $r := $i14;
    return;

  $bb15:
    assume $i36 == 1;
    call {:si_unique_call 2945} $i15 := zd1211_al2230_switch_radio_on(arg);
    $r := $i15;
    return;

  $bb16:
    assume $i37 == 1;
    call {:si_unique_call 2946} $i16 := rf2959_init_hw(arg);
    $r := $i16;
    return;

  $bb17:
    assume $i38 == 1;
    call {:si_unique_call 2947} $i17 := rf2959_switch_radio_on(arg);
    $r := $i17;
    return;

  $bb18:
    assume $i39 == 1;
    call {:si_unique_call 2948} $i18 := rf2959_switch_radio_off(arg);
    $r := $i18;
    return;

  $bb19:
    assume $i40 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2949} $i20 := pre_reset($p19);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    $r := $i20;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i41 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2950} $i22 := post_reset($p21);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    $r := $i22;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 906264);

procedure devirtbounce.7(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 907296);

procedure devirtbounce.8(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.29, $M.30, $M.24, $M.8, $M.26, $M.22, $M.23, $M.27, $CurrAddr, assertsPassed, $M.37, $M.54, $M.62, $M.65, $M.19, $M.20, $M.57, $M.41, $M.45, $M.48, $M.49, $M.46, $M.42, $M.53;



implementation devirtbounce.8(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i23 := $eq.ref(link_led_handler, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i23 == 1);
    $i22 := $eq.ref(beacon_watchdog_handler, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i22 == 1);
    $i21 := $eq.ref(zd_process_intr, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(disconnect, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(tx_urb_complete, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(uw2453_clear, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i18 == 1);
    $i17 := $eq.ref(int_urb_complete, $p0);
    assume {:branchcond $i17} true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(iowrite16v_urb_complete, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(zd_op_stop, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(zd_tx_watchdog_handler, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(rx_urb_complete, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(zd_rx_idle_timer_handler, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2951} zd_rx_idle_timer_handler($p1);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2952} rx_urb_complete($p2);
    return;

  $bb4:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2953} zd_tx_watchdog_handler($p3);
    return;

  $bb5:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2954} zd_op_stop($p4);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2955} iowrite16v_urb_complete($p5);
    return;

  $bb7:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2956} int_urb_complete($p6);
    return;

  $bb8:
    assume $i18 == 1;
    call {:si_unique_call 2957} uw2453_clear(arg);
    return;

  $bb9:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2958} tx_urb_complete($p7);
    return;

  $bb10:
    assume $i20 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2959} disconnect($p8);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2960} zd_process_intr($p9);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i22 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2961} beacon_watchdog_handler($p10);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i23 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2962} link_led_handler($p11);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i8;

const $u1: ref;

const $u2: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.7, $M.89, $M.75, $M.51, $M.61, $M.56, $M.60, $M.59, $M.58, $M.30, $M.29, $M.62, $M.63, $M.54, $M.0, $M.10, $M.47, $M.8, $M.26, $M.73, $M.72, $M.18, $M.162, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2963} __SMACK_static_init();
    call {:si_unique_call 2964} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.72, $M.73, $M.26, $M.8, $M.0, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.7, $M.89, $M.75, $M.51, $M.61, $M.56, $M.60, $M.59, $M.58, $M.30, $M.29, $M.62, $M.63, $M.54, $M.10, $M.47, $M.18, $M.162, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.42, $M.19, $M.20, $M.24, $M.22, $M.23, $M.41, $M.27, $M.45, $M.48, $M.49, $M.37, $M.57, $M.46, $M.53, $M.65;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation __zd_usb_disable_rx_loop_$bb8(in_$p6: ref, in_$i8: i32, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i13: i32) returns (out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i13: i32)
{

  entry:
    out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i13 := in_$i14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i13;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_329;

  $bb10:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i20;
    goto $bb10_dummy;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    out_$i21 := $ult.i32(out_$i20, in_$i8);
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i13, 1);
    call {:si_unique_call 132} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} free_rx_urb(out_$p19);
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(in_$p6, $mul.ref(out_$i17, 8));
    goto corral_source_split_336;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i13);
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} usb_kill_urb(out_$p16);
    goto corral_source_split_334;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_333;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(in_$p6, $mul.ref(out_$i14, 8));
    goto corral_source_split_332;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i13 := __zd_usb_disable_rx_loop_$bb8(in_$p6, in_$i8, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i13);
    return;

  exit:
    return;
}



procedure __zd_usb_disable_rx_loop_$bb8(in_$p6: ref, in_$i8: i32, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i13: i32) returns (out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i13: i32);



implementation __zd_usb_enable_rx_loop_$bb5(in_$p0: ref, in_$p8: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i12: i32) returns (out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i12: i32)
{

  entry:
    out_$p13, out_$i14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i12 := in_$p13, in_$i14, in_$p15, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i12;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_369;

  $bb10:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i21;
    goto $bb10_dummy;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$i22 := $sle.i32(out_$i21, 4);
    goto corral_source_split_384;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i12, 1);
    call {:si_unique_call 142} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_383;

  $bb8:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_379;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(in_$p8, $mul.ref(out_$i16, 8));
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i12);
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p15, out_$p13);
    goto corral_source_split_374;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(in_$p8, $mul.ref(out_$i14, 8));
    goto corral_source_split_373;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i12);
    goto corral_source_split_372;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} out_$p13 := alloc_rx_urb(in_$p0);
    goto corral_source_split_371;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i12 := __zd_usb_enable_rx_loop_$bb5(in_$p0, in_$p8, out_$p13, out_$i14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i12);
    return;

  exit:
    return;
}



procedure __zd_usb_enable_rx_loop_$bb5(in_$p0: ref, in_$p8: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i12: i32) returns (out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i12: i32);
  modifies $M.0;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation handle_rx_packet_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p18: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_vslice_dummy_var_114: i32) returns (out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_vslice_dummy_var_114: i32)
{

  entry:
    out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_vslice_dummy_var_114 := in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$p29, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_vslice_dummy_var_114;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i22, out_$i23, out_$i24 := out_$i38, out_$i33, out_$i34;
    goto $bb19_dummy;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    call {:si_unique_call 270} {:cexpr "k"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} out_$i37 := get_unaligned_le16(out_$p36);
    call {:si_unique_call 269} {:cexpr "tmp"} boogie_si_record_i16(out_$i37);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(in_$p18, $mul.ref(out_$i35, 1));
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i34);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i24, 1);
    call {:si_unique_call 267} {:cexpr "i"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i32, $sub.i32(0, 4));
    call {:si_unique_call 266} {:cexpr "l"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_874;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i25, 3);
    goto corral_source_split_873;

  $bb17:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i24, 1);
    goto corral_source_split_869;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} out_vslice_dummy_var_114 := zd_mac_rx(out_$p27, out_$p29, out_$i22);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(in_$p1, $mul.ref(out_$i28, 1));
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i23);
    goto corral_source_split_866;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} out_$p27 := zd_usb_to_hw(in_$p0);
    goto corral_source_split_865;

  $bb14:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$i26 := $ugt.i32(out_$i25, in_$i2);
    goto corral_source_split_861;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i23, out_$i22);
    call {:si_unique_call 263} {:cexpr "n"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_860;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_vslice_dummy_var_114 := handle_rx_packet_loop_$bb10(in_$p0, in_$p1, in_$i2, in_$p18, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_vslice_dummy_var_114);
    return;

  exit:
    return;
}



procedure handle_rx_packet_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p18: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_vslice_dummy_var_114: i32) returns (out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_vslice_dummy_var_114: i32);
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation zd_mac_rx_loop_$bb17(in_$p3: ref, in_$p4: ref, in_$i47: i8, in_$p49: ref, in_$i53: i16, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i1, in_$i64: i8, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i52: i32) returns (out_$i53: i16, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i1, out_$i64: i8, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i52: i32)
{

  entry:
    out_$i53, out_$i54, out_$p56, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i52 := in_$i53, in_$i54, in_$p56, in_$p57, in_$i58, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i52;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_957;

  $bb22:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := out_$i66;
    goto $bb22_dummy;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i67, out_$i66);
    goto corral_source_split_977;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, in_$p49);
    goto corral_source_split_976;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i52, 1);
    call {:si_unique_call 284} {:cexpr "i"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_975;

  $bb20:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p65, out_$i64);
    goto corral_source_split_973;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_972;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i32.i8(out_$i52);
    goto corral_source_split_971;

  $bb19:
    assume out_$i63 == 1;
    goto corral_source_split_970;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i54, out_$i62);
    goto corral_source_split_968;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i16.i32(out_$i61);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i16($M.9, out_$p60);
    goto corral_source_split_966;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p57, $mul.ref(out_$i58, 12)), $mul.ref(6, 1));
    goto corral_source_split_965;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto corral_source_split_964;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(out_$i52);
    goto corral_source_split_963;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 13336)), $mul.ref(13256, 1)), $mul.ref(8, 1));
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i53);
    goto corral_source_split_960;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i16(in_$i47);
    goto corral_source_split_959;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i53, out_$i54, out_$p56, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i52 := zd_mac_rx_loop_$bb17(in_$p3, in_$p4, in_$i47, in_$p49, out_$i53, out_$i54, out_$p56, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i52);
    return;

  exit:
    return;
}



procedure zd_mac_rx_loop_$bb17(in_$p3: ref, in_$p4: ref, in_$i47: i8, in_$p49: ref, in_$i53: i16, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i1, in_$i64: i8, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i52: i32) returns (out_$i53: i16, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i1, out_$i64: i8, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i52: i32);
  modifies $M.0;



implementation filter_ack_loop_$bb29(in_$p0: ref, in_$p3: ref, in_$p11: ref, in_$i49: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$i68: i8, in_$i69: i8, in_$i70: i32, in_$i71: i1, in_$i57: i32) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$i68: i8, out_$i69: i8, out_$i70: i32, out_$i71: i1, out_$i57: i32)
{

  entry:
    out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i57 := in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i57;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1175;

  $bb34:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := out_$i70;
    goto $bb34_dummy;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i70, in_$i49);
    goto corral_source_split_1197;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i57, 1);
    call {:si_unique_call 330} {:cexpr "i"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_1196;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p67, out_$i69);
    goto corral_source_split_1195;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i8(out_$i68, $sub.i8(0, 9));
    goto corral_source_split_1194;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.0, out_$p67);
    goto corral_source_split_1193;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p3, $mul.ref(0, 13336)), $mul.ref(13328, 1));
    goto corral_source_split_1192;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} zd_mac_tx_status(in_$p0, out_$p58, out_$i66, $0.ref);
    goto corral_source_split_1191;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1190;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    out_$i66 := 0;
    goto $bb33;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i65;
    goto $bb33;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_1186;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p3, $mul.ref(0, 13336)), $mul.ref(13332, 1));
    goto corral_source_split_1185;

  $bb31:
    assume out_$i63 == 1;
    goto corral_source_split_1184;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_1182;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i8.i32(out_$i61);
    goto corral_source_split_1181;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p60);
    goto corral_source_split_1180;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p59, $mul.ref(13328, 1));
    goto corral_source_split_1179;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_1178;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} out_$p58 := __skb_dequeue(in_$p11);
    goto corral_source_split_1177;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb32:
    assume !(out_$i63 == 1);
    goto corral_source_split_1188;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i57 := filter_ack_loop_$bb29(in_$p0, in_$p3, in_$p11, in_$i49, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i57);
    return;

  exit:
    return;
}



procedure filter_ack_loop_$bb29(in_$p0: ref, in_$p3: ref, in_$p11: ref, in_$i49: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$i68: i8, in_$i69: i8, in_$i70: i32, in_$i71: i1, in_$i57: i32) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$i68: i8, out_$i69: i8, out_$i70: i32, out_$i71: i1, out_$i57: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation filter_ack_loop_$bb8(in_$p1: ref, in_$p3: ref, in_$p11: ref, in_$i19: i64, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i8, in_$i32: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i64, in_$i45: i64, in_$i46: i1, in_$i47: i32, in_$p33: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$i22: i32, in_$p23: ref, in_$i54: i32) returns (out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i8, out_$i32: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i64, out_$i45: i64, out_$i46: i1, out_$i47: i32, out_$p33: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$i22: i32, out_$p23: ref, out_$i54: i32)
{

  entry:
    out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p33, out_$p50, out_$p51, out_$i52, out_$i53, out_$i22, out_$p23, out_$i54 := in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p33, in_$p50, in_$p51, in_$i52, in_$i53, in_$i22, in_$p23, in_$i54;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1127;

  $bb21:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i22, out_$p23 := out_$i24, out_$p51;
    goto $bb21_dummy;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i24;
    assume true;
    goto $bb21;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, in_$i19);
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p33, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1144;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1143;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p33 := out_$p23;
    goto $bb14;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$p33 := out_$p23;
    goto $bb14;

  $bb12:
    assume out_$i32 == 1;
    goto corral_source_split_1141;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i8.i1(out_$i31);
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i8(out_$i30);
    call {:si_unique_call 323} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i31);
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} out_$i30 := skb_queue_is_first(in_$p11, out_$p23);
    goto corral_source_split_1137;

  $bb10:
    assume out_$i29 == 1;
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(out_$i27);
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.0, out_$p26);
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p25, $mul.ref(13328, 1));
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_1130;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i22, 1);
    call {:si_unique_call 321} {:cexpr "position"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1129;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i24;
    assume true;
    goto $bb18;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} out_$i45 := ldv__builtin_expect(out_$i44, 1);
    call {:si_unique_call 327} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_1160;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_1159;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i1.i32(out_$i42);
    goto corral_source_split_1158;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 0);
    goto corral_source_split_1157;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} out_$i41 := memcmp(out_$p38, out_$p40, 6);
    call {:si_unique_call 325} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_1155;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_1154;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_1153;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 30)), $mul.ref(10, 1));
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_1150;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p23, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_1149;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p33, out_$p50, out_$p51, out_$i52, out_$i53, out_$i22, out_$p23, out_$i54 := filter_ack_loop_$bb8(in_$p1, in_$p3, in_$p11, in_$i19, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p33, out_$p50, out_$p51, out_$i52, out_$i53, out_$i22, out_$p23, out_$i54);
    return;

  exit:
    return;
}



procedure filter_ack_loop_$bb8(in_$p1: ref, in_$p3: ref, in_$p11: ref, in_$i19: i64, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i8, in_$i32: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i64, in_$i45: i64, in_$i46: i1, in_$i47: i32, in_$p33: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$i22: i32, in_$p23: ref, in_$i54: i32) returns (out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i8, out_$i32: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i64, out_$i45: i64, out_$i46: i1, out_$i47: i32, out_$p33: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$i22: i32, out_$p23: ref, out_$i54: i32);



implementation zd_mac_tx_status_loop_$bb38(in_$p6: ref, in_$i19: i32, in_$i63: i64, in_$i144: i32, in_$i145: i64, in_$p147: ref, in_$i148: i32, in_$i149: i8, in_$i150: i64, in_$p151: ref, in_$p152: ref, in_$p155: ref, in_$i156: i64, in_$p157: ref, in_$p158: ref, in_$p161: ref, in_$i162: i8, in_$i163: i8, in_$i164: i8, in_$i165: i32, in_$i166: i1, in_$i167: i1, in_$i168: i1, in_$i143: i32, in_$i169: i32) returns (out_$i144: i32, out_$i145: i64, out_$p147: ref, out_$i148: i32, out_$i149: i8, out_$i150: i64, out_$p151: ref, out_$p152: ref, out_$p155: ref, out_$i156: i64, out_$p157: ref, out_$p158: ref, out_$p161: ref, out_$i162: i8, out_$i163: i8, out_$i164: i8, out_$i165: i32, out_$i166: i1, out_$i167: i1, out_$i168: i1, out_$i143: i32, out_$i169: i32)
{

  entry:
    out_$i144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$p152, out_$p155, out_$i156, out_$p157, out_$p158, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i143, out_$i169 := in_$i144, in_$i145, in_$p147, in_$i148, in_$i149, in_$i150, in_$p151, in_$p152, in_$p155, in_$i156, in_$p157, in_$p158, in_$p161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i143, in_$i169;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1478;

  $bb40:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i143 := out_$i165;
    goto $bb40_dummy;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i165;
    assume true;
    goto $bb40;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i168 := $and.i1(out_$i166, out_$i167);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    out_$i167 := $slt.i32(out_$i165, in_$i19);
    goto corral_source_split_1499;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    out_$i166 := $sle.i32(out_$i165, 3);
    goto corral_source_split_1498;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$i165 := $add.i32(out_$i143, 1);
    call {:si_unique_call 376} {:cexpr "i"} boogie_si_record_i32(out_$i165);
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p161, out_$i164);
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    out_$i164 := $or.i8(out_$i163, 1);
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    out_$i163 := $and.i8(out_$i162, $sub.i8(0, 32));
    goto corral_source_split_1494;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i8($M.0, out_$p161);
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref($add.ref($add.ref(out_$p158, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(out_$i156, 4)), $mul.ref(1, 1));
    goto corral_source_split_1492;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    out_$p158 := $bitcast.ref.ref(out_$p157);
    goto corral_source_split_1491;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1490;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    out_$i156 := $sext.i32.i64(out_$i143);
    goto corral_source_split_1489;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p155, out_$i149);
    goto corral_source_split_1488;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref($add.ref(out_$p152, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(out_$i150, 4)), $mul.ref(0, 1));
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    out_$p152 := $bitcast.ref.ref(out_$p151);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(in_$p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    out_$i150 := $sext.i32.i64(out_$i143);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    out_$i149 := $trunc.i32.i8(out_$i148);
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i32($M.10, out_$p147);
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$i145 := $sext.i32.i64(out_$i144);
    out_$p147 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(in_$i63, 44)), $mul.ref(4, 1)), $mul.ref(out_$i145, 4));
    goto corral_source_split_1481;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i32(in_$i19, $sub.i32(0, 1));
    goto corral_source_split_1480;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$p152, out_$p155, out_$i156, out_$p157, out_$p158, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i143, out_$i169 := zd_mac_tx_status_loop_$bb38(in_$p6, in_$i19, in_$i63, out_$i144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$p152, out_$p155, out_$i156, out_$p157, out_$p158, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i143, out_$i169);
    return;

  exit:
    return;
}



procedure zd_mac_tx_status_loop_$bb38(in_$p6: ref, in_$i19: i32, in_$i63: i64, in_$i144: i32, in_$i145: i64, in_$p147: ref, in_$i148: i32, in_$i149: i8, in_$i150: i64, in_$p151: ref, in_$p152: ref, in_$p155: ref, in_$i156: i64, in_$p157: ref, in_$p158: ref, in_$p161: ref, in_$i162: i8, in_$i163: i8, in_$i164: i8, in_$i165: i32, in_$i166: i1, in_$i167: i1, in_$i168: i1, in_$i143: i32, in_$i169: i32) returns (out_$i144: i32, out_$i145: i64, out_$p147: ref, out_$i148: i32, out_$i149: i8, out_$i150: i64, out_$p151: ref, out_$p152: ref, out_$p155: ref, out_$i156: i64, out_$p157: ref, out_$p158: ref, out_$p161: ref, out_$i162: i8, out_$i163: i8, out_$i164: i8, out_$i165: i32, out_$i166: i1, out_$i167: i1, out_$i168: i1, out_$i143: i32, out_$i169: i32);
  modifies $M.0;



implementation zd_mac_tx_status_loop_$bb30(in_$p6: ref, in_$i19: i32, in_$i63: i64, in_$i114: i64, in_$p116: ref, in_$i117: i32, in_$i118: i8, in_$i119: i64, in_$p120: ref, in_$p121: ref, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$p127: ref, in_$p130: ref, in_$i131: i8, in_$i132: i8, in_$i133: i8, in_$i134: i32, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i113: i32, in_$i138: i32) returns (out_$i114: i64, out_$p116: ref, out_$i117: i32, out_$i118: i8, out_$i119: i64, out_$p120: ref, out_$p121: ref, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$p127: ref, out_$p130: ref, out_$i131: i8, out_$i132: i8, out_$i133: i8, out_$i134: i32, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i113: i32, out_$i138: i32)
{

  entry:
    out_$i114, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$p124, out_$i125, out_$p126, out_$p127, out_$p130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i113, out_$i138 := in_$i114, in_$p116, in_$i117, in_$i118, in_$i119, in_$p120, in_$p121, in_$p124, in_$i125, in_$p126, in_$p127, in_$p130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i113, in_$i138;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1447;

  $bb32:
    assume out_$i137 == 1;
    assume {:verifier.code 0} true;
    out_$i113 := out_$i134;
    goto $bb32_dummy;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$i138 := out_$i134;
    assume true;
    goto $bb32;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    out_$i137 := $and.i1(out_$i135, out_$i136);
    goto corral_source_split_1468;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i134, in_$i19);
    goto corral_source_split_1467;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$i135 := $sle.i32(out_$i134, 2);
    goto corral_source_split_1466;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i113, 1);
    call {:si_unique_call 375} {:cexpr "i"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p130, out_$i133);
    goto corral_source_split_1464;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    out_$i133 := $or.i8(out_$i132, 1);
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$i132 := $and.i8(out_$i131, $sub.i8(0, 32));
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i8($M.0, out_$p130);
    goto corral_source_split_1461;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref($add.ref($add.ref(out_$p127, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(out_$i125, 4)), $mul.ref(1, 1));
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    out_$p127 := $bitcast.ref.ref(out_$p126);
    goto corral_source_split_1459;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i113);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p124, out_$i118);
    goto corral_source_split_1456;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref($add.ref($add.ref(out_$p121, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(out_$i119, 4)), $mul.ref(0, 1));
    goto corral_source_split_1455;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$p121 := $bitcast.ref.ref(out_$p120);
    goto corral_source_split_1454;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$i119 := $sext.i32.i64(out_$i113);
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i32.i8(out_$i117);
    goto corral_source_split_1451;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.10, out_$p116);
    goto corral_source_split_1450;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i114 := $sext.i32.i64(out_$i113);
    out_$p116 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(in_$i63, 44)), $mul.ref(4, 1)), $mul.ref(out_$i114, 4));
    goto corral_source_split_1449;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i114, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$p124, out_$i125, out_$p126, out_$p127, out_$p130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i113, out_$i138 := zd_mac_tx_status_loop_$bb30(in_$p6, in_$i19, in_$i63, out_$i114, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$p124, out_$i125, out_$p126, out_$p127, out_$p130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i113, out_$i138);
    return;

  exit:
    return;
}



procedure zd_mac_tx_status_loop_$bb30(in_$p6: ref, in_$i19: i32, in_$i63: i64, in_$i114: i64, in_$p116: ref, in_$i117: i32, in_$i118: i8, in_$i119: i64, in_$p120: ref, in_$p121: ref, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$p127: ref, in_$p130: ref, in_$i131: i8, in_$i132: i8, in_$i133: i8, in_$i134: i32, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i113: i32, in_$i138: i32) returns (out_$i114: i64, out_$p116: ref, out_$i117: i32, out_$i118: i8, out_$i119: i64, out_$p120: ref, out_$p121: ref, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$p127: ref, out_$p130: ref, out_$i131: i8, out_$i132: i8, out_$i133: i8, out_$i134: i32, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i113: i32, out_$i138: i32);
  modifies $M.0;



implementation zd_tx_timeout_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p14: ref, out_$p15: ref)
{

  entry:
    out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p14, out_$p15 := in_$p16, in_$p17, in_$p18, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p28, in_$p29, in_$i30, in_$i31, in_$p14, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1760;

  $bb10:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$p15 := out_$p29, out_$p14;
    goto $bb10_dummy;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, in_$i12);
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_1780;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p14, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1779;

  $bb7:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i64(out_$i25, 0);
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i64(out_$i23, out_$i24);
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.9, jiffies);
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i64(out_$i22, 1250);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    call {:si_unique_call 425} {:cexpr "trans_start"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1766;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(1, 8));
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_1764;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1763;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} out_$p16 := IEEE80211_SKB_CB(out_$p15);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p14, out_$p15 := zd_tx_timeout_loop_$bb4(in_$i12, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p14, out_$p15);
    return;

  exit:
    return;
}



procedure zd_tx_timeout_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p14: ref, out_$p15: ref);



implementation zd_op_stop_loop_$bb4(in_$p3: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$p11 := in_$p12, in_$i13, in_$i14, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1940;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p12;
    goto $bb6_dummy;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} out_$p12 := skb_dequeue(in_$p3);
    goto corral_source_split_1943;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} dev_kfree_skb_any(out_$p11);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$p11 := zd_op_stop_loop_$bb4(in_$p3, out_$p12, out_$i13, out_$i14, out_$p11);
    return;

  exit:
    return;
}



procedure zd_op_stop_loop_$bb4(in_$p3: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p11: ref);



implementation zd_ioread32v_locked_loop_$bb27(in_$p1: ref, in_$i3: i32, in_$p5: ref, in_$i53: i32, in_$i54: i64, in_$p55: ref, in_$i56: i16, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i16, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i52: i32) returns (out_$i53: i32, out_$i54: i64, out_$p55: ref, out_$i56: i16, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i16, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i52: i32)
{

  entry:
    out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i52 := in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i52;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2042;

  $bb29:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := out_$i67;
    goto $bb29_dummy;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$i68 := $ult.i32(out_$i67, in_$i3);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i52, 1);
    call {:si_unique_call 505} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, out_$p66, out_$i64);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(in_$p1, $mul.ref(out_$i65, 4));
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i52);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$i64 := $or.i32(out_$i58, out_$i63);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i16.i32(out_$i62);
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i16($M.25, out_$p61);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p5, $mul.ref(0, 28)), $mul.ref(out_$i60, 2));
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i59);
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i53, 1);
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$i58 := $shl.i32(out_$i57, 16);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i16.i32(out_$i56);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i16($M.25, out_$p55);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p5, $mul.ref(0, 28)), $mul.ref(out_$i54, 2));
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i53);
    goto corral_source_split_2045;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i53 := $mul.i32(out_$i52, 2);
    call {:si_unique_call 504} {:cexpr "j___0"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i52 := zd_ioread32v_locked_loop_$bb27(in_$p1, in_$i3, in_$p5, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i52);
    return;

  exit:
    return;
}



procedure zd_ioread32v_locked_loop_$bb27(in_$p1: ref, in_$i3: i32, in_$p5: ref, in_$i53: i32, in_$i54: i64, in_$p55: ref, in_$i56: i16, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i16, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i52: i32) returns (out_$i53: i32, out_$i54: i64, out_$p55: ref, out_$i56: i16, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i16, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i52: i32);
  modifies $M.23;



implementation zd_ioread32v_locked_loop_$bb16(in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i16, in_$i31: i16, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i24: i32) returns (out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i16, out_$i31: i16, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i24: i32)
{

  entry:
    out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i24 := in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i24;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  $bb18:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i40;
    goto $bb18_dummy;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$i41 := $ult.i32(out_$i40, in_$i3);
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i24, 1);
    call {:si_unique_call 500} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.24 := $store.i16($M.24, out_$p39, out_$i36);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p4, $mul.ref(0, 28)), $mul.ref(out_$i38, 2));
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i25, 1);
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i16($M.22, out_$p35);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(in_$p2, $mul.ref(out_$i34, 2));
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.24 := $store.i16($M.24, out_$p33, out_$i31);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p4, $mul.ref(0, 28)), $mul.ref(out_$i32, 2));
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} out_$i31 := inc_addr(out_$i30);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i32.i16(out_$i29);
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i28);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i16($M.22, out_$p27);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(in_$p2, $mul.ref(out_$i26, 2));
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2006;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i25 := $mul.i32(out_$i24, 2);
    call {:si_unique_call 498} {:cexpr "j"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i24 := zd_ioread32v_locked_loop_$bb16(in_$p2, in_$i3, in_$p4, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i24);
    return;

  exit:
    return;
}



procedure zd_ioread32v_locked_loop_$bb16(in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i16, in_$i31: i16, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i24: i32) returns (out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i16, out_$i31: i16, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i24: i32);
  modifies $M.24;



implementation zd_ioread32v_locked_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} zd_ioread32v_locked_loop_$bb11();
    return;

  exit:
    return;
}



procedure zd_ioread32v_locked_loop_$bb11();



implementation zd_ioread32v_locked_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} zd_ioread32v_locked_loop_$bb7();
    return;

  exit:
    return;
}



procedure zd_ioread32v_locked_loop_$bb7();



implementation zd_usb_ioread16v_loop_$bb35(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$i69: i32, in_$p71: ref, in_$p84: ref, in_$i89: i32, in_$i88: i32, in_$i95: i32, in_$i96: i1, in_$i102: i64, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$i112: i32, in_$i113: i8, in_$i114: i1, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$i121: i32, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$i115: i32, in_vslice_dummy_var_135: i32) returns (out_$i89: i32, out_$i88: i32, out_$i95: i32, out_$i96: i1, out_$i102: i64, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$i112: i32, out_$i113: i8, out_$i114: i1, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$i121: i32, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$i115: i32, out_vslice_dummy_var_135: i32)
{

  entry:
    out_$i89, out_$i88, out_$i95, out_$i96, out_$i102, out_$p105, out_$i106, out_$i107, out_$i112, out_$i113, out_$i114, out_$i116, out_$p117, out_$p118, out_$p119, out_$i121, out_$p122, out_$i123, out_$i124, out_$i115, out_vslice_dummy_var_135 := in_$i89, in_$i88, in_$i95, in_$i96, in_$i102, in_$p105, in_$i106, in_$i107, in_$i112, in_$i113, in_$i114, in_$i116, in_$p117, in_$p118, in_$p119, in_$i121, in_$p122, in_$i123, in_$i124, in_$i115, in_vslice_dummy_var_135;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb50:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := out_$i121;
    goto $bb50_dummy;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    out_$i89 := out_$i123;
    assume true;
    goto $bb50;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    out_$i124 := $ne.i32(out_$i123, 0);
    goto corral_source_split_2308;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} out_$i123 := zd_ep_regs_out_msg(out_$p122, in_$p84, in_$i69, in_$p4, 50);
    call {:si_unique_call 570} {:cexpr "r"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_2307;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} prepare_read_regs_int(in_$p0, in_$p71, in_$i3);
    goto corral_source_split_2306;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} out_$p122 := zd_usb_to_usbdev(in_$p0);
    goto corral_source_split_2305;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    out_$i121 := $add.i32(out_$i88, 1);
    call {:si_unique_call 566} {:cexpr "try_count"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_2304;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} out_vslice_dummy_var_135 := dev_printk.ref.ref.ref.ref.i32(.str.6, out_$p119, .str.83, .str.75, out_$i88);
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p118, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_2302;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.0, out_$p117);
    goto corral_source_split_2301;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11272)), $mul.ref(11000, 1));
    goto corral_source_split_2300;

  $bb48:
    assume out_$i116 == 1;
    goto corral_source_split_2299;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    out_$i115 := out_$i112;
    assume true;
    goto $bb48;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$i116 := $sle.i32(out_$i88, 19);
    goto corral_source_split_2297;

  $bb45:
    assume out_$i114 == 1;
    goto corral_source_split_2296;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    out_$i115 := out_$i112;
    assume true;
    goto $bb45;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    out_$i114 := $trunc.i8.i1(out_$i113);
    goto corral_source_split_2294;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i8($M.27, in_$p5);
    goto corral_source_split_2293;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} out_$i112 := get_results(in_$p0, in_$p1, in_$p71, in_$i3, in_$p5);
    call {:si_unique_call 564} {:cexpr "r"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_2292;

  $bb43:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i64(out_$i106, 0);
    goto corral_source_split_2283;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} out_$i106 := wait_for_completion_timeout(out_$p105, out_$i102);
    call {:si_unique_call 560} {:cexpr "timeout"} boogie_si_record_i64(out_$i106);
    goto corral_source_split_2282;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 11272)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2281;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} out_$i102 := msecs_to_jiffies(50);
    call {:si_unique_call 558} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i102);
    goto corral_source_split_2280;

  $bb40:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(in_$i69, out_$i95);
    goto corral_source_split_2271;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i32($M.28, in_$p4);
    goto corral_source_split_2270;

  $bb50_dummy:
    call {:si_unique_call 1} out_$i89, out_$i88, out_$i95, out_$i96, out_$i102, out_$p105, out_$i106, out_$i107, out_$i112, out_$i113, out_$i114, out_$i116, out_$p117, out_$p118, out_$p119, out_$i121, out_$p122, out_$i123, out_$i124, out_$i115, out_vslice_dummy_var_135 := zd_usb_ioread16v_loop_$bb35(in_$p0, in_$p1, in_$i3, in_$p4, in_$p5, in_$i69, in_$p71, in_$p84, out_$i89, out_$i88, out_$i95, out_$i96, out_$i102, out_$p105, out_$i106, out_$i107, out_$i112, out_$i113, out_$i114, out_$i116, out_$p117, out_$p118, out_$p119, out_$i121, out_$p122, out_$i123, out_$i124, out_$i115, out_vslice_dummy_var_135);
    return;

  exit:
    return;
}



procedure zd_usb_ioread16v_loop_$bb35(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$i69: i32, in_$p71: ref, in_$p84: ref, in_$i89: i32, in_$i88: i32, in_$i95: i32, in_$i96: i1, in_$i102: i64, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$i112: i32, in_$i113: i8, in_$i114: i1, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$i121: i32, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$i115: i32, in_vslice_dummy_var_135: i32) returns (out_$i89: i32, out_$i88: i32, out_$i95: i32, out_$i96: i1, out_$i102: i64, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$i112: i32, out_$i113: i8, out_$i114: i1, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$i121: i32, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$i115: i32, out_vslice_dummy_var_135: i32);
  modifies $M.0, $M.27;



implementation zd_usb_ioread16v_loop_$bb27(in_$p2: ref, in_$i3: i32, in_$p71: ref, in_$i75: i64, in_$p76: ref, in_$i77: i16, in_$i78: i64, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$i74: i32) returns (out_$i75: i64, out_$p76: ref, out_$i77: i16, out_$i78: i64, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$i74: i32)
{

  entry:
    out_$i75, out_$p76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i74 := in_$i75, in_$p76, in_$i77, in_$i78, in_$p80, in_$i81, in_$i82, in_$i74;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;

  $bb29:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := out_$i81;
    goto $bb29_dummy;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$i82 := $ult.i32(out_$i81, in_$i3);
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i74, 1);
    call {:si_unique_call 550} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p80, out_$i77);
    goto corral_source_split_2246;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref(in_$p71, $mul.ref(0, 2)), $mul.ref(2, 1)), $mul.ref(out_$i78, 2));
    goto corral_source_split_2245;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i74);
    goto corral_source_split_2244;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i16($M.24, out_$p76);
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(in_$p2, $mul.ref(out_$i75, 2));
    goto corral_source_split_2242;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i74);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i75, out_$p76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i74 := zd_usb_ioread16v_loop_$bb27(in_$p2, in_$i3, in_$p71, out_$i75, out_$p76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i74);
    return;

  exit:
    return;
}



procedure zd_usb_ioread16v_loop_$bb27(in_$p2: ref, in_$i3: i32, in_$p71: ref, in_$i75: i64, in_$p76: ref, in_$i77: i16, in_$i78: i64, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$i74: i32) returns (out_$i75: i64, out_$p76: ref, out_$i77: i16, out_$i78: i64, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$i74: i32);
  modifies $M.0;



implementation zd_usb_ioread16v_loop_$bb22()
{

  entry:
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb22_dummy:
    call {:si_unique_call 1} zd_usb_ioread16v_loop_$bb22();
    return;

  exit:
    return;
}



procedure zd_usb_ioread16v_loop_$bb22();



implementation get_results_loop_$bb14(in_$p1: ref, in_$i3: i32, in_$p8: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i35: i16, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i29: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i35: i16, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i29: i32)
{

  entry:
    out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i29 := in_$p30, in_$p31, in_$i32, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i29;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2407;

  $bb16:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i38;
    goto $bb16_dummy;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    out_$i39 := $ult.i32(out_$i38, in_$i3);
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i29, 1);
    call {:si_unique_call 611} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p37, out_$i35);
    goto corral_source_split_2417;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(in_$p1, $mul.ref(out_$i36, 2));
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i29);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.0, out_$p34);
    goto corral_source_split_2414;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 4)), $mul.ref(2, 1));
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto corral_source_split_2412;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i29);
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_2410;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p8, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i29 := get_results_loop_$bb14(in_$p1, in_$i3, in_$p8, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i29);
    return;

  exit:
    return;
}



procedure get_results_loop_$bb14(in_$p1: ref, in_$i3: i32, in_$p8: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i35: i16, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i29: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i35: i16, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i29: i32);
  modifies $M.0;



implementation check_read_regs_loop_$bb11(in_$p1: ref, in_$i2: i32, in_$p6: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$p44: ref, in_$i57: i32, in_$i58: i1, in_$i29: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$p44: ref, out_$i57: i32, out_$i58: i1, out_$i29: i32)
{

  entry:
    out_$p30, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i57, out_$i58, out_$i29 := in_$p30, in_$p31, in_$i32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i57, in_$i58, in_$i29;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2455;

  $bb16:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i57;
    goto $bb16_dummy;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$i58 := $ult.i32(out_$i57, in_$i2);
    goto corral_source_split_2484;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i29, 1);
    call {:si_unique_call 620} {:cexpr "i"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_2483;

  $bb14:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    out_$i43, out_$p44 := out_$i29, out_$p33;
    assume true;
    goto $bb14;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i36, out_$i41);
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, out_$p39);
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 2)), $mul.ref(2, 1)), $mul.ref(out_$i37, 2));
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i29);
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i35);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.0, out_$p34);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 4)), $mul.ref(0, 1));
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p31, $mul.ref(out_$i32, 4));
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i29);
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_2458;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i57, out_$i58, out_$i29 := check_read_regs_loop_$bb11(in_$p1, in_$i2, in_$p6, out_$p30, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i57, out_$i58, out_$i29);
    return;

  exit:
    return;
}



procedure check_read_regs_loop_$bb11(in_$p1: ref, in_$i2: i32, in_$p6: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$p44: ref, in_$i57: i32, in_$i58: i1, in_$i29: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$p44: ref, out_$i57: i32, out_$i58: i1, out_$i29: i32);



implementation _zd_iowrite32v_async_locked_loop_$bb21(in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$i42: i32, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i16, in_$i49: i64, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i16, in_$i58: i16, in_$i59: i64, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i64, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$i74: i16, in_$i75: i32, in_$i76: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i41: i32) returns (out_$i42: i32, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i16, out_$i49: i64, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i16, out_$i58: i16, out_$i59: i64, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i64, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$i74: i16, out_$i75: i32, out_$i76: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i41: i32)
{

  entry:
    out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i76, out_$p78, out_$i79, out_$i80, out_$i41 := in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p51, in_$i52, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p61, in_$i62, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p70, in_$i71, in_$p73, in_$i74, in_$i75, in_$i76, in_$p78, in_$i79, in_$i80, in_$i41;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2850;

  $bb23:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := out_$i79;
    goto $bb23_dummy;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    out_$i80 := $ult.i32(out_$i79, in_$i2);
    goto corral_source_split_2890;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i41, 1);
    call {:si_unique_call 727} {:cexpr "i"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_2889;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, out_$p78, out_$i74);
    goto corral_source_split_2888;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 56)), $mul.ref(out_$i76, 4)), $mul.ref(0, 1));
    goto corral_source_split_2887;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i75);
    goto corral_source_split_2886;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i42, 1);
    goto corral_source_split_2885;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i16($M.0, out_$p73);
    goto corral_source_split_2884;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i71, 8)), $mul.ref(0, 1));
    goto corral_source_split_2883;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    goto corral_source_split_2882;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i41);
    goto corral_source_split_2881;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, out_$p70, out_$i66);
    goto corral_source_split_2880;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 56)), $mul.ref(out_$i68, 4)), $mul.ref(2, 1));
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i67);
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i42, 1);
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i16(out_$i65);
    goto corral_source_split_2876;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_2875;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i62, 8)), $mul.ref(4, 1));
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i41);
    goto corral_source_split_2872;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, out_$p61, out_$i58);
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 56)), $mul.ref(out_$i59, 4)), $mul.ref(0, 1));
    goto corral_source_split_2870;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i42);
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} out_$i58 := inc_addr(out_$i57);
    goto corral_source_split_2868;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i32.i16(out_$i56);
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i16.i32(out_$i55);
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i16($M.0, out_$p54);
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i52, 8)), $mul.ref(0, 1));
    goto corral_source_split_2864;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    goto corral_source_split_2863;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i41);
    goto corral_source_split_2862;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, out_$p51, out_$i48);
    goto corral_source_split_2861;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 56)), $mul.ref(out_$i49, 4)), $mul.ref(2, 1));
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i42);
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i32.i16(out_$i47);
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$i47 := $lshr.i32(out_$i46, 16);
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_2856;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i43, 8)), $mul.ref(4, 1));
    goto corral_source_split_2855;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    goto corral_source_split_2854;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i41);
    goto corral_source_split_2853;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i42 := $mul.i32(out_$i41, 2);
    call {:si_unique_call 725} {:cexpr "j"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_2852;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i76, out_$p78, out_$i79, out_$i80, out_$i41 := _zd_iowrite32v_async_locked_loop_$bb21(in_$p1, in_$i2, in_$p3, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i76, out_$p78, out_$i79, out_$i80, out_$i41);
    return;

  exit:
    return;
}



procedure _zd_iowrite32v_async_locked_loop_$bb21(in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$i42: i32, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i16, in_$i49: i64, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i16, in_$i58: i16, in_$i59: i64, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i64, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$i74: i16, in_$i75: i32, in_$i76: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i41: i32) returns (out_$i42: i32, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i16, out_$i49: i64, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i16, out_$i58: i16, out_$i59: i64, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i64, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$i74: i16, out_$i75: i32, out_$i76: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i41: i32);
  modifies $M.30, $M.29;



implementation _zd_iowrite32v_async_locked_loop_$bb16()
{

  entry:
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;

  $bb16_dummy:
    call {:si_unique_call 1} _zd_iowrite32v_async_locked_loop_$bb16();
    return;

  exit:
    return;
}



procedure _zd_iowrite32v_async_locked_loop_$bb16();



implementation zd_usb_iowrite16v_async_loop_$bb36(in_$p1: ref, in_$i2: i32, in_$p85: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i96: i64, in_$p98: ref, in_$i99: i16, in_$p100: ref, in_$i101: i64, in_$p103: ref, in_$i104: i16, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i91: i32) returns (out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i96: i64, out_$p98: ref, out_$i99: i16, out_$p100: ref, out_$i101: i64, out_$p103: ref, out_$i104: i16, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i91: i32)
{

  entry:
    out_$p92, out_$p93, out_$i94, out_$i96, out_$p98, out_$i99, out_$p100, out_$i101, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i91 := in_$p92, in_$p93, in_$i94, in_$i96, in_$p98, in_$i99, in_$p100, in_$i101, in_$p103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i91;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3207;

  $bb38:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := out_$i106;
    goto $bb38_dummy;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$i107 := $ult.i32(out_$i106, in_$i2);
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i32(out_$i91, 1);
    call {:si_unique_call 797} {:cexpr "i"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p105, out_$i104);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p93, $mul.ref(out_$i94, 4)), $mul.ref(2, 1));
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i16($M.29, out_$p103);
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i101, 4)), $mul.ref(2, 1));
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i91);
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p100, out_$i99);
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p93, $mul.ref(out_$i94, 4)), $mul.ref(0, 1));
    goto corral_source_split_3217;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i16($M.30, out_$p98);
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i96, 4)), $mul.ref(0, 1));
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i91);
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i91);
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$p93 := $bitcast.ref.ref(out_$p92);
    goto corral_source_split_3210;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p85, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p92, out_$p93, out_$i94, out_$i96, out_$p98, out_$i99, out_$p100, out_$i101, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i91 := zd_usb_iowrite16v_async_loop_$bb36(in_$p1, in_$i2, in_$p85, out_$p92, out_$p93, out_$i94, out_$i96, out_$p98, out_$i99, out_$p100, out_$i101, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i91);
    return;

  exit:
    return;
}



procedure zd_usb_iowrite16v_async_loop_$bb36(in_$p1: ref, in_$i2: i32, in_$p85: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i96: i64, in_$p98: ref, in_$i99: i16, in_$p100: ref, in_$i101: i64, in_$p103: ref, in_$i104: i16, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i91: i32) returns (out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i96: i64, out_$p98: ref, out_$i99: i16, out_$p100: ref, out_$i101: i64, out_$p103: ref, out_$i104: i16, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i91: i32);
  modifies $M.0;



implementation zd_iowrite32a_locked_loop_$bb12(in_$p1: ref, in_$i8: i32, in_$i12: i32, in_$i13: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i22: i32, in_$i23: i1, in_$i11: i32, in_$i24: i32, in_$i5: i32) returns (out_$i12: i32, out_$i13: i64, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i22: i32, out_$i23: i1, out_$i11: i32, out_$i24: i32)
{

  entry:
    out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24 := in_$i12, in_$i13, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i22, in_$i23, in_$i11, in_$i24;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3370;

  $bb18:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i22;
    goto $bb18_dummy;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    assume true;
    goto $bb18;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    out_$i23 := $ult.i32(out_$i22, in_$i8);
    goto corral_source_split_3389;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i11, 1);
    call {:si_unique_call 829} {:cexpr "j"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_3388;

  $bb15:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i11;
    assume true;
    goto $bb15;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, out_$p15);
    goto corral_source_split_3376;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i13, 8)), $mul.ref(0, 1));
    goto corral_source_split_3375;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    goto corral_source_split_3374;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i12);
    goto corral_source_split_3373;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(in_$i5, out_$i11);
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24 := zd_iowrite32a_locked_loop_$bb12(in_$p1, in_$i8, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24, in_$i5);
    return;

  exit:
    return;
}



procedure zd_iowrite32a_locked_loop_$bb12(in_$p1: ref, in_$i8: i32, in_$i12: i32, in_$i13: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i22: i32, in_$i23: i1, in_$i11: i32, in_$i24: i32, in_$i5: i32) returns (out_$i12: i32, out_$i13: i64, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i22: i32, out_$i23: i1, out_$i11: i32, out_$i24: i32);



implementation zd_iowrite32a_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i12: i32, in_$i13: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i22: i32, in_$i23: i1, in_$i11: i32, in_$i24: i32, in_$i10: i32, in_$i20: i32, in_$i21: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i12: i32, out_$i13: i64, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i22: i32, out_$i23: i1, out_$i11: i32, out_$i24: i32, out_$i10: i32, out_$i20: i32, out_$i21: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i9, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24, out_$i10, out_$i20, out_$i21, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i38, out_$i39, out_$i40, out_$i5 := in_$i6, in_$i7, in_$i8, in_$i9, in_$i12, in_$i13, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i22, in_$i23, in_$i11, in_$i24, in_$i10, in_$i20, in_$i21, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i38, in_$i39, in_$i40, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3358;

  $bb25:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i39;
    goto $bb25_dummy;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    out_$i40 := $ult.i32(out_$i39, in_$i2);
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i38, out_$i5);
    call {:si_unique_call 832} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3404;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i20, out_$i21);
    goto corral_source_split_3403;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i27;
    assume true;
    goto $bb22;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_3386;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} out_$i27 := _zd_iowrite32v_async_locked(in_$p0, out_$p26, out_$i20);
    call {:si_unique_call 828} {:cexpr "r"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(in_$p1, $mul.ref(out_$i25, 8));
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i32.i64(out_$i5);
    goto corral_source_split_3383;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3382;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i10, 0;
    goto $bb16;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i19, 1;
    goto $bb16;

  $bb14:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i11;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, out_$p15);
    goto corral_source_split_3376;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i13, 8)), $mul.ref(0, 1));
    goto corral_source_split_3375;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    goto corral_source_split_3374;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i12);
    goto corral_source_split_3373;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i5, out_$i11);
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    call out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24 := zd_iowrite32a_locked_loop_$bb12(in_$p1, out_$i8, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24, out_$i5);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3370;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    out_$i11 := 0;
    goto $bb12;

  $bb18:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i22;
    assume false;
    return;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    out_$i23 := $ult.i32(out_$i22, out_$i8);
    goto corral_source_split_3389;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i11, 1);
    call {:si_unique_call 829} {:cexpr "j"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_3388;

  $bb15:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume out_$i9 == 1;
    goto corral_source_split_3368;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    out_$i10 := 0;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    out_$i9 := $ult.i32(0, out_$i8);
    goto corral_source_split_3366;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3365;

  $bb7:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := out_$i6;
    goto $bb8;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$i8 := 7;
    goto $bb8;

  $bb6:
    assume out_$i7 == 1;
    goto corral_source_split_3363;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    out_$i7 := $ugt.i32(out_$i6, 7);
    goto corral_source_split_3361;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sub.i32(in_$i2, out_$i5);
    call {:si_unique_call 826} {:cexpr "max"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_3360;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb11;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i24;
    goto $bb11;

  $bb19:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3391;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i9, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24, out_$i10, out_$i20, out_$i21, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i38, out_$i39, out_$i40, out_$i5 := zd_iowrite32a_locked_loop_$bb4(in_$p0, in_$p1, in_$i2, out_$i6, out_$i7, out_$i8, out_$i9, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24, out_$i10, out_$i20, out_$i21, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i38, out_$i39, out_$i40, out_$i5);
    return;

  exit:
    return;
}



procedure zd_iowrite32a_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i12: i32, in_$i13: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i22: i32, in_$i23: i1, in_$i11: i32, in_$i24: i32, in_$i10: i32, in_$i20: i32, in_$i21: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i12: i32, out_$i13: i64, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i22: i32, out_$i23: i1, out_$i11: i32, out_$i24: i32, out_$i10: i32, out_$i20: i32, out_$i21: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i5: i32);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30, $M.0, $CurrAddr;



implementation zd_mac_config_beacon_loop_$bb62(in_$i4: i8, in_$p5: ref, in_$i134: i64, in_$i139: i1, in_$i140: i64, in_$i141: i64, in_$i142: i1, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$i147: i32) returns (out_$i139: i1, out_$i140: i64, out_$i141: i64, out_$i142: i1, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$i147: i32)
{

  entry:
    out_$i139, out_$i140, out_$i141, out_$i142, out_$p144, out_$i145, out_$i146, out_$i147 := in_$i139, in_$i140, in_$i141, in_$i142, in_$p144, in_$i145, in_$i146, in_$i147;
    goto $bb62, exit;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb71:
    assume {:verifier.code 0} true;
    assume out_$i146 == 1;
    goto $bb71_dummy;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i145;
    assume true;
    goto $bb71;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i145, 0);
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} out_$i145 := zd_iowrite32_locked(out_$p144, 1, $sub.i16(0, 26988));
    call {:si_unique_call 891} {:cexpr "ret"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p5, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3656;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} msleep(20);
    goto corral_source_split_3655;

  $bb68:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$i142 := $sge.i64(out_$i141, 0);
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$i141 := $sub.i64(out_$i140, in_$i134);
    goto corral_source_split_3649;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i64($M.9, jiffies);
    goto corral_source_split_3648;

  $bb66:
    assume !(out_$i139 == 1);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i139 := $trunc.i8.i1(in_$i4);
    goto corral_source_split_3645;

  $bb71_dummy:
    call {:si_unique_call 1} out_$i139, out_$i140, out_$i141, out_$i142, out_$p144, out_$i145, out_$i146, out_$i147 := zd_mac_config_beacon_loop_$bb62(in_$i4, in_$p5, in_$i134, out_$i139, out_$i140, out_$i141, out_$i142, out_$p144, out_$i145, out_$i146, out_$i147);
    return;

  exit:
    return;
}



procedure zd_mac_config_beacon_loop_$bb62(in_$i4: i8, in_$p5: ref, in_$i134: i64, in_$i139: i1, in_$i140: i64, in_$i141: i64, in_$i142: i1, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$i147: i32) returns (out_$i139: i1, out_$i140: i64, out_$i141: i64, out_$i142: i1, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$i147: i32);
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.29, $M.30;



implementation zd_mac_config_beacon_loop_$bb57()
{

  entry:
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb57_dummy;

  $bb57_dummy:
    call {:si_unique_call 1} zd_mac_config_beacon_loop_$bb57();
    return;

  exit:
    return;
}



procedure zd_mac_config_beacon_loop_$bb57();



implementation zd_mac_config_beacon_loop_$bb46(in_$p1: ref, in_$p23: ref, in_$p95: ref, in_$i101: i64, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p107: ref, in_$i108: i8, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i99: i32, in_$i100: i32, in_$i117: i32) returns (out_$i101: i64, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p107: ref, out_$i108: i8, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i99: i32, out_$i100: i32, out_$i117: i32)
{

  entry:
    out_$i101, out_$p103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i99, out_$i100, out_$i117 := in_$i101, in_$p103, in_$p104, in_$p105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i99, in_$i100, in_$i117;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3589;

  $bb48:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i99, out_$i100 := out_$i114, out_$i113;
    goto $bb48_dummy;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i117 := out_$i113;
    assume true;
    goto $bb48;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$i116 := $ugt.i32(out_$i115, out_$i114);
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.0, in_$p95);
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i99, 1);
    call {:si_unique_call 882} {:cexpr "j"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i100, 1);
    call {:si_unique_call 881} {:cexpr "req_pos"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p112, out_$i109);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p23, $mul.ref(out_$i110, 8)), $mul.ref(4, 1));
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i100);
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i8.i32(out_$i108);
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i8($M.0, out_$p107);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref(out_$p105, $mul.ref(out_$i106, 1));
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i32.i64(out_$i99);
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_3596;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p1, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p103, $sub.i16(0, 27024));
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p23, $mul.ref(out_$i101, 8)), $mul.ref(0, 1));
    goto corral_source_split_3593;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    goto corral_source_split_3592;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i100);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i101, out_$p103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i99, out_$i100, out_$i117 := zd_mac_config_beacon_loop_$bb46(in_$p1, in_$p23, in_$p95, out_$i101, out_$p103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i99, out_$i100, out_$i117);
    return;

  exit:
    return;
}



procedure zd_mac_config_beacon_loop_$bb46(in_$p1: ref, in_$p23: ref, in_$p95: ref, in_$i101: i64, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p107: ref, in_$i108: i8, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i99: i32, in_$i100: i32, in_$i117: i32) returns (out_$i101: i64, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p107: ref, out_$i108: i8, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i99: i32, out_$i100: i32, out_$i117: i32);
  modifies $M.0;



implementation zd_mac_config_beacon_loop_$bb25(in_$p3: ref, in_$p5: ref, in_$i40: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i64, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$i71: i64, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i46: i64, in_vslice_dummy_var_159: i32) returns (out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i64, out_$i55: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$i71: i64, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i46: i64, out_vslice_dummy_var_159: i32)
{

  entry:
    out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$p59, out_$p60, out_$i62, out_$i63, out_$i64, out_$i71, out_$i72, out_$i73, out_$i74, out_$i46, out_vslice_dummy_var_159 := in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p58, in_$p59, in_$p60, in_$i62, in_$i63, in_$i64, in_$i71, in_$i72, in_$i73, in_$i74, in_$i46, in_vslice_dummy_var_159;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3505;

  $bb37:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i71;
    goto $bb37_dummy;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$i73 := $and.i32(out_$i72, 2);
    goto corral_source_split_3551;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.23, in_$p3);
    goto corral_source_split_3550;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} msleep(20);
    goto corral_source_split_3549;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3548;

  $bb31:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := out_$i46;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i71 := out_$i55;
    goto $bb36;

  $bb33:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    out_$i64 := $sge.i64(out_$i63, 0);
    goto corral_source_split_3526;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    out_$i63 := $sub.i64(out_$i62, in_$i40);
    goto corral_source_split_3525;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i64($M.9, jiffies);
    goto corral_source_split_3524;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} out_vslice_dummy_var_159 := dev_err.ref.ref(out_$p60, .str.152);
    goto corral_source_split_3523;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_3522;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_3521;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 13336)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11000, 1));
    goto corral_source_split_3520;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i54, 25);
    call {:si_unique_call 867} {:cexpr "message_jiffies"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_3519;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i64($M.9, jiffies);
    goto corral_source_split_3518;

  $bb30:
    assume out_$i53 == 1;
    goto corral_source_split_3517;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    out_$i53 := $sge.i64(out_$i52, 0);
    goto corral_source_split_3515;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i64(out_$i51, out_$i46);
    goto corral_source_split_3514;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.9, jiffies);
    goto corral_source_split_3513;

  $bb28:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i48;
    assume true;
    goto $bb28;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i48, 0);
    goto corral_source_split_3509;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} out_$i48 := zd_ioread32_locked(out_$p47, in_$p3, $sub.i16(0, 26988));
    call {:si_unique_call 866} {:cexpr "r"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3508;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p5, $mul.ref(0, 13336)), $mul.ref(0, 1));
    goto corral_source_split_3507;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$p59, out_$p60, out_$i62, out_$i63, out_$i64, out_$i71, out_$i72, out_$i73, out_$i74, out_$i46, out_vslice_dummy_var_159 := zd_mac_config_beacon_loop_$bb25(in_$p3, in_$p5, in_$i40, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$p59, out_$p60, out_$i62, out_$i63, out_$i64, out_$i71, out_$i72, out_$i73, out_$i74, out_$i46, out_vslice_dummy_var_159);
    return;

  exit:
    return;
}



procedure zd_mac_config_beacon_loop_$bb25(in_$p3: ref, in_$p5: ref, in_$i40: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i64, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$i71: i64, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i46: i64, in_vslice_dummy_var_159: i32) returns (out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i64, out_$i55: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$i71: i64, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i46: i64, out_vslice_dummy_var_159: i32);
  modifies $M.22, $M.24, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.27, $M.0;



implementation zd_iowrite16a_locked_loop_$bb18(in_$p1: ref, in_$i33: i32, in_$i37: i32, in_$i38: i64, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i47: i32, in_$i48: i1, in_$i36: i32, in_$i49: i32, in_$i30: i32) returns (out_$i37: i32, out_$i38: i64, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i47: i32, out_$i48: i1, out_$i36: i32, out_$i49: i32)
{

  entry:
    out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$i48, out_$i36, out_$i49 := in_$i37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i47, in_$i48, in_$i36, in_$i49;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4672;

  $bb24:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i47;
    goto $bb24_dummy;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i47;
    assume true;
    goto $bb24;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    out_$i48 := $ult.i32(out_$i47, in_$i33);
    goto corral_source_split_4692;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i36, 1);
    call {:si_unique_call 1151} {:cexpr "j"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4691;

  $bb21:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i36;
    assume true;
    goto $bb21;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_4680;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i41);
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i16($M.30, out_$p40);
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i38, 4)), $mul.ref(0, 1));
    goto corral_source_split_4677;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    goto corral_source_split_4676;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i37);
    goto corral_source_split_4675;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(in_$i30, out_$i36);
    goto corral_source_split_4674;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$i48, out_$i36, out_$i49 := zd_iowrite16a_locked_loop_$bb18(in_$p1, in_$i33, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$i48, out_$i36, out_$i49, in_$i30);
    return;

  exit:
    return;
}



procedure zd_iowrite16a_locked_loop_$bb18(in_$p1: ref, in_$i33: i32, in_$i37: i32, in_$i38: i64, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i47: i32, in_$i48: i1, in_$i36: i32, in_$i49: i32, in_$i30: i32) returns (out_$i37: i32, out_$i38: i64, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i47: i32, out_$i48: i1, out_$i36: i32, out_$i49: i32);



implementation zd_iowrite16a_locked_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i37: i32, in_$i38: i64, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i47: i32, in_$i48: i1, in_$i36: i32, in_$i49: i32, in_$i35: i32, in_$i45: i32, in_$i46: i32, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i30: i32) returns (out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i37: i32, out_$i38: i64, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i47: i32, out_$i48: i1, out_$i36: i32, out_$i49: i32, out_$i35: i32, out_$i45: i32, out_$i46: i32, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i30: i32)
{

  entry:
    out_$i31, out_$i32, out_$i33, out_$i34, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$i48, out_$i36, out_$i49, out_$i35, out_$i45, out_$i46, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i64, out_$i65, out_$i66, out_$i30 := in_$i31, in_$i32, in_$i33, in_$i34, in_$i37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i47, in_$i48, in_$i36, in_$i49, in_$i35, in_$i45, in_$i46, in_$p50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i64, in_$i65, in_$i66, in_$i30;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4660;

  $bb31:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i65;
    goto $bb31_dummy;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    out_$i66 := $ult.i32(out_$i65, in_$i2);
    goto corral_source_split_4708;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i64, out_$i30);
    call {:si_unique_call 1154} {:cexpr "i"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_4707;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i45, out_$i46);
    goto corral_source_split_4706;

  $bb28:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i53;
    assume true;
    goto $bb28;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_4689;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} out_$i53 := zd_usb_iowrite16v_async(out_$p50, out_$p52, out_$i45);
    call {:si_unique_call 1150} {:cexpr "r"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_4688;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(in_$p1, $mul.ref(out_$i51, 4));
    goto corral_source_split_4687;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i32.i64(out_$i30);
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4685;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4684;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i35, 0;
    goto $bb22;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i44, 1;
    goto $bb22;

  $bb20:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4682;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i36;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_4680;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i41);
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i16($M.30, out_$p40);
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i38, 4)), $mul.ref(0, 1));
    goto corral_source_split_4677;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    goto corral_source_split_4676;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i37);
    goto corral_source_split_4675;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i30, out_$i36);
    goto corral_source_split_4674;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    call out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$i48, out_$i36, out_$i49 := zd_iowrite16a_locked_loop_$bb18(in_$p1, out_$i33, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$i48, out_$i36, out_$i49, out_$i30);
    goto $bb18_last;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4672;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    out_$i36 := 0;
    goto $bb18;

  $bb24:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i47;
    assume false;
    return;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i47;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    out_$i48 := $ult.i32(out_$i47, out_$i33);
    goto corral_source_split_4692;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i36, 1);
    call {:si_unique_call 1151} {:cexpr "j"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4691;

  $bb21:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume out_$i34 == 1;
    goto corral_source_split_4670;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    out_$i35 := 0;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    out_$i34 := $ult.i32(0, out_$i33);
    goto corral_source_split_4668;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4667;

  $bb13:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := out_$i31;
    goto $bb14;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    out_$i33 := 15;
    goto $bb14;

  $bb12:
    assume out_$i32 == 1;
    goto corral_source_split_4665;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    out_$i32 := $ugt.i32(out_$i31, 15);
    goto corral_source_split_4663;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i31 := $sub.i32(in_$i2, out_$i30);
    call {:si_unique_call 1148} {:cexpr "max"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_4662;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb17;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i49;
    goto $bb17;

  $bb25:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4694;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$i33, out_$i34, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$i48, out_$i36, out_$i49, out_$i35, out_$i45, out_$i46, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i64, out_$i65, out_$i66, out_$i30 := zd_iowrite16a_locked_loop_$bb10(in_$p0, in_$p1, in_$i2, out_$i31, out_$i32, out_$i33, out_$i34, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$i48, out_$i36, out_$i49, out_$i35, out_$i45, out_$i46, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i64, out_$i65, out_$i66, out_$i30);
    return;

  exit:
    return;
}



procedure zd_iowrite16a_locked_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i37: i32, in_$i38: i64, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i47: i32, in_$i48: i1, in_$i36: i32, in_$i49: i32, in_$i35: i32, in_$i45: i32, in_$i46: i32, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i30: i32) returns (out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i37: i32, out_$i38: i64, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i47: i32, out_$i48: i1, out_$i36: i32, out_$i49: i32, out_$i35: i32, out_$i45: i32, out_$i46: i32, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i30: i32);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation zd_mac_tx_failed_loop_$bb47(in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p19: ref, in_$i117: i32, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i8, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i8, in_$i139: i8, in_$i140: i32, in_$i141: i1, in_$i125: i32) returns (out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i8, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i8, out_$i139: i8, out_$i140: i32, out_$i141: i1, out_$i125: i32)
{

  entry:
    out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i125 := in_$p126, in_$p127, in_$p128, in_$i129, in_$i130, in_$i131, in_$p132, in_$i133, in_$i134, in_$i135, in_$p136, in_$p137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i125;
    goto $bb47, exit;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_6046;

  $bb55:
    assume out_$i141 == 1;
    assume {:verifier.code 0} true;
    out_$i125 := out_$i140;
    goto $bb55_dummy;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$i141 := $sle.i32(out_$i140, in_$i117);
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(out_$i125, 1);
    call {:si_unique_call 1512} {:cexpr "i"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_6074;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p137, out_$i139);
    goto corral_source_split_6073;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$i139 := $and.i8(out_$i138, $sub.i8(0, 9));
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i8($M.0, out_$p137);
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p6, $mul.ref(0, 13336)), $mul.ref(13328, 1));
    goto corral_source_split_6070;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} zd_mac_tx_status(in_$p5, out_$p126, out_$i134, out_$p136);
    goto corral_source_split_6069;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    out_$p136 := $0.ref;
    goto $bb54;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    out_$p136 := in_$p8;
    goto $bb54;

  $bb52:
    assume out_$i135 == 1;
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i125, in_$i117);
    goto corral_source_split_6062;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_6061;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$i134 := 0;
    goto $bb51;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$i134 := out_$i133;
    goto $bb51;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, out_$p132);
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p6, $mul.ref(0, 13336)), $mul.ref(13332, 1));
    goto corral_source_split_6056;

  $bb49:
    assume out_$i131 == 1;
    goto corral_source_split_6055;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_6053;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i8.i32(out_$i129);
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i8($M.0, out_$p128);
    goto corral_source_split_6051;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref(out_$p127, $mul.ref(13328, 1));
    goto corral_source_split_6050;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    out_$p127 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_6049;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} out_$p126 := __skb_dequeue(in_$p19);
    goto corral_source_split_6048;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb50:
    assume !(out_$i131 == 1);
    goto corral_source_split_6059;

  $bb53:
    assume !(out_$i135 == 1);
    goto corral_source_split_6066;

  $bb55_dummy:
    call {:si_unique_call 1} out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i125 := zd_mac_tx_failed_loop_$bb47(in_$p5, in_$p6, in_$p8, in_$p19, in_$i117, out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i125);
    return;

  exit:
    return;
}



procedure zd_mac_tx_failed_loop_$bb47(in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p19: ref, in_$i117: i32, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i8, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i8, in_$i139: i8, in_$i140: i32, in_$i141: i1, in_$i125: i32) returns (out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i8, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i8, out_$i139: i8, out_$i140: i32, out_$i141: i1, out_$i125: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation zd_mac_tx_failed_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$p9: ref, in_$i18: i32, in_$p19: ref, in_$i27: i64, in_$i32: i32, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i8, in_$i44: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i64, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i64, in_$i70: i64, in_$i71: i1, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i24, in_$i84: i24, in_$i85: i24, in_$p86: ref, in_$p87: ref, in_$i88: i8, in_$i89: i64, in_$i90: i64, in_$i91: i64, in_$i92: i1, in_$i94: i64, in_$i96: i1, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i64, in_$p103: ref, in_$i104: i32, in_$i105: i64, in_$p107: ref, in_$i108: i16, in_$i109: i8, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$p45: ref, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$i30: i32, in_$p31: ref, in_$i122: i32, in_vslice_dummy_var_222: i32) returns (out_$i32: i32, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i8, out_$i44: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i64, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i64, out_$i70: i64, out_$i71: i1, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i24, out_$i84: i24, out_$i85: i24, out_$p86: ref, out_$p87: ref, out_$i88: i8, out_$i89: i64, out_$i90: i64, out_$i91: i64, out_$i92: i1, out_$i94: i64, out_$i96: i1, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i64, out_$p103: ref, out_$i104: i32, out_$i105: i64, out_$p107: ref, out_$i108: i16, out_$i109: i8, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$p45: ref, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$i30: i32, out_$p31: ref, out_$i122: i32, out_vslice_dummy_var_222: i32)
{

  entry:
    out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p103, out_$i104, out_$i105, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p45, out_$p118, out_$p119, out_$i120, out_$i121, out_$i30, out_$p31, out_$i122, out_vslice_dummy_var_222 := in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$p86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i94, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p103, in_$i104, in_$i105, in_$p107, in_$i108, in_$i109, in_$p110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$p45, in_$p118, in_$p119, in_$i120, in_$i121, in_$i30, in_$p31, in_$i122, in_vslice_dummy_var_222;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5919;

  $bb39:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i30, out_$p31 := out_$i32, out_$p119;
    goto $bb39_dummy;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    out_$i122 := out_$i32;
    assume true;
    goto $bb39;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i64(out_$i120, in_$i27);
    goto corral_source_split_5945;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    out_$i120 := $p2i.ref.i64(out_$p119);
    goto corral_source_split_5944;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_5943;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p45, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_5942;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5941;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p31;
    goto $bb13;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p31;
    goto $bb13;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p31;
    goto $bb13;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p31;
    goto $bb13;

  $bb11:
    assume out_$i44 == 1;
    goto corral_source_split_5939;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i8.i1(out_$i43);
    goto corral_source_split_5937;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i1.i8(out_$i42);
    call {:si_unique_call 1493} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i43);
    goto corral_source_split_5936;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} out_$i42 := skb_queue_is_first(in_$p19, out_$p31);
    goto corral_source_split_5935;

  $bb9:
    assume out_$i41 == 1;
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_5932;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_5931;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p38);
    goto corral_source_split_5930;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p37, $mul.ref(13328, 1));
    goto corral_source_split_5929;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_5928;

  $bb6:
    assume out_$i36 == 1;
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_5925;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_5923;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p9, $mul.ref(0, 12)), $mul.ref(11, 1));
    goto corral_source_split_5922;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i30, 1);
    call {:si_unique_call 1491} {:cexpr "position"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_5921;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16:
    assume out_$i58 == 1;
    goto corral_source_split_5961;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_5959;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} out_$i57 := ldv__builtin_expect(out_$i56, 0);
    call {:si_unique_call 1497} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_5958;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i55);
    goto corral_source_split_5957;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i1.i32(out_$i54);
    goto corral_source_split_5956;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_5955;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} out_$i53 := memcmp(out_$p50, out_$p52, 6);
    call {:si_unique_call 1495} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_5954;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_5953;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p9, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_5952;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_5951;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_5950;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_5949;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_5948;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p31, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_5947;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb8;

  $bb32:
    assume {:verifier.code 0} true;
    assume out_$i99 == 1;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i96 == 1;
    goto $bb30;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    out_$i96 := $sle.i32(in_$i18, 0);
    goto corral_source_split_6015;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i66);
    goto corral_source_split_6014;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} dump_stack();
    goto corral_source_split_6012;

  $bb25:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} out_vslice_dummy_var_222 := __dynamic_pr_debug.ref.ref.ref.i32.ref(in_$p1, .str.4, .str.31, 584, .str.42);
    goto corral_source_split_6010;

  $bb24:
    assume out_$i92 == 1;
    goto corral_source_split_6009;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i64(out_$i91, 0);
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} out_$i91 := ldv__builtin_expect(out_$i90, 0);
    call {:si_unique_call 1505} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i91);
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$i90 := $and.i64(out_$i89, 1);
    goto corral_source_split_6003;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i8.i64(out_$i88);
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i8($M.6, out_$p87);
    goto corral_source_split_6001;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6000;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p86, 1);
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p82, out_$i85);
    goto corral_source_split_5997;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    out_$i85 := $or.i24(out_$i84, 584);
    goto corral_source_split_5996;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$i84 := $and.i24(out_$i83, $sub.i24(0, 262144));
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i24($M.5, out_$p82);
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$p82 := $bitcast.ref.ref(out_$p81);
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p80, .str.4);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5990;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p79, .str.31);
    goto corral_source_split_5989;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5988;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p78, .str.41);
    goto corral_source_split_5987;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5986;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p77, .str.1);
    goto corral_source_split_5985;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5984;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i71 == 1;
    goto corral_source_split_5975;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, 0);
    goto corral_source_split_5973;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} out_$i70 := ldv__builtin_expect(out_$i69, 0);
    call {:si_unique_call 1501} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i70);
    goto corral_source_split_5972;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i68);
    goto corral_source_split_5971;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i1.i32(out_$i67);
    goto corral_source_split_5970;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i66, 0);
    goto corral_source_split_5969;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i8.i32(out_$i65);
    call {:si_unique_call 1499} {:cexpr "first_idx"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_5968;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i8($M.0, out_$p64);
    goto corral_source_split_5967;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref($add.ref(out_$p61, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5966;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_5965;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5964;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} out_$p59 := IEEE80211_SKB_CB(out_$p31);
    goto corral_source_split_5963;

  $bb17:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22:
    assume out_$i76 == 1;
    goto corral_source_split_6007;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} out_$i75 := ldv__builtin_expect(out_$i74, 0);
    call {:si_unique_call 1503} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_5981;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i73);
    goto corral_source_split_5980;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i1.i32(out_$i72);
    goto corral_source_split_5979;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    out_$i72 := $ugt.i32(out_$i66, 11);
    goto corral_source_split_5978;

  $bb20:
    assume !(out_$i71 == 1);
    goto corral_source_split_5977;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i98, in_$i18);
    goto corral_source_split_6019;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.10, out_$p97);
    goto corral_source_split_6018;

  $bb31:
    assume !(out_$i96 == 1);
    out_$p97 := $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(out_$i94, 44)), $mul.ref(0, 1));
    goto corral_source_split_6017;

  $bb35:
    assume out_$i114 == 1;
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$i115 := out_$i32;
    assume true;
    goto $bb35;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i32(out_$i112, out_$i113);
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i8.i32(out_$i109);
    goto corral_source_split_6031;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i32(out_$i111);
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i8($M.0, out_$p110);
    goto corral_source_split_6029;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p9, $mul.ref(0, 12)), $mul.ref(2, 1));
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$i109 := $trunc.i16.i8(out_$i108);
    call {:si_unique_call 1509} {:cexpr "final_rate"} boogie_si_record_i8(out_$i109);
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i16($M.0, out_$p107);
    goto corral_source_split_6026;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(out_$i105, 12)), $mul.ref(6, 1));
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i105 := $sext.i32.i64(out_$i104);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.10, out_$p103);
    call {:si_unique_call 1508} {:cexpr "final_idx"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_6023;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i100);
    out_$p103 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(out_$i94, 44)), $mul.ref(4, 1)), $mul.ref(out_$i101, 4));
    goto corral_source_split_6022;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i100 := $add.i32(in_$i18, $sub.i32(0, 1));
    goto corral_source_split_6021;

  $bb33:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p103, out_$i104, out_$i105, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p45, out_$p118, out_$p119, out_$i120, out_$i121, out_$i30, out_$p31, out_$i122, out_vslice_dummy_var_222 := zd_mac_tx_failed_loop_$bb4(in_$p1, in_$p6, in_$p9, in_$i18, in_$p19, in_$i27, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p103, out_$i104, out_$i105, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p45, out_$p118, out_$p119, out_$i120, out_$i121, out_$i30, out_$p31, out_$i122, out_vslice_dummy_var_222);
    return;

  exit:
    return;
}



procedure zd_mac_tx_failed_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$p9: ref, in_$i18: i32, in_$p19: ref, in_$i27: i64, in_$i32: i32, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i8, in_$i44: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i64, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i64, in_$i70: i64, in_$i71: i1, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i24, in_$i84: i24, in_$i85: i24, in_$p86: ref, in_$p87: ref, in_$i88: i8, in_$i89: i64, in_$i90: i64, in_$i91: i64, in_$i92: i1, in_$i94: i64, in_$i96: i1, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i64, in_$p103: ref, in_$i104: i32, in_$i105: i64, in_$p107: ref, in_$i108: i16, in_$i109: i8, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$p45: ref, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$i30: i32, in_$p31: ref, in_$i122: i32, in_vslice_dummy_var_222: i32) returns (out_$i32: i32, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i8, out_$i44: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i64, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i64, out_$i70: i64, out_$i71: i1, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i24, out_$i84: i24, out_$i85: i24, out_$p86: ref, out_$p87: ref, out_$i88: i8, out_$i89: i64, out_$i90: i64, out_$i91: i64, out_$i92: i1, out_$i94: i64, out_$i96: i1, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i64, out_$p103: ref, out_$i104: i32, out_$i105: i64, out_$p107: ref, out_$i108: i16, out_$i109: i8, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$p45: ref, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$i30: i32, out_$p31: ref, out_$i122: i32, out_vslice_dummy_var_222: i32);
  modifies $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation read_values_loop_$bb21(in_$p1: ref, in_$i2: i64, in_$p5: ref, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i8, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i64, in_$i80: i1, in_$i70: i32) returns (out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i8, out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i64, out_$i80: i1, out_$i70: i32)
{

  entry:
    out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i70 := in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i70;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7359;

  $bb23:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := out_$i78;
    goto $bb23_dummy;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    out_$i80 := $ult.i64(out_$i79, in_$i2);
    goto corral_source_split_7371;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    out_$i79 := $sext.i32.i64(out_$i78);
    goto corral_source_split_7370;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i70, 1);
    call {:si_unique_call 1846} {:cexpr "i"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_7369;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p77, out_$i75);
    goto corral_source_split_7368;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref(in_$p1, $mul.ref(out_$i76, 1));
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i70);
    goto corral_source_split_7366;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    out_$i75 := $trunc.i32.i8(out_$i74);
    goto corral_source_split_7365;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    out_$i74 := $lshr.i32(out_$i71, out_$i73);
    goto corral_source_split_7364;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    out_$i73 := $mul.i32(out_$i72, 8);
    goto corral_source_split_7363;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    out_$i72 := $srem.i32(out_$i70, 3);
    goto corral_source_split_7362;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.23, in_$p5);
    goto corral_source_split_7361;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i70 := read_values_loop_$bb21(in_$p1, in_$i2, in_$p5, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i70);
    return;

  exit:
    return;
}



procedure read_values_loop_$bb21(in_$p1: ref, in_$i2: i64, in_$p5: ref, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i8, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i64, in_$i80: i1, in_$i70: i32) returns (out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i8, out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i64, out_$i80: i1, out_$i70: i32);
  modifies $M.0;



implementation read_values_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i4: i32, in_$p5: ref, in_$i31: i32, in_$i37: i32, in_$i36: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i64, in_$i43: i1, in_$i45: i32, in_$i46: i32, in_$i47: i8, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i8, in_$i54: i64, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i8, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i8, in_$i66: i64, in_$p67: ref, in_$i44: i32, in_$i81: i32, in_$i82: i16, in_$i83: i32, in_$i84: i32, in_$i85: i16, in_$i86: i32, in_$i87: i1) returns (out_$i37: i32, out_$i36: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i64, out_$i43: i1, out_$i45: i32, out_$i46: i32, out_$i47: i8, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i8, out_$i54: i64, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i8, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i8, out_$i66: i64, out_$p67: ref, out_$i44: i32, out_$i81: i32, out_$i82: i16, out_$i83: i32, out_$i84: i32, out_$i85: i16, out_$i86: i32, out_$i87: i1)
{

  entry:
    out_$i37, out_$i36, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i44, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := in_$i37, in_$i36, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i44, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb26:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := out_$i62;
    goto $bb26_dummy;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i86;
    assume true;
    goto $bb26;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_7352;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} out_$i86 := zd_ioread32_locked(in_$p0, in_$p5, out_$i85);
    call {:si_unique_call 1845} {:cexpr "r"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_7351;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    out_$i85 := $trunc.i32.i16(out_$i84);
    goto corral_source_split_7350;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i83, in_$i31);
    goto corral_source_split_7349;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i16.i32(out_$i82);
    goto corral_source_split_7348;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i32.i16(out_$i81);
    goto corral_source_split_7347;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i81 := $sdiv.i32(out_$i62, 2);
    goto corral_source_split_7346;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p67, out_$i65);
    goto corral_source_split_7344;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(in_$p1, $mul.ref(out_$i66, 1));
    goto corral_source_split_7343;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i56);
    goto corral_source_split_7342;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i32.i8(out_$i64);
    goto corral_source_split_7341;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    out_$i64 := $lshr.i32(out_$i63, 24);
    goto corral_source_split_7340;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.23, in_$p5);
    goto corral_source_split_7339;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i56, 1);
    call {:si_unique_call 1843} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_7338;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p61, out_$i59);
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(in_$p1, $mul.ref(out_$i60, 1));
    goto corral_source_split_7336;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i50);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i32.i8(out_$i58);
    goto corral_source_split_7334;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    out_$i58 := $lshr.i32(out_$i57, 16);
    goto corral_source_split_7333;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.23, in_$p5);
    goto corral_source_split_7332;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i50, 1);
    call {:si_unique_call 1842} {:cexpr "i"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p55, out_$i53);
    goto corral_source_split_7330;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(in_$p1, $mul.ref(out_$i54, 1));
    goto corral_source_split_7329;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i45);
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i32.i8(out_$i52);
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$i52 := $lshr.i32(out_$i51, 8);
    goto corral_source_split_7326;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.23, in_$p5);
    goto corral_source_split_7325;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i45, 1);
    call {:si_unique_call 1841} {:cexpr "i"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p49, out_$i47);
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(in_$p1, $mul.ref(out_$i48, 1));
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i36);
    goto corral_source_split_7321;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i32.i8(out_$i46);
    goto corral_source_split_7320;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.23, in_$p5);
    goto corral_source_split_7319;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i36, 1);
    call {:si_unique_call 1840} {:cexpr "i"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_7318;

  $bb14:
    assume out_$i43 == 1;
    goto corral_source_split_7317;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i36;
    assume true;
    goto $bb14;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    out_$i43 := $ult.i64(out_$i42, in_$i2);
    goto corral_source_split_7315;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i41);
    goto corral_source_split_7314;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i36, 4);
    goto corral_source_split_7313;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, in_$p5, out_$i40);
    goto corral_source_split_7312;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i39, in_$i4);
    goto corral_source_split_7311;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.23, in_$p5);
    goto corral_source_split_7310;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i37, out_$i36, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i44, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := read_values_loop_$bb10(in_$p0, in_$p1, in_$i2, in_$i4, in_$p5, in_$i31, out_$i37, out_$i36, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i44, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87);
    return;

  exit:
    return;
}



procedure read_values_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i4: i32, in_$p5: ref, in_$i31: i32, in_$i37: i32, in_$i36: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i64, in_$i43: i1, in_$i45: i32, in_$i46: i32, in_$i47: i8, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i8, in_$i54: i64, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i8, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i8, in_$i66: i64, in_$p67: ref, in_$i44: i32, in_$i81: i32, in_$i82: i16, in_$i83: i32, in_$i84: i32, in_$i85: i16, in_$i86: i32, in_$i87: i1) returns (out_$i37: i32, out_$i36: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i64, out_$i43: i1, out_$i45: i32, out_$i46: i32, out_$i47: i8, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i8, out_$i54: i64, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i8, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i8, out_$i66: i64, out_$p67: ref, out_$i44: i32, out_$i81: i32, out_$i82: i16, out_$i83: i32, out_$i84: i32, out_$i85: i16, out_$i86: i32, out_$i87: i1);
  modifies $M.22, $M.24, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.27, $M.0;



implementation {:SIextraRecBound 16} zd_usb_rfwrite_loop_$bb30(in_$i1: i32, in_$i2: i8, in_$p4: ref, in_$p94: ref, in_$i99: i32, in_$i102: i16, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$i111: i16, in_$i112: i16, in_$i113: i64, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i101: i32) returns (out_$i102: i16, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$i111: i16, out_$i112: i16, out_$i113: i64, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i101: i32)
{

  entry:
    out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p115, out_$i116, out_$i117, out_$i101 := in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$p115, in_$i116, in_$i117, in_$i101;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_8367;

  $bb35:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := out_$i116;
    goto $bb35_dummy;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    out_$i117 := $sgt.i32(in_$i99, out_$i116);
    goto corral_source_split_8387;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i101, 1);
    call {:si_unique_call 2019} {:cexpr "i"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_8386;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p115, out_$i112);
    goto corral_source_split_8385;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref(in_$p94, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref(out_$i113, 2));
    goto corral_source_split_8384;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(out_$i101);
    goto corral_source_split_8383;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8382;

  $bb33:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$i112 := out_$i102;
    goto $bb34;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    out_$i112 := out_$i111;
    goto $bb34;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i32.i16(out_$i110);
    call {:si_unique_call 2018} {:cexpr "bv"} boogie_si_record_i16(out_$i111);
    goto corral_source_split_8380;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    out_$i110 := $or.i32(out_$i109, 8);
    goto corral_source_split_8379;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i16.i32(out_$i102);
    goto corral_source_split_8378;

  $bb32:
    assume out_$i108 == 1;
    goto corral_source_split_8377;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 0);
    goto corral_source_split_8375;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i32(out_$i106, in_$i1);
    goto corral_source_split_8374;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    out_$i106 := $shl.i32(1, out_$i105);
    goto corral_source_split_8373;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    out_$i105 := $sub.i32(out_$i104, out_$i101);
    goto corral_source_split_8372;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i103, $sub.i32(0, 1));
    goto corral_source_split_8371;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(in_$i2);
    goto corral_source_split_8370;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i16($M.57, in_$p4);
    call {:si_unique_call 2017} {:cexpr "bv"} boogie_si_record_i16(out_$i102);
    goto corral_source_split_8369;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p115, out_$i116, out_$i117, out_$i101 := zd_usb_rfwrite_loop_$bb30(in_$i1, in_$i2, in_$p4, in_$p94, in_$i99, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p115, out_$i116, out_$i117, out_$i101);
    return;

  exit:
    return;
}



procedure zd_usb_rfwrite_loop_$bb30(in_$i1: i32, in_$i2: i8, in_$p4: ref, in_$p94: ref, in_$i99: i32, in_$i102: i16, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$i111: i16, in_$i112: i16, in_$i113: i64, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i101: i32) returns (out_$i102: i16, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$i111: i16, out_$i112: i16, out_$i113: i64, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i101: i32);
  modifies $M.0;



implementation zd_usb_rfwrite_loop_$bb25()
{

  entry:
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb25_dummy:
    call {:si_unique_call 1} zd_usb_rfwrite_loop_$bb25();
    return;

  exit:
    return;
}



procedure zd_usb_rfwrite_loop_$bb25();



implementation zd_rfwritev_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i8, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i32, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i15: i32, in_$i16: i1, in_$i5: i32) returns (out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i32, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i15: i32, out_$i16: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i5 := in_$i6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i15, in_$i16, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8495;

  $bb10:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i15;
    goto $bb10_dummy;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    out_$i16 := $ult.i32(out_$i15, in_$i2);
    goto corral_source_split_8510;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i5, 1);
    call {:si_unique_call 2050} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_8509;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i11;
    assume true;
    goto $bb7;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_8503;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} out_$i11 := zd_rfwrite_locked(in_$p0, out_$i8, out_$i10);
    call {:si_unique_call 2049} {:cexpr "r"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_8502;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    out_$i10 := $trunc.i32.i8(out_$i9);
    goto corral_source_split_8501;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i8.i32(in_$i3);
    goto corral_source_split_8500;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.54, out_$p7);
    goto corral_source_split_8499;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(in_$p1, $mul.ref(out_$i6, 4));
    goto corral_source_split_8498;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $zext.i32.i64(out_$i5);
    goto corral_source_split_8497;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i5 := zd_rfwritev_locked_loop_$bb4(in_$p0, in_$p1, in_$i2, in_$i3, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i5);
    return;

  exit:
    return;
}



procedure zd_rfwritev_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i8, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i32, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i15: i32, in_$i16: i1, in_$i5: i32) returns (out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i32, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i15: i32, out_$i16: i1, out_$i5: i32);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.27, $M.0, $M.57, $CurrAddr;



implementation zd_rfwritev_cr_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i5: i64, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i12: i32, in_$i13: i1, in_$i4: i32) returns (out_$i5: i64, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i12: i32, out_$i13: i1, out_$i4: i32)
{

  entry:
    out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i4 := in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i12, in_$i13, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9414;

  $bb10:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i12;
    goto $bb10_dummy;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    out_$i13 := $ult.i32(out_$i12, in_$i2);
    goto corral_source_split_9427;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i4, 1);
    call {:si_unique_call 2162} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_9426;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i8;
    assume true;
    goto $bb7;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_9420;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} out_$i8 := zd_rfwrite_cr_locked(in_$p0, out_$i7);
    call {:si_unique_call 2161} {:cexpr "r"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_9419;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.62, out_$p6);
    goto corral_source_split_9418;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref(in_$p1, $mul.ref(out_$i5, 4));
    goto corral_source_split_9417;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $zext.i32.i64(out_$i4);
    goto corral_source_split_9416;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i4 := zd_rfwritev_cr_locked_loop_$bb4(in_$p0, in_$p1, in_$i2, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i4);
    return;

  exit:
    return;
}



procedure zd_rfwritev_cr_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i5: i64, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i12: i32, in_$i13: i1, in_$i4: i32) returns (out_$i5: i64, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i12: i32, out_$i13: i1, out_$i4: i32);
  modifies $M.30, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation upload_code_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$i16: i1, in_$i17: i64, in_$p18: ref, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i16, in_$i24: i16, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i32: i32, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$i37: i16, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i16, in_$i42: i1, in_$p13: ref, in_$i14: i64, in_$i15: i16, in_cmdloc_dummy_var_48: [ref]i8, in_cmdloc_dummy_var_49: [ref]i8, in_cmdloc_dummy_var_50: [ref]i8, in_vslice_dummy_var_282: i32) returns (out_$i16: i1, out_$i17: i64, out_$p18: ref, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i16, out_$i24: i16, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i32: i32, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$i37: i16, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i16, out_$i42: i1, out_$p13: ref, out_$i14: i64, out_$i15: i16, out_cmdloc_dummy_var_48: [ref]i8, out_cmdloc_dummy_var_49: [ref]i8, out_cmdloc_dummy_var_50: [ref]i8, out_vslice_dummy_var_282: i32)
{

  entry:
    out_$i16, out_$i17, out_$p18, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p13, out_$i14, out_$i15, out_cmdloc_dummy_var_48, out_cmdloc_dummy_var_49, out_cmdloc_dummy_var_50, out_vslice_dummy_var_282 := in_$i16, in_$i17, in_$p18, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p13, in_$i14, in_$i15, in_cmdloc_dummy_var_48, in_cmdloc_dummy_var_49, in_cmdloc_dummy_var_50, in_vslice_dummy_var_282;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12540;

  $bb16:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$i14, out_$i15 := out_$p35, out_$i34, out_$i41;
    goto $bb16_dummy;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i34, 0);
    goto corral_source_split_12576;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i32.i16(out_$i40);
    call {:si_unique_call 2404} {:cexpr "code_offset"} boogie_si_record_i16(out_$i41);
    goto corral_source_split_12575;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i38, out_$i39);
    goto corral_source_split_12574;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i15);
    goto corral_source_split_12573;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_12572;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i64.i16(out_$i36);
    goto corral_source_split_12571;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    out_$i36 := $udiv.i64(out_$i33, 2);
    goto corral_source_split_12570;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p13, $mul.ref(out_$i33, 1));
    goto corral_source_split_12569;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    out_$i34 := $sub.i64(out_$i14, out_$i33);
    call {:si_unique_call 2403} {:cexpr "size"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_12568;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i32);
    call {:si_unique_call 2402} {:cexpr "transfer_size"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_12567;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i27, $sub.i32(0, 2));
    goto corral_source_split_12566;

  $bb14:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i27;
    assume true;
    goto $bb14;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i27, 0);
    goto corral_source_split_12560;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} out_$i27 := usb_control_msg(in_$p0, out_$i21, 48, 64, out_$i23, 0, in_$p5, out_$i26, 1000);
    call {:si_unique_call 2400} {:cexpr "r"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_12559;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i32.i16(out_$i25);
    goto corral_source_split_12558;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    goto corral_source_split_12557;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i64.i16(out_$i17);
    goto corral_source_split_12556;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i32.i16(out_$i22);
    goto corral_source_split_12555;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i15);
    goto corral_source_split_12554;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    out_$i21 := $or.i32(out_$i20, $sub.i32(0, 2147483648));
    goto corral_source_split_12553;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} out_$i20 := __create_pipe(in_$p0, 0);
    call {:si_unique_call 2398} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_12552;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_48 := $M.0;
    out_cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 2396} out_cmdloc_dummy_var_50 := $memcpy.i8(out_cmdloc_dummy_var_48, out_cmdloc_dummy_var_49, in_$p5, out_$p13, out_$i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_50;
    goto corral_source_split_12551;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} out_vslice_dummy_var_282 := dev_printk.ref.ref.ref.ref.i64(.str.6, out_$p18, .str.264, .str.265, out_$i17);
    goto corral_source_split_12550;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_12549;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12548;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i14;
    goto $bb12;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    out_$i17 := 4096;
    goto $bb12;

  $bb10:
    assume out_$i16 == 1;
    goto corral_source_split_12544;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $ult.i64(4096, out_$i14);
    goto corral_source_split_12542;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume !(out_$i16 == 1);
    goto corral_source_split_12546;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$p18, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p13, out_$i14, out_$i15, out_cmdloc_dummy_var_48, out_cmdloc_dummy_var_49, out_cmdloc_dummy_var_50, out_vslice_dummy_var_282 := upload_code_loop_$bb8(in_$p0, in_$p5, out_$i16, out_$i17, out_$p18, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p13, out_$i14, out_$i15, out_cmdloc_dummy_var_48, out_cmdloc_dummy_var_49, out_cmdloc_dummy_var_50, out_vslice_dummy_var_282);
    return;

  exit:
    return;
}



procedure upload_code_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$i16: i1, in_$i17: i64, in_$p18: ref, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i16, in_$i24: i16, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i32: i32, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$i37: i16, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i16, in_$i42: i1, in_$p13: ref, in_$i14: i64, in_$i15: i16, in_cmdloc_dummy_var_48: [ref]i8, in_cmdloc_dummy_var_49: [ref]i8, in_cmdloc_dummy_var_50: [ref]i8, in_vslice_dummy_var_282: i32) returns (out_$i16: i1, out_$i17: i64, out_$p18: ref, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i16, out_$i24: i16, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i32: i32, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$i37: i16, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i16, out_$i42: i1, out_$p13: ref, out_$i14: i64, out_$i15: i16, out_cmdloc_dummy_var_48: [ref]i8, out_cmdloc_dummy_var_49: [ref]i8, out_cmdloc_dummy_var_50: [ref]i8, out_vslice_dummy_var_282: i32);
  modifies $M.0;



implementation zd_mac_tx_to_dev_loop_$bb10(in_$p8: ref, in_$p9: ref, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$i37: i8, in_$i38: i8, in_$i39: i32, in_$i40: i1) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$i37: i8, out_$i38: i8, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40 := in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i40 == 1;
    goto $bb15_dummy;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    out_$i40 := $ugt.i32(out_$i39, 50);
    goto corral_source_split_12983;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} out_$i39 := skb_queue_len(in_$p24);
    call {:si_unique_call 2503} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_12982;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p36, out_$i38);
    goto corral_source_split_12981;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i8(out_$i37, $sub.i8(0, 9));
    goto corral_source_split_12980;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.0, out_$p36);
    goto corral_source_split_12979;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p9, $mul.ref(0, 13336)), $mul.ref(13328, 1));
    goto corral_source_split_12978;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} zd_mac_tx_status(in_$p8, out_$p27, out_$i35, $0.ref);
    goto corral_source_split_12977;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_12976;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    out_$i35 := 0;
    goto $bb14;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i34;
    goto $bb14;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_12972;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p9, $mul.ref(0, 13336)), $mul.ref(13332, 1));
    goto corral_source_split_12971;

  $bb12:
    assume out_$i32 == 1;
    goto corral_source_split_12970;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_12968;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i30);
    goto corral_source_split_12967;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.0, out_$p29);
    goto corral_source_split_12966;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p28, $mul.ref(13328, 1));
    goto corral_source_split_12965;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_12964;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} out_$p27 := skb_dequeue(in_$p24);
    goto corral_source_split_12963;

  $bb13:
    assume !(out_$i32 == 1);
    goto corral_source_split_12974;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40 := zd_mac_tx_to_dev_loop_$bb10(in_$p8, in_$p9, in_$p24, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure zd_mac_tx_to_dev_loop_$bb10(in_$p8: ref, in_$p9: ref, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$i37: i8, in_$i38: i8, in_$i39: i32, in_$i40: i1) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$i37: i8, out_$i38: i8, out_$i39: i32, out_$i40: i1);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation arch_spin_is_locked_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_spin_is_locked_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_spin_is_locked_loop_$bb3();



implementation eject_installer_loop_$bb1(in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$p15: ref, in_$i20: i32, in_$i21: i1, in_$i4: i32, in_$i22: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$p15: ref, out_$i20: i32, out_$i21: i1, out_$i4: i32, out_$i22: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i20, out_$i21, out_$i4, out_$i22 := in_$p5, in_$p6, in_$i7, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i20, in_$i21, in_$i4, in_$i22;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_13804;

  $bb10:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i20;
    goto $bb10_dummy;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    assume true;
    goto $bb10;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    out_$i21 := $sge.i32(out_$i20, 0);
    goto corral_source_split_13826;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i4, 1);
    call {:si_unique_call 2686} {:cexpr "r"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_13825;

  $bb4:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    out_$i14, out_$p15 := out_$i4, out_$p9;
    assume true;
    goto $bb6;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_13816;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} out_$i12 := usb_endpoint_xfer_bulk(out_$p9);
    call {:si_unique_call 2684} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_13815;

  $bb3:
    assume out_$i11 == 1;
    goto corral_source_split_13814;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_13812;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} out_$i10 := usb_endpoint_dir_out(out_$p9);
    call {:si_unique_call 2682} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_13811;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 64)), $mul.ref(0, 1));
    goto corral_source_split_13810;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    goto corral_source_split_13809;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i4);
    goto corral_source_split_13808;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_13807;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13806;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i20, out_$i21, out_$i4, out_$i22 := eject_installer_loop_$bb1(in_$p3, out_$p5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i20, out_$i21, out_$i4, out_$i22);
    return;

  exit:
    return;
}



procedure eject_installer_loop_$bb1(in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$p15: ref, in_$i20: i32, in_$i21: i1, in_$i4: i32, in_$i22: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$p15: ref, out_$i20: i32, out_$i21: i1, out_$i4: i32, out_$i22: i32);



implementation zd_beacon_done_loop_$bb14(in_$p0: ref, in_$p13: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1)
{

  entry:
    out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28 := in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    goto $bb20_dummy;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 0);
    goto corral_source_split_14211;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} out_$i27 := ieee80211_queue_stopped(out_$p26, 0);
    call {:si_unique_call 2780} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_14210;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, in_$p13);
    goto corral_source_split_14209;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} zd_op_tx(out_$p25, $0.ref, out_$p21);
    goto corral_source_split_14208;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_14207;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_14206;

  $bb17:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i64(out_$i22, 0);
    goto corral_source_split_14194;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_14193;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} out_$p21 := ieee80211_get_buffered_bc(out_$p18, out_$p20);
    goto corral_source_split_14192;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_14191;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 13336)), $mul.ref(11736, 1));
    goto corral_source_split_14190;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_14189;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 13336)), $mul.ref(11728, 1));
    goto corral_source_split_14188;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28 := zd_beacon_done_loop_$bb14(in_$p0, in_$p13, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure zd_beacon_done_loop_$bb14(in_$p0: ref, in_$p13: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.65, $CurrAddr;



implementation main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i15: i1, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i14: i32, in_$i2: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_vslice_dummy_var_336: i32, in_vslice_dummy_var_337: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i15: i1, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i14: i32, out_$i2: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_vslice_dummy_var_336: i32, out_vslice_dummy_var_337: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i17, out_$i18, out_$i19, out_$i21, out_$i22, out_$i23, out_$i24, out_$i14, out_$i2, out_$i25, out_$i26, out_$i27, out_vslice_dummy_var_336, out_vslice_dummy_var_337 := in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i15, in_$i17, in_$i18, in_$i19, in_$i21, in_$i22, in_$i23, in_$i24, in_$i14, in_$i2, in_$i25, in_$i26, in_$i27, in_vslice_dummy_var_336, in_vslice_dummy_var_337;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_14423;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    out_$i2 := out_$i14;
    goto corral_source_split_14454_dummy;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_14454;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i2;
    goto $bb26;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i24;
    goto $bb26;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i22;
    goto $bb26;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i18;
    goto $bb26;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i13;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_14452;

  $bb20:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i2;
    goto $bb25;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i12;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i2, 1);
    call {:si_unique_call 2849} {:cexpr "ldv_s_driver_usb_driver"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_14450;

  $bb22:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_14443;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} ldv_check_return_value_probe(out_$i10);
    goto corral_source_split_14442;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} ldv_check_return_value(out_$i10);
    goto corral_source_split_14441;

  SeqInstr_555:
    call {:si_unique_call 2844} {:cexpr "res_probe_48"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_14440;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} out_$i10 := probe($u1, $u2);
    goto SeqInstr_554;

  $bb19:
    assume out_$i9 == 1;
    goto corral_source_split_14439;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i2, 0);
    goto corral_source_split_14437;

  $bb17:
    assume out_$i8 == 1;
    goto corral_source_split_14436;

  $bb15:
    assume out_$i7 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb8:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2840} out_$i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2841} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i3);
    call {:si_unique_call 2842} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i27 == 1;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    assume out_$i26 == 1;
    goto $bb38;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb39;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_14425;

  corral_source_split_14423:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2837} out_$i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 2838} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i25);
    call {:si_unique_call 2839} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_14424;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i2, 0);
    goto corral_source_split_14477;

  $bb39:
    assume !(out_$i26 == 1);
    goto corral_source_split_14476;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_14461;

  $bb28:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb29;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i17;
    goto $bb29;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i2, 1);
    call {:si_unique_call 2852} {:cexpr "ldv_s_driver_usb_driver"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_14459;

  SeqInstr_558:
    goto corral_source_split_14458;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} out_vslice_dummy_var_336 := pre_reset($u1);
    goto SeqInstr_557;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} ldv_handler_precall();
    goto corral_source_split_14457;

  $bb27:
    assume out_$i15 == 1;
    goto corral_source_split_14456;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i2, 1);
    goto corral_source_split_14434;

  $bb16:
    assume !(out_$i7 == 1);
    goto corral_source_split_14433;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_14468;

  $bb31:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i2;
    goto $bb32;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i21;
    goto $bb32;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i2, 1);
    call {:si_unique_call 2855} {:cexpr "ldv_s_driver_usb_driver"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_14466;

  SeqInstr_561:
    goto corral_source_split_14465;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} out_vslice_dummy_var_337 := post_reset($u1);
    goto SeqInstr_560;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} ldv_handler_precall();
    goto corral_source_split_14464;

  $bb30:
    assume out_$i19 == 1;
    goto corral_source_split_14463;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i2, 2);
    goto corral_source_split_14428;

  $bb10:
    assume out_$i5 == 1;
    goto corral_source_split_14427;

  $bb9:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_14474;

  $bb34:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i2;
    goto $bb35;

  corral_source_split_14472:
    assume {:verifier.code 0} true;
    out_$i24 := 0;
    goto $bb35;

  SeqInstr_564:
    goto corral_source_split_14472;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} disconnect($u1);
    goto SeqInstr_563;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} ldv_handler_precall();
    goto corral_source_split_14471;

  $bb33:
    assume out_$i23 == 1;
    goto corral_source_split_14470;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i2, 3);
    goto corral_source_split_14431;

  $bb12:
    assume out_$i6 == 1;
    goto corral_source_split_14430;

  $bb11:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i6 == 1);
    goto $bb14;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb14;

  corral_source_split_14454_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i17, out_$i18, out_$i19, out_$i21, out_$i22, out_$i23, out_$i24, out_$i14, out_$i2, out_$i25, out_$i26, out_$i27, out_vslice_dummy_var_336, out_vslice_dummy_var_337 := main_loop_$bb5(out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i17, out_$i18, out_$i19, out_$i21, out_$i22, out_$i23, out_$i24, out_$i14, out_$i2, out_$i25, out_$i26, out_$i27, out_vslice_dummy_var_336, out_vslice_dummy_var_337);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i15: i1, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i14: i32, in_$i2: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_vslice_dummy_var_336: i32, in_vslice_dummy_var_337: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i15: i1, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i14: i32, out_$i2: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_vslice_dummy_var_336: i32, out_vslice_dummy_var_337: i32);
  modifies $M.0, $M.42, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.29, $M.30, $M.24, $M.8, $M.26, $M.22, $M.23, $M.27, assertsPassed, $M.37, $M.54, $M.62, $M.65, $M.19, $M.20, $M.57, $M.41, $M.45, $M.48, $M.49, $M.46, $M.53;


